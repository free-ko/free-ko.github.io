{"componentChunkName":"component---src-templates-blog-template-js","path":"/study-cs-HTTP-2/","result":{"data":{"cur":{"id":"264c3a9a-0714-5519-b40a-233e625053bd","html":"<br>\n<h1 align=\"center\">\n  👋  URL와 웹 브라우저 요청 흐름\n</h1>\n<br>\n<h2 id=\"1-uri-단어의-뜻\" style=\"position:relative;\"><a href=\"#1-uri-%EB%8B%A8%EC%96%B4%EC%9D%98-%EB%9C%BB\" aria-label=\"1 uri 단어의 뜻 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. URI 단어의 뜻</h2>\n<ul>\n<li><code class=\"language-text\">Uniform</code>(리소스 식별하는 통일된 방식)</li>\n<li><code class=\"language-text\">Resource</code>(자원, URI로 식별할 수 있는 모든 것, 제한 없음)</li>\n<li><code class=\"language-text\">Identifier</code>(다른 항목과 구분하는데 필요요한 정보</li>\n</ul>\n<br>\n<h2 id=\"2-url-urn-단어-뜻\" style=\"position:relative;\"><a href=\"#2-url-urn-%EB%8B%A8%EC%96%B4-%EB%9C%BB\" aria-label=\"2 url urn 단어 뜻 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. URL, URN 단어 뜻</h2>\n<ul>\n<li>URL - Locator: 리소스가 있는 위치를 지정</li>\n<li>URN - Name: 리소스에 이름을 부여</li>\n<li>위치는 변할 수 있지만, 이름은 변하지 않음</li>\n<li>ex) urn:isbn:8969777331(어떤 책의 isbn URN)</li>\n</ul>\n<br>\n<h2 id=\"3-url-전체-문법\" style=\"position:relative;\"><a href=\"#3-url-%EC%A0%84%EC%B2%B4-%EB%AC%B8%EB%B2%95\" aria-label=\"3 url 전체 문법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. URL 전체 문법</h2>\n<ul>\n<li>프로토콜 : https</li>\n<li>호스트명 : www.google.com</li>\n<li>포트 번호 : 443</li>\n<li>패스 : /search</li>\n<li>쿼리 파라미터 : q=hello&#x26;hi=ko</li>\n</ul>\n<br>\n<h2 id=\"4-url-scheme\" style=\"position:relative;\"><a href=\"#4-url-scheme\" aria-label=\"4 url scheme permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. URL Scheme</h2>\n<ul>\n<li>주로 프로토콜 사용</li>\n<li>프로토콜 : 어떤 방식으로 자원에 접근할 것인가 하는 약속 규칙 ex) http, https, ftp 등</li>\n<li>http는 80포트, https는 443 포트를 주로 사용, 포트는 생략 가능</li>\n<li>https는 http에 보안 추가(HTTP Secure)</li>\n</ul>\n<br>\n<h2 id=\"5-url-userinfo\" style=\"position:relative;\"><a href=\"#5-url-userinfo\" aria-label=\"5 url userinfo permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. URL userinfo</h2>\n<ul>\n<li>URL에 사용자 정보를 포함해서 인증</li>\n<li>거의 사용하지 않음</li>\n<li>ex) <code class=\"language-text\">scheme://[userinfo@]host[:port][/path][?query][#fragment]</code></li>\n<li>ex) <code class=\"language-text\">https://wwww.google.com:443/search?q=hello&amp;hl=ko</code></li>\n</ul>\n<br>\n<h2 id=\"6-url-host\" style=\"position:relative;\"><a href=\"#6-url-host\" aria-label=\"6 url host permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. URL Host</h2>\n<ul>\n<li>호스트명</li>\n<li>도메인명 또는 IP 주소를 직접 사용가능</li>\n<li>ex) <code class=\"language-text\">scheme://[userinfo@]host[:port][/path][?query][#fragment]</code></li>\n<li>ex) <code class=\"language-text\">https://wwww.google.com:443/search?q=hello&amp;hl=ko</code></li>\n</ul>\n<br>\n<h2 id=\"7-url-port\" style=\"position:relative;\"><a href=\"#7-url-port\" aria-label=\"7 url port permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>7. URL Port</h2>\n<ul>\n<li>포트(PORT)</li>\n<li>접속 포트</li>\n<li>일반적으로 생략, 생략시 http는 80, https는 443</li>\n<li>ex) <code class=\"language-text\">scheme://[userinfo@]host[:port][/path][?query][#fragment]</code></li>\n<li>ex) <code class=\"language-text\">https://wwww.google.com:443/search?q=hello&amp;hl=ko</code></li>\n</ul>\n<br>\n<h2 id=\"8-url-path\" style=\"position:relative;\"><a href=\"#8-url-path\" aria-label=\"8 url path permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>8. URL Path</h2>\n<ul>\n<li>리소스 경로(path), 계층적 구조</li>\n<li>ex) <code class=\"language-text\">/home/file1.jpg</code></li>\n<li>ex) <code class=\"language-text\">/members</code></li>\n<li>ex) <code class=\"language-text\">/members/100, items/iphone12</code></li>\n</ul>\n<br>\n<h2 id=\"8-url-query\" style=\"position:relative;\"><a href=\"#8-url-query\" aria-label=\"8 url query permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>8. URL Query</h2>\n<ul>\n<li><code class=\"language-text\">key=value</code> 형태</li>\n<li><code class=\"language-text\">?</code>로 시작, <code class=\"language-text\">&amp;</code>로 추가 가능 <code class=\"language-text\">?keyA=valueA&amp;keyB=valueB</code></li>\n<li>query parameter, query string으로 불림, 웹 서버에서 제공하는 파라미터, 문자 형태</li>\n</ul>\n<br>\n<h2 id=\"9-url-fragment\" style=\"position:relative;\"><a href=\"#9-url-fragment\" aria-label=\"9 url fragment permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>9. URL Fragment</h2>\n<ul>\n<li>html 내부 북마크 등에 사용</li>\n<li>서버에 전송하는 정보 아님</li>\n<li>ex) <code class=\"language-text\">https://docs.spring.io/sping-boot/docs/current/reference/html/getting-started.html#getting-started-introducing-spring-boot</code></li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","excerpt":"1. URI 단어의 뜻 (리소스 식별하는 통일된 방식) (자원, URI로 식별할 수 있는 모든 것, 제한 없음) (다른 항목과 구분하는데 필요요한 정보 2. URL, URN 단어 뜻 URL - Locator: 리소스가 있는 위치를 지정 URN - Name: 리소스에 이름을 부여 위치는 변할 수 있지만, 이름은 변하지 않음 ex) urn:isbn:8969777331(어떤 책의 isbn URN) 3. URL 전체 문법 프로토콜 : https 호스트명 : www.google.com 포트 번호 : 443 패스 : /search 쿼리 파라미터 : q=hello&hi=ko 4. URL Scheme 주로 프로토콜 사용 프로토콜 : 어떤 방식으로 자원에 접근할 것인가 하는 약속 규칙 ex) http, https, ftp 등 http는 80포트, https는 443 포트를 주로 사용, 포트는 생략 가능 https는 http에 보안 추가(HTTP Secure) 5. URL userinfo URL에 …","frontmatter":{"date":"December 12, 2021","title":"HTTP - 2.URL와 웹 브라우저 요청 흐름","categories":"CS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-cs-HTTP-2/"}},"next":{"id":"91d21ee4-cd28-550e-9451-cbef0ab783f4","html":"<br>\n<h1 align=\"center\">\n  👋 construct(), apply()\n</h1>\n<br>\n<h2 id=\"1-constructo\" style=\"position:relative;\"><a href=\"#1-constructo\" aria-label=\"1 constructo permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. constructo()</h2>\n<ul>\n<li>인스턴스를 생성하여 반환함</li>\n<li>\n<p><code class=\"language-text\">Reflect.construct(target, params)</code> 형태</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">class Point {\nconstructor(one, two) {\n  this.point = one + two;\n}\n}\n\nconst obj = Reflect.construct(Point, [100, 200]);\nconsole.log(obj.point); // 300\n\n// 1. Reflect.construct(Point, [100, 200], Point 클래스의 constructor()를 호출 함, [100]처럼 값이 하나라도 배열로 작성함\n// 2. constructor(one, two){...} 100이 one에 200이 two에 설정됨\n// 3. Point 인스턴스를 생성하여 반환함</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>세 번째 파라미터는 선택임</p>\n<ul>\n<li>생성자 함수를 작성함</li>\n<li>작성한 함수로 인스턴스를 생성함</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">class Point {\n  constructor(point) {\n    this.point = point;\n  }\n\n  getPoint() {\n    return this.point;\n  }\n}\n\nclass Book {\n  getTitle() {\n    return &#39;JS: &#39; + this.point;\n  }\n}\n\nconst obj = Reflect.construct(Point, [100], Book);\n\nconsole.log(obj.getPoint); // undefined\nconsole.log(obj.getTitle()); // JS: 100\n\n// 1. Reflect.construct(Point, [100], Book); 3번째 파라미터에 Book 클래스를 작성함, Point 클래스의 constructor가 호출됨\n// 2. constructor(point){ this.point = point; } Point가 아니라 Book으로 인스턴스를 생성함, this가 Book 클래스를 참조함\n// 3. this.point = point; point가 인스턴스 프로퍼티로 설정됨\n// 4. 외부 API 사용처럼 변경할 수 없는 환경에서 클래스의 프로퍼티를 인스턴스 프로퍼티로 사용하면서 클래스의 prototype을 오버라이드하는 형태로 사용할 수 있음\n// 5. obj.getPoint, obj 인스턴스에 getPoint()가 없으므로 undefined 출력\n// 6. obj.getTitle() Bookd의 getTitle()이 호출됨</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p><code class=\"language-text\">핸들러의 constrcut()</code> 트랩 호출</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">class Point {\nconstructor(...point) {\n  this.point = point;\n}\n\ngetPoint() {\n  return this.point;\n}\n}\n\nconst handler = {\nconstruct(target, params, proxy) {\n  return Reflect.construct(target, params);\n},\n};\n\nconst proxy = new Proxy(Point, handler);\nconst obj = Reflect.construct(proxy, [1, 2]);\nconsole.log(obj.getPoint()); // [1, 2]\n\n// 1. const obj = Reflect.construct(proxy, [1, 2]); construct() 트랩이 호출됨\n// 2. 트랩: construct(target, params, proxy) {...} Point 클래스가 target에 [1, 2]가 params에 설정됨, proxy에 Proxy 인스턴스가 설정됨</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<h2 id=\"2-apply\" style=\"position:relative;\"><a href=\"#2-apply\" aria-label=\"2 apply permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. apply()</h2>\n<ul>\n<li><code class=\"language-text\">target</code> 에 작성한 함수를 호출함</li>\n<li>\n<p><code class=\"language-text\">Relfect.apply(target, {}, key)</code> 형태</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">function add(...values) {\nreturn values.map((value) =&gt; {\n  return value + this.plus;\n});\n}\n\nconsole.log(Reflect.apply(add, { plus: 100 }, [1, 2])); // [101, 102]\n\n// 1. Reflect.apply(add, {plus: 100}, [1,2]) add() 함수를 호출함\n// 2. function add(...values){...} [1,2]가 values 파라미터에 설정됨\n// 3. map()에서 this가 {plus: 100}을 참조함, 코드처럼 화살표 함수를 사용해야 함, map(function(value){...}) 형태는 this가 window를 참조함</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p><code class=\"language-text\">call(), apply()</code> 통합</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const indexOf = String.prototype.indexOf;\n\nconsole.log(indexOf.call(&#39;ABC&#39;, &#39;B&#39;)); // 1\nconsole.log(Reflect.apply(indexOf, &#39;ABC&#39;, [&#39;B&#39;])); // 1\n\n// 1. const indexOf = String.prototype.indexOf; String.prototype.indexOf() 메소드 임\n// 2. call()로 호출 indexOf.call(&quot;ABC&quot;, &quot;B&quot;);\n// 3. Reflect.apply()로 호출, Reflect.apply(indexOf, &quot;ABC&quot;, [&quot;B&quot;]) call()과 apply()를 통합하여 Reflect.apply()로 호출함</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>핸들러의 <code class=\"language-text\">apply()</code> 트랩 호출</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">function add(...values) {\nreturn values.map((value) =&gt; {\n  return value + this.plus;\n});\n}\n\nconst handler = {\napply(target, that, params) {\n  return Reflect.apply(target, that, params);\n},\n};\n\nconst obj = new Proxy(add, handler);\n\nconsole.log(obj.apply({ plus: 100 }, [1, 2])); // [101, 102]\n\n// 1. const obj = new Proxy(add, handler); add가 apply() 트랩에서 호출할 함수임\n// 2. obj.apply({plus: 100}, [1, 2]) apply() 트랩이 호출 됨\n// 3. 트랩: apply(target, that, params) {...}, add() 함수가 target에 설정됨 {plus:100}이 that에 설정되고 [1,2]가 params에 설정됨</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","frontmatter":{"date":"December 11, 2021","title":"Reflect - construct(), apply()","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-reflect-7/"}},"prev":{"id":"4566f5b9-4944-552b-a8a7-238dc6f6e24c","html":"<br>\n<h1 align=\"center\">\n  👋  Module - 접근 및 바탕, 코드 형태, html 파일 작성 방법\n</h1>\n<br>\n<h2 id=\"1-접근-및-바탕\" style=\"position:relative;\"><a href=\"#1-%EC%A0%91%EA%B7%BC-%EB%B0%8F-%EB%B0%94%ED%83%95\" aria-label=\"1 접근 및 바탕 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 접근 및 바탕</h2>\n<ul>\n<li>일반 적으로 하나의 <code class=\"language-text\">js</code> 파일에 다수의 함수, 오브젝트를 작성함</li>\n<li>\n<p>한편, 하나의 파일에 작성하면 사용하지 않는 것도 <code class=\"language-text\">Compile</code>해야 하며 메모리를 차지하므로 비효율적</p>\n<ul>\n<li>ex) 회원 가입(클릭 할 때만 필요한 것)</li>\n</ul>\n</li>\n<li><code class=\"language-text\">Module</code> 은 파일을 분리하여 필요한 시점에 필요한 것을 가볍게 사용하려는 목적으로 사용</li>\n<li>\n<p><code class=\"language-text\">Moduel</code> 을 파일이라고 할 수는 없지만 구조 측면에서보면 하나의 파일이 <code class=\"language-text\">Module</code> 임</p>\n<ul>\n<li>파일 확장자로 <code class=\"language-text\">mjs</code> 도 있음</li>\n<li>ex) <a href=\"https://v8.dev/features/modules#mjs\">JavaScript modules</a></li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">Module</code> 파일 기본</p>\n<ul>\n<li>함수, 오브젝트를 분리하는 것이 바탕이므로 <code class=\"language-text\">Module</code> 파일은 되도록 <code class=\"language-text\">작아야</code> 함</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"2-module-코드-형태\" style=\"position:relative;\"><a href=\"#2-module-%EC%BD%94%EB%93%9C-%ED%98%95%ED%83%9C\" aria-label=\"2 module 코드 형태 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Module 코드 형태</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">Moduel</code> 코드 형태</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">// export.mjs\nexport function getPoint(id) {\nreturn id + 100;\n}\n\n// import.mjs\nimport { getPoint } from &#39;./export.mjs&#39;;\n\nconsole.log(getPoint(&#39;code&#39;)); // code100</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p><code class=\"language-text\">export</code> 키워드</p>\n<ul>\n<li>외부로 보내 줄 함수, 오브젝트를 선언함</li>\n<li><code class=\"language-text\">&lt;script></code> 에 <code class=\"language-text\">mjs</code> 파일을 작성하여 랜더링 하지 않음</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">import</code> 키워드</p>\n<ul>\n<li><code class=\"language-text\">export</code> 로 선언된 <code class=\"language-text\">mjs</code> 파일을 가져와서</li>\n<li>오브젝트, 함수를 사용 함</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"3-html-파일-작성법\" style=\"position:relative;\"><a href=\"#3-html-%ED%8C%8C%EC%9D%BC-%EC%9E%91%EC%84%B1%EB%B2%95\" aria-label=\"3 html 파일 작성법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. html 파일 작성법</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">html</code> 파일에 <code class=\"language-text\">module</code> 파일을 작성하는 방법</p>\n<ul>\n<li><code class=\"language-text\">&lt;script type=module src=\"./import.mjs\"></code></li>\n<li>상대 경로, 절대 경로로 작성함</li>\n<li>상대 경로는 <code class=\"language-text\">/, ./, ../</code>로 시작해야 함</li>\n<li><code class=\"language-text\">\"import.mjs\"</code> 처럼 경로 없이 작성 불가, 추후 가능할 것으로 생각함</li>\n<li><code class=\"language-text\">defer</code> 가 디폴트이므로 <code class=\"language-text\">defer</code> 를 작성하지 않음</li>\n</ul>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","frontmatter":{"date":"December 12, 2021","title":"Module - 접근 및 바탕, 코드 형태, html 파일 작성 방법","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-module-1/"}},"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":"zoomkoding/zoomkoding-gatsby-blog"}}}}},"pageContext":{"slug":"/study-cs-HTTP-2/","nextSlug":"/study-js-es6-reflect-7/","prevSlug":"/study-js-es6-module-1/"}},"staticQueryHashes":["1073350324","2938748437"]}