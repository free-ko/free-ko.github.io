{"componentChunkName":"component---src-templates-category-template-js","path":"/posts/JS","result":{"pageContext":{"currentCategory":"JS","categories":["All","JS","블로그","Book"],"edges":[{"node":{"id":"eeaba52d-251a-5d14-b617-1315a6f5d494","excerpt":"1) function 블록 도 블록 스코프  안과 밖에 같은 이름의  변수 선언 가능 스코프가 다르기 때문 그래서 밖의 와 안의 는 다르게 저장되어 있음  밖의  변수를  안에서 사용 가능() 2) try-catch  문도 블록 스코프  블록  기준으로 안과 밖에 같은 이름의  변수 선언 가능  블록의 안과 밖에 를 선언했으며 안과 밖이 스코프가 다르므로 변숫값이 각각 설정됨 에서  밖의 변수 사용   블록에서 값을 할당   변수가 없으므로 에러가 발생   블록 안에서 선언한  값을 출력하지 않고  밖의  값을 출력 함 3) switch-case 문도 블록 스코프  블록 기준으로 같은 이름의  변수 작성 불가 , 는 블록 스코프가 아님   블록 안에서 을 사용하여 선언한 변수가 있는데 다시 을 사용하여 변수를 선언하므로 에러가 발생 그래서 주석으로 처리 에러는 실행할 때 생기지 않고 컴파일 할 때 에러가 발생함 1) function 블록 2) try-catch 3) switch-c…","fields":{"slug":"/study-js-es6-scope/"},"frontmatter":{"categories":"JS","title":"👨‍💻 function 블록, try-catch, switch-case","date":"August 31, 2021"}},"next":{"fields":{"slug":"/book/"}},"previous":null},{"node":{"id":"4183a7d4-57bf-5a35-9edc-682f612b03ef","excerpt":"1) 변수 구분 로컬(지역) 변수, 글로벌(전역) 변수 변수를 구분하는 이유는? 기능과 목적이 다르기 때문 글로벌 변수의 기능, 목적 다른 JS 파일에서 변숫값 공유 파일에서 공통 변수 개념으로 사용 의도는 좋으나 처리 속도가 떨어짐 로컬 변수의 기능, 목적 빠르게 식별자를 해결하기 위해 가까운 스코프(예를 들어 함수 스코프)의 변수를 사용하려는 것  키워드 문제 2) 글로벌 변수 오해 글로벌 변수는 글로벌 오브젝트의 로컬 변수 처럼 var 키워드 사용이 정상  키워드를 작성하지 않으면 글로벌 변수로 간주하는데 이것이 문제  키워드를 사용하지 않고 를 글로벌 변수로 선언하고 100에 할당  함수 안에서  변수(글로벌 변수)에 300 할당,  변수가 로컬 변수가 아님, 즉 글로벌 오브젝트의  변수에 300 할당 함수 안에서 글로벌 변수에 값을 설정하는 것은 좋은 것이 아님 로컬 변수와 글로벌 변수를 구분한 목적을 생각해야 함 예를 들어 함수 안에서 지역 변수를 선언해 사용하면 빠르게…","fields":{"slug":"/study-js-es6-variable/"},"frontmatter":{"categories":"JS","title":"👨‍💻 let, const 변수","date":"August 30, 2021"}},"next":{"fields":{"slug":"/gatsby-github-blog/"}},"previous":{"fields":{"slug":"/book/"}}}]}},"staticQueryHashes":["1073350324","2938748437"]}