{"componentChunkName":"component---src-templates-blog-template-js","path":"/study-cs-HTTP-8/","result":{"data":{"cur":{"id":"ee26c187-aed8-5677-81cb-3e225724e280","html":"<br>\n<h1 align=\"center\">\n  👋  HTTP 메서드 - PUT, PATCH, DELETE\n</h1>\n<br>\n<h2 id=\"1-put\" style=\"position:relative;\"><a href=\"#1-put\" aria-label=\"1 put permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. PUT</h2>\n<ol>\n<li>\n<p>리소스를 대체</p>\n<ul>\n<li>리소스가 있으면 대체(기존거 삭제됨)</li>\n<li>리소스가 없으면 생성</li>\n<li>쉽게 이야기해서 덮어버림</li>\n</ul>\n</li>\n<li>\n<p>중요! 클라이언트가 리소스를 식별</p>\n<ul>\n<li>클라이언트가 리소스 <code class=\"language-text\">위치</code>를 알고 URI 지정</li>\n<li>POST와 차이점</li>\n</ul>\n</li>\n</ol>\n<br>\n<h2 id=\"2-patch\" style=\"position:relative;\"><a href=\"#2-patch\" aria-label=\"2 patch permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. PATCH</h2>\n<ol>\n<li>\n<p>리소스 부분 변경</p>\n<ul>\n<li>클라이언트에서 요청</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">PATCH /memebers/100 HTTP/1.1\nContent-Type: application/json\n\n{\n // userName 필드가 없을 경우\n &quot;age&quot;: 50\n}</code>\n        </deckgo-highlight-code>\n<ul>\n<li>서버(<code class=\"language-text\">/members/100</code>)</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">{\n  &quot;userName&quot;: &quot;ko&quot;,\n  &quot;age&quot; : 20   // 이 부분만 50으로 변경\n}</code>\n        </deckgo-highlight-code>\n</li>\n</ol>\n<br>\n<h2 id=\"3-delete\" style=\"position:relative;\"><a href=\"#3-delete\" aria-label=\"3 delete permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. DELETE</h2>\n<ol>\n<li>리소스 제거</li>\n</ol>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","excerpt":"1. PUT 리소스를 대체 리소스가 있으면 대체(기존거 삭제됨) 리소스가 없으면 생성 쉽게 이야기해서 덮어버림 중요! 클라이언트가 리소스를 식별 클라이언트가 리소스 를 알고 URI 지정 POST와 차이점 2. PATCH 리소스 부분 변경 클라이언트에서 요청 서버() 3. DELETE 리소스 제거","frontmatter":{"date":"December 18, 2021","title":"HTTP - 4.HTTP 메서드(3)","categories":"CS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-cs-HTTP-8/"}},"next":{"id":"b4e36f46-21a3-59d6-9c9d-271640664d10","html":"<br>\n<h1 align=\"center\">\n  👋  Promise -  then(), then()의 return, catch(), finally()\n</h1>\n<br>\n<h2 id=\"1-then\" style=\"position:relative;\"><a href=\"#1-then\" aria-label=\"1 then permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. then()</h2>\n<ul>\n<li>\n<p>성공과 실패 핸들러 함수를 작성함</p>\n<ul>\n<li><code class=\"language-text\">Promise</code> 인스턴스를 반환함</li>\n</ul>\n</li>\n<li>\n<p>파라미터</p>\n<ul>\n<li>첫 번째: 성공일 때 실행될 핸들러 함수</li>\n<li>두 번째: 실패일 때 실행될 핸들러 함수</li>\n</ul>\n</li>\n<li>\n<p>실행자의 <code class=\"language-text\">resolve(), reject()</code> 에 파라미터 값을 다수 작성하더라도 핸들러 함수는 처음 하나만 사용 함</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const obj = new Promise((resolve, reject) =&gt; {\nresolve(1, 2, 3);\n});\n\nobj.then(\n(value) =&gt; {\n  conosle.log(value);\n},\n(reason) =&gt; {\n  console.log(reason);\n},\n);\n\n// 1. resolve(1,2,3); 파라미터에 값을 3개 작성했음\n// 2. 실패(reject)가 발생하지 않으면 reject()를 작성하지 않아도 됨\n// 3. obj.then((value) =&gt; {.1.}, (reason) =&gt; {.2.}); 사실 실행자에 resolve()만 있으므로 첫 번째 함수만 작성해도 됨\n// 4. 실행자에서 resolve()가 실행되면 then()의 첫 번째 파라미터 함수가 실행됨, 이 때 resolve(1,2,3)에서 1,2,3을 넘겨 주지만\n// 5. then((value) =&gt; {console.log(value)}의 value에 첫 번째 값인 1만 설정됨\n// 6. 다수의 파라미터 값을 넘겨주려면 배열, Object 등을 사용해야 함\n\n// [실행결과]\n// 1</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<h2 id=\"2-then의-return\" style=\"position:relative;\"><a href=\"#2-then%EC%9D%98-return\" aria-label=\"2 then의 return permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. then()의 return</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">then()</code> 에서 <code class=\"language-text\">Promise</code> 인스턴스를 반환함</p>\n<ul>\n<li><code class=\"language-text\">return</code> 값을 반환하지 않음</li>\n<li><code class=\"language-text\">method chain</code>에서 <code class=\"language-text\">this</code>를 <code class=\"language-text\">return</code> 하는 것과 같은 개념임</li>\n<li>따라서 <code class=\"language-text\">then().then()</code> 형태 처럼 <code class=\"language-text\">then()</code>을 연속해서 호출 할 수 있음</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">return</code> 값을 <code class=\"language-text\">[[PromiseValue]]</code>에 설정하고 <code class=\"language-text\">[[PromiseValue]]</code> 값을 다음 <code class=\"language-text\">then()</code> 의 파라미터 값으로 넘겨 줌</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const obj = new Promise((resolve, reject) =&gt; {\nresolve(100);\n});\n\nobj\n.then((value) =&gt; {\n  return value + 50;\n})\n.then((param) =&gt; {\n  console.log(param);\n});\n\n// 1. obj.then((value) =&gt; {...} value 파라미터에 100이 설정됨\n// 2. return value + 50; 150을 반환하지 않고 인스턴스를 반환함, 150은 [[PromiseValue]]에 설정함\n// 3. return을 작성하지 않으면 undefined를 [[PromiseValue]]에 설정함\n// 4. then((param) =&gt; {console.log(param}); param에 [[PromiseValue]] 값이 150이 설정됨\n\n// [실행결과]\n// 150</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<h2 id=\"3-catch\" style=\"position:relative;\"><a href=\"#3-catch\" aria-label=\"3 catch permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. catch()</h2>\n<ul>\n<li>\n<p>실패(reject)의 핸들러 함수를 작성함</p>\n<ul>\n<li><code class=\"language-text\">then()</code>의 두 번째 파라미터를 작성하지 않고</li>\n<li>대신에 <code class=\"language-text\">catch(param)</code>를 작성함</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const check = false;\nconst obj = new Promise((resolve, reject) =&gt; {\n  check ? resolve(check) : reject(1, 2, 3);\n});\n\nobj\n  .then((value) =&gt; {\n    console.log(value);\n  })\n  .catch((value) =&gt; {\n    console.log(value);\n  });\n\n// 1. check ? resolve(check) : reject(1,2,3); check 값이 false이므로 reject()를 호출하게 되며 파라미터 값으로 1,2,3을 넘겨 줌\n// 2. catch((value) =&gt; {console.log(value)}); then()의 두 번째 파라미터에 함수를 작성하지 않고 별도로 catch()를 작성했음\n// 3. reject()가 호출되면 catch(value)가 실행됨 1,2,3을 파라미터 값으로 넘겨주지만 value에 첫 번째 값인 1만 설정됨\n\n// [실행결과]\n// 1</code>\n        </deckgo-highlight-code>\n<ul>\n<li><code class=\"language-text\">return</code> 문의 표현식 평가 결과를 <code class=\"language-text\">[[PromiseValue]]</code>에 설정함</li>\n</ul>\n</li>\n<li><code class=\"language-text\">Promise</code> 인스턴스를 반환하므로 <code class=\"language-text\">catch().then()</code> 처럼 이어서 <code class=\"language-text\">then()</code> 을 호출할 수 있음</li>\n<li>\n<p><code class=\"language-text\">[[PromiseValue]]</code> 값을 <code class=\"language-text\">then()</code> 의 파라미터 값으로 넘겨줌</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const obj = new Promise((resolve, reject) =&gt; {\nresolve(100);\n});\n\nobj\n.then((value) =&gt; {\n  throw &#39;에러&#39;;\n})\n.catch((catch1) =&gt; {\n  console.log(&#39;catch1:&#39; + catch1);\n  return &#39;정상&#39;;\n})\n.then((param) =&gt; {\n  console.log(&#39;then:&#39; + param);\n})\n.catch((catch2) =&gt; {\n  console.log(&#39;catch2:&#39; + catch2);\n});\n\n// 1. obj.then((value) =&gt; {...} 실행자에서 resolve(100)이 실행되므로 then()의 첫 번째 파라미터 함수가 호출됨\n// 2. throw &quot;에러&quot; throw문으로 에러를 발생시킴. 바로 아래의 catch((catch1) = {})에서 받음, 이때, &quot;에러&quot;를 [[PromiseValue]]에 설정함\n// 3. catch((catch1) =&gt; {...}); [PromiseValue]]의 &quot;에러&quot;가 catch1에 설정됨\n// 4. return &quot;정상&quot;; 에러가 발생하여 catch()를 실행했지만 catch()에서 에러가 발생하지 않으면 바로 아래의 then()을 실행함 &quot;정상&quot;을 [[PromiseValue]]에 설정함\n// 5. then((param) =&gt; {...}); 여기서 에러가 발생하지 않으므로 아래의 catch()를 호출하지 않음 Promise 처리가 끝남\n// 6. catch((catch2) =&gt; {...}); 실행하지 않는 것을 설명하기 위해 작성했음\n\n// [실행결과]\n// catch1: 에러\n// then: 정상</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<h2 id=\"4-finally\" style=\"position:relative;\"><a href=\"#4-finally\" aria-label=\"4 finally permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. finally()</h2>\n<ul>\n<li>\n<p>성공, 실패에 관계 없이 파라미터의 핸들러 함수가 실행됨</p>\n<ul>\n<li>핸들러 함수에 파라미터가 없음</li>\n<li>ES2018부터 지원함</li>\n</ul>\n</li>\n<li>\n<p>활용 측면이지만 <code class=\"language-text\">then(), catch()</code>의 같은 코드를 <code class=\"language-text\">finally()</code>에 작성하면 코드 중복을 필할 수 있음</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const obj = new Promise((resovle, reject) =&gt; {\nresolve(100);\n});\n\nobj\n.then((value) =&gt; {\n  console.log(value);\n  return 200;\n})\n.catch((reason) =&gt; {\n  console.log(reason);\n})\n.finally((param) =&gt; {\n  console.log(&#39;finally:&#39; + param);\n});\n\n// 1. resolve(100); then()의 핸들러 함수가 호출됨\n// 2. obj.then((value) =&gt; {return 200;}) 200을 [[PromiseValue]]에 설정함 catch()를 실행하지 않고 finally()를 실행함\n// 3. finally((param) =&gt; {...} 문법적으로 param 파라미터를 사용하지 않음 then()에서 200을 return 하지만 [[PromiseValue]] 값이 param에 설정되지 않음\n// 4. 파라미터를 작성하더라도 에러가 나지 않지만 undefined가 설정되므로 의미가 없음\n\n// [실행결과]\n// 100\n// finally: undefined</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","frontmatter":{"date":"December 17, 2021","title":"Promise - then(), then()의 return, catch(), finally()","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-promise-3/"}},"prev":{"id":"1d08700c-bf48-55e6-af3a-28dd2c33ae97","html":"<br>\n<h1 align=\"center\">\n  👋  Promise -  resolve(), thenable, reject()\n</h1>\n<br>\n<h2 id=\"1-resolve\" style=\"position:relative;\"><a href=\"#1-resolve\" aria-label=\"1 resolve permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. resolve()</h2>\n<ul>\n<li>\n<p>성공(fullfilled) 상태의 <code class=\"language-text\">Promise</code> 인스턴스를 생성하여 반환</p>\n<ul>\n<li><code class=\"language-text\">Promise.resolve()</code> 형태로 작성함</li>\n<li>파라미터 값에 따라 생성 방법이 다름</li>\n</ul>\n</li>\n<li>\n<p>파라미터에 값을 작성하면 파라미터 값으로 <code class=\"language-text\">Promise</code> 인스턴스를 생성하여 반환</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const obj = Promise.resolve([&#39;sports&#39;, &#39;music&#39;]);\n\nobj.then((value) =&gt; {\nconsole.log(value);\n});\n\nconsole.log(&#39;끝&#39;);\n\n// 1. resolve() 파라미터에 값을 작성했음, 값을 하나만 작성할 수 있으므로 다수를 작성하려면 Array, Object 등을 사용해야 함\n// 2. new 연산자를 사용하지 않지만 Promise 인스턴스를 생성하여 반환함, 성공(fulfilled) 상태로 설정함\n// 3. 성공 상태이므로 then()의 첫 번째 파라미터 함수가 호출됨\n\n// [실행결과]\n// 끝\n// [&quot;sports&quot;, &quot;music&quot;]</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>파라미터에 <code class=\"language-text\">Promise</code> 인스턴스를 작성하면 파라미터의 <code class=\"language-text\">Promise</code> 인스턴스의 값을 사용하여 <code class=\"language-text\">Promise</code> 인스턴스를 생성하여 반환</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const obj = Promise.resolve([&#39;sports&#39;, &#39;music&#39;]);\n\nPromise.resolve(obj).then((param) =&gt; {\nconsole.log(param);\n});\n\n// 1. Promise.resolve(obj) resolve() 파라미터에 Promise 인스턴스를 작성했음\n// 2. Promise 인스턴스를 생성하여 반환함 성공 상태로 설정함\n// 3. then((param) =&gt; {console.log(param)}; obj 인스턴스의 resolve() 파라미터 값이 param에 설정됨\n\n// [실행결과]\n// [&quot;sports&quot;, &quot;music&quot;]</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<h2 id=\"2-thenable\" style=\"position:relative;\"><a href=\"#2-thenable\" aria-label=\"2 thenable permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. thenable</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">Promise.resolve()</code> 파라미터에 <code class=\"language-text\">then()</code>을 작성한 형태</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const obj = Promise.resolve({\nthen(resolve, reject) {\n  resolve([1, 2]);\n},\n});\n\nobj.then((value) =&gt; {\nconsole.log(value);\n});\n\nconsole.log(&#39;끝&#39;);\n\n// 1. const obj = Promise.resolve({...}); resolve() 파라미터에 then(){...}을 작성했음, Promise 인스턴스를 생성하여 반환함, then()을 실행하지 않고 아래로 이동\n// 2. obj.then((value) =&gt; {console.log(value)}); then()을 실행하지 않음\n// 3. console.log(&quot;끝&quot;)을 실행함\n// 4. 이어서 Promise.resolve()의 then()을 실행함\n// 5. then(resolve, reject){ resolve([1,2])}); resolve([1,2])를 호출하며 아래 then()의 첫 번째 파라미터 함수가 실행됨\n// 6. obj.then((value) =&gt; {console.log(value)}); resolve([1,2])의 [1,2]가 value에 설정됨\n\n// 실행결과\n// 끝\n// [1,2]</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<h2 id=\"3reject\" style=\"position:relative;\"><a href=\"#3reject\" aria-label=\"3reject permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.reject()</h2>\n<ul>\n<li>\n<p>실패(reject) 상태의 Promise 인스턴스를 생성하여 반환함</p>\n<ul>\n<li><code class=\"language-text\">Promise.reject()</code> 형태로 작성함</li>\n</ul>\n</li>\n<li>파라미터에 <code class=\"language-text\">reject</code> 사유를 작성함</li>\n<li>\n<p><code class=\"language-text\">then()</code> 을 연결한 형태</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const obj = Promise.reject(&#39;실패&#39;);\n\nobj.then(\n(value) =&gt; console.log(value),\n(value) =&gt; console.log(value),\n);\n\n// 1. const obj = Promise.reject(&quot;실패&quot;); new 연산자를 사용하지 않지만 Promise 인스턴스를 생성하여 반환함, 실패(reject) 상태로 설정함\n// 2. 실패 상태이므로 then()의 두 번째 파라미터 함수가 호출됨\n// 3. obj.then( , (value) =&gt; console.log(value)}); Promise.reject(&quot;실패&quot;)에서 &quot;실패&quot;가 value에 설정됨\n\n// 실행결과\n// 실패</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p><code class=\"language-text\">catch()</code> 를 연결한 형태</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const obj = new Error(&#39;에러 발생&#39;);\n\nPromise.reject(obj).catch((error) =&gt; console.log(error.message));\n\nconsole.log(&#39;끝&#39;);\n\n// 1. const obj = new Error(&quot;에러 발생&quot;); Error 인스턴스를 생성함\n// 2. Promise.reject(obj) obj 인스턴스를 사용하여 Promise 인스턴스를 생성함, reject()를 실행하지 않음\n// 3. console.log(&quot;끝&quot;)을 실행함\n// 4. Promise.reject(obj)를 실행하며 catch()가 호출됨\n// 5. catch((error) =&gt; console.log(error.message)); obj 인스턴스가 error에 설정됨\n\n// 실행결과\n// 끝\n// 에러 발생</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","frontmatter":{"date":"December 18, 2021","title":"Promise - resolve(), thenable, reject()","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-promise-4/"}},"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":"zoomkoding/zoomkoding-gatsby-blog"}}}}},"pageContext":{"slug":"/study-cs-HTTP-8/","nextSlug":"/study-js-es6-promise-3/","prevSlug":"/study-js-es6-promise-4/"}},"staticQueryHashes":["1073350324","2938748437"]}