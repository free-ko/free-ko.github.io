{"componentChunkName":"component---src-templates-blog-template-js","path":"/study-js-es6-iteration-2/","result":{"data":{"cur":{"id":"609a2e9f-c47d-572e-8ae7-7af1c8a30c16","html":"<br>\n<h1 align=\"center\">\n  👋 이터러블 오브젝트, 이터러블 프로토콜\n</h1>\n<br>\n<h2 id=\"1-이터러블-오브젝트\" style=\"position:relative;\"><a href=\"#1-%EC%9D%B4%ED%84%B0%EB%9F%AC%EB%B8%94-%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8\" aria-label=\"1 이터러블 오브젝트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 이터러블 오브젝트</h2>\n<h3 id=\"1-이러터블-오브젝트-개념\" style=\"position:relative;\"><a href=\"#1-%EC%9D%B4%EB%9F%AC%ED%84%B0%EB%B8%94-%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8-%EA%B0%9C%EB%85%90\" aria-label=\"1 이러터블 오브젝트 개념 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1). 이러터블 오브젝트 개념</h3>\n<ul>\n<li>이터러블 프로토콜을 갖고 있는 오브젝트</li>\n<li>스펙에서는 <code class=\"language-text\">@@iterator()</code>로 표기</li>\n<li>\n<p>반복 구조, <code class=\"language-text\">Symbol.iterator()</code></p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// function values() { [native code] }</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> one<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> two<span class=\"token operator\">:</span> <span class=\"token number\">20</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span></code></pre></div>\n<ol>\n<li><code class=\"language-text\">[ ]</code> 리터럴로 생성한 <code class=\"language-text\">list</code>에 <code class=\"language-text\">Symbol.iterator</code>가 있으므로 <code class=\"language-text\">Array</code>는 이터러블 오브젝트 임</li>\n<li><code class=\"language-text\">{ }</code> 리터럴로 생성한 <code class=\"language-text\">obj</code>에 <code class=\"language-text\">Symbol.iterator</code>가 없으므로 <code class=\"language-text\">Object</code>는 이터러블 오브젝트가 아님</li>\n<li><code class=\"language-text\">for</code> 문의 반복과 이터레이션이 차이가 있듯이, <code class=\"language-text\">for - in</code>의 열거와 이터레이션은 차이가 있음</li>\n</ol>\n</li>\n</ul>\n<br>\n<h3 id=\"2-이터러블-오브젝트-구조\" style=\"position:relative;\"><a href=\"#2-%EC%9D%B4%ED%84%B0%EB%9F%AC%EB%B8%94-%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8-%EA%B5%AC%EC%A1%B0\" aria-label=\"2 이터러블 오브젝트 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2). 이터러블 오브젝트 구조</h3>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token string\">'use strict'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n  1. 오른쪽 list를 펼치면 __proto__가 있으며 __proto__를 펼치면 Array 오브젝트의 메소드가 표시됨\n\n  2. 아래로 내려가면 Symbol(Symbol.iterator)가 있음, 따라서 Array 오브젝트는 이터러블 오브젝트 임\n\n  3. 또한 Symbol(Symbol.iterator)를 펼치면 __proto__에 Function 오브젝트 메소드가 연결되어 있음\n    - 즉, Symbol.iterator는 함수 임\n\n  4. Symbol.iterator가 함수 이므로 호출 할 수 있음\n*/</span></code></pre></div>\n<br>\n<h3 id=\"3-자체-오브젝트에는-없지만\" style=\"position:relative;\"><a href=\"#3-%EC%9E%90%EC%B2%B4-%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8%EC%97%90%EB%8A%94-%EC%97%86%EC%A7%80%EB%A7%8C\" aria-label=\"3 자체 오브젝트에는 없지만 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3). 자체 오브젝트에는 없지만</h3>\n<ul>\n<li>이터러블 오브젝트를 상속받아도 됨</li>\n<li>즉, <code class=\"language-text\">prototype chain(__proto__)</code>에 있으면 됨</li>\n<li>예를 들어, <code class=\"language-text\">Array</code> 오브젝트를 상속 받으면 이터러블 오브젝트가 됨</li>\n</ul>\n<br>\n<h2 id=\"2-이터러블-프로토콜\" style=\"position:relative;\"><a href=\"#2-%EC%9D%B4%ED%84%B0%EB%9F%AC%EB%B8%94-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C\" aria-label=\"2 이터러블 프로토콜 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 이터러블 프로토콜</h2>\n<h3 id=\"1-이터러블-프로토콜-개념\" style=\"position:relative;\"><a href=\"#1-%EC%9D%B4%ED%84%B0%EB%9F%AC%EB%B8%94-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C-%EA%B0%9C%EB%85%90\" aria-label=\"1 이터러블 프로토콜 개념 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1). 이터러블 프로토콜 개념</h3>\n<ul>\n<li>오브젝트가 반복할 수 있는 구조이어야 함</li>\n<li><code class=\"language-text\">Symbol.iterator</code>를 갖고 있어야 함</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// function values() { [native code] }</span></code></pre></div>\n<br>\n<h3 id=\"2-아래-빌트인-오브젝트는\" style=\"position:relative;\"><a href=\"#2-%EC%95%84%EB%9E%98-%EB%B9%8C%ED%8A%B8%EC%9D%B8-%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8%EB%8A%94\" aria-label=\"2 아래 빌트인 오브젝트는 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2). 아래 빌트인 오브젝트는</h3>\n<ul>\n<li>디폴트로 이터러블 프로토콜을 갖고 있음</li>\n<li>즉 <code class=\"language-text\">Symbol.iterator</code>를 갖고 있음 -<code class=\"language-text\">Array</code>, <code class=\"language-text\">Argument</code>, <code class=\"language-text\">String</code>, <code class=\"language-text\">TypedArray</code>, <code class=\"language-text\">Map</code>, <code class=\"language-text\">Set</code>, <code class=\"language-text\">DOM NodeList</code></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#1-%EC%9D%B4%ED%84%B0%EB%9F%AC%EB%B8%94-%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8\">1. 이터러블 오브젝트</a></p>\n<ul>\n<li><a href=\"#1-%EC%9D%B4%EB%9F%AC%ED%84%B0%EB%B8%94-%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8-%EA%B0%9C%EB%85%90\">1). 이러터블 오브젝트 개념</a></li>\n<li><a href=\"#2-%EC%9D%B4%ED%84%B0%EB%9F%AC%EB%B8%94-%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8-%EA%B5%AC%EC%A1%B0\">2). 이터러블 오브젝트 구조</a></li>\n<li><a href=\"#3-%EC%9E%90%EC%B2%B4-%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8%EC%97%90%EB%8A%94-%EC%97%86%EC%A7%80%EB%A7%8C\">3). 자체 오브젝트에는 없지만</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#2-%EC%9D%B4%ED%84%B0%EB%9F%AC%EB%B8%94-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C\">2. 이터러블 프로토콜</a></p>\n<ul>\n<li><a href=\"#1-%EC%9D%B4%ED%84%B0%EB%9F%AC%EB%B8%94-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C-%EA%B0%9C%EB%85%90\">1). 이터러블 프로토콜 개념</a></li>\n<li><a href=\"#2-%EC%95%84%EB%9E%98-%EB%B9%8C%ED%8A%B8%EC%9D%B8-%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8%EB%8A%94\">2). 아래 빌트인 오브젝트는</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"1. 이터러블 오브젝트 1). 이러터블 오브젝트 개념 이터러블 프로토콜을 갖고 있는 오브젝트 스펙에서는 로 표기 반복 구조,   리터럴로 생성한 에 가 있으므로 는 이터러블 오브젝트 임  리터럴로 생성한 에 가 없으므로 는 이터러블 오브젝트가 아님  문의 반복과 이터레이션이 차이가 있듯이, 의 열거와 이터레이션은 차이가 있음 2). 이터러블 오브젝트 구조 3). 자체 오브젝트에는 없지만 이터러블 오브젝트를 상속받아도 됨 즉, 에 있으면 됨 예를 들어,  오브젝트를 상속 받으면 이터러블 오브젝트가 됨 2. 이터러블 프로토콜 1). 이터러블 프로토콜 개념 오브젝트가 반복할 수 있는 구조이어야 함 를 갖고 있어야 함 2). 아래 빌트인 오브젝트는 디폴트로 이터러블 프로토콜을 갖고 있음 즉 를 갖고 있음 -, , , , , ,  1. 이터러블 오브젝트 1). 이러터블 오브젝트 개념 2). 이터러블 오브젝트 구조 3). 자체 오브젝트에는 없지만 2. 이터러블 프로토콜 1). 이터러블 프로토…","frontmatter":{"date":"September 04, 2021","title":"이터러블 오브젝트, 프로토콜","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-iteration-2/"}},"next":{"id":"7d74bd95-26f7-5b37-b048-ddd398c19d8b","html":"<br>\n<h1 align=\"center\">\n  👋 이터레이터 오브젝트, 이터레이터 프로토콜\n</h1>\n<br>\n<h2 id=\"1-이터레이터-프로토콜\" style=\"position:relative;\"><a href=\"#1-%EC%9D%B4%ED%84%B0%EB%A0%88%EC%9D%B4%ED%84%B0-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C\" aria-label=\"1 이터레이터 프로토콜 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 이터레이터 프로토콜</h2>\n<ul>\n<li>\n<p>이터레이터(iterator) 프로토콜</p>\n<ul>\n<li>값을 순서대로 생성하는 방법(규약)</li>\n</ul>\n</li>\n<li>\n<p>이터레이터 오브젝트</p>\n<ul>\n<li><code class=\"language-text\">Symbol.iterator()</code>를 호출하면</li>\n<li>이터레이터 오브젝트를 생성하여 반환</li>\n<li>이터레이터 오브젝트에 <code class=\"language-text\">next()</code>가 있음</li>\n<li>생성한 오브젝트를 이터레이터라고 부름</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> list<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// {value: 10, done: false}</span>\n<span class=\"token comment\">// {value: 20, done: false}</span>\n<span class=\"token comment\">// {value: undefined, done: true}</span></code></pre></div>\n<ol>\n<li>이터레이터 오브젝트의 <code class=\"language-text\">next()</code>를 호출하면 이터레이터를 호출한다고도 함</li>\n<li><code class=\"language-text\">{value: 10, done: false}</code> 를 반환함, <code class=\"language-text\">value는 [10, 20]</code>에서 첫 번째 값이고 <code class=\"language-text\">done: false</code>는 이터레이터 상태 임</li>\n<li>두 번째 <code class=\"language-text\">next()</code> 호출</li>\n<li><code class=\"language-text\">{value: 20, done: false}</code> 를 반환함, <code class=\"language-text\">value는 [10, 20]</code>에서 두 번째 값이고 <code class=\"language-text\">done: false</code>는 이터레이터 상태 임</li>\n<li>세 번째 <code class=\"language-text\">next()</code> 호출</li>\n<li><code class=\"language-text\">{value: undefined, done: true}</code> 반환, <code class=\"language-text\">undefined</code>는 처리할 값이 없다는 것을 뜻하며 <code class=\"language-text\">done: true</code>는 이터레이터의 종료를 뜻함</li>\n</ol>\n<br>\n</li>\n<li>\n<p>이터레이터 오브젝트 구조</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">(</span><span class=\"token string\">'use strict'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n\t\t1. list.__proto__를 펼치면 Symbol(Symbol.iterator)가 있으므로 \n\t\t\t- 이터레이터 오브젝트를 만들 수 있음\n\t*/</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> list<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n\t\t1. 위 형태로 호출하면 이터레이터 오브젝트를 생성하여 반환 함\n\t\n\t\t2. obj.__proto__를 펼치면 next()가 있음\n\t\t\t- next()가 있으므로 obj는 이터레이터 오브젝트임\n\t*/</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1-%EC%9D%B4%ED%84%B0%EB%A0%88%EC%9D%B4%ED%84%B0-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C\">1. 이터레이터 프로토콜</a></li>\n</ul>\n</div>","frontmatter":{"date":"September 04, 2021","title":"이터레이터 오브젝트, 프로토콜","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-iteration-3/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":"zoomkoding/zoomkoding-gatsby-blog"}}}}},"pageContext":{"slug":"/study-js-es6-iteration-2/","nextSlug":"/study-js-es6-iteration-3/","prevSlug":""}},"staticQueryHashes":["1073350324","2938748437"]}