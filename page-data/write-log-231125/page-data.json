{"componentChunkName":"component---src-templates-blog-template-js","path":"/write-log-231125/","result":{"data":{"cur":{"id":"05db6bb2-9e30-5bf2-acf2-adef90dc3cbe","html":"<h2 id=\"회고\" style=\"position:relative;\"><a href=\"#%ED%9A%8C%EA%B3%A0\" aria-label=\"회고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>회고</h2>\n<h3 id=\"업무-회고\" style=\"position:relative;\"><a href=\"#%EC%97%85%EB%AC%B4-%ED%9A%8C%EA%B3%A0\" aria-label=\"업무 회고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>업무 회고</h3>\n<ul>\n<li>PR과 커밋단위를 팀원분들이 읽기 좋게 해야 다른 팀원분들의 리소스를 잘 활용할 수 있다.(PR Description을 자세히 작성하면, 팀원분들이 PR 리뷰하기 좋다.)</li>\n<li>함수명과 변수명을 깊게 고민하자. 특히 팀 내에서 통용되어지는 단어라던가 이해를 바탕으로 이름을 짓도록 노력하자.</li>\n<li>React Query에서 제공해주는 useMutation hook의 return 값인 <code class=\"language-text\">onSettled</code>를 통해, mutation이 성공하든 하지 않던 결과가 전달되기 때문에 onSuccess, onError에 공용으로 사용되어지는 함수 호출이나, 로직을 <code class=\"language-text\">onSettled</code>로 빼서 코드량을 줄일 수 있다.</li>\n<li>\n<p>tailwindCSS를 사용할 때, 스타일 클래스 이름을 동적으로 구성하지 말아야 합니다. 그 이유는 tailwindCSS는 빌드 시점 즉, 컴파일링 되는 시점에서 동적으로 할당되는 className을 인식하지 못하고 stylesheet에서 사용하지 않은 CSS라고 인식하고 지워버림</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">// NO\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text-{{ error ? <span class=\"token punctuation\">'</span>red<span class=\"token punctuation\">'</span> : <span class=\"token punctuation\">'</span>green<span class=\"token punctuation\">'</span> }}-600<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\n// YES\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{{ error ? <span class=\"token punctuation\">'</span>text-red-600<span class=\"token punctuation\">'</span> : <span class=\"token punctuation\">'</span>text-green-600<span class=\"token punctuation\">'</span> }}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n</li>\n<li>main, staging이든 핫픽스 또는 QA 브랜치를 만들 때 기준은 develop에서 따서 진행해야함. 여기서 문제 해결을 하고 개발계 환경에 배포 후, 확인이 되었으면 staging을 거쳐서 main으로 핫픽스로 나가는 것이 안전함</li>\n<li>팀내에서 정한 컨벤션에 대해 제대로 숙지하고 꼼꼼하게 해야 한다. 잦은 실수들이 모이게되면 팀내에 신뢰가 깍겨 일을 맡길 수 없게 된다. 항상 인지하고 있자.</li>\n<li>코드를 단순히 격리한다고 해서, UI 컴포넌트가 되는 것이 아님, 정말 공통적으로 사용되는 컴포넌트여야 하고 해당 컴포넌트 안에 여백을 결정하는 컴포넌트가 있으면 안됨</li>\n<li>기획을 거쳐 디자인 시안이 나왔을 때, 이해하지 못 한채로 개발하면 위험함 항상 질문하고 또 질문해서 이해한 뒤에 개발을 진행해야 함</li>\n<li>상용 배포 일정 이외에 추가 상용 배포를 급작스럽게 해야 하는 상황이 발생했다면, 데브옵스 팀에서 양해를 구하고 진행하는 것이 순서임. 내가 급하다고 요청부터 먼저하는 것은 배려가 없는 팀워크를 유발시킴</li>\n<li>mdn web docs에서 제공하는 함수중 <code class=\"language-text\">split</code>을 사용할 때, 이모지 혹은 특정 폰트에 사용하게 되면 UTF-16 코드로 나누게 됨.</li>\n</ul>\n<br>\n<h2 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리</h2>\n<p>찬 바람이 부는 겨울 속에서 내 인생까지 찬 바람이 불지 않을려면, 매일 매일 나의 실력을 갈고 닦아야 한다. 또한 내가 하는 일에 대한 자신감을 키우기 위해서는 기본적으로 내가 하는 일에 대한 이해도를 높이기 위해 최선을 다해야 한다. 당연한 것인데, 이 당연한 것을 잊고 혹은 외면하게 된다면 나는 절대로 나아지지 않을 것이다. 그러니 항상 낮은 자세로 무엇이든 배울려고 노력하자. 이번 한 주 정말 많은 일들이 일어났지만, 무엇보다 귀감이 되는 내용을 생각해보았을 때 너무나도 당연한 내용들이였다.</p>\n<p>정말 정신 똑바로 차리자.</p>\n<br>\n<h3 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h3>\n<ul>\n<li><a href=\"https://tanstack.com/query/v4/docs/react/reference/useMutation\">useMutation 공식문서</a></li>\n<li><a href=\"https://tailwindcss.com/docs/content-configuration#dynamic-class-names\">tailwindCSS 동적 ClassName 지양</a></li>\n<li><a href=\"https://velog.io/@arthur/Tailwind-CSS-%EC%97%90%EC%84%9C-%EB%8F%99%EC%A0%81%EC%9C%BC%EB%A1%9C-%ED%81%B4%EB%9E%98%EC%8A%A4-%ED%95%A0%EB%8B%B9%ED%95%98%EA%B8%B0\">tailwindCSS 동적으로 적용하는 방법</a></li>\n<li><a href=\"https://stackoverflow.com/questions/4547609/how-can-i-get-a-character-array-from-a-string/34717402#34717402\">split 예외상황</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%ED%9A%8C%EA%B3%A0\">회고</a></p>\n<ul>\n<li><a href=\"#%EC%97%85%EB%AC%B4-%ED%9A%8C%EA%B3%A0\">업무 회고</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\">마무리</a></p>\n<ul>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"회고 업무 회고 PR과 커밋단위를 팀원분들이 읽기 좋게 해야 다른 팀원분들의 리소스를 잘 활용할 수 있다.(PR Description을 자세히 작성하면, 팀원분들이 PR 리뷰하기 좋다.) 함수명과 변수명을 깊게 고민하자. 특히 팀 내에서 통용되어지는 단어라던가 이해를 바탕으로 이름을 짓도록 노력하자. React Query에서 제공해주는 useMutation hook의 return 값인 를 통해, mutation이 성공하든 하지 않던 결과가 전달되기 때문에 onSuccess, onError에 공용으로 사용되어지는 함수 호출이나, 로직을 로 빼서 코드량을 줄일 수 있다. tailwindCSS를 사용할 때, 스타일 클래스 이름을 동적으로 구성하지 말아야 합니다. 그 이유는 tailwindCSS는 빌드 시점 즉, 컴파일링 되는 시점에서 동적으로 할당되는 className을 인식하지 못하고 stylesheet에서 사용하지 않은 CSS라고 인식하고 지워버림 main, staging이든 핫픽스…","frontmatter":{"date":"November 25, 2023","title":"11월 4주 회고","categories":"Log","author":"Kay","emoji":"👋"},"fields":{"slug":"/write-log-231125/"}},"next":{"id":"429be394-25e2-5956-b531-2512e71eecab","html":"<h2 id=\"타입과-추상화\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85%EA%B3%BC-%EC%B6%94%EC%83%81%ED%99%94\" aria-label=\"타입과 추상화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입과 추상화</h2>\n<ul>\n<li>일단 컴퓨터를 조작하는 것이 추상화를 구축하고, 조작하고, 추론하는 것에 관한 모든 것이라는 것을 깨닫고 나면 (훌륭한) 컴퓨터 프로그램을 작성하기 위한 중요한 전제 조건은 추상화를 정확하게 다루는 능력이라는 것이 명확해짐</li>\n<li>초기 지하철 노선도는 실제와 유사한 물리적인 지형 위에 구불구불한 운행 노선과 불규칙적인 역 간의 거리를 사실적으로 묘사하고 있었지만, 이렇게 사실적인 정보는 오히려 지하철을 이용하는 승객들로 하여금 노선도를 이해하기 어렵게 만듦</li>\n<li>지하철 노선도 디자인에서 가장 중요한 것은 얼마나 사실적으로 지형을 묘사했느냐가 아니라 역과 역 사이의 연결성을 얼마나 직관적으로 표현했느냐임</li>\n</ul>\n<br>\n<h2 id=\"추상화를-통한-복잡성-극복\" style=\"position:relative;\"><a href=\"#%EC%B6%94%EC%83%81%ED%99%94%EB%A5%BC-%ED%86%B5%ED%95%9C-%EB%B3%B5%EC%9E%A1%EC%84%B1-%EA%B7%B9%EB%B3%B5\" aria-label=\"추상화를 통한 복잡성 극복 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>추상화를 통한 복잡성 극복</h2>\n<ul>\n<li>현실은 복잡하며 예측 불가능한 혼돈의 덩어리임. 사람들은 본능적으로 이해하기 쉽고 예측 가능한 수준으로 현실을 분해하고 단순화하는 전략을 따름</li>\n<li>헨리 백의 지하철 노선도는 불필요한 지형 정보를 제거함으로써 단순함을 달성한 추상화의 훌륭한 예.</li>\n<li>진정한 의미에서 추상화란 현실에서 출발하되 불필요한 부분을 도려내가면서 사물의 놀라운 본질을 드러나게 하는 과정</li>\n<li>불필요한 부분을 무시함으로써 현실에 존재하는 복잡성을 극복하는 것</li>\n<li>\n<p>추상화</p>\n<ul>\n<li>어떤 양상, 세부 사항, 구조를 좀 더 명확하게 이해하기 위해 특정 절차나 물체를 의도적으로 생략하거나 감춤으로써 복잡도를 극복하는 방법</li>\n</ul>\n</li>\n<li>객체지향 패러다임은 객체라는 추상화를 통해 현실의 복잡성을 극복</li>\n</ul>\n<br>\n<h2 id=\"객체지향과-추상화\" style=\"position:relative;\"><a href=\"#%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5%EA%B3%BC-%EC%B6%94%EC%83%81%ED%99%94\" aria-label=\"객체지향과 추상화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>객체지향과 추상화</h2>\n<ol>\n<li>\n<p>단순화</p>\n<ul>\n<li>정원에 들어선 앨리스 자신을 포함하여 앨리스가 마주하는 정원사, 클로버 병사들, 기타 등등은 모두 객체.</li>\n<li>객체는 제각기 독특한 모습과 행동 양식을 지니지만, 이들을 하나로 아우르는 ‘트럼프’라는 개념으로 단순화할 수 있음</li>\n</ul>\n</li>\n<li>\n<p>그룹으로 단순화</p>\n<ul>\n<li>정원 속 인물들은 다양한 측면에서 서로를 구별할 수 있는 독특한 특징이 있음. 이처럼 명확한 경계를 가지고 서로 구별할 수 있는 구체적인 사람이나 사물을 객체라고 함</li>\n<li>한편 장면에 등장하는 다양한 인물들을 모두 ‘트럼프’라고 줄여 지칭할 수 있음. 모든 인물들은 공통적으로 ‘트럼프’라고 했을 때, 떠오르는 일반적인 외형과 행동 방식을 지니고 있기 때문</li>\n</ul>\n</li>\n<li>\n<p>개념</p>\n<ul>\n<li>앨리스가 인물들의 차이점을 무시하고 공통점만을 취해 트럼프라는 개념으로 단순화한 것은 추상화의 일종. 이러한 공통점을 기반으로 객체들을 묶기 위한 그릇을 개념(concept) 이라고 함</li>\n<li>개념을 이용하면 객체를 여러 그룹으로 분류(classification) 할 수 있음. 결국 각 객체는 특정한 개념을 표현하는 그룹의 일원으로 포함됨</li>\n<li>객체란 특정한 개념을 적용할 수 있는 구체적인 사물을 의미. 개념이 객체에 적용됐을 때 객체를 개념의 인스턴스라고 함</li>\n</ul>\n</li>\n<li>\n<p>개념의 3 가지 관점</p>\n<ul>\n<li>개념은 특정한 객체가 어떤 그룹에 속할 것인지를 결정함. 객체의 분류 장치로서 개념은 다음 세 가지 관점을 포함함</li>\n<li>심볼(symbol): 개념을 가리키는 간략한 이름이나 명칭 (ex. ‘트럼프’)</li>\n<li>내연(intension): 개념의 완전한 정의를 나타내며 내연의 의미를 이용해 객체가 개념에 속하는지 여부를 확인할 수 있음. (ex. 몸이 납작하고 두 손 두 발이 네모난 몸 모서리에 달려 있는 등장인물)</li>\n<li>외연(extension): 개념에 속하는 모든 객체의 집합 (ex. 정원사, 병사, 신하…)</li>\n</ul>\n</li>\n<li>\n<p>객체를 분류하기 위한 틀</p>\n<ul>\n<li>분류란 특정한 객체를 특정한 개념의 객체 집합에 포함시키거나 포함시키지 않는 작업을 의미함</li>\n<li>분류란 객체에 특정한 개념을 적용하는 작업. 객체에 특정한 개념을 적용하기로 결심했을 때, 우리는 그 객체를 특정한 집합의 멤버로 분류하고 있는 것</li>\n<li>어떤 객체를 어떤 개념으로 분류할지가 객체지향의 품질을 결정함</li>\n</ul>\n</li>\n<li>\n<p>추상화를 위한 도구인 분류</p>\n<ul>\n<li>추상화는 구체적인 사물 간의 공통점은 취하고 차이점은 버리는 일반화를 통해 단순화하는 것</li>\n<li>추상화는 중요한 부분을 강조하기 위해 불필요한 세부 사항을 제거해 단순화하는 것</li>\n</ul>\n</li>\n</ol>\n<br>\n<h2 id=\"타입\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85\" aria-label=\"타입 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입</h2>\n<ol>\n<li>\n<p>개념인 타입</p>\n<ul>\n<li>타입은 공통점을 기반으로 객체들을 묶기 위한 틀</li>\n<li>타입은 개념과 동일. 어떤 객체에 타입을 적용할 수 있을 때 그 객체를 타입의 인스턴스라고 함</li>\n</ul>\n</li>\n<li>\n<p>데이터 타입</p>\n<ul>\n<li>‘타입이 없다(Untyped)’는 말은 메모리 안의 데이터를 다룰 수 있는 단 하나의 타입만이 존재한다는 것을 의미함. 컴퓨터의 데이터를 목적에 따라 분류하기 시작하면서 프로그래밍 언어에 서서히 타입 시스템이 생겨났음. 타입 시스템의 목적은 데이터가 잘못 사용되지 않도록 제약사항을 부과하는 것</li>\n<li>타입은 데이터가 어떻게 사용되느냐에 관한 것</li>\n<li>타입에 속한 데이터를 메모리에 어떻게 표현하는지는 외부로부터 철저하게 감춰짐</li>\n<li>데이터 타입은 메모리 안에 저장된 데이터의 종류를 분류하는 데 사용하는 메모리 집합에 관한 메타데이터. 데이터에 대한 분류는 암시적으로 어떤 종류의 연산이 해당 데이터에 대해 수행될 수 있는지를 결정함</li>\n</ul>\n</li>\n<li>\n<p>객체와 타입</p>\n<ul>\n<li>객체를 타입에 따라 분류하고 그 타입에 이름을 붙이는 것은 프로그램에서 사용할 새로운 데이터 타입을 선언하는 것과 같음</li>\n<li>그러나 객체는 데이터가 아님. 객체에서 중요한 것은 행동이며, 이웃 객체와 협력하기 위해 어떤 행동을 할지를 결정하는 것.</li>\n<li>객체의 타입은 다음과 같은 특징을 가짐</li>\n<li>어떤 객체가 어떤 타입에 속하는지를 결정하는 것은 객체가 수행하는 행동임</li>\n<li>객체의 내부적인 표현은 외부로부터 철저하게 감춰짐</li>\n</ul>\n</li>\n<li>\n<p>행동이 우선</p>\n<ul>\n<li>동일한 책임을 수행하는 일련의 객체는 동일한 타입에 속함. 객체의 타입을 결정하는 것은 객체의 행동뿐. 객체가 어떤 데이터를 보유하고 있는지는 타입을 결정하는 데 아무런 영향도 미치지 않음.</li>\n<li>타입이 데이터가 아니라 행동에 의해 결정된다는 사실은 객체지향 패러다임을 특징 짓는 중요한 몇 가지 원리원칙에 의미를 부여함</li>\n<li>같은 타입에 속한 객체는 행동만 동일하다면 서로 다른 데이터를 가질 수 있음. 동일한 행동은 동일한 책임을 의미하며, 동일한 책임은 동일한 메시지 수신을 의미함. 이처럼 동일한 요청에 대해 서로 다른 방식으로 응답할 수 있는 능력을 다형성이라고 함.</li>\n<li>외부에 데이터를 감춰야 함. 공용 인터페이스 뒤로 데이터를 캡슐화하는 것은 객체를 행동에 따라 분류하기 위한 기본적인 원칙.</li>\n<li>객체가 내부적으로 관리하는 데이터가 아니라 객체가 외부에 제공하는 행동을 먼저 생각해야 함. 이는 ‘책임-주도’ 설계라고 부르는 객체지향 설계 방법임</li>\n<li>객체를 결정하는 것은 행동. 데이터는 단지 행동을 따를 뿐.</li>\n</ul>\n</li>\n</ol>\n<br>\n<h2 id=\"타입의-계층\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85%EC%9D%98-%EA%B3%84%EC%B8%B5\" aria-label=\"타입의 계층 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입의 계층</h2>\n<ol>\n<li>\n<p>트럼프 계층</p>\n<ul>\n<li>앨리스는 정원사, 병사, 신하 등을 ‘트럼프’가 아닌 ‘트럼프 인간’으로 봤음. 등장인물들의 외양은 트럼프와 유사하지만 행동 자체는 트럼프와 완벽하게 동일하지 않기 때문</li>\n<li>트럼프 인간 타입의 객체는 트럼프 타입의 객체가 할 수 있는 모든 행동(납작 엎드릴 수 있고 뒤집어질 수 있는 것)에 더해 걸어다니는 행동을 더 할 수 있음. 따라서 모든 트럼프 인간은 동시에 트럼프임</li>\n<li>트럼프 인간은 트럼프보다 좀 더 특화된 행동을 하는 특수한 개념. 이 두 개념 사이 관계를 일반화/특수화 관계라고 함</li>\n</ul>\n</li>\n<li>\n<p>일반화/특수화 관계</p>\n<ul>\n<li>객체지향에서 일반화/특수화 관계를 결정하는 것은 객체의 상태를 표현하는 데이터가 아니라 행동임.</li>\n<li>두 타입 간에 일반화/특수화 관계가 성립하려면 한 타입이 다른 타입보다 더 특수하게 행동해야 하고 반대로 한 타입은 다른 타입보다 더 일반적으로 행동해야 함.</li>\n<li>특수한 타입이란 일반적인 타입이 가진 모든 행동을 포함하지만 거기에 더해 자신만의 행동을 추가하는 타입을 가리킴</li>\n</ul>\n</li>\n<li>\n<p>슈퍼타입과 서브타입</p>\n<ul>\n<li>좀 더 일반적인 타입을 슈퍼타입, 좀 더 특수한 타입을 서브타입이라고 함. 일반적으로 서브타입은 슈퍼타입의 행위와 호환되기 때문에 서브타입은 슈퍼타입을 대체할 수 있어야 함</li>\n</ul>\n</li>\n<li>\n<p>일반화는 추상화를 위한 도구</p>\n<ul>\n<li>추상화에서는 중요한 부분을 강조하기 위해 불필요한 세부 사항을 제거시켜 단순하게 만듦.</li>\n<li>앨리스가 ‘기껏해야 트럼프에 불과해’라고 생각했을 때 앨리스는 머릿속에서 걸을 수 있는 트럼프 인간의 특수한 능력은 제거하고 종이 조각처럼 쉽게 뒤집어지는 트럼프의 특성에 집중했음</li>\n<li>객체지향 패러다임을 통해 세상을 바라보는 경우 분류와 일반화/특수화 기법을 동시에 적용하게 됨</li>\n</ul>\n</li>\n</ol>\n<br>\n<h2 id=\"정적-모델\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EC%A0%81-%EB%AA%A8%EB%8D%B8\" aria-label=\"정적 모델 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정적 모델</h2>\n<ol>\n<li>\n<p>타입의 목적</p>\n<ul>\n<li>앨리스의 키는 앨리스가 어떤 음식을 먹거나 어떤 행동을 할 때마다 시시각각 변함. 하지만 모든 경우 앨리스는 앨리스일 뿐. 앨리스 객체의 상태는 변하지만, 앨리스를 다른 객체와 구별할 수 있는 식별성은 동일하게 유지됨</li>\n<li>타입은 시간에 따라 동적으로 변하는 앨리스의 상태를 시간과 무관한 정적인 모습으로 다룰 수 있게 해줌</li>\n</ul>\n</li>\n<li>\n<p>결국 타입은 추상화</p>\n<ul>\n<li>어떤 시점에 앨리스에 관해 생각할 때 불필요한 시간이라는 요소와 상태 변화라는 요소를 제거하고 철저하게 정적인 관점에서 앨리스의 모습을 묘사할 수 있음</li>\n<li>타입을 이용하면 객체의 동적인 특성을 추상화할 수 있음. 결국 타입은 시간에 따른 객체의 상태 변경이라는 복잡성을 단순화할 수 있는 효과적인 방법</li>\n</ul>\n</li>\n<li>\n<p>동적 모델과 정적 모델</p>\n<ul>\n<li>객체를 생각할 때 우리는 두 가지 모델을 동시에 고려</li>\n<li>객체가 특정 시점에 구체적으로 어떤 상태를 가지는지 → 동적 모델(dynamic model)</li>\n<li>객체가 가질 수 있는 모든 상태와 모든 행동을 시간에 독립적으로 표현하는 것 → 정적 모델(static model) -> 객체지향 애플리케이션을 설계하고 구현하기 위해서는 객체 관점의 동적 모델과 객체를 추상화한 타입 관점의 정적 모델을 적절히 혼용해야 함</li>\n</ul>\n</li>\n<li>\n<p>클래스</p>\n<ul>\n<li>타입을 구현하는 가장 보편적인 방법은 클래스를 이용하는 것</li>\n<li>클래스 != 타입 -> 클래스는 타입을 구현할 수 있는 여러 구현 메커니즘 중 하나</li>\n<li>결국 객체지향에서 중요한 것은 동적으로 변하는 객체의 ‘상태’와 상태를 변경하는 ‘행위’</li>\n</ul>\n</li>\n</ol>\n<br>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<ul>\n<li><a href=\"https://www.yes24.com/Product/Goods/18249021\">객체지향의 사실과 오해</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%ED%83%80%EC%9E%85%EA%B3%BC-%EC%B6%94%EC%83%81%ED%99%94\">타입과 추상화</a></li>\n<li><a href=\"#%EC%B6%94%EC%83%81%ED%99%94%EB%A5%BC-%ED%86%B5%ED%95%9C-%EB%B3%B5%EC%9E%A1%EC%84%B1-%EA%B7%B9%EB%B3%B5\">추상화를 통한 복잡성 극복</a></li>\n<li><a href=\"#%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5%EA%B3%BC-%EC%B6%94%EC%83%81%ED%99%94\">객체지향과 추상화</a></li>\n<li><a href=\"#%ED%83%80%EC%9E%85\">타입</a></li>\n<li><a href=\"#%ED%83%80%EC%9E%85%EC%9D%98-%EA%B3%84%EC%B8%B5\">타입의 계층</a></li>\n<li><a href=\"#%EC%A0%95%EC%A0%81-%EB%AA%A8%EB%8D%B8\">정적 모델</a></li>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>\n</div>","frontmatter":{"date":"November 23, 2023","title":"객체지향의 사실과 오해 - 3장","categories":"Study","author":"Kay","emoji":"👋"},"fields":{"slug":"/oop-fact-and-misunderstand-3/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/write-log-231125/","nextSlug":"/oop-fact-and-misunderstand-3/","prevSlug":""}},"staticQueryHashes":["1073350324","2938748437"]}