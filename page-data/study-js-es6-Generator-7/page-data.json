{"componentChunkName":"component---src-templates-blog-template-js","path":"/study-js-es6-Generator-7/","result":{"data":{"cur":{"id":"6381d856-d533-5093-a35d-d62058476f8f","html":"<br>\n<h1 align=\"center\">\n  👋  제너레이터 오브젝트 메소드: return(), throw()\n</h1>\n<h2 id=\"1-return\" style=\"position:relative;\"><a href=\"#1-return\" aria-label=\"1 return permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. return()</h2>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">sports</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">count</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token operator\">++</span>count<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token function\">sports</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {value: 11, done: false}</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">return</span><span class=\"token punctuation\">(</span><span class=\"token number\">70</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {value: 70, done: true}</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {value: undefined, done: true}</span>\n\n<span class=\"token comment\">// 1. obj.return(70) 이터레이터를 종료 시키며 파라미터 값 70을 반환</span>\n<span class=\"token comment\">// 2. obj.next(50) 이터레이터가 종료되었으므로 {value: undefined, done: true} 반환</span>\n<span class=\"token comment\">// 3. 파라미터 값 50을 반환하지 않음</span></code></pre></div>\n<ul>\n<li>이터레이터를 종료 시킴</li>\n<li><code class=\"language-text\">return()</code> 파라미터 값을 <code class=\"language-text\">{ value: 값, done: true }</code></li>\n<li><code class=\"language-text\">value</code> 프로퍼티 값으로 설정</li>\n</ul>\n<br>\n<h2 id=\"2-throw\" style=\"position:relative;\"><a href=\"#2-throw\" aria-label=\"2 throw permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. throw()</h2>\n<ul>\n<li><code class=\"language-text\">Error</code>를 의도적으로 발생 시킴</li>\n<li>\n<p>제너레이터 함수의 <code class=\"language-text\">catch()</code> 문에서 에러를 받음</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">sports</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t\ttield <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">yield</span> message<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">yield</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token function\">sports</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">throw</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"에러 발생\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1. obj.throw(\"에러 발생\")를 실행하면 sports()의 catch(message)가 실행되고 \"에러 발생\"이 message에 설정됨</span>\n<span class=\"token comment\">// 2. catch()의 yield message를 수행하게 되며 {value: \"에러 발생\", done: false}를 반환함 제너레이터가 종료되지 않음</span>\n<span class=\"token comment\">// 3. 다음의 obj.next() 호출 throw() 호출로 인해 에러가 발생하지만 {done: false}이므로 next()를 호출할 수 있음</span>\n<span class=\"token comment\">// 4. yeild 20;을 실행하게 되며 {value: 20, done: flase}를 반환함</span></code></pre></div>\n</li>\n<li>\n<p>제너레이터 함수에 <code class=\"language-text\">throw</code> 문을 작성</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">sports</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">throw</span> <span class=\"token string\">'에러 발생'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">yield</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token function\">sports</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1. const result = obj.next();를 실행하면 제너레이터 함수에서 throw로 인해 에러가 발생</span>\n<span class=\"token comment\">// 2. 그래서 next()를 try문에 작성했음</span>\n<span class=\"token comment\">// 3. try문의 catch(message)에서 에러를 받음</span>\n<span class=\"token comment\">// 4. throw \"에러 발생\"에서 \"에러 발생\"이 message에 설정됨</span>\n<span class=\"token comment\">// 5. 제너레이터 함수에서 에러가 발생하면 이터레이터가 종료됨</span>\n<span class=\"token comment\">// 6. 마지막 줄에서 obj.next()를 호출하면 제너레이터가 실행되지 않음</span>\n<span class=\"token comment\">// 7. 제너레이터 함수에 yield 10이 있지만 {value: undefined, done: true} 반환</span></code></pre></div>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1-return\">1. return()</a></li>\n<li><a href=\"#2-throw\">2. throw()</a></li>\n</ul>\n</div>","excerpt":"1. return() 이터레이터를 종료 시킴  파라미터 값을   프로퍼티 값으로 설정 2. throw() 를 의도적으로 발생 시킴 제너레이터 함수의  문에서 에러를 받음 제너레이터 함수에  문을 작성 1. return() 2. throw()","frontmatter":{"date":"October 16, 2021","title":"제너레이터 오브젝트 메소드 - return(), throw()","categories":"JS","author":"Kay","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-Generator-7/"}},"next":{"id":"9a092105-aa48-5849-88fd-7f17b9e14320","html":"<br>\n<h1 align=\"center\">\n  👋  yield 분할 할당, for-of 반복\n</h1>\n<h2 id=\"1-yield-분할-할당\" style=\"position:relative;\"><a href=\"#1-yield-%EB%B6%84%ED%95%A0-%ED%95%A0%EB%8B%B9\" aria-label=\"1 yield 분할 할당 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. yield 분할 할당</h2>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">sports</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">yield</span> <span class=\"token keyword\">yield</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token function\">sports</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {value: undefined, done: false}</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {value: 10, done: false}</span>\n\n<span class=\"token keyword\">const</span> last <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {value: [20], done: true}</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>last<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [20]</span></code></pre></div>\n<ul>\n<li>\n<p>대괄호<code class=\"language-text\">[ ]</code> 안에 다수의 <code class=\"language-text\">yield</code> 작성</p>\n<ul>\n<li><code class=\"language-text\">return [yield yield];</code></li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">next()</code>, <code class=\"language-text\">next(10)</code> 호출</p>\n<ul>\n<li><code class=\"language-text\">yield</code> 를 연속해서 작성한 것과 같음</li>\n<li><code class=\"language-text\">yield</code> 를 2개 모두 수행했으므로 더 이상 처리할 <code class=\"language-text\">yield</code> 가 없음</li>\n</ul>\n</li>\n<li>\n<p>세 번째 <code class=\"language-text\">next(20)</code> 호출</p>\n<ul>\n<li>파라미터 값 : 20</li>\n<li><code class=\"language-text\">return [yield, yield]</code>에서</li>\n<li><code class=\"language-text\">{value: [20], done: true}</code> 형태로 반환</li>\n<li><code class=\"language-text\">[20]</code>처럼 <code class=\"language-text\">[ ]</code> 안에 파라미터 값 20을 넣어서 반환</li>\n</ul>\n</li>\n<li><code class=\"language-text\">console.log()</code> 에 <code class=\"language-text\">{value: Array(1)}</code> 형태로 표시되지만 가독성을 위해 편집 함</li>\n</ul>\n<br>\n<h2 id=\"2-for-of-문으로-반복\" style=\"position:relative;\"><a href=\"#2-for-of-%EB%AC%B8%EC%9C%BC%EB%A1%9C-%EB%B0%98%EB%B3%B5\" aria-label=\"2 for of 문으로 반복 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. for-of 문으로 반복</h2>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">sports</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">count</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token operator\">++</span>count<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> point <span class=\"token keyword\">of</span> <span class=\"token function\">sports</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>point <span class=\"token operator\">></span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 11</span>\n<span class=\"token comment\">// 12</span>\n<span class=\"token comment\">// 13</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">for-of</code> 문으로 제너레이터를 반복 호출</li>\n<li>\n<p>처음 <code class=\"language-text\">for-of</code> 문을 시작하면</p>\n<ul>\n<li><code class=\"language-text\">sports(10)</code> 으로 제너레이터 오브젝트를 생성함</li>\n<li>제너레이터 오브젝트에 10이 설정됨</li>\n<li>생성한 제너레이터 오브젝트를 저장할 변수가 없으며 엔진 내부에 저장함</li>\n<li><code class=\"language-text\">const engine = sports(10);</code> 과 같으며 <code class=\"language-text\">engine</code>이 엔진 내부의 이름으로 가정함</li>\n</ul>\n</li>\n<li>\n<p>다시 <code class=\"language-text\">sports*()</code> 를 호출 함</p>\n<ul>\n<li><code class=\"language-text\">engine.next()</code> 와 같지만 반환 값이 다름</li>\n<li><code class=\"language-text\">while(true){ yield ++count }</code>를 실행 함</li>\n<li><code class=\"language-text\">{value: 11, done: false}</code> 를 반환하지 않고 <code class=\"language-text\">value</code> 만 <code class=\"language-text\">point</code> 변수에 설정함</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">{done: true}</code> 로 종료 처리를 할 수 없으므로</p>\n<ul>\n<li><code class=\"language-text\">break;</code> 를 사용하여 종료시켜야 함</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">for-of</code> 블록을 실행함</p>\n<ul>\n<li>11을 출력 함</li>\n<li><code class=\"language-text\">value</code> 값이 11이므로 다시 <code class=\"language-text\">for-of</code> 문을 수행</li>\n<li><code class=\"language-text\">while(true){ yield ++count}</code> 를 수행</li>\n</ul>\n</li>\n<li>\n<p>이렇게 <code class=\"language-text\">break;</code> 를 만날 때 까지</p>\n<ul>\n<li>반복하여 <code class=\"language-text\">yield ++count;</code> 를 실행 함</li>\n</ul>\n</li>\n</ul>\n<br>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1-yield-%EB%B6%84%ED%95%A0-%ED%95%A0%EB%8B%B9\">1. yield 분할 할당</a></li>\n<li><a href=\"#2-for-of-%EB%AC%B8%EC%9C%BC%EB%A1%9C-%EB%B0%98%EB%B3%B5\">2. for-of 문으로 반복</a></li>\n</ul>\n</div>","frontmatter":{"date":"October 15, 2021","title":"yield 분할 할당, for-of 반복","categories":"JS","author":"Kay","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-Generator-6/"}},"prev":{"id":"eb7980c4-66af-5169-8036-59223c90dde6","html":"<br>\n<h1 align=\"center\">\n  👋  yield* 표현식\n</h1>\n<h2 id=\"code-classlanguage-textyieldcode\" style=\"position:relative;\"><a href=\"#code-classlanguage-textyieldcode\" aria-label=\"code classlanguage textyieldcode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">yield*</code></h2>\n<ul>\n<li><code class=\"language-text\">Syntax: yield*</code> 표현식</li>\n<li><code class=\"language-text\">yield*</code> 의 표현식에 따라 처리하는 방법이 다름</li>\n<li>\n<p><code class=\"language-text\">yield*</code>의 표현식이 배열</p>\n<ul>\n<li><code class=\"language-text\">next()</code> 로 호출할 때마다 배열의 엘리먼트를 하나씩 처리</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">sports</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">yield</span><span class=\"token operator\">*</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token function\">sports</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1. 첫 번째의 obj.next()를 호출하면 yield* [10,20]에서 10을 반환함 {value: 10, done: false} 반환</span>\n<span class=\"token comment\">// 2. 두 번째의 obj.next()를 호출하면 yield* [10,20]에서 20을 반환함 {value: 20, done: false} 반환</span>\n<span class=\"token comment\">// 3. yield*의 표현식이 배열이면 next()를 호출할 때마다 배열의 엘리먼트를 순서대로 반환함</span></code></pre></div>\n</li>\n</ul>\n<br>\n<ul>\n<li>\n<p><code class=\"language-text\">yield*</code>의 표현식이 제너레이터 함수</p>\n<ul>\n<li>함수의 <code class=\"language-text\">yield</code>를 먼저 처리</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">point</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">count</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">yield</span> count <span class=\"token operator\">+</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">yield</span> count <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">sports</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">yield</span><span class=\"token operator\">*</span> <span class=\"token function\">point</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">yield</span> value <span class=\"token operator\">+</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token function\">sports</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {value: 15, done: false}</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {value: 20, done: false}</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {value: 30, done: false}</span>\n\n<span class=\"token comment\">// 1. 첫 번째의 obj.next()를 호출하면 yield* point(value)를 실행합니다.</span>\n<span class=\"token comment\">// 2. yield*의 표현식에 함수를 작성했으므로 point(value)를 호출함, point()가 제너레이터 함수이므로 우선, 제너레이터 오브젝트를 생성함</span>\n<span class=\"token comment\">// 3. next()로 호출해야 yield가 수행되지만 자동적으로 point() 첫 번째의 yield count+5를 수행함, {value: 15, done: false} 반환</span>\n<span class=\"token comment\">// 4. 다시 point()를 호출한 곳에서 반환 값을 받아 반환함</span>\n<span class=\"token comment\">// 5. 두 번째의 obje.next()를 호출함 point()의 yield count +10를 실행 함 {value: 20, done: false} 반환</span>\n<span class=\"token comment\">// 6. 세 번째의 obj.next()를 호출함 point()의 yield를 모두 처리 했으므로 sports()의 yield value +20을 실행하며 {value: 30, done: false} 반환</span></code></pre></div>\n</li>\n</ul>\n<br>\n<ul>\n<li>\n<p><code class=\"language-text\">yield*</code> 표현식에서 자신 호출</p>\n<ul>\n<li>재귀 호출</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">sports</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">point</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">yield</span> point<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">yield</span><span class=\"token operator\">*</span> <span class=\"token function\">sports</span><span class=\"token punctuation\">(</span>point <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token function\">sports</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {value: 10, done: false}</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {value: 20, done: false}</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {value: 30, done: false}</span>\n\n<span class=\"token comment\">// 1. 첫 번째의 obj.next()를 호출하면 yield point를 실행 {value: 10, done: false} 반환</span>\n<span class=\"token comment\">// 2. 두 번째의 obj.next()를 호출함, yield* sports(point + 10)에서 자신을 호출 함, 첫 번째 줄의 yield point를 실행 {value: 20, done: false} 반환</span>\n<span class=\"token comment\">// 3. 세 번째의 obj.next()를 호출함, yield* sports(point + 10)에서 자신을 호출 함, 첫 번째 줄의 yield point를 실행 {value: 30, done: false} 반환</span>\n<span class=\"token comment\">// 4. 주의 : yield point가 없으면 무한 반복 함</span></code></pre></div>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#yield\"><code class=\"language-text\">yield*</code></a></li>\n</ul>\n</div>","frontmatter":{"date":"October 17, 2021","title":"yield* 표현식","categories":"JS","author":"Kay","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-Generator-8/"}},"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":"zoomkoding/zoomkoding-gatsby-blog"}}}}},"pageContext":{"slug":"/study-js-es6-Generator-7/","nextSlug":"/study-js-es6-Generator-6/","prevSlug":"/study-js-es6-Generator-8/"}},"staticQueryHashes":["1073350324","2938748437"]}