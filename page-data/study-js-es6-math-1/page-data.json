{"componentChunkName":"component---src-templates-blog-template-js","path":"/study-js-es6-math-1/","result":{"data":{"cur":{"id":"b6b0644c-513c-57af-94ab-c62d2a60ffdc","html":"<br>\n<h1 align=\"center\">\n  👋  Math 오브젝트\n</h1>\n<br>\n<h2 id=\"1-math-오브젝트\" style=\"position:relative;\"><a href=\"#1-math-%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8\" aria-label=\"1 math 오브젝트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Math 오브젝트</h2>\n<ul>\n<li>\n<p>ES5까지는 수학 계산 처리에 부족했으나</p>\n<ul>\n<li>ES6에서 수학 계산용 함수가 많이 추가됨</li>\n<li>특히, 머신러닝/딥러닝에 대응 할 수 있게 됨</li>\n</ul>\n</li>\n<li>일반적으로 수학 계산을 사용하지 않으므로 개요 중심으로 다룸</li>\n</ul>\n<br>\n<h2 id=\"2-정수-제곱근-사인\" style=\"position:relative;\"><a href=\"#2-%EC%A0%95%EC%88%98-%EC%A0%9C%EA%B3%B1%EA%B7%BC-%EC%82%AC%EC%9D%B8\" aria-label=\"2 정수 제곱근 사인 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 정수, 제곱근, 사인</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">Math.trunc()</code></p>\n<ul>\n<li>소수를 제외한 정수 반환</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">trunc</span><span class=\"token punctuation\">(</span><span class=\"token number\">12.56</span><span class=\"token punctuation\">)</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token number\">12.56</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 12, 12</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">trunc</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">12.56</span><span class=\"token punctuation\">)</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span><span class=\"token number\">12.56</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// -12, -12</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">trunc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"45.67\"</span><span class=\"token punctuation\">)</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 45, 1</span>\n\n<span class=\"token comment\">// 값이 양수이면 Math.floor()와 같고</span>\n<span class=\"token comment\">// 값이 음수이면 Math.ceil()과 같음</span>\n<span class=\"token comment\">// 우선, Number 타입으로 변환후 결과값으로 함수를 실행 함</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">Math.sign()</code></p>\n<ul>\n<li>값의 보후에 해당하는 값</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">sign</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">sign</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1, -1</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">sign</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">sign</span><span class=\"token punctuation\">(</span><span class=\"token string\">'123'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0, 1</span>\n\n<span class=\"token comment\">// 값이 양수이면 1을, 아니면 -1을 반환</span>\n<span class=\"token comment\">// +0 또는 -0이면 0을 반환</span>\n<span class=\"token comment\">// Number 타입으로 변환하여 실행</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">Math.hypot()</code> : 제곱근</p>\n<ul>\n<li>각 파라미터 값을 제곱하여 합산하고</li>\n<li>합한 값의 제곱근을 반환</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">hypot</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">hypot</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 7</span>\n\n<span class=\"token comment\">// 3의 제곱은 9이고, 4의 제곱은 16 (9+16) = 25</span>\n<span class=\"token comment\">// 25의 제곱근을 구하면 5</span>\n<span class=\"token comment\">// 파라미터가 하나일 때는 Math.abs()와 같음</span></code></pre></div>\n</li>\n<li><code class=\"language-text\">Math.cbrt()</code> : 세제곱근</li>\n</ul>\n<br>\n<h2 id=\"3-hyperbolic쌍곡\" style=\"position:relative;\"><a href=\"#3-hyperbolic%EC%8C%8D%EA%B3%A1\" aria-label=\"3 hyperbolic쌍곡 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Hyperbolic(쌍곡)</h2>\n<ul>\n<li><code class=\"language-text\">Math.sinh()</code> : 쌍곡 사인</li>\n<li><code class=\"language-text\">Math.asinh()</code> : 쌍곡 아크사인</li>\n<li><code class=\"language-text\">Math.cosh()</code> : 쌍곡 코사인</li>\n<li><code class=\"language-text\">Math.acosh()</code> : 쌍곡 아크코사인</li>\n<li><code class=\"language-text\">Math.tanh()</code> : 쌍곡 탄젠트</li>\n<li><code class=\"language-text\">Math.atanh()</code> : 쌍곡 아크탄젠트</li>\n</ul>\n<br>\n<h2 id=\"4-로그\" style=\"position:relative;\"><a href=\"#4-%EB%A1%9C%EA%B7%B8\" aria-label=\"4 로그 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 로그</h2>\n<ul>\n<li><code class=\"language-text\">Math.log2()</code> : 2를 밑으로 한 로그 값</li>\n<li><code class=\"language-text\">Math.log10()</code> : 10를 밑으로 한 로그 값</li>\n<li><code class=\"language-text\">Math.log1p()</code> : <code class=\"language-text\">Math.log(1 + 파라미터 값)</code></li>\n<li>\n<p><code class=\"language-text\">Math.expm1()</code></p>\n<ul>\n<li>자연 로그 상수(e)의 x승 -1</li>\n<li>x는 파라미터 값, <code class=\"language-text\">(Math.exp(x) - 1)</code>과 같음</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"5-32비트-계산\" style=\"position:relative;\"><a href=\"#5-32%EB%B9%84%ED%8A%B8-%EA%B3%84%EC%82%B0\" aria-label=\"5 32비트 계산 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. 32비트 계산</h2>\n<ul>\n<li>Emscripten에 대처하기 위한 것</li>\n<li>C, C++를 JS로 컴파일 하기 위한 방법</li>\n<li>\n<p><code class=\"language-text\">Math.imul()</code></p>\n<ul>\n<li>곱한 값을 32비트로 반환</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">Math.clz32()</code></p>\n<ul>\n<li>32비트 값에서 비트 값이 0인 수</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">Math.fround()</code></p>\n<ul>\n<li>32 비트 유동 소수 값으로 변환, 반올림</li>\n</ul>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1-math-%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8\">1. Math 오브젝트</a></li>\n<li><a href=\"#2-%EC%A0%95%EC%88%98-%EC%A0%9C%EA%B3%B1%EA%B7%BC-%EC%82%AC%EC%9D%B8\">2. 정수, 제곱근, 사인</a></li>\n<li><a href=\"#3-hyperbolic%EC%8C%8D%EA%B3%A1\">3. Hyperbolic(쌍곡)</a></li>\n<li><a href=\"#4-%EB%A1%9C%EA%B7%B8\">4. 로그</a></li>\n<li><a href=\"#5-32%EB%B9%84%ED%8A%B8-%EA%B3%84%EC%82%B0\">5. 32비트 계산</a></li>\n</ul>\n</div>","excerpt":"1. Math 오브젝트 ES5까지는 수학 계산 처리에 부족했으나 ES6에서 수학 계산용 함수가 많이 추가됨 특히, 머신러닝/딥러닝에 대응 할 수 있게 됨 일반적으로 수학 계산을 사용하지 않으므로 개요 중심으로 다룸 2. 정수, 제곱근, 사인  소수를 제외한 정수 반환  값의 보후에 해당하는 값  : 제곱근 각 파라미터 값을 제곱하여 합산하고 합한 값의 제곱근을 반환  : 세제곱근 3. Hyperbolic(쌍곡)  : 쌍곡 사인  : 쌍곡 아크사인  : 쌍곡 코사인  : 쌍곡 아크코사인  : 쌍곡 탄젠트  : 쌍곡 아크탄젠트 4. 로그  : 2를 밑으로 한 로그 값  : 10를 밑으로 한 로그 값  :   자연 로그 상수(e)의 x승 -1 x는 파라미터 값, 과 같음 5. 32비트 계산 Emscripten에 대처하기 위한 것 C, C++를 JS로 컴파일 하기 위한 방법  곱한 값을 32비트로 반환  32비트 값에서 비트 값이 0인 수  32 비트 유동 소수 값으로 변환, 반올림 1.…","frontmatter":{"date":"October 06, 2021","title":"Math 오브젝트","categories":"JS","author":"Kay","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-math-1/"}},"next":{"id":"103f7dcb-1b01-5fa3-bca8-b87a96f3ed03","html":"<br>\n<h1 align=\"center\">\n  👋  keys(), values()\n</h1>\n<br>\n<h2 id=\"1-keys\" style=\"position:relative;\"><a href=\"#1-keys\" aria-label=\"1 keys permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. keys()</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">Array</code> 오브젝트를 <code class=\"language-text\">Array</code> 이터레이터 오브젝트로 생성, 반환</p>\n<ul>\n<li><code class=\"language-text\">entries()</code>와 같으며</li>\n<li><code class=\"language-text\">[key, value]</code> 형태에서 <code class=\"language-text\">value</code>는 반환하지 않고 <code class=\"language-text\">key</code>만 반환</li>\n</ul>\n</li>\n<li>\n<p>배열 인덱스가 <code class=\"language-text\">key</code>가 됨</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> iterator <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">og</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {value: 0, done: false}</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">og</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {value: 1, done: false}</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">og</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {valude: undefined, done: true}</span>\n\n<span class=\"token comment\">// 1. 생성한 Array 이터레이터 오브젝트는 [key] 형태임</span>\n<span class=\"token comment\">// 2. value에 인덱스가 설정됨</span></code></pre></div>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> iterator <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> property <span class=\"token keyword\">of</span> iterator<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>property<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 1. key만 설정되므로 값이 하나, 따라서 분할 할당을 하지 않아도 됨</span>\n<span class=\"token comment\">// 결과 : 0, 1</span></code></pre></div>\n</li>\n</ul>\n<br>\n<h2 id=\"2-values\" style=\"position:relative;\"><a href=\"#2-values\" aria-label=\"2 values permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. values()</h2>\n<ul>\n<li><code class=\"language-text\">Array</code> 오브젝트를 <code class=\"language-text\">Array</code> 이터레이터 오브젝트로 생성, 반환</li>\n<li><code class=\"language-text\">[key, value]</code> 형태에서 <code class=\"language-text\">value</code>는 반환하고 <code class=\"language-text\">key</code> 반환하지 않음</li>\n<li>\n<p>배열의 엘리먼트 값이 <code class=\"language-text\">value</code>가 됨</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> iterator <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">og</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {value: A, done: false}</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">og</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {value: B, done: false}</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">og</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {valude: undefined, done: true}</span>\n\n<span class=\"token comment\">// 1. 생성한 Array 이터레이터 오브젝트는 [value] 형태임</span>\n\n<span class=\"token keyword\">const</span> iterator <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> property <span class=\"token keyword\">of</span> iterator<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>property<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 1. value만 설정되므로 값이 하나</span>\n<span class=\"token comment\">// 결과 : A, B</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">[Symbol.iterator]()</code> 사용</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> check <span class=\"token operator\">=</span> <span class=\"token builtin\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>values <span class=\"token operator\">===</span> <span class=\"token builtin\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>check<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n\n<span class=\"token keyword\">const</span> iterator <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> property <span class=\"token keyword\">of</span> iterator<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>property<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// A, B</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 1. Array.prototype.values()와 Array.prototype[Symbol.iterator]가 같음</span>\n<span class=\"token comment\">// 2. 따라서 values() 대신에 [Symbol.iterator]()를 사용해도 결과가 같음</span></code></pre></div>\n</li>\n<li>\n<p>값이 연동 됨</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">let</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> iterator <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nlist<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'연동'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {value: 연동, done: false}</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {value: B, done: false}</span>\n\n<span class=\"token comment\">// Array 이터레이터 오브젝트에서 배열의 메모리 주소를 참조하므로 값이 연동 됨</span></code></pre></div>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1-keys\">1. keys()</a></li>\n<li><a href=\"#2-values\">2. values()</a></li>\n</ul>\n</div>","frontmatter":{"date":"October 05, 2021","title":"keys(), values()","categories":"JS","author":"Kay","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-array-7/"}},"prev":{"id":"3f7fba0a-232f-5ddf-9af9-a61c2fe955c0","html":"<br>\n<h1 align=\"center\">\n  👋  lastIndex\n</h1>\n<br>\n<h2 id=\"lastindex\" style=\"position:relative;\"><a href=\"#lastindex\" aria-label=\"lastindex permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>lastIndex</h2>\n<ul>\n<li>\n<p>정규 표현식 사용 형태</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> <span class=\"token string\">'ABC'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'g'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> reg <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">A</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1. const obj = new RegExp(\"A\", \"g\"); RegExp 인스턴스를 생성함</span>\n<span class=\"token comment\">// A로 매치 대상에 매치 함</span>\n<span class=\"token comment\">// g 플래그는 모두 매치 함</span>\n<span class=\"token comment\">// 2. obj.text(value) obj에 설정된 A를 ABC에 매치하며 A가 있으므로 true를 반환</span>\n<span class=\"token comment\">// 3. const reg = /A/g 정규 표현식 리터럴을 사용한 형태 임</span>\n<span class=\"token comment\">// new 연산자를 사용하지 않았을 뿐, 1번과 같음</span></code></pre></div>\n</li>\n<li>\n<p>매치 시작 위치를</p>\n<ul>\n<li>lastIndex 프로퍼티에 설정</li>\n<li>디폴트 값 : 0</li>\n</ul>\n</li>\n<li>\n<p>g 플래그를 사용하면</p>\n<ul>\n<li><code class=\"language-text\">lastIndex</code> 프로퍼티 위치부터 매치</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> <span class=\"token string\">'ABABAB'</span><span class=\"token punctuation\">,</span>\n  obj <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">B</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">': '</span> <span class=\"token operator\">+</span> obj<span class=\"token punctuation\">.</span>lastIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true: 2</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">': '</span> <span class=\"token operator\">+</span> obj<span class=\"token punctuation\">.</span>lastIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true: 4</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">': '</span> <span class=\"token operator\">+</span> obj<span class=\"token punctuation\">.</span>lastIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false: 0</span>\n\n<span class=\"token comment\">// 1. obj.test(value) B가 ABABAB 있으므로 매치되며 true 반환</span>\n<span class=\"token comment\">// 2. obj.lastIndex lastIndex 값으로 2가 출력 됨</span>\n<span class=\"token comment\">// B가 매치된 인덱스는 1이며 1을 더한 값임</span>\n<span class=\"token comment\">// 2가 다음에 매치를 시작 할 위치</span>\n\n<span class=\"token comment\">// 3. obj.test(value), lastIndex 값이 2이므로 대상 문자열의 2번 인덱스부터 B를 매치 함</span>\n<span class=\"token comment\">// 4. obj.lastIndex lastIndex 값으로 4가 출력 됨</span>\n<span class=\"token comment\">// B가 매치된 인덱스는 3이며 1을 더한 값</span>\n<span class=\"token comment\">// 5. g 플래그는 매치가 되면 lastIndex 값에 1을 더함</span>\n\n<span class=\"token comment\">// 6. obj.test(value) 대상 문자열의 4번 인덱스부터 B를 매치하며 매치가 되지 않아 false가 출력 됨</span>\n<span class=\"token comment\">// 7. obj.lastIndex 매치가 되지 않으면 lastIndex 값은 0이 됨</span></code></pre></div>\n</li>\n<li>\n<p>g 플래그를 사용하지 않으면</p>\n<ul>\n<li><code class=\"language-text\">lastIndex</code> 프로퍼티 값이 바뀌지 않음</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> <span class=\"token string\">'ABABAB'</span><span class=\"token punctuation\">,</span>\n  obj <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">B</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">': '</span> <span class=\"token operator\">+</span> obj<span class=\"token punctuation\">.</span>lastIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true: 0</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">': '</span> <span class=\"token operator\">+</span> obj<span class=\"token punctuation\">.</span>lastIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true: 0</span>\n\n<span class=\"token comment\">// 1. obj = /B/ g플래그를 사용하지 않았음</span>\n<span class=\"token comment\">// 2. obj.test(value) B가 ABABAB에 있으므로 매치되며 true 반환</span>\n<span class=\"token comment\">// 3. obj.lastIndex lastIndex 값이므로 0이 출력 됨, 0은 디폴트 값으로 값이 바뀌지 않음, g 플래그를 작성하지 않으면 값이 바뀌지 않음</span>\n<span class=\"token comment\">// 4. obj.test(value) 매치가 되어 true가 출력됨</span>\n<span class=\"token comment\">// 5. obj.lastIndex lastIndex 값으로 0이 출력됨</span></code></pre></div>\n<ul>\n<li>lastIndex 값을 지정해도 적용되지 않고 0 번 인덱스부터 배치</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> <span class=\"token string\">'ABABAB'</span><span class=\"token punctuation\">,</span>\n  obj <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">B</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">': '</span> <span class=\"token operator\">+</span> obj<span class=\"token punctuation\">.</span>lastIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true: 0</span>\n\nobj<span class=\"token punctuation\">.</span>lastIndex <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">': '</span> <span class=\"token operator\">+</span> obj<span class=\"token punctuation\">.</span>lastIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true: 2</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">': '</span> <span class=\"token operator\">+</span> obj<span class=\"token punctuation\">.</span>lastIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true: 2</span>\n\n<span class=\"token comment\">// 1. true: 0 매치가 되었으므로 1이 출력 되어야 함</span>\n<span class=\"token comment\">// 2. obj.lastIndex = 2 lastIndex에 2를 설정했으므로</span>\n<span class=\"token comment\">// 3. obj.test(value) 2번 인덱스부터 매치를 해야 하지만, 0번 인덱스부터 매치 해야 함</span>\n<span class=\"token comment\">// 4. 2번 인덱스부터 매치하면 B가 없으므로  false가 반환됨</span></code></pre></div>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#lastindex\">lastIndex</a></li>\n</ul>\n</div>","frontmatter":{"date":"October 07, 2021","title":"lastIndex","categories":"JS","author":"Kay","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-RegExp-1/"}},"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/study-js-es6-math-1/","nextSlug":"/study-js-es6-array-7/","prevSlug":"/study-js-es6-RegExp-1/"}},"staticQueryHashes":["1073350324","2938748437"]}