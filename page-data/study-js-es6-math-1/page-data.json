{"componentChunkName":"component---src-templates-blog-template-js","path":"/study-js-es6-math-1/","result":{"data":{"cur":{"id":"4bf12dc5-4ce1-5ca4-be0a-8af82c48c7b0","html":"<br>\n<h1 align=\"center\">\n  👋  Math 오브젝트\n</h1>\n<br>\n<h2 id=\"1-math-오브젝트\" style=\"position:relative;\"><a href=\"#1-math-%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8\" aria-label=\"1 math 오브젝트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Math 오브젝트</h2>\n<ul>\n<li>\n<p>ES5까지는 수학 계산 처리에 부족했으나</p>\n<ul>\n<li>ES6에서 수학 계산용 함수가 많이 추가됨</li>\n<li>특히, 머신러닝/딥러닝에 대응 할 수 있게 됨</li>\n</ul>\n</li>\n<li>일반적으로 수학 계산을 사용하지 않으므로 개요 중심으로 다룸</li>\n</ul>\n<br>\n<h2 id=\"2-정수-제곱근-사인\" style=\"position:relative;\"><a href=\"#2-%EC%A0%95%EC%88%98-%EC%A0%9C%EA%B3%B1%EA%B7%BC-%EC%82%AC%EC%9D%B8\" aria-label=\"2 정수 제곱근 사인 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 정수, 제곱근, 사인</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">Math.trunc()</code></p>\n<ul>\n<li>소수를 제외한 정수 반환</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">console.log(Math.trunc(12.56) Math.floor(12.56)) // 12, 12\nconsole.log(Math.trunc(-12.56) Math.ceil(12.56)) // -12, -12\nconsole.log(Math.trunc(&quot;45.67&quot;) Math.floor(true)) // 45, 1\n\n// 값이 양수이면 Math.floor()와 같고\n// 값이 음수이면 Math.ceil()과 같음\n// 우선, Number 타입으로 변환후 결과값으로 함수를 실행 함</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p><code class=\"language-text\">Math.sign()</code></p>\n<ul>\n<li>값의 보후에 해당하는 값</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">console.log(Math.sign(5), Math.sign(-5)); // 1, -1\nconsole.log(Math.sign(0), Math.sign(&#39;123&#39;)); // 0, 1\n\n// 값이 양수이면 1을, 아니면 -1을 반환\n// +0 또는 -0이면 0을 반환\n// Number 타입으로 변환하여 실행</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p><code class=\"language-text\">Math.hypot()</code> : 제곱근</p>\n<ul>\n<li>각 파라미터 값을 제곱하여 합산하고</li>\n<li>합한 값의 제곱근을 반환</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">console.log(Math.hypot(3, 4)); // 5\nconsole.log(Math.hypot(-7)); // 7\n\n// 3의 제곱은 9이고, 4의 제곱은 16 (9+16) = 25\n// 25의 제곱근을 구하면 5\n// 파라미터가 하나일 때는 Math.abs()와 같음</code>\n        </deckgo-highlight-code>\n</li>\n<li><code class=\"language-text\">Math.cbrt()</code> : 세제곱근</li>\n</ul>\n<br>\n<h2 id=\"3-hyperbolic쌍곡\" style=\"position:relative;\"><a href=\"#3-hyperbolic%EC%8C%8D%EA%B3%A1\" aria-label=\"3 hyperbolic쌍곡 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Hyperbolic(쌍곡)</h2>\n<ul>\n<li><code class=\"language-text\">Math.sinh()</code> : 쌍곡 사인</li>\n<li><code class=\"language-text\">Math.asinh()</code> : 쌍곡 아크사인</li>\n<li><code class=\"language-text\">Math.cosh()</code> : 쌍곡 코사인</li>\n<li><code class=\"language-text\">Math.acosh()</code> : 쌍곡 아크코사인</li>\n<li><code class=\"language-text\">Math.tanh()</code> : 쌍곡 탄젠트</li>\n<li><code class=\"language-text\">Math.atanh()</code> : 쌍곡 아크탄젠트</li>\n</ul>\n<br>\n<h2 id=\"4-로그\" style=\"position:relative;\"><a href=\"#4-%EB%A1%9C%EA%B7%B8\" aria-label=\"4 로그 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 로그</h2>\n<ul>\n<li><code class=\"language-text\">Math.log2()</code> : 2를 밑으로 한 로그 값</li>\n<li><code class=\"language-text\">Math.log10()</code> : 10를 밑으로 한 로그 값</li>\n<li><code class=\"language-text\">Math.log1p()</code> : <code class=\"language-text\">Math.log(1 + 파라미터 값)</code></li>\n<li>\n<p><code class=\"language-text\">Math.expm1()</code></p>\n<ul>\n<li>자연 로그 상수(e)의 x승 -1</li>\n<li>x는 파라미터 값, <code class=\"language-text\">(Math.exp(x) - 1)</code>과 같음</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"5-32비트-계산\" style=\"position:relative;\"><a href=\"#5-32%EB%B9%84%ED%8A%B8-%EA%B3%84%EC%82%B0\" aria-label=\"5 32비트 계산 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. 32비트 계산</h2>\n<ul>\n<li>Emscripten에 대처하기 위한 것</li>\n<li>C, C++를 JS로 컴파일 하기 위한 방법</li>\n<li>\n<p><code class=\"language-text\">Math.imul()</code></p>\n<ul>\n<li>곱한 값을 32비트로 반환</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">Math.clz32()</code></p>\n<ul>\n<li>32비트 값에서 비트 값이 0인 수</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">Math.fround()</code></p>\n<ul>\n<li>32 비트 유동 소수 값으로 변환, 반올림</li>\n</ul>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","excerpt":"1. Math 오브젝트 ES5까지는 수학 계산 처리에 부족했으나 ES6에서 수학 계산용 함수가 많이 추가됨 특히, 머신러닝/딥러닝에 대응 할 수 있게 됨 일반적으로 수학 계산을 사용하지 않으므로 개요 중심으로 다룸 2. 정수, 제곱근, 사인  소수를 제외한 정수 반환  값의 보후에 해당하는 값  : 제곱근 각 파라미터 값을 제곱하여 합산하고 합한 값의 제곱근을 반환  : 세제곱근 3. Hyperbolic(쌍곡)  : 쌍곡 사인  : 쌍곡 아크사인  : 쌍곡 코사인  : 쌍곡 아크코사인  : 쌍곡 탄젠트  : 쌍곡 아크탄젠트 4. 로그  : 2를 밑으로 한 로그 값  : 10를 밑으로 한 로그 값  :   자연 로그 상수(e)의 x승 -1 x는 파라미터 값, 과 같음 5. 32비트 계산 Emscripten에 대처하기 위한 것 C, C++를 JS로 컴파일 하기 위한 방법  곱한 값을 32비트로 반환  32비트 값에서 비트 값이 0인 수  32 비트 유동 소수 값으로 변환, 반올림","frontmatter":{"date":"October 06, 2021","title":"Math 오브젝트","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-math-1/"}},"next":{"id":"44e7f961-f997-5349-838d-d451fd2d6e68","html":"<br>\n<h1 align=\"center\">\n  👋  keys(), values()\n</h1>\n<br>\n<h2 id=\"1-keys\" style=\"position:relative;\"><a href=\"#1-keys\" aria-label=\"1 keys permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. keys()</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">Array</code> 오브젝트를 <code class=\"language-text\">Array</code> 이터레이터 오브젝트로 생성, 반환</p>\n<ul>\n<li><code class=\"language-text\">entries()</code>와 같으며</li>\n<li><code class=\"language-text\">[key, value]</code> 형태에서 <code class=\"language-text\">value</code>는 반환하지 않고 <code class=\"language-text\">key</code>만 반환</li>\n</ul>\n</li>\n<li>\n<p>배열 인덱스가 <code class=\"language-text\">key</code>가 됨</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const iterator = [&#39;A&#39;, &#39;B&#39;].keys();\nconsole.og(iterator.next()); // {value: 0, done: false}\nconsole.og(iterator.next()); // {value: 1, done: false}\nconsole.og(iterator.next()); // {valude: undefined, done: true}\n\n// 1. 생성한 Array 이터레이터 오브젝트는 [key] 형태임\n// 2. value에 인덱스가 설정됨</code>\n        </deckgo-highlight-code>\n<br>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const iterator = [&#39;A&#39;, &#39;B&#39;].keys();\n\nfor (const property of iterator) {\nconsole.log(property);\n}\n\n// 1. key만 설정되므로 값이 하나, 따라서 분할 할당을 하지 않아도 됨\n// 결과 : 0, 1</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<h2 id=\"2-values\" style=\"position:relative;\"><a href=\"#2-values\" aria-label=\"2 values permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. values()</h2>\n<ul>\n<li><code class=\"language-text\">Array</code> 오브젝트를 <code class=\"language-text\">Array</code> 이터레이터 오브젝트로 생성, 반환</li>\n<li><code class=\"language-text\">[key, value]</code> 형태에서 <code class=\"language-text\">value</code>는 반환하고 <code class=\"language-text\">key</code> 반환하지 않음</li>\n<li>\n<p>배열의 엘리먼트 값이 <code class=\"language-text\">value</code>가 됨</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const iterator = [&#39;A&#39;, &#39;B&#39;].values();\nconsole.og(iterator.next()); // {value: A, done: false}\nconsole.og(iterator.next()); // {value: B, done: false}\nconsole.og(iterator.next()); // {valude: undefined, done: true}\n\n// 1. 생성한 Array 이터레이터 오브젝트는 [value] 형태임\n\nconst iterator = [&#39;A&#39;, &#39;B&#39;].values();\n\nfor (const property of iterator) {\nconsole.log(property);\n}\n\n// 1. value만 설정되므로 값이 하나\n// 결과 : A, B</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p><code class=\"language-text\">[Symbol.iterator]()</code> 사용</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const check = Array.prototype.values === Array.prototype[Symbol.iterator];\n\nconsole.log(check); // true\n\nconst iterator = [&#39;A&#39;, &#39;B&#39;][Symbol.iterator]();\n\nfor (const property of iterator) {\nconsole.log(property); // A, B\n}\n\n// 1. Array.prototype.values()와 Array.prototype[Symbol.iterator]가 같음\n// 2. 따라서 values() 대신에 [Symbol.iterator]()를 사용해도 결과가 같음</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>값이 연동 됨</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">let list = [&#39;A&#39;, &#39;B&#39;];\nlet iterator = list.values();\n\nlist[0] = &#39;연동&#39;;\n\nconsole.log(iterator.next()); // {value: 연동, done: false}\nconsole.log(iterator.next()); // {value: B, done: false}\n\n// Array 이터레이터 오브젝트에서 배열의 메모리 주소를 참조하므로 값이 연동 됨</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","frontmatter":{"date":"October 05, 2021","title":"keys(), values()","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-array-7/"}},"prev":{"id":"b248134c-a3ef-530d-b7be-a69cc16a18a6","html":"<br>\n<h1 align=\"center\">\n  👋  lastIndex\n</h1>\n<br>\n<h2 id=\"lastindex\" style=\"position:relative;\"><a href=\"#lastindex\" aria-label=\"lastindex permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>lastIndex</h2>\n<ul>\n<li>\n<p>정규 표현식 사용 형태</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const value = &#39;ABC&#39;;\nconst obj = new RegExp(&#39;A&#39;, &#39;g&#39;);\nconsole.log(obj.text(value));\n\nconst reg = /A/g;\nconsole.log(reg.test(value));\n\n// 1. const obj = new RegExp(&quot;A&quot;, &quot;g&quot;); RegExp 인스턴스를 생성함\n// A로 매치 대상에 매치 함\n// g 플래그는 모두 매치 함\n// 2. obj.text(value) obj에 설정된 A를 ABC에 매치하며 A가 있으므로 true를 반환\n// 3. const reg = /A/g 정규 표현식 리터럴을 사용한 형태 임\n// new 연산자를 사용하지 않았을 뿐, 1번과 같음</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>매치 시작 위치를</p>\n<ul>\n<li>lastIndex 프로퍼티에 설정</li>\n<li>디폴트 값 : 0</li>\n</ul>\n</li>\n<li>\n<p>g 플래그를 사용하면</p>\n<ul>\n<li><code class=\"language-text\">lastIndex</code> 프로퍼티 위치부터 매치</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const value = &#39;ABABAB&#39;,\n  obj = /B/g;\n\nconsole.log(obj.test(value) + &#39;: &#39; + obj.lastIndex); // true: 2\nconsole.log(obj.test(value) + &#39;: &#39; + obj.lastIndex); // true: 4\nconsole.log(obj.test(value) + &#39;: &#39; + obj.lastIndex); // false: 0\n\n// 1. obj.test(value) B가 ABABAB 있으므로 매치되며 true 반환\n// 2. obj.lastIndex lastIndex 값으로 2가 출력 됨\n// B가 매치된 인덱스는 1이며 1을 더한 값임\n// 2가 다음에 매치를 시작 할 위치\n\n// 3. obj.test(value), lastIndex 값이 2이므로 대상 문자열의 2번 인덱스부터 B를 매치 함\n// 4. obj.lastIndex lastIndex 값으로 4가 출력 됨\n// B가 매치된 인덱스는 3이며 1을 더한 값\n// 5. g 플래그는 매치가 되면 lastIndex 값에 1을 더함\n\n// 6. obj.test(value) 대상 문자열의 4번 인덱스부터 B를 매치하며 매치가 되지 않아 false가 출력 됨\n// 7. obj.lastIndex 매치가 되지 않으면 lastIndex 값은 0이 됨</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>g 플래그를 사용하지 않으면</p>\n<ul>\n<li><code class=\"language-text\">lastIndex</code> 프로퍼티 값이 바뀌지 않음</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const value = &#39;ABABAB&#39;,\n  obj = /B/;\n\nconsole.log(obj.test(value) + &#39;: &#39; + obj.lastIndex); // true: 0\nconsole.log(obj.test(value) + &#39;: &#39; + obj.lastIndex); // true: 0\n\n// 1. obj = /B/ g플래그를 사용하지 않았음\n// 2. obj.test(value) B가 ABABAB에 있으므로 매치되며 true 반환\n// 3. obj.lastIndex lastIndex 값이므로 0이 출력 됨, 0은 디폴트 값으로 값이 바뀌지 않음, g 플래그를 작성하지 않으면 값이 바뀌지 않음\n// 4. obj.test(value) 매치가 되어 true가 출력됨\n// 5. obj.lastIndex lastIndex 값으로 0이 출력됨</code>\n        </deckgo-highlight-code>\n<ul>\n<li>lastIndex 값을 지정해도 적용되지 않고 0 번 인덱스부터 배치</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const value = &#39;ABABAB&#39;,\n  obj = /B/g;\nconsole.log(obj.test(value) + &#39;: &#39; + obj.lastIndex); // true: 0\n\nobj.lastIndex = 2;\nconsole.log(obj.test(value) + &#39;: &#39; + obj.lastIndex); // true: 2\nconsole.log(obj.test(value) + &#39;: &#39; + obj.lastIndex); // true: 2\n\n// 1. true: 0 매치가 되었으므로 1이 출력 되어야 함\n// 2. obj.lastIndex = 2 lastIndex에 2를 설정했으므로\n// 3. obj.test(value) 2번 인덱스부터 매치를 해야 하지만, 0번 인덱스부터 매치 해야 함\n// 4. 2번 인덱스부터 매치하면 B가 없으므로  false가 반환됨</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","frontmatter":{"date":"October 07, 2021","title":"lastIndex","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-RegExp-1/"}},"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":"zoomkoding/zoomkoding-gatsby-blog"}}}}},"pageContext":{"slug":"/study-js-es6-math-1/","nextSlug":"/study-js-es6-array-7/","prevSlug":"/study-js-es6-RegExp-1/"}},"staticQueryHashes":["1073350324","2938748437"]}