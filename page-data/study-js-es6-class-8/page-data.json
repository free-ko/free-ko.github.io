{"componentChunkName":"component---src-templates-blog-template-js","path":"/study-js-es6-class-8/","result":{"data":{"cur":{"id":"5488c2ca-800b-5720-946e-a3c673a09035","html":"<br>\n<h1 align=\"center\">\n  👋  Built-in 오브젝트 상속, Object 상속, Image 오브젝트 상속, Audio 오브젝트 상속\n</h1>\n<br>\n<h2 id=\"1-built-in-오브젝트-상속\" style=\"position:relative;\"><a href=\"#1-built-in-%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8-%EC%83%81%EC%86%8D\" aria-label=\"1 built in 오브젝트 상속 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Built-in 오브젝트 상속</h2>\n<ul>\n<li>\n<p>빌트인 오브젝트를 상속받을 수 있음</p>\n<ul>\n<li>인스턴스가 빌트인 오브젝트의 특징을 갖게 되며 <code class=\"language-text\">this</code> 로 빌트인 오브젝트에 접근할 수 있음</li>\n<li><code class=\"language-text\">extends</code> 키워드로 구현함</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">class Point extends Array {\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\tgetTotal() {\n\t\tlet total = 0;\n\t\tfor (const value of this) {\n\t\t\ttotal += value;\n\t\t};\n\t\tretru total;\n\t}\n}\n\nconst obj = new Point();\nobj.push(10,20,30);\n\nconsole.log(obj.getTotal());   // 60\n\n// 1. 빌트인 Array 오브젝트를 상속받음\n// 2. 빌트인 오브젝트의 constructor를 호출 함, 생성하는 인스턴스의 __proto__.__proto__에 Array.prototype의 메소드가 설정됨\n// 3. obj가 Point 인스턴스이지만 Array 오브젝트를 상속 받았으므로 push() 메모스를 호출 할 수 있음\n// 4. 인스턴스 프로퍼티로 {0: 10, 1: 20, 2: 30, length:3}이 설정됨\n// 5. obj에 [10, 20, 30]이 있으며 obj.__proto__에 getTotal()이 있고 obj.__proto__.__proto__에 Array 오브젝트의 메소드가 있으므로 값과 메소드를 모두 사용할 수 있음\n// 6. this가 obj 인스턴스를 참조하여 Array [10, 20, 30]은 이터러블 오브젝트이므로 for-of로 반복 할 수 있음</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>코드 프로세스</p>\n<ul>\n<li><code class=\"language-text\">class Point extends Array {...}</code></li>\n<li><code class=\"language-text\">const obj = new Point()</code></li>\n<li><code class=\"language-text\">constructor() { super() }</code></li>\n<li><code class=\"language-text\">obj.push(10, 20, 30)</code></li>\n<li><code class=\"language-text\">obj.getTotal()</code></li>\n<li><code class=\"language-text\">for (const value of this) {...}</code></li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"2-object-상속\" style=\"position:relative;\"><a href=\"#2-object-%EC%83%81%EC%86%8D\" aria-label=\"2 object 상속 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Object 상속</h2>\n<ul>\n<li><code class=\"language-text\">Object</code>는 클래스가 아니므로 다른 <code class=\"language-text\">Object</code>를 상속 받을 수 없지만 상속 받으면 <code class=\"language-text\">__proto__</code> 구조가 되는 것을 활용하여 상속을 구현 할 수 있음</li>\n<li>\n<p><code class=\"language-text\">Object</code> 상속</p>\n<ul>\n<li><code class=\"language-text\">Object.setPrototypeOf()</code>로 <code class=\"language-text\">__proto__</code> 구조를 만듬</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const Book = {\ngetTitle() {\n  console.log(&#39;Book&#39;);\n},\n};\n\nconst Point = {\ngetTitle() {\n  super.getTitle();\n},\n};\n\nObject.setPrototypeOf(Point, Book);\n\nPoint.getTitle(); // Book\n\n// 1. Book과 Point는 Object임, getTitle()은 함수이며 각 Object에 있음\n// 2. Object.setPrototypeOf(Point, Book); Point에 getTitle()이 있고 Point.__proto__에 Book의 getTitle()이 있는 구조가 됨\n// 3. Point.getTitle(); Point 오브젝트의 getTitle()이 호출 됨\n// 4. super.getTitle(); super()가 아니라 super임\n// 5. super는 한 단계 아래의 __proto__를 참조함, 아래는 __proto__에 연결되어 있다는 뜻 Book 오브젝트의 getTitle()을 호출 함</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<h2 id=\"3-image-오브젝트-상속\" style=\"position:relative;\"><a href=\"#3-image-%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8-%EC%83%81%EC%86%8D\" aria-label=\"3 image 오브젝트 상속 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Image 오브젝트 상속</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">Image</code> 오브젝트 상속 코드</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">class Home extends Image {\nconstructor() {\n  super();\n}\n\nsetAttr() {\n  this.src = &#39;../../image/rainbow.png&#39;;\n  this.alt = &#39;집과 나무가 있고&#39; + &#39;무지개가 있는 모습&#39;;\n  this.title = &#39;무지개&#39;;\n}\n}\n\nconst obj = new Home();\nobj.setAttr();\n\ndocumnet.querySelector(&#39;#show&#39;).appendChild(obj);</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p><code class=\"language-text\">super();</code></p>\n<ul>\n<li><code class=\"language-text\">Image</code> 오브젝트의 <code class=\"language-text\">constructor</code>를 호출</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">this.src</code>, <code class=\"language-text\">this.alt</code>, <code class=\"language-text\">this.title</code></p>\n<ul>\n<li><code class=\"language-text\">Image</code> 오브젝트를 <code class=\"language-text\">this</code>로 참조</li>\n<li><code class=\"language-text\">Image</code> 속성에 값을 할당 함</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"4-audio-오브젝트-상속\" style=\"position:relative;\"><a href=\"#4-audio-%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8-%EC%83%81%EC%86%8D\" aria-label=\"4 audio 오브젝트 상속 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. Audio 오브젝트 상속</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">Audio</code> 오브젝트 상속</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">class Music extends Audio {\nconstructor() {\n  super();\n}\n\nsetAttr(src, controls, muted, loop) {\n  this.src = src;\n  this.controls = controls;\n  this.muted = muted;\n  this.loop = loop;\n}\n}\n\nconst obj = new Music();\nconst src = &#39;../../image/Beet5.png&#39;;\nobj.setAttr(src, true, true, true);\n\ndoccument.querySelector(&#39;#show&#39;).appendChild(obj);</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p><code class=\"language-text\">super()</code></p>\n<ul>\n<li><code class=\"language-text\">Audio</code> 오브젝트의 <code class=\"language-text\">constructor</code>를 호출</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">this.src</code>, <code class=\"language-text\">this.controls</code></p>\n<ul>\n<li><code class=\"language-text\">Audio</code> 오브젝트를 <code class=\"language-text\">this</code>로 참조</li>\n<li><code class=\"language-text\">Audio</code> 속성에 값을 할당함</li>\n<li>파라미터 값을 받아 속성값을 설정하면 범용 클래스로 사용할 수 있음</li>\n</ul>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","excerpt":"1. Built-in 오브젝트 상속 빌트인 오브젝트를 상속받을 수 있음 인스턴스가 빌트인 오브젝트의 특징을 갖게 되며  로 빌트인 오브젝트에 접근할 수 있음  키워드로 구현함 코드 프로세스       2. Object 상속 는 클래스가 아니므로 다른 를 상속 받을 수 없지만 상속 받으면  구조가 되는 것을 활용하여 상속을 구현 할 수 있음  상속 로  구조를 만듬 3. Image 오브젝트 상속  오브젝트 상속 코드   오브젝트의 를 호출 , ,   오브젝트를 로 참조  속성에 값을 할당 함 4. Audio 오브젝트 상속  오브젝트 상속   오브젝트의 를 호출 ,   오브젝트를 로 참조  속성에 값을 할당함 파라미터 값을 받아 속성값을 설정하면 범용 클래스로 사용할 수 있음","frontmatter":{"date":"November 22, 2021","title":"Built-in 오브젝트 상속, Object 상속, Image 오브젝트 상속, Audio 오브젝트 상속","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-class-8/"}},"next":{"id":"24b2b776-e65b-5f82-a8d5-af1d5c2ee036","html":"<br>\n<h1 align=\"center\">\n  👋  super 키워드, constructor 호출\n</h1>\n<br>\n<h2 id=\"1-super-키워드\" style=\"position:relative;\"><a href=\"#1-super-%ED%82%A4%EC%9B%8C%EB%93%9C\" aria-label=\"1 super 키워드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. super 키워드</h2>\n<ul>\n<li>슈퍼 클래스와 서브 클래스에 같은 이름의 메소드가 있으면 서브 클래스의 메소드가 호출 됨</li>\n<li><code class=\"language-text\">super</code> 키워드를 사용하여 슈퍼 클래스의 메소드를 호출 할 수 있음</li>\n<li>\n<p><code class=\"language-text\">super.getTitle()</code> 의 형태</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">class Book {\ngetTitle() {\n  console.log(&#39;슈퍼&#39;);\n}\n}\n\nclass Point extends Book {\ngetTitle() {\n  super.getTitle();\n  console.log(&#39;서브&#39;);\n}\n}\n\nnew Point().getTitle();\n\n// 1. new Point.getTitle() 인스턴스를 생성하고 getTitle()을 호출하면 서브 클래스의 메소드가 호출 됨\n// 2. super.getTitle() super 키워드가 슈퍼 클래스를 참조하므로 슈퍼 클래스의 getTitle()이 호출됨\n\n// 실행결과\n// 슈퍼\n// 서브</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<h2 id=\"2-constructor-호출\" style=\"position:relative;\"><a href=\"#2-constructor-%ED%98%B8%EC%B6%9C\" aria-label=\"2 constructor 호출 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. constructor 호출</h2>\n<ul>\n<li>\n<p>서브와 슈퍼에 <code class=\"language-text\">constructor</code>를 모두 작성하지 않으면 디폴트 <code class=\"language-text\">constructor</code>가 호출 됨</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">class Book {\nsetTitle(title) {\n  this.title = title;\n}\n}\n\nclass Point extends Book {}\n\nconst obj = new Point();\n\nobj.setTitle(&#39;책&#39;);\nconsole.log(obj.title);\n\n// 1. Point 클래스에 constructor를 작성하지 않으면 Point.prototype.constructor가 호출됨\n// 2. 이어서 Book 클래스의 constructor가 호출함, Book 클래스에 constructor를 작성하지 않으면 Book.prototype.constructor가 호출 됨\n// 3. 즉, 각 클래스의 constructor를 호출하며 클래스에 construcotr를 작성하지 않으면 클래스의 prototype.constructor가 호출 됨\n\n// 실행결과\n// 책</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<ul>\n<li>\n<p>서브에 작성하지 않고 <code class=\"language-text\">super</code>에만 작성하면 파라미터 값을 <code class=\"language-text\">super</code>로 넘겨 줌</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">class Book {\nconstructor(title) {\n  this.title = title;\n}\n}\n\nclass Point extends Book {}\n\nconst obj = new Point(&#39;책&#39;);\nconsole.log(obj.title);\n\n// 서브의 prototype.constructor가 호출됨, 이어서 슈퍼의 constructor를 호출하면서 파라미터 값인 &quot;책&quot;을 파라미터로 넘겨 줌\n\n// 실행 결과\n// 책</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<ul>\n<li>\n<p>서브에는 작성하고 <code class=\"language-text\">super</code>에 작성하지 않으면 에러가 발생함</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">class Book {\nsetTitle(title) {\n  this.title = title;\n}\n}\n\nclass Point extends Book {\n// constructor(point) {\n//     this.point = point;\n//  };\n}\n\nconst obj = new Point(100);\n\n// 서브에 constructor를 작성하면 슈퍼에도 constructor를 작성해야 함</code>\n        </deckgo-highlight-code>\n<br>\n</li>\n<li>\n<p>서브와 슈퍼에 <code class=\"language-text\">constructor</code>를 모두 작성하면 서브에서 <code class=\"language-text\">super()</code>로 호출해야 함</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">class Book {\nconstructor(title) {\n  this.title = title;\n}\n}\n\nclass Point extends Book {\nconstructor(title, point) {\n  super(title);\n  this.point = point;\n}\n}\n\nconst obj = new Point(&#39;책&#39;, 100);\n\nconsole.log(`${obj.title}, ${obj.point}`);\n\n// 1. super(title); 슈퍼의 constructor를 호출하며 title 파라미터 값을 파라미터로 넘겨 줌\n// 2. 이렇게 명시적으로 슈퍼의 constructor를 호출해야 함\n// 3. 서브의 constructor에서 this를 사용하면 this를 사용하기 전에 super()를 호출해야 함\n\n// 실행결과\n// 책 100</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","frontmatter":{"date":"November 21, 2021","title":"super 키워드, constructor 호출","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-class-7/"}},"prev":{"id":"14a0932f-8d36-5976-aa07-340699e859a6","html":"<br>\n<h1 align=\"center\">\n  👋  this 참조, Generator\n</h1>\n<br>\n<h2 id=\"1-this-참조\" style=\"position:relative;\"><a href=\"#1-this-%EC%B0%B8%EC%A1%B0\" aria-label=\"1 this 참조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. this 참조</h2>\n<ul>\n<li><code class=\"language-text\">인스턴스.메소드()</code> 형태로 호출하면 메소드에서 <code class=\"language-text\">this</code>가 인스턴스를 참조 함</li>\n<li>\n<p><code class=\"language-text\">static</code> 메소드에서 <code class=\"language-text\">this</code> 는 메소드가 속한 클래스를 참조함</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">class Point {\nstatic setPoint(point) {\n  this.value = vapoint;\n}\n}\n\nPoint.setPoint(100);\n\nconsole.log(Point.value); // 100\nconsole.log(new Point().value); // undefined\n\n// 1. class Point 엔진이 class 키워드를 만나면 클래스 오브젝트를 만듬\n// 2. this.value = point; this가 메소드를 호출한 오브젝트를 참조함, 즉 this가 Point 클래스를 참조하므로 Point 클래스에 {valeu: 100} 형태로 설정됨\n// 3. Point.value Point 클래스에서 value 값을 구하게 되며 100이 반환됨\n// 4. new Point().value Point 인스턴스를 생성하고 value 값을 구하면 undefined 반환됨\n// 5. Point 클래스에 설정된 value 프로퍼티는 생성한 인스턴스에 포함되지 않음</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p><code class=\"language-text\">static property</code></p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">class Point {\nstatic value = 100;\n}\n\nconsole.log(Point.value); // 100\n\nPoint.bonnus = 300;\n\nconsole.log(Point.bonnus); // 300\nconsole.log(new Point().value); // undefined\n\n// 1. static value = 100; 값을 static property에 설정함\n// 2. ES2020 기준으로 스펙 제안 단계임 하지만 대부분의 브라우저에서 지원 함\n// 3. Point.value Point 클래스와 static 프로퍼티로 값을 구함\n// 4. Point.bonnus = 300; Point 클래스에 static 프로퍼티로 설정되며 {bonnus: 300} 형태임\n// 5. Point.bonnus Point 클래스와 static 프로퍼티로 값을 구함\n// 6. new Point().value Point 인스턴스를 생성하고 value 값을 구하면 undefined가 반환됨\n// 7. Point 클래스의 static 프로퍼티는 생성한 인스턴스에 포함되지 않음</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p><code class=\"language-text\">constructor</code>에서 <code class=\"language-text\">this.construcotr</code> 는 생성하는 인스턴스가 아니라 클래스 오브젝트를 참조 함</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">class Point {\nconstructor() {\n  console.log(this.constructor.get());\n}\nstatic get() {\n  return 100;\n}\n}\n\nnew Point(); // 100\n\n// this.constructor.get() thisconstructor가 Point 클래스를 참조하므로 static 메소드를 호출할 수 있음</code>\n        </deckgo-highlight-code>\n<br>\n</li>\n</ul>\n<h2 id=\"2-generator\" style=\"position:relative;\"><a href=\"#2-generator\" aria-label=\"2 generator permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Generator</h2>\n<ul>\n<li>\n<p>클래스의 제너레이터 함수는 <code class=\"language-text\">prototype</code>에 연결됨, 인스턴스로 호출해야 함</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">class Point {\ngetPoint() {\n  yield 10;\n  yield 20;\n}\n}\n\nconst gen = new Point();\nconst obj = gen.getPoint();\n\nconsole.log(obj.next());\nconsole.log(obj.next());\nconsole.log(obj.next());\n\n// 1. const obj = gen.getPoint(); 인스턴스의 제너레이터 함수를 호출하면 이터레이터 오브젝트를 생성하여 반환\n// 2. obj.next()를 실행할 때마다 yield에서 실행결과 처럼 반환함\n\n// 실행결과\n// {value: 10, done: false}\n// {value: 20, done: false}\n// {value: undefined, done: true}</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","frontmatter":{"date":"November 23, 2021","title":"this 참조, Generator","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-class-9/"}},"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":"zoomkoding/zoomkoding-gatsby-blog"}}}}},"pageContext":{"slug":"/study-js-es6-class-8/","nextSlug":"/study-js-es6-class-7/","prevSlug":"/study-js-es6-class-9/"}},"staticQueryHashes":["1073350324","2938748437"]}