{"componentChunkName":"component---src-templates-blog-template-js","path":"/study-js-es6-reflect-1/","result":{"data":{"cur":{"id":"0b51b763-050c-5e59-b32b-352996d9d056","html":"<br>\n<h1 align=\"center\">\n  👋 Reflect 오브젝트, Proxy 사용\n</h1>\n<br>\n<h2 id=\"1-reflect\" style=\"position:relative;\"><a href=\"#1-reflect\" aria-label=\"1 reflect permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Reflect</h2>\n<ul>\n<li>빌트인 오브젝트</li>\n<li><code class=\"language-text\">constructor</code> 가 없으므로 인스턴스를 생성 할 수 없음</li>\n<li>\n<p><code class=\"language-text\">reflect.get()</code> 형태로 호출</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const target = { point: 100 };\n\nconsole.log(target.point); // 100\nconsole.log(Reflect.get(target, &#39;point&#39;)); // 100\n\n// 1. Reflect.get(target, &quot;point&quot;) target에서 point 프로퍼티 값을 구함, target에 대상 오브젝트를 작성하고 &quot;point&quot;에 프로퍼티 키를 작성함\n// 2. [[Get]](&quot;point&quot;, receiver) 형태로 target의 [[Get]]을 실행함\n// 3. 100을 반환\n// 4. 값을 구하는 것은 target.point와 같지만 Reflect.get()은 부가 기능이 있음</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>에러 대응 형태</p>\n<ul>\n<li><code class=\"language-text\">tray-catch</code> 로 에러 대응</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const target = {};\nObject.defineProperty(target, &#39;point&#39;, {\n  value: 100,\n  writable: false,\n});\n\ntry {\n  Object.defineProperty(target, &#39;point&#39;, { value: 200 });\n} catch {\n  console.log(&#39;에러 발생&#39;);\n}\n\n// 1. {value: 100, writable: false}, {writable: false}이므로 value 속성 값을 바꿀 수 없음\n// 2. try-catch에서 value: 200, value 속성 값을 바꾸면 에러가 발생함 그래서 try-catch문을 사용함</code>\n        </deckgo-highlight-code>\n<ul>\n<li><code class=\"language-text\">true</code>, <code class=\"language-text\">false</code>를 반환</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const target = {};\nObject.defineProperty(target, &#39;point&#39;, {\n  value: 100,\n  writable: false,\n});\n\nconst check = Reflect.defineProperty(target, &#39;point&#39;, { value: 200 });\n\nconsole.log(check);\n\n// 1. {value: 100, writable: false}, {writable: false}이므로 value 속성 값을 바꿀 수 없음\n// 2. Reflect 오브젝트 사용, value: 200, value 속성 값을 바꾸면 에러가 발생함\n// 3. 이때, 프로그램이 중단되지 않고 처리 실패를 뜻하는 false를 반환, 성공이면 true를 반환함\n// 4. console.log(check); false가 출력됨</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<h2 id=\"2-proy-사용\" style=\"position:relative;\"><a href=\"#2-proy-%EC%82%AC%EC%9A%A9\" aria-label=\"2 proy 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Proy 사용</h2>\n<ul>\n<li><code class=\"language-text\">Reflect</code> 오브젝트의 함수는 <code class=\"language-text\">Proxy</code> 트랩에 1:1로 대응하며 트랩 이름과 함수 이름이 같음</li>\n<li>\n<p>트랩 파라미터와 <code class=\"language-text\">Reflect</code> 함수의 파라미터가 같음</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const target = { point: 100 };\nconst handler = {\nget(target, key, receiver) {\n  return Reflect.get(target, key, receiver) + 200;\n},\n};\n\nconst obj = new Proxy(target, handler);\n\nconsole.log(obj.point); // 300\n\n// 1. console.log(obj.point); getter이므로 get() 트랩이 호출됨\n// 2. 트랩: get(target, key, receiver){...} target 파라미터에 target이 설정됨 key에 &quot;point&quot;가 설정되고 receiver에 Proxy 인스턴스가 설정됨\n// 3. Proxy의 get() 트랩과 Reflect.get() 함수에서 트랩 이름과 Reflect 함수 이름이 같으며 파라미터도 같음, 13개 트랩에 대응하는 Reflect 함수가 있음\n// 4. 트랩: return Reflect.get(target, key, receiver) + 200; Reflect.get()은 obj.point로 값을 구하는 본래 기능을 수행함\n// 5. 구한 값 100에 200을 더해 반환하는 것은 부가 기능으로 이것은 트랩의 기능 임</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p><code class=\"language-text\">Reflect</code> 오브젝트 형태</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const obj = Reflect;\n/*\n1. Reflect 오브젝트 구조를 보기 위해 obj에 할당했음\n\n2. obj에 표시된 함수를 Reflect.get() 형태로 사용할 수 있음\n\n3. 함수 이름이 Proxy 트랩 이름과 같음\n\n4. Reflect 오브젝트에\n  - prototype과 prototype.constructor가 없음\n  - 따라서 new 연산자로 인스턴스를 생성할 수 없으며\n  - prototype에 메소드를 연결할 수 없음\n\n5. 표시된 constructor는 Reflect.constructor임\n*/</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","excerpt":"1. Reflect 빌트인 오브젝트  가 없으므로 인스턴스를 생성 할 수 없음  형태로 호출 에러 대응 형태  로 에러 대응 , 를 반환 2. Proy 사용  오브젝트의 함수는  트랩에 1:1로 대응하며 트랩 이름과 함수 이름이 같음 트랩 파라미터와  함수의 파라미터가 같음  오브젝트 형태","frontmatter":{"date":"December 05, 2021","title":"Reflect 오브젝트, Proxy 사용","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-reflect-1/"}},"next":{"id":"acb64fd3-6c22-5de1-b15a-9b50a53b6231","html":"<br>\n<h1 align=\"center\">\n  👋 construct(), apply(), ownKeys(), getOwnPropertyDescriptor() 트랩\n</h1>\n<br>\n<h2 id=\"1-construct\" style=\"position:relative;\"><a href=\"#1-construct\" aria-label=\"1 construct permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. construct()</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">new</code> 연산자의 트랩임</p>\n<ul>\n<li>인스턴스를 생성하여 반환함</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">class Point {\n  constructor(point) {\n    this.point = point;\n  }\n}\n\nconst handler = {\n  construct(target, args, proxy) {\n    let point = args[0];\n    if (Object.is(args[1], &#39;add&#39;)) {\n      point += args[2];\n    }\n    return new target(point);\n  },\n};\n\nconst obj = new Proxy(Point, handler);\nconst pointObj = new obj(100, &#39;add&#39;, 300);\n\nconsole.log(pointobj.point); // 400\n\n// 1. const obj = new Proxy(Point, handler); Point 클래스로 Proxy 인스턴스를 생성함\n// 2. const pointObj = new obj(100, &quot;add&quot;, 300); construct() 트랩이 호출됨\n// 3. 트랩: construct(target, args, proxy) {...}\n//\t\t- target에 Point 클래스가 설정되고\n//\t\t- args에 [100, &quot;add&quot;, 300] 형태로 설정됨\n//    - proxy에 new Proxy()로 생성한 obj 인스턴스가 설정됨\n// 4. construct(){...} 트랩처리 Point 클래스의 constructor를 호출하기 전에 조건에 따라 인스턴스의 초깃값을 정리 함\n// 5. 트랩을 호출할 때마다 정리하지 않고 트랩에서 일괄적으로 정리하면 효율이 높음\n// 6. 트랩을 이렇게 활용할 수 있음</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p><code class=\"language-text\">construct()</code> 트랩이 호출되는 형태</p>\n<ul>\n<li><code class=\"language-text\">const obj = new Proxy(Point, handler);</code></li>\n<li><code class=\"language-text\">new obj</code>를 실행할 때 호출</li>\n<li><code class=\"language-text\">Reflect.construct()</code></li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"2-apply\" style=\"position:relative;\"><a href=\"#2-apply\" aria-label=\"2 apply permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. apply()</h2>\n<ul>\n<li>\n<p>함수 호출 트랩임</p>\n<ul>\n<li><code class=\"language-text\">Proxy</code> 인스턴스 호출로 트랩이 실행된 형태 임</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">function getPoint(...values) {\n  return values.map((value) =&gt; {\n    return value + 10;\n  });\n}\n\nconst handler = {\n  apply(target, that, params) {\n    return target.apply(this.params);\n  },\n};\n\nconst obj = new Proxy(getPoint, handler);\n\nconsole.log(obj(100, 200)); // [110, 210]\n\n// 1. console.log(obj(100, 200)); obj는 Proxy 인스턴스이며 이를 호출하면 apply() 트랩이 호출됨\n// 2. 트랩: apply(target, that, params){...} target에 getPoint 함수가 설정됨\n// 3. Proxy 인스턴스 호출로 인해 트랩이 실행되면 that에 값이 설정되지 않음</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<h2 id=\"3-apply-트랩-호출\" style=\"position:relative;\"><a href=\"#3-apply-%ED%8A%B8%EB%9E%A9-%ED%98%B8%EC%B6%9C\" aria-label=\"3 apply 트랩 호출 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. apply() 트랩 호출</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">apply()</code> 트랩이 호출되는 형태</p>\n<ul>\n<li><code class=\"language-text\">Function.prototype.apply()</code></li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">function getPoint(...values) {\n  return values.map((value) =&gt; {\n    return value + this.bonus;\n  });\n}\n\nconst handler = {\n  apply(target, that, params) {\n    return target.apply(that, params);\n  },\n};\n\nconst obj = new Proxy(getPoint, handler);\nconst add = { bonus: 10 };\n\nconsole.log(obj.apply(add, [100, 200])); // [110, 210]\n\n// 1. console.log(obj.apply(add, [100, 200])); apply() 호출하면 apply() 트랩이 호출됨\n// 2. 첫 번째 파라미터에 getPoint()에서 this로 참조할 오브젝트를 작성함\n// 3. 두 번째 파라미터에 getPoint()로 넘겨 줄 파라미터 값을 작성함\n// 4. 트랩: apply(target, that, params){...} target에 getPoint 함수가 설정되고 that에 add 오브젝트가 설정됨 prams에 [100, 200]이 설정됨</code>\n        </deckgo-highlight-code>\n<ul>\n<li><code class=\"language-text\">Function.prototype.call()</code></li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">function getPoint(...values) {\n  return values.map((value) =&gt; {\n    return value + this.bonus;\n  });\n}\n\nconst handler = {\n  apply(target, that, ...params) {\n    return target.apply(that, parms);\n  },\n};\n\nconst obj = new Proxy(getPoint, handler);\nconst add = { bonus: 10 };\nconsole.log(obj.call(add, 100, 200)); // [110, 210]\n\n// 1. obj.call(add, 100, 200) call() 호출하면 apply 트랩이 호출됨\n// 2. 첫 번째 파라미터에 getPoint()에서 this로 참조할 오브젝트를 작성함\n// 3. 두 번째 파라미터 이후에 getPoint()로 넘겨 줄 파라미터 값을 작성함\n// 4. call() 호출이므로 두 번째 파라미터 이후에 콤마로 구분하여 값을 작성함\n// 5. 트랩: apply(target, that, ...params){...} target에 getPoint 함수가 설정되고 that에 add 오브젝트가 설정됨 params에 [100, 200]이 설정됨</code>\n        </deckgo-highlight-code>\n<ul>\n<li><code class=\"language-text\">proxy(...args): Proxy</code> 인스턴스</li>\n<li><code class=\"language-text\">Reflect.apply()</code></li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"4-ownkeys\" style=\"position:relative;\"><a href=\"#4-ownkeys\" aria-label=\"4 ownkeys permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. ownKeys()</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">Object.getOwnPropertyNames()</code> 의 트랩임</p>\n<ul>\n<li><code class=\"language-text\">target</code>의 모든 <code class=\"language-text\">key</code>를 배열로 반환함</li>\n<li><code class=\"language-text\">[[Configurable]]: false</code> 이거나 오브젝트가 확장 불가라도 반환함</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const target = {};\nObject.defineProperties(target, {\n  point: { value: 100, enumerable: true },\n  bonus: { value: 200 },\n});\n\nconst handler = {\n  ownKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  },\n};\n\nconst obj = new Proxy(target, handler);\n\nconsole.log(Object.getOwnPropertyNames(obj)); // [point, bonus]\nconsole.log(Object.keys(obj)); // [point]\n\n// 1. console.log(Object.getOwnPropertyNames(obj)); ownKeys() 트랩이 호출됨\n// 2. 트랩: return Object.getOwnPropertyNames(target); target 오브젝트의 모든 프로퍼티 key를 반환함\n// 3. console.log(Object.keys(obj)); 트랩을 호출하며, 모든 프로퍼티 key를 반환함\n// 4. 한편, Object.keys()는 {enumerable: false}인 프로퍼티는 반환하지 않음 그래서 point만 출력됨</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p><code class=\"language-text\">ownKeys()</code> 트랩이 호출되는 형태</p>\n<ul>\n<li><code class=\"language-text\">Object.getOwnPropertyNmaes()</code></li>\n<li><code class=\"language-text\">Object.getOwnPropertySymbols()</code></li>\n<li><code class=\"language-text\">Object.keys()</code></li>\n<li><code class=\"language-text\">Reflect.ownKeys()</code></li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"5-getownpropertydescriptor\" style=\"position:relative;\"><a href=\"#5-getownpropertydescriptor\" aria-label=\"5 getownpropertydescriptor permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. getOwnPropertyDescriptor()</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">Object.getOwnPropertyDescriptor()</code> 트랩임</p>\n<ul>\n<li>프로퍼티 디스크립터를 반환함</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const target = {};\nObject.defineProperty(target, &#39;point&#39;, {\n  value: 100,\n  configurable: true,\n});\n\nconst handler = {\n  getOwnPropertyDescriptor(target, key) {\n    const desc = Object.getOwnPropertyDescriptor(target, key);\n\n    if (desc.configurable) {\n      return { value: 300, configurable: true };\n    }\n    return desc;\n  },\n};\n\nconst obj = new Proxy(target, handler);\n\nconsole.log(Object.getOwnPropertyDescriptor(obj, &#39;point&#39;)); // {value: 300, writable: false, enumerable: false, configurable: true}\n\n// 1. console.log(Object.getOwnPropertyDescriptor(obj, &quot;point&quot;)); 트랩이 호출됨\n// 2. 트랩: if(desc.configurable){...} 디스크립터의 configurable 값이 true이면 value 속성 값을 바꾸어 반환함\n// 3. point 프로퍼티 {configurable: true}이므로 트랩에서 값을 바꾸어 반환할 수 있음 {configurable: false} 일 때는 바꿀 수 없음</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p><code class=\"language-text\">getOwnPropertyDescriptor()</code> 트랩이 호출되는 형태</p>\n<ul>\n<li><code class=\"language-text\">Object.getOwnPropertyDescriptor()</code></li>\n<li><code class=\"language-text\">Reflect.getOwnPropertyDescriptor()</code></li>\n</ul>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","frontmatter":{"date":"December 04, 2021","title":"construct(), apply(), ownKeys(), getOwnPropertyDescriptor() 트랩","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-proxyTrap-7/"}},"prev":{"id":"f1ac4f67-bca2-5690-8bf5-a28a8d3893f9","html":"<br>\n<h1 align=\"center\">\n  👋 this 참조 오브젝트, Proxy 핸들러의 get() 트랩\n</h1>\n<br>\n<h2 id=\"1-get\" style=\"position:relative;\"><a href=\"#1-get\" aria-label=\"1 get permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. get()</h2>\n<ul>\n<li><code class=\"language-text\">target</code> 의 프로퍼티 값을 반환함</li>\n<li>\n<p><code class=\"language-text\">target</code> 의 <code class=\"language-text\">getter</code> 와 차이 임</p>\n<ul>\n<li><code class=\"language-text\">receiver</code> 에 <code class=\"language-text\">this</code> 로 참조할 오브젝트 작성</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const target = {\n  point: 100,\n  get getPoint() {\n    return this.point + 500;\n  },\n};\n\nconsole.log(target.getPoint); //  600\nconsole.log(Reflect.get(target, &#39;getPoint&#39;)); // 600\n\nconst that = { point: 300 };\n\nconsole.log(Reflect.get(target, &#39;getPoint&#39;, that)); // 800\n\n// 1. console.log(target.getPoint); getter이므로 target의 getPoint()가 호출 됨, getPoint()에서 this가 target을 참조함\n// 2. Reflect.get(target, &quot;getPoint&quot;) target의 getPoint()가 호출됨, getPoint()에서 this가 target을 참조함\n// 3. Reflect.get(target, &quot;getPoint&quot;, that) 3번째 파라미터에 that을 작성했음, getPoint()에서 this가 that을 참조함\n// 4. this로 참조하는 오브젝트를 바꿀 수 있음</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p><code class=\"language-text\">Proxy</code> 핸들러의 <code class=\"language-text\">get()</code> 트랩에서 <code class=\"language-text\">target[key]</code> 로 값을 구하는 형태</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const target = {\n\tpoint: 100,\n\tget getPoint() {\n\t\treturn this.point + 500;\n\t}\n};\n\ncosnt handler = {\n\tget(target, key, receiver) {\n\t\treturn target[key];\n\t}\n};\n\nconst proxy = new Proxy(target, handler);\nconsole.log(Reflect.get(proxy, &quot;getPoint&quot;));    // 600\n\nconst that = {point: 200};\nconsole.log(Reflect.get(proxy, &quot;getPoint&quot;, that));   // 600\n\n// 1. Reflect.get(proxy, &quot;getPoint&quot;) get() 트랩이 호출됨\n// 2. 트랩: get(target, key, receiver){...}, target 오브젝트, &quot;getPoint&quot;가 설정되고 receiver에 Proxy 인스턴스가 설정됨\n// 3. 트랩: return target[key], getPoint()를 호출함\n// 4. get getPoint(){return this.point + 500;}, getPoint()에서 this가 target을 참조함, this.point 값은 100\n// 5. Reflect.get(proxy, &quot;getPoint&quot;, that); 3번째 파라미터에 that을 작성함, getPoint()에서 this가 that을 참조하지 않고 target을 참조함\n// 6. 한편, get() 트랩을 작성하지 않으면 getPoint()에서 this가 that을 참조함 200과 500을 더해 700이 됨</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p><code class=\"language-text\">get()</code> 트랩에서 <code class=\"language-text\">Reflect.get()</code> 을 사용한 형태</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const target = {\n\tpoint: 100,\n\tget getPoint() {\n\t\treturn this.point + 500;\n\t}\n};\n\ncosnt handler = {\n\tget(target, key, receiver) {\n\t\treturn Reflect.get(target, key, receiver);\n\t}\n};\n\nconst proxy = new Proxy(target, handler);\nconst that = {point: 200};\n\nconsole.log(Reflect.get(proxy, &quot;getPoint&quot;, that));  // 700\n\n// 1. Reflect.get(proxy, &quot;getPoint&quot;, that), 3번째 파라미터에 that을 작성함\n// 2. 트랩: get(target, key, receiver){...}, receiver에 {point: 200}이 설정됨\n// 3. 트랩: return Reflect.get(target, key, receiver); target의 getPoint()가 호출됨\n// 4. getPoint()에서 this가 receiver의 {point: 200}을 참조함\n// 5. 결과적으로 target.getPoint로 값을 구하는 것은 that을 사용할 수 없으므로 확장성 떨어짐\n// 6. Reflect.get(proxy, &quot;getPoint&quot;, that)과 return Reflect.get(target, key, receiver); 를 사용하면 일련의 코드를 변경하지 않아도 됨\n// 7. 상황에 따라 get() 트랩에서 return 값을 바꿀 수 있음</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","frontmatter":{"date":"December 06, 2021","title":"this 참조 오브젝트, Proxy 핸들러의 get() 트랩","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-reflect-2/"}},"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":"zoomkoding/zoomkoding-gatsby-blog"}}}}},"pageContext":{"slug":"/study-js-es6-reflect-1/","nextSlug":"/study-js-es6-proxyTrap-7/","prevSlug":"/study-js-es6-reflect-2/"}},"staticQueryHashes":["1073350324","2938748437"]}