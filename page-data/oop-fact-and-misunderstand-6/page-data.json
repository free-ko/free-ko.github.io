{"componentChunkName":"component---src-templates-blog-template-js","path":"/oop-fact-and-misunderstand-6/","result":{"data":{"cur":{"id":"f3d58be0-0414-5ae1-b8f1-0322bd9a6846","html":"<h2 id=\"들어가기-앞서\" style=\"position:relative;\"><a href=\"#%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0-%EC%95%9E%EC%84%9C\" aria-label=\"들어가기 앞서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>들어가기 앞서</h2>\n<ul>\n<li>유일하게 변하지 않는 것은 모든 것이 변한다는 사실 뿐</li>\n<li>여행 중 길을 찾는 방법은 크게 두 가지로 나눌 수 있음</li>\n<li>\n<p>기능적이고 해결책 지향적인 접근법</p>\n<ul>\n<li>다른 사람에게 길을 물어봄</li>\n<li>올바른 길을 알려줬다면 원하는 곳으로 이동할 수 있겠지만, 이 방법은 일반적이지도, 재사용 가능하지도 않음</li>\n<li>또 중요한 랜드마크가 없다면 설명만으로 경로를 찾기 쉽지 않음</li>\n</ul>\n</li>\n<li>\n<p>구조적이고 문제 지향적인 접근법</p>\n<ul>\n<li>지도를 이용</li>\n<li>길을 찾는 데 필요한 풍부한 컨텍스트 정보가 함축돼 있으며, 길을 묻는 방법보다 쉽고 간단</li>\n<li>주변 지형을 추상적으로 표현하기 때문에 실세계의 환경과 우리의 지식을 밀접하게 연관 지을 수 있게 해줌</li>\n<li>지도는 다양한 목적을 위해 재사용될 수 있으며, 범용적. ‘기능’에 대한 요구사항이 계속 변해도 지도에 표시된 ‘구조’는 안정적이기 때문</li>\n<li>지도 은유의 핵심은, 기능이 아니라 구조를 기반으로 모델을 구축하는 편이 좀 더 범용적이고 이해하기 쉬우며 변경에 안정적이라는 것.</li>\n<li>객체지향 개발 방법은 안정적인 구조에 변경이 빈번하게 발생하는 기능을 종속시키는 지도의 방법과 유사함</li>\n</ul>\n</li>\n<li>자주 변경되는 기능이 아니라, 안정적인 구조를 따라 역할 책임, 협력을 구성</li>\n</ul>\n<br>\n<h2 id=\"기능-설계-대-구조-설계\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EB%8A%A5-%EC%84%A4%EA%B3%84-%EB%8C%80-%EA%B5%AC%EC%A1%B0-%EC%84%A4%EA%B3%84\" aria-label=\"기능 설계 대 구조 설계 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기능 설계 대 구조 설계</h2>\n<ol>\n<li>\n<p>기능 측면의 설계</p>\n<ul>\n<li>제품이 사용자를 위해 무엇을 할 수 있는지에 초점</li>\n</ul>\n</li>\n<li>\n<p>구조 측면의 설계</p>\n<ul>\n<li>제품의 형태가 어떠해야 하는지에 초점</li>\n</ul>\n</li>\n<li>훌륭한 구조는 훌륭한 소프트웨어를 만들기 위한 필요조건.</li>\n<li>훌륭한 설계는 불가능한 요구사항 변경에도 유연하게 대처할 수 있는 안정적인 구조를 제공해야 함</li>\n<li>미래를 대비하는 가장 좋은 방법은 변경을 예측하는 것이 아니라, 변경을 수용할 수 있는 선택의 여지를 설계에 마련해 놓는 것.</li>\n<li>설계를 하는 목적은 나중에 설계하는 것을 허용하는 것이며, 설계의 일차적인 목표는 변경에 소요되는 비용을 낮추는 것.</li>\n<li>객체지향 접근방법은 자주 변경되지 않는 안정적인 객체 구조를 바탕으로 시스템 기능을 객체 간의 책임으로 분배.</li>\n<li>객체지향은 객체의 구조에 집중하고 기능이 객체의 구조를 따르게 만듦. 기능이 변경되더라도 객체 간의 구조는 그대로 유지됨.</li>\n</ol>\n<br>\n<h2 id=\"두-가지-재료-기능과-구조\" style=\"position:relative;\"><a href=\"#%EB%91%90-%EA%B0%80%EC%A7%80-%EC%9E%AC%EB%A3%8C-%EA%B8%B0%EB%8A%A5%EA%B3%BC-%EA%B5%AC%EC%A1%B0\" aria-label=\"두 가지 재료 기능과 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>두 가지 재료: 기능과 구조</h2>\n<ol>\n<li>\n<p>기능</p>\n<ul>\n<li>사용자가 자신의 목표를 달성하기 위해 사용할 수 있는 시스템의 서비스</li>\n</ul>\n</li>\n<li>\n<p>구조</p>\n<ul>\n<li>시스템의 기능을 구현하기 위한 기반으로, 기능 변경을 수용할 수 있도록 안정적이여야 함.</li>\n</ul>\n</li>\n</ol>\n<br>\n<h2 id=\"안정적인-재료-구조\" style=\"position:relative;\"><a href=\"#%EC%95%88%EC%A0%95%EC%A0%81%EC%9D%B8-%EC%9E%AC%EB%A3%8C-%EA%B5%AC%EC%A1%B0\" aria-label=\"안정적인 재료 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>안정적인 재료: 구조</h2>\n<ol>\n<li>\n<p>도메인 모델</p>\n<ul>\n<li>사용자가 프로그램을 사용하는 대상 분야를 도메인이라고 함.</li>\n<li>도메인 모델에서 모델이란 대상을 단순화해서 표현한 것으로, 지식을 선택적으로 단순화하고 의식적으로 구조화한 형태</li>\n<li>즉 도메인 모델은 소프트웨어가 목적하는 영역 내의 개념과 개념 간의 관계, 다양한 규칙이나 제약 등을 주의 깊게 추상화한 것</li>\n<li>도메인 모델은 이해관계자들이 바라보는 멘탈 모델(Mental Model)</li>\n<li>소프트웨어 사용자들은 도메인에 존재하는 현상을 이해하고 현상에 반응하기 위해 도메인과 관련된 멘탈 모델을 형성함</li>\n</ul>\n</li>\n<li>\n<p>도메인의 모습을 담을 수 있는 객체지향</p>\n<ul>\n<li>최종 코드는 사용자가 도메인을 바라보는 관점을 반영해야 함.</li>\n<li>즉 애플리케이션은 도메인 모델을 기반으로 설계돼야 함.</li>\n<li>객체지향은 도메인 모델의 세 가지 측면(사용자, 디자인, 시스템 이미지)을 모두 모델링할 수 있는 거의 유일한 모델링 패러다임.</li>\n<li>객체지향은 사람들이 만지고 느끼고 볼 수 있는 실체를 시스템 안의 객체로 재창조할 수 있게 해줌</li>\n</ul>\n</li>\n<li>\n<p>표현적 차이</p>\n<ul>\n<li>소프트웨어 객체는 현실 객체에 대한 추상화가 아니라, 은유를 기반으로 재창조한 것</li>\n<li>소프트웨어 객체와 현실 객체 사이의 의미적 거리를 가리켜 표현적 차이 또는 의미적 차이라고 함</li>\n<li>소프트웨어 객체는 그 대상이 현실적인지, 현실적이지 않은지에 상관없이 도메인 모델을 통해 표현되는 도메인 객체들을 은유해야 함.</li>\n<li>도메인 모델을 기반으로 설계하고 구현하는 것은 사용자가 도메인을 바라보는 관점을 그대로 코드에 반영할 수 있게 하며, 결과적으로 표현적 차이가 줄어들 것.</li>\n<li>도메인 모델은 코드 안에 존재하는 미로를 헤쳐나갈 수 있는 지도를 제공함</li>\n</ul>\n</li>\n<li>\n<p>불안정한 기능을 담는 안정적인 도메인 모델</p>\n<ul>\n<li>도메인 모델이 제공하는 구조는 상대적으로 안정적.</li>\n<li>도메인 모델의 핵심은 사용자가 도메인을 바라보는 관점을 반영해 소프트웨어를 설계하고 구현하는 것.</li>\n<li>본질적인 측면을 가장 잘 반영한 사용자 모델을 기반으로 설계와 코드를 만들면 변경에 쉽게 대처할 수 있을 가능성이 커짐</li>\n<li>결론적으로 안정적인 구조를 제공하는 도메인 모델을 기반으로 소프트웨어의 구조를 설계하면 변경에 유연하게 대응할 수 있는 탄력적인 소프트웨어를 만들 수 있음</li>\n</ul>\n</li>\n</ol>\n<br>\n<h2 id=\"불안정한-재료-기능\" style=\"position:relative;\"><a href=\"#%EB%B6%88%EC%95%88%EC%A0%95%ED%95%9C-%EC%9E%AC%EB%A3%8C-%EA%B8%B0%EB%8A%A5\" aria-label=\"불안정한 재료 기능 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>불안정한 재료: 기능</h2>\n<ol>\n<li>\n<p>유스케이스</p>\n<ul>\n<li>훌륭한 기능적 요구사항을 얻기 위해서는 목표를 가진 사용자와 사용자의 목표를 만족시키기 위해 일련의 절차를 수행하는 시스템 간의 ‘상호작용’ 관점에서 시스템을 바라봐야 함</li>\n<li>사용자의 목표를 달성하기 위해 사용자와 시스템 간에 이뤄지는 상호작용의 흐름을 텍스트로 정리한 것을 유스케이스라고 함</li>\n<li>유스케이스는 시스템의 이해관계자들 간의 계약을 행위 중심으로 파악함.</li>\n<li>산발적으로 흩어져 있는 기능에 사용자 목표라는 문맥을 제공함으로써 각 기능이 유기적인 관계를 지닌 체계를 이룰 수 있게 함</li>\n<li>사용자 목표가 유스케이스의 핵심. 유스케이스는 공통의 사용자 목표를 통해 강하게 연관된 시나리오의 집합</li>\n</ul>\n</li>\n<li>\n<p>유스케이스의 특성</p>\n<ul>\n<li>유스케이스는 사용자와 시스템 간의 상호작용을 보여주는 ‘텍스트’. 유스케이스는 다이어그램이 아님</li>\n<li>유스케이스는 하나의 시나리오가 아니라 여러 시나리오들의 집합. 시나리오는 유스케이스를 통해 시스템을 사용하는 하나의 특정한 이야기 또는 경로. 시나리오를 유스케이스 인스턴스라고도 함</li>\n<li>유스케이스는 단순한 피처(feature) 목록과 다름. 피처는 시스템이 수행해야 하는 기능의 목록을 단순하게 나열한 것. 유스케이스는 단순히 기능을 나열한 것이 아니라 이야기를 통해 연관된 기능을 함께 묶을 수 있음</li>\n<li>유스케이스는 사용자 인터페이스와 관련된 세부 정보를 포함하지 말아야 함. 유스케이스는 자주 변경되는 사용자 인터페이스 요소는 배제하고 사용자 관점에서 시스템의 행위에 초점을 맞춤</li>\n<li>유스케이스는 내부 설계와 관련된 정보를 포함하지 않음</li>\n</ul>\n</li>\n<li>\n<p>유스케이스는 설계 기법도, 객체지향 기법도 아님</p>\n<ul>\n<li>유스케이스는 단지 사용자가 바라보는 시스템의 외부 관점만을 표현. 유스케이스로부터 시스템의 내부 구조를 유추할 수는 없음</li>\n<li>유스케이스와 객체의 구조 사이에는 커다란 간격이 존재하며, 이 간격을 자동으로 없앨 수 없음. 유스케이스는 객체의 구조나 책임에 대한 어떤 정보도 제공하지 않음</li>\n</ul>\n</li>\n</ol>\n<br>\n<h2 id=\"재료-합치기-기능과-구조의-통합\" style=\"position:relative;\"><a href=\"#%EC%9E%AC%EB%A3%8C-%ED%95%A9%EC%B9%98%EA%B8%B0-%EA%B8%B0%EB%8A%A5%EA%B3%BC-%EA%B5%AC%EC%A1%B0%EC%9D%98-%ED%86%B5%ED%95%A9\" aria-label=\"재료 합치기 기능과 구조의 통합 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>재료 합치기: 기능과 구조의 통합</h2>\n<ol>\n<li>\n<p>도메인 모델, 유스케이스, 그리고 책임-주도 설계</p>\n<ul>\n<li>변경에 유연한 소프트웨어를 만들기 위해서는 유스케이스에 정리된 시스템의 기능을 도메인 모델을 기반으로 한 객체들의 책임으로 분배해야함</li>\n<li>시스템은 사용자로부터 전송된 메시지를 수행하기 위해 책임을 수행하는 거대한 자율적인 객체.</li>\n<li>시스템 안에는 더 작은 규모의 객체들이 협력을 통해 구현됨.</li>\n<li>시스템에 할당된 커다란 책임은 시스템 안의 작은 규모의 객체들이 수행해야 하는 더 작은 규모의 책임으로 세분화됨</li>\n<li>도메인 모델에 포함된 개념을 은유하는 소프트웨어 객체를 선택하고, 협력을 완성하는 데 필요한 메시지를 식별하면서 객체들에게 책임을 할당해 나감.</li>\n<li>마지막으로 협력에 참여하는 객체를 구현하기 위해 클래스를 추가하고 속성과 함께 메서드를 구현하면 시스템의 기능이 완성됨</li>\n<li>유스케이스는 사용자에게 제공할 기능을 시스템의 책임으로 보게 함으로써 객체 간의 안정적인 구조에 책임을 분배할 수 있는 출발점을 제공함.</li>\n<li>도메인 모델을 기능을 수용하기 위해 은유할 수 있는 안정적인 구조를 제공함</li>\n<li>책임-주도 설계 방법은 시스템의 기능을 역할과 책임을 수행하는 객체들의 협력 관계로 바라보게 함으로써 유스케이스와 도메인 모델을 통합함.</li>\n<li>견고한 객체지향 애플리케이션을 개발하기 위해서는 사용자의 관점에서 시스템으 기능을 명시하고, 사용자와 설계자가 공유하는 안정적인 구조를 기반으로 기능을 책임으로 변환하는 체계적인 절차를 따라야 함</li>\n<li>유스케이스에서 출발해 객체들의 협력으로 이어지는 일련의 흐름은 객체 안에 다른 객체를 포함하는 재귀적 합성이라는 객체지향의 기본 개념을 잘 보여줌</li>\n<li>객체지향은 모든 것을 객체로 바라봄다. 크기와 상관없이 모든 객체는 메시지를 전송하거나 수신할 수 있고 메시지에 응답하기 위해 자율적으로 메서드를 선택할 수 있음</li>\n</ul>\n</li>\n<li>\n<p>기능 변경을 흡수하는 안정적인 구조</p>\n<ul>\n<li>도메인 모델이 안정적인 이유는 2가지</li>\n<li>첫째, 도메인 모델을 구성하는 개념은 비즈니스가 없어지거나 완전히 개편되지 않는 한 안정적으로 유지됨</li>\n<li>둘째, 도메인 모델을 구서하는 개념 간의 관계는 비즈니스 규칙을 기반으로 하기 때문에 비즈니스 정책이 크게 변경되지 않는 한 안정적으로 유지됨</li>\n<li>객체지향의 가장 큰 장점은 도메인을 모델링하기 위한 기법과 도메인을 프로그래밍하기 위해 사용하는 기법이 동일하다는 점. 따라서 도메인 모델링에서 사용한 객체와 개념을 프로그래밍 설계에서의 객체와 클래스로 매끄럽게 변환할 수 있음. 객체지향의 이 같은 특성을 연결완전성이라고 함</li>\n<li>연결완전성의 역방향 역시 성립함. 즉 코드의 변경으로부터 도메인 모델의 변경 사항을 유추할 수 있음. 이것을 가역성이라고 함</li>\n<li>안정적인 도메인 모델을 기반으로 시스템의 기능을 구현하고, 도메인 모델과 코드를 밀접하게 연관시키기 위해 노력</li>\n</ul>\n</li>\n</ol>\n<br>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<ul>\n<li><a href=\"https://www.yes24.com/Product/Goods/18249021\">객체지향의 사실과 오해</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0-%EC%95%9E%EC%84%9C\">들어가기 앞서</a></li>\n<li><a href=\"#%EA%B8%B0%EB%8A%A5-%EC%84%A4%EA%B3%84-%EB%8C%80-%EA%B5%AC%EC%A1%B0-%EC%84%A4%EA%B3%84\">기능 설계 대 구조 설계</a></li>\n<li><a href=\"#%EB%91%90-%EA%B0%80%EC%A7%80-%EC%9E%AC%EB%A3%8C-%EA%B8%B0%EB%8A%A5%EA%B3%BC-%EA%B5%AC%EC%A1%B0\">두 가지 재료: 기능과 구조</a></li>\n<li><a href=\"#%EC%95%88%EC%A0%95%EC%A0%81%EC%9D%B8-%EC%9E%AC%EB%A3%8C-%EA%B5%AC%EC%A1%B0\">안정적인 재료: 구조</a></li>\n<li><a href=\"#%EB%B6%88%EC%95%88%EC%A0%95%ED%95%9C-%EC%9E%AC%EB%A3%8C-%EA%B8%B0%EB%8A%A5\">불안정한 재료: 기능</a></li>\n<li><a href=\"#%EC%9E%AC%EB%A3%8C-%ED%95%A9%EC%B9%98%EA%B8%B0-%EA%B8%B0%EB%8A%A5%EA%B3%BC-%EA%B5%AC%EC%A1%B0%EC%9D%98-%ED%86%B5%ED%95%A9\">재료 합치기: 기능과 구조의 통합</a></li>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>\n</div>","excerpt":"들어가기 앞서 유일하게 변하지 않는 것은 모든 것이 변한다는 사실 뿐 여행 중 길을 찾는 방법은 크게 두 가지로 나눌 수 있음 기능적이고 해결책 지향적인 접근법 다른 사람에게 길을 물어봄 올바른 길을 알려줬다면 원하는 곳으로 이동할 수 있겠지만, 이 방법은 일반적이지도, 재사용 가능하지도 않음 또 중요한 랜드마크가 없다면 설명만으로 경로를 찾기 쉽지 않음 구조적이고 문제 지향적인 접근법 지도를 이용 길을 찾는 데 필요한 풍부한 컨텍스트 정보가 함축돼 있으며, 길을 묻는 방법보다 쉽고 간단 주변 지형을 추상적으로 표현하기 때문에 실세계의 환경과 우리의 지식을 밀접하게 연관 지을 수 있게 해줌 지도는 다양한 목적을 위해 재사용될 수 있으며, 범용적. ‘기능’에 대한 요구사항이 계속 변해도 지도에 표시된 ‘구조’는 안정적이기 때문 지도 은유의 핵심은, 기능이 아니라 구조를 기반으로 모델을 구축하는 편이 좀 더 범용적이고 이해하기 쉬우며 변경에 안정적이라는 것. 객체지향 개발 방법은 안정…","frontmatter":{"date":"December 12, 2023","title":"객체지향의 사실과 오해 - 6장","categories":"Study","author":"Kay","emoji":"👋"},"fields":{"slug":"/oop-fact-and-misunderstand-6/"}},"next":{"id":"e2823f16-40ff-5623-9900-950a1caade53","html":"<h2 id=\"들어가기-앞서\" style=\"position:relative;\"><a href=\"#%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0-%EC%95%9E%EC%84%9C\" aria-label=\"들어가기 앞서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>들어가기 앞서</h2>\n<h3 id=\"7장-함께-모으기\" style=\"position:relative;\"><a href=\"#7%EC%9E%A5-%ED%95%A8%EA%BB%98-%EB%AA%A8%EC%9C%BC%EA%B8%B0\" aria-label=\"7장 함께 모으기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>7장: 함께 모으기</h3>\n<ul>\n<li>마틴 파울러는 객체지향 설계 안에 존재하는 3 상호 연관된 관점에 대해 설명하ㅁ</li>\n<li>\n<p>개념 관점(Conceptual Perspective)</p>\n<ul>\n<li>설계는 도메인 안에 존재하는 개념과 개념들 사이의 관계를 표현</li>\n<li>도메인이란 사용자들이 관심을 가지고 있는 특정 분야나 주제를 말하며 소프트웨어는 도메인에 존재하는 문제를 해결하기 위해 개발됨</li>\n</ul>\n</li>\n<li>\n<p>명세 관점(Specification Perspective)</p>\n<ul>\n<li>도메인이 아닌 실제로 소프트웨어 안에서 살아 숨쉬는 객체들의 책임 즉 객체의 인터페이스를 바라봄</li>\n<li>프로그래머는 객체가 협력을 위해 ‘무엇’을 할 수 있는가에 초점을 맞춤</li>\n</ul>\n</li>\n<li>\n<p>구현 관점(Implementation Perspective)</p>\n<ul>\n<li>객체들이 책임을 수행하는 데 필요한 동작하는 코드를 작성하는 것</li>\n<li>객체의 책임을 ‘어떻게’ 수행할 것인가에 초점을 맞춤</li>\n</ul>\n</li>\n<li>클래스는 세 가지 관점을 통해 설계와 관련된 다양한 측면을 드러냄</li>\n<li>클래스는 세 가지 관점을 모두 수용할 수 있도록 개념, 인터페이스, 구현을 함께 드러내야 함</li>\n</ul>\n<br>\n<h2 id=\"커피-전문점-도메인\" style=\"position:relative;\"><a href=\"#%EC%BB%A4%ED%94%BC-%EC%A0%84%EB%AC%B8%EC%A0%90-%EB%8F%84%EB%A9%94%EC%9D%B8\" aria-label=\"커피 전문점 도메인 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>커피 전문점 도메인</h2>\n<ol>\n<li>\n<p>커피 주문</p>\n<ul>\n<li>커피 전문점은 아주 간단한 도메인</li>\n<li>우리는 객체를 이용해서 손님이 커피를 주문하는 사건을 컴퓨터 안에 재구성해야 함</li>\n</ul>\n</li>\n<li>\n<p>커피 전문점이라는 세상</p>\n<ul>\n<li>객체지향의 관점에서 메뉴판은 하나의 객체이며, 메뉴판을 구성하는 메뉴 항목들 역시 객체</li>\n<li>손님 역시 객체로, 메뉴 항목 객체 하나를 선택해 바리스타 객체에게 전달함. 바리스타는 자율적으로 커피를 제조하는 객체이며, 바리스타가 제조하는 커피 역시 객체</li>\n<li>손님은 메뉴판을 알아야 하며, 이는 두 객체 사이에 관계가 존재함을 암시함. 손님은 바리스타와도 관계를 맺으며, 바리스타는 자신이 만든 커피와 관계를 맺음</li>\n<li>상태와 무관하게 동일하게 행동할 수 있는 객체들은 동일한 타입의 인스턴스로 분류할 수 있음.</li>\n<li>손님, 바리스타, 커피 객체 각각은 모두 ‘손님 타입’, ‘바리스타 타입’, ‘커피 타입’의 인스턴스</li>\n<li>메뉴판 타입과 메뉴 항목 타입은 포함(containment) 또는 합성(composition) 관계</li>\n<li>손님 타입과 메뉴판 타입은 포함 관계는 아니지만 서로 알고 있는 연관(association) 관계에 있음</li>\n<li>커피 전문점 도메인을 구성하는 타입들의 종류와 관계를 표현할 수 있음.</li>\n<li>소프트웨어가 대상으로 하는 영역인 도메인을 단순화해서 표현한 모델을 도메인 모델이라고 함</li>\n</ul>\n</li>\n</ol>\n<br>\n<h2 id=\"설계하고-구현하기\" style=\"position:relative;\"><a href=\"#%EC%84%A4%EA%B3%84%ED%95%98%EA%B3%A0-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0\" aria-label=\"설계하고 구현하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>설계하고 구현하기</h2>\n<ol>\n<li>\n<p>커피를 주문하기 위한 협력 찾기</p>\n<ul>\n<li>협력을 설계할 때는 메시지가 객체를 선택하게 해야 함</li>\n<li>첫 번째 메시지는 ‘커피를 주문하라’임.</li>\n<li>도메인 모델 안에 이 책임을 수행하기에 적절한 타입은 손님 타입으로, 이 메시지를 처리할 객체는 손님 타입의 인스턴스임</li>\n<li>이때 손님은 메뉴 항목에 대해서는 알지 못하며, ‘메뉴 항목을 찾아라’라는 새로운 메시지가 등장 함.</li>\n<li>메시지에 ‘메뉴 이름’이라는 인자를 포함해 함께 전송함. 메뉴 항목을 찾을 책임은 메뉴 항목 객체를 포함하고 있는 메뉴판 객체에게 할당함</li>\n<li>손님은 자신이 주문한 커피에 대한 메뉴 항목을 얻었으니 이제 ‘커피를 제조하라’라는 메시지를 만듦.</li>\n<li>인자로는 메뉴 항목을 전달하고 반환값으로는 제조된 커피를 받아야 함. 이 메시지는 바리스타 객체가 수신함</li>\n<li>아메리카노를 만드는 데 필요한 지식은 바리스타의 상태로, 기술은 바리스타의 행동으로 간주할 수 있음.</li>\n<li>이런 관점에서 바리스타는 스스로의 판단과 지식에 따라 행동하는 자율적인 존재</li>\n</ul>\n</li>\n<li>\n<p>인터페이스 정리 및 구현</p>\n<ul>\n<li>객체가 수신한 메시지가 객체의 인터페이스를 결정함.</li>\n<li>메시지가 객체를 선택했고, 선택된 객체는 메시지를 자신의 인터페이스로 받아들임.</li>\n<li>객체가 어떤 메시지를 수신할 수 있다는 것은 그 객체의 인터페이스 안에 메시지에 해당하는 오퍼레이션이 존재한다는 것을 의미</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 클래스를 이용하여 협력을 통해 식별된 타입의 오퍼레이션을 외부에서 접근 가능한 공용 인터페이스로 만듦</span>\n<span class=\"token comment\">// 클래스의 인터페이스를 식별했으므로 이제 오퍼레이션을 수행하는 방법을 메서드로 구현</span>\n<span class=\"token comment\">// 객체가 다른 객체에게 메시지를 전송하기 위해서는 먼저 객체에 대한 참조를 얻어야 함</span>\n<span class=\"token comment\">// 객체의 속성은 객체의 내부 구현에 속하기 때문에 캡슐화돼야 함. 따라서 MenuItem의 목록을 Menu의 속성으로 포함시킴</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Barista</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> Coffee <span class=\"token function\">makeCoffee</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">MenuItem menuItem</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     Coffee coffee <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Coffee</span><span class=\"token punctuation\">(</span>menuItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">return</span> coffee<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Coffee</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> String name<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> int price<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token function\">Coffee</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">MenuItem menuItem</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> menuItem<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>price <span class=\"token operator\">=</span> menuItem<span class=\"token punctuation\">.</span><span class=\"token function\">cost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MenuItem</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> String name<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> int price<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token function\">MenuItem</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">String name<span class=\"token punctuation\">,</span> int price</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>price <span class=\"token operator\">=</span> price<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> int <span class=\"token function\">cost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">return</span> price<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> String <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>인터페이스를 통해 실제로 상호작용을 해보지 않은 채 인터페이스의 모습을 정확하게 예측하는 것은 불가능</li>\n<li>설계를 간단히 끝내고 최대한 빨리 구현에 돌입.</li>\n<li>설계가 제대로 그려지지 않는다면 고민하지 말고 실제로 코드를 작성해가면서 협력의 전체적인 밑그림 작성</li>\n</ol>\n<br>\n<h2 id=\"코드와-세-가지-관점\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C%EC%99%80-%EC%84%B8-%EA%B0%80%EC%A7%80-%EA%B4%80%EC%A0%90\" aria-label=\"코드와 세 가지 관점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드와 세 가지 관점</h2>\n<ol>\n<li>코드는 세 가지 관점을 모두 제공</li>\n</ol>\n<h3 id=\"개념-관점\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EB%85%90-%EA%B4%80%EC%A0%90\" aria-label=\"개념 관점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개념 관점</h3>\n<ul>\n<li>Customer, Menu, MenuItem, Barista, Coffee 클래스가 있음.</li>\n<li>이 클래스들은 커피 전문점 도메인을 구성하는 중요한 개념과 관계를 반영</li>\n<li>소프트웨어 클래스가 도메인 개념의 특성을 최대한 수용하면 변경을 관리하기 쉽고 유지보수성을 향상시킬 수 있음</li>\n</ul>\n<h3 id=\"명세-관점\" style=\"position:relative;\"><a href=\"#%EB%AA%85%EC%84%B8-%EA%B4%80%EC%A0%90\" aria-label=\"명세 관점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>명세 관점</h3>\n<ul>\n<li>클래스의 인터페이스를 바라봄.</li>\n<li>클래스의 public 메서드는 다른 클래스가 협력할 수 있는 공용 인터페이스로, 외부 객체가 접근할 수 있는 유일한 부분.</li>\n<li>최대한 변화에 안정적인 인터페이스를 만들기 위해 인터페이스 구현과 관련된 세부 사항이 드러나지 않게 해야 함.</li>\n</ul>\n<h3 id=\"구현-관점\" style=\"position:relative;\"><a href=\"#%EA%B5%AC%ED%98%84-%EA%B4%80%EC%A0%90\" aria-label=\"구현 관점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>구현 관점</h3>\n<ul>\n<li>클래스의 내부 구현을 바라봄</li>\n<li>클래스의 메서드와 속성이 구현에 속하며, 메서드의 구현과 속성의 변경은 원칙적으로 외부의 객체에 영향을 미쳐서는 안 됨.</li>\n<li>메서드와 속성은 철저하게 클래스 내부로 캡슐화돼야 함</li>\n<li>하나의 클래스 안에는 개념 관점, 명세 관점, 구현 관점을 모두 포함해야 함</li>\n<li>\n<p>도메인 개념을 참조하는 이유</p>\n<ul>\n<li>도메인 개념 안에서 적절한 객체를 선택하는 것은 도메인에 대한 지식을 기반으로 코드의 구조와 의미를 쉽게 유추할 수 있게 함.</li>\n<li>소프트웨어 클래스가 도메인 개념을 따르면 변화에 쉽게 대응할 수 있음</li>\n</ul>\n</li>\n<li>\n<p>인터페이스와 구현을 분리</p>\n<ul>\n<li>명세 관점과 구현 관점을 분리해야 함.</li>\n<li>명세 관점은 클래스의 안정적인 측면을 드러내고, 구현 관점은 클래스의 불안정한 측면을 드러내야 함</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<ul>\n<li><a href=\"https://www.yes24.com/Product/Goods/18249021\">객체지향의 사실과 오해</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0-%EC%95%9E%EC%84%9C\">들어가기 앞서</a></p>\n<ul>\n<li><a href=\"#7%EC%9E%A5-%ED%95%A8%EA%BB%98-%EB%AA%A8%EC%9C%BC%EA%B8%B0\">7장: 함께 모으기</a></li>\n</ul>\n</li>\n<li><a href=\"#%EC%BB%A4%ED%94%BC-%EC%A0%84%EB%AC%B8%EC%A0%90-%EB%8F%84%EB%A9%94%EC%9D%B8\">커피 전문점 도메인</a></li>\n<li><a href=\"#%EC%84%A4%EA%B3%84%ED%95%98%EA%B3%A0-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0\">설계하고 구현하기</a></li>\n<li>\n<p><a href=\"#%EC%BD%94%EB%93%9C%EC%99%80-%EC%84%B8-%EA%B0%80%EC%A7%80-%EA%B4%80%EC%A0%90\">코드와 세 가지 관점</a></p>\n<ul>\n<li><a href=\"#%EA%B0%9C%EB%85%90-%EA%B4%80%EC%A0%90\">개념 관점</a></li>\n<li><a href=\"#%EB%AA%85%EC%84%B8-%EA%B4%80%EC%A0%90\">명세 관점</a></li>\n<li><a href=\"#%EA%B5%AC%ED%98%84-%EA%B4%80%EC%A0%90\">구현 관점</a></li>\n</ul>\n</li>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>\n</div>","frontmatter":{"date":"December 12, 2023","title":"객체지향의 사실과 오해 - 7장","categories":"Study","author":"Kay","emoji":"👋"},"fields":{"slug":"/oop-fact-and-misunderstand-7/"}},"prev":{"id":"4bb5cacf-864b-580c-9aad-bc5a9fa3ecce","html":"<h2 id=\"회고\" style=\"position:relative;\"><a href=\"#%ED%9A%8C%EA%B3%A0\" aria-label=\"회고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>회고</h2>\n<h3 id=\"업무-회고\" style=\"position:relative;\"><a href=\"#%EC%97%85%EB%AC%B4-%ED%9A%8C%EA%B3%A0\" aria-label=\"업무 회고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>업무 회고</h3>\n<ul>\n<li>개발을 하면서 타입스크립트의 장점을 느낀 것 중에 하나가, API Request Data와 Response Data Type을 지정해 놓으면 일일히 BE분께서 제공해주신 Swagger를 참고할 필요가 없다는 사실이다. 또한 BE분과 협업하면서 Request와 Response 타입이 다른 부분에 대해 디테일하게 물어보면서 협업할 수 있어 좋았다.</li>\n<li>우리가 최종으로 보는 것은 타입이다.(props, return 타입)</li>\n<li>시간 압박에 의해 any 타입을 사용하고 싶은 욕구가 많지만, 최대한 차분히 타입 에러를 해결하는 연습이 필요하다.</li>\n<li>불필요한 삼항연산자 사용을 줄이자. ex) <code class=\"language-text\">setName(name === 'ko' ? true : false)</code> -> <code class=\"language-text\">setName(name === 'ko')</code></li>\n<li>스프린트 일정을 잡을 때에는 리서치 부분도 고려해서 업무 일정을 작성해야 하고 리팩토링 일정에 대해서는 미리 팀에게 리팩토링해야할 부분에 대해 리스트 업을 한 다음에 다 함께 공유해서 마일스톤에 지장가지 않은 선에서 리팩토링 업무 일정을 잡아야 함. 스프린트 일정은 단순히 개인의 업무를 하는 것이 아닌, 팀의 마일스톤을 달성하기 위한 일정 작성이기 때문에 팀에게 미리 공유하고 작성해야 한다.</li>\n<li>불필요한 파일 생성은 지양. 특히 재 사용하지 않은 코드에 대해서 무조건 적으로 파일을 분리해서 작성하는 것 지양</li>\n<li>맵핑을 사용하는 이유는 if문과 switch문 보다 개인적으로 가독성 측면에서 좋다고 판단된다. 또한 BE에서 API 응답 값에 따라 특정 로직이나 UI를 렌더링 해야하는 상황에도 사용해도 좋은 것 같다. 그러나 무조건적으로 사용하는것은 지양해야 한다.</li>\n<li>하나의 함수는 하나의 역할만 하도록 작성해야 한다. 하나의 함수 안에 무언가 추가적으로 하는 작업이 있다면, 디버깅할 때 시간도 많이 걸린다.</li>\n<li>개발은 결국 ‘문제 해결’을 하는 것이다. 함수를 만들던, 객체를 만들던 결국 작은 문제 해결 방법 도구들을 만들어서(이 때, 작은 단위로 만들어야 함) 진정으로 내가 해결하고자 하는 문제 해결을 할 수 있다. 그래서 개발 하기 전에 항상 바로 개발하는 것이 아닌, 미리 ‘설계도’를 작성하면서 개발을 하는 습관을 들이자.</li>\n<li>스스로 개발하면서 중복적인 코드가 눈에 많이 보인다면, 무조건 ‘문제’라고 인식하자. 그리고 최대한 ‘중복’ 코드를 줄이자.</li>\n<li>항상 ‘이유’를 생각하면서 개발을 해야 한다.</li>\n<li>특정 문서의 튜토리얼을 사용할 때에는 무조건적으로 가져오는게 아닌, 내가 직면한 문제를 해결하기 위해 사용되어야 한다. 주객이 전도되면 안된다.</li>\n<li>PR을 하기 앞서, 더 나아가 개발을 하기 앞서 개발의 방향성이 잘 안 잡힐 때 팀에게 물어보고 개발을 하게 되면 PR 리뷰 수도 줄어들고 무엇보다 팀의 타임 리소스를 줄일 수 있다.</li>\n<li>새로운 기술(패키지, 라이브러리 등)을 도입할 때에는 다양한 비용을 고려해야 한다. 먼저 팀원분들이 익순한 기술인지, 혹여 새로운 기술을 도입했을 때 러닝 커브나 시간은 얼마나 걸릴지, 이로 인해 갑작스럽게 핫픽스 대응 할 수 있는데 악영향을 주지는 않는지 등을 말이다. 결국 새로운 기술을 도입하는 가장 큰 이유는 ‘문제 해결’이다. mantine이 제공해주는 useForm을 통해서도 form 기능을 구현할 수 있지만, 현재 팀내에서 React Hook Form을 사용하고 있고, 기능적으로 더 많은 이점이 존재하기 때문에 안쓸 이유가 없었다. 나는 그것도 인지 하지 못한 채로 mantine의 useForm을 ‘그냥’사용했다. 이 부분은 정말 스스로 반성하는 계기가 되었다.</li>\n</ul>\n<br>\n<h2 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리</h2>\n<p>매일 매일 첼린지 하는 기분이 든다.\nPR 리뷰를 받을 때, 조마조마한 기분과 숨고 싶은 마음이 굴뚝같이 솟았다.</p>\n<p>‘왜 이럴까’에 대해 팀원분들의 피드백을 듣고나서 알게 되었다. 결국 내가 ‘왜’를 놓치고 개발하고 있음을 깨닫게 되었다.\n더 나아가, 나의 삶에서 ‘왜’가 빠져있음도 알게 되었다.</p>\n<p>이번 피드백과 회고를 통해서 ‘문제’를 정확하게 인지하고, ‘왜’ 이 ‘문제’를 해결하고 싶은지,</p>\n<p>그리고 이 ‘문제’를 해결하기 위해 어떠한 ‘과정’으로 해결해 나아갈지 먼저 개발하면서 위의 사고를 연습하고 습관하 한다면,</p>\n<p>내 ‘삶’에서도 ‘이유’를 찾는 데 도움을 줄 것이라 확신이 든다.</p>\n<p>이번 한 주도 수고했다.</p>\n<br>\n<h3 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h3>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%ED%9A%8C%EA%B3%A0\">회고</a></p>\n<ul>\n<li><a href=\"#%EC%97%85%EB%AC%B4-%ED%9A%8C%EA%B3%A0\">업무 회고</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\">마무리</a></p>\n<ul>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"December 16, 2023","title":"12월 3주 회고","categories":"Log","author":"Kay","emoji":"👋"},"fields":{"slug":"/write-log-231216/"}},"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/oop-fact-and-misunderstand-6/","nextSlug":"/oop-fact-and-misunderstand-7/","prevSlug":"/write-log-231216/"}},"staticQueryHashes":["1073350324","2938748437"]}