{"componentChunkName":"component---src-templates-blog-template-js","path":"/study-js-es6-promise-1/","result":{"data":{"cur":{"id":"d4c7cee3-87d2-5406-ac1e-c548c8ebb950","html":"<br>\n<h1 align=\"center\">\n  👋  Promise 개요, Promise 처리 흐름, Promise 상태\n</h1>\n<br>\n<h2 id=\"1-promise-개요\" style=\"position:relative;\"><a href=\"#1-promise-%EA%B0%9C%EC%9A%94\" aria-label=\"1 promise 개요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Promise 개요</h2>\n<ul>\n<li>\n<p>JS는 기본적으로 <code class=\"language-text\">동기</code>로실행</p>\n<ul>\n<li>실행이 끝나야 다음 코드를 실행함</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">Promise</code> 는 비동기로 처리(실행)함</p>\n<ul>\n<li>코드를 연속으로 처리(실행)하지 않고, 중간에 흐름이 끊어졌다가 연결된 코드를 처리 할 수 있는 환경이 되었을 때 실행함</li>\n<li>이를 위한 메커니즘을 갖고 있음</li>\n</ul>\n</li>\n<li><code class=\"language-text\">DOM</code> 스펙에서 <code class=\"language-text\">JS</code> 스펙으로 전환</li>\n</ul>\n<br>\n<h2 id=\"2-promise-처리-흐름\" style=\"position:relative;\"><a href=\"#2-promise-%EC%B2%98%EB%A6%AC-%ED%9D%90%EB%A6%84\" aria-label=\"2 promise 처리 흐름 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Promise 처리 흐름</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">Promise</code> 처리(실행) 흐름 개요</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resovle<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Promise'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n<span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'성공'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token parameter\">reson</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'실패'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'마지막'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Promise</span>\n<span class=\"token comment\">// 마지막</span>\n<span class=\"token comment\">// 성공</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">new Promise()</code> 를 실행함</p>\n<ul>\n<li>파라미터의 함수를 실행함</li>\n<li><code class=\"language-text\">resolve()</code> 를 호출 하지 않음</li>\n<li><code class=\"language-text\">console.log(\"Promise\")</code> 를 실행</li>\n<li><code class=\"language-text\">obj</code> 변수에 <code class=\"language-text\">Promise</code> 인스턴스 할당</li>\n</ul>\n</li>\n<li><code class=\"language-text\">obj.then()</code>을 실행하지 않음</li>\n<li>마지막 줄의 <code class=\"language-text\">console.log(\"마지막\")</code> 실행함</li>\n<li>\n<p><code class=\"language-text\">resolve()</code> 실행</p>\n<ul>\n<li><code class=\"language-text\">then()</code> 의 첫 번째 파라미터 함수 실행</li>\n<li><code class=\"language-text\">console.log(\"성공\")</code> 실행</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"3-promise-상태\" style=\"position:relative;\"><a href=\"#3-promise-%EC%83%81%ED%83%9C\" aria-label=\"3 promise 상태 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Promise 상태</h2>\n<ul>\n<li>\n<p>상태는 3가지이며, 하나만 발생함</p>\n<ul>\n<li><code class=\"language-text\">pending, settled(fulfilled, rejected)</code></li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">pending</code> 상태</p>\n<ul>\n<li><code class=\"language-text\">new Promise()</code> 로 인스턴스 생성</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pending'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'성공'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">reson</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'실패'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'마지막'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// pending</span>\n<span class=\"token comment\">// 마지막</span>\n<span class=\"token comment\">// 성공</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">settled</code> 상태</p>\n<ul>\n<li><code class=\"language-text\">pending</code>이 종료된 상태를 나타내며 <code class=\"language-text\">fulfilled</code>와 <code class=\"language-text\">rejected</code> 상태로 구분</li>\n<li>바인딩한 핸들러 함수가 호출됨</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pending'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'성공'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">reson</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'실패'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'마지막'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// pending</span>\n<span class=\"token comment\">// 마지막</span>\n<span class=\"token comment\">// 성공</span></code></pre></div>\n</li>\n<li><code class=\"language-text\">fulfilled(성공)</code> : <code class=\"language-text\">then()</code> 의 첫 번째 함수 호출</li>\n<li><code class=\"language-text\">rejected(실패)</code> : <code class=\"language-text\">then()</code> 의 두 번째 함수 호출</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1-promise-%EA%B0%9C%EC%9A%94\">1. Promise 개요</a></li>\n<li><a href=\"#2-promise-%EC%B2%98%EB%A6%AC-%ED%9D%90%EB%A6%84\">2. Promise 처리 흐름</a></li>\n<li><a href=\"#3-promise-%EC%83%81%ED%83%9C\">3. Promise 상태</a></li>\n</ul>\n</div>","excerpt":"1. Promise 개요 JS는 기본적으로 로실행 실행이 끝나야 다음 코드를 실행함  는 비동기로 처리(실행)함 코드를 연속으로 처리(실행)하지 않고, 중간에 흐름이 끊어졌다가 연결된 코드를 처리 할 수 있는 환경이 되었을 때 실행함 이를 위한 메커니즘을 갖고 있음  스펙에서  스펙으로 전환 2. Promise 처리 흐름  처리(실행) 흐름 개요  를 실행함 파라미터의 함수를 실행함  를 호출 하지 않음  를 실행  변수에  인스턴스 할당 을 실행하지 않음 마지막 줄의  실행함  실행  의 첫 번째 파라미터 함수 실행  실행 3. Promise 상태 상태는 3가지이며, 하나만 발생함   상태  로 인스턴스 생성  상태 이 종료된 상태를 나타내며 와  상태로 구분 바인딩한 핸들러 함수가 호출됨  :  의 첫 번째 함수 호출  :  의 두 번째 함수 호출 1. Promise 개요 2. Promise 처리 흐름 3. Promise 상태","frontmatter":{"date":"December 15, 2021","title":"Promise - 개요, 처리 흐름, 상태","categories":"JS","author":"Kay","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-promise-1/"}},"next":{"id":"7783d6dd-ccb3-53b6-9dfa-138f389c6dd8","html":"<br>\n<h2 id=\"-http-메세지\" style=\"position:relative;\"><a href=\"#-http-%EB%A9%94%EC%84%B8%EC%A7%80\" aria-label=\" http 메세지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✅ HTTP 메세지</h2>\n<h3 id=\"시작-라인-요청-메시지\" style=\"position:relative;\"><a href=\"#%EC%8B%9C%EC%9E%91-%EB%9D%BC%EC%9D%B8-%EC%9A%94%EC%B2%AD-%EB%A9%94%EC%8B%9C%EC%A7%80\" aria-label=\"시작 라인 요청 메시지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>시작 라인: 요청 메시지</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token constant\">GET</span> <span class=\"token operator\">/</span>search<span class=\"token operator\">?</span>q<span class=\"token operator\">=</span>hello<span class=\"token operator\">&amp;</span>hl<span class=\"token operator\">=</span>ko <span class=\"token constant\">HTTP</span><span class=\"token operator\">/</span><span class=\"token number\">1.1</span>\nHost<span class=\"token operator\">:</span>www<span class=\"token punctuation\">.</span>google<span class=\"token punctuation\">.</span>com</code></pre></div>\n<ol>\n<li>start-line = request-line / status-line</li>\n<li>request-line = method SP(공백) request-target SP HTTP-version CRLF(엔터)</li>\n<li>\n<p>HTTP 메서드 (GET: 조회)</p>\n<ul>\n<li>종류 : GET, POST, PUT, DELETE</li>\n<li>서버가 수행해야 할 동작 지정 : GET(리소스 조회), POST(요청 내역 처리)</li>\n</ul>\n</li>\n<li>요청 대상(<code class=\"language-text\">/search?q=hello&amp;hl=ko</code>)</li>\n<li>HTTP Version</li>\n</ol>\n<br>\n<h3 id=\"시작-라인-요청-메시지요청대상\" style=\"position:relative;\"><a href=\"#%EC%8B%9C%EC%9E%91-%EB%9D%BC%EC%9D%B8-%EC%9A%94%EC%B2%AD-%EB%A9%94%EC%8B%9C%EC%A7%80%EC%9A%94%EC%B2%AD%EB%8C%80%EC%83%81\" aria-label=\"시작 라인 요청 메시지요청대상 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>시작 라인: 요청 메시지(요청대상)</h3>\n<ol>\n<li><code class=\"language-text\">absolute-path[?query] : (절대경로[?쿼리])</code></li>\n<li>절대경로 = <code class=\"language-text\">\"/\"</code>로 시작하는 경로</li>\n</ol>\n<br>\n<h3 id=\"시작-라인-응답-메시지\" style=\"position:relative;\"><a href=\"#%EC%8B%9C%EC%9E%91-%EB%9D%BC%EC%9D%B8-%EC%9D%91%EB%8B%B5-%EB%A9%94%EC%8B%9C%EC%A7%80\" aria-label=\"시작 라인 응답 메시지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>시작 라인: 응답 메시지</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token constant\">HTTP</span><span class=\"token operator\">/</span><span class=\"token number\">1.1</span> <span class=\"token number\">200</span> <span class=\"token constant\">OK</span>\nContent<span class=\"token operator\">-</span>type<span class=\"token operator\">:</span> text<span class=\"token operator\">/</span>html<span class=\"token punctuation\">;</span>charset<span class=\"token operator\">=</span><span class=\"token constant\">UTF</span><span class=\"token operator\">-</span><span class=\"token number\">8</span>\nContetnt<span class=\"token operator\">-</span>Length<span class=\"token operator\">:</span> <span class=\"token number\">3423</span>\n\n<span class=\"token operator\">&lt;</span>html<span class=\"token operator\">></span>\n   <span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span><span class=\"token operator\">...</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>html<span class=\"token operator\">></span></code></pre></div>\n<ol>\n<li>start-line = request-line / <strong>status-line</strong></li>\n<li>status-line = HTTP-version SP status-code SP reason-phrase CRLF </li>\n<li>\n<p>HTTP 상태 코드 : 요청 성공, 실패를 나타냄</p>\n<ul>\n<li>200 : 성공</li>\n<li>400 : 클라리언트 요청 오류</li>\n<li>500 : 서버 내부 오류</li>\n</ul>\n</li>\n<li>이유 문구 : 사람이 이해할 수 있는 짧은 상태 코드 글</li>\n</ol>\n<br>\n<h3 id=\"http-헤더-용도\" style=\"position:relative;\"><a href=\"#http-%ED%97%A4%EB%8D%94-%EC%9A%A9%EB%8F%84\" aria-label=\"http 헤더 용도 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTTP 헤더: 용도</h3>\n<ol>\n<li>\n<p>HTTP 전송에 필요한 모든 부가 정보</p>\n<ul>\n<li>ex) 메시지 바디의 내용, 메시지 바다의 크기, 압축, 인증, 요청 클라이언트(브라우저) 정보, 서버 애플리케이션 정보, 캐시 관리 정보</li>\n</ul>\n</li>\n<li>표준 헤더가 너무 많음</li>\n<li>필요시 임의의 헤더 추가 가능</li>\n</ol>\n<br>\n<h3 id=\"http-메시지-바디-용도\" style=\"position:relative;\"><a href=\"#http-%EB%A9%94%EC%8B%9C%EC%A7%80-%EB%B0%94%EB%94%94-%EC%9A%A9%EB%8F%84\" aria-label=\"http 메시지 바디 용도 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTTP 메시지 바디: 용도</h3>\n<ol>\n<li>실제 전송할 데이터</li>\n<li>HTML문서, 이미지, 영상, JSON 등등 byte로 표현할 수 있는 모든 데이터 전송 가능</li>\n</ol>\n<br>\n<h3 id=\"단순함-확장-가능\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EC%88%9C%ED%95%A8-%ED%99%95%EC%9E%A5-%EA%B0%80%EB%8A%A5\" aria-label=\"단순함 확장 가능 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단순함 확장 가능</h3>\n<ol>\n<li>HTTP는 단순함</li>\n<li>HTTP 메시지도 매우 단순</li>\n<li>크게 성공하는 표준 기술은 단순하지만 확장 가능한 기술</li>\n</ol>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-http-%EB%A9%94%EC%84%B8%EC%A7%80\">✅ HTTP 메세지</a></p>\n<ul>\n<li><a href=\"#%EC%8B%9C%EC%9E%91-%EB%9D%BC%EC%9D%B8-%EC%9A%94%EC%B2%AD-%EB%A9%94%EC%8B%9C%EC%A7%80\">시작 라인: 요청 메시지</a></li>\n<li><a href=\"#%EC%8B%9C%EC%9E%91-%EB%9D%BC%EC%9D%B8-%EC%9A%94%EC%B2%AD-%EB%A9%94%EC%8B%9C%EC%A7%80%EC%9A%94%EC%B2%AD%EB%8C%80%EC%83%81\">시작 라인: 요청 메시지(요청대상)</a></li>\n<li><a href=\"#%EC%8B%9C%EC%9E%91-%EB%9D%BC%EC%9D%B8-%EC%9D%91%EB%8B%B5-%EB%A9%94%EC%8B%9C%EC%A7%80\">시작 라인: 응답 메시지</a></li>\n<li><a href=\"#http-%ED%97%A4%EB%8D%94-%EC%9A%A9%EB%8F%84\">HTTP 헤더: 용도</a></li>\n<li><a href=\"#http-%EB%A9%94%EC%8B%9C%EC%A7%80-%EB%B0%94%EB%94%94-%EC%9A%A9%EB%8F%84\">HTTP 메시지 바디: 용도</a></li>\n<li><a href=\"#%EB%8B%A8%EC%88%9C%ED%95%A8-%ED%99%95%EC%9E%A5-%EA%B0%80%EB%8A%A5\">단순함 확장 가능</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"December 15, 2021","title":"HTTP - 3.HTTP 기본(3)","categories":"CS","author":"Kay","emoji":"👨‍💻"},"fields":{"slug":"/study-cs-HTTP-5/"}},"prev":{"id":"2051a891-f0dc-5d31-ad57-6cbf52209419","html":"<br>\n<h2 id=\"-http-api를-만들어보자\" style=\"position:relative;\"><a href=\"#-http-api%EB%A5%BC-%EB%A7%8C%EB%93%A4%EC%96%B4%EB%B3%B4%EC%9E%90\" aria-label=\" http api를 만들어보자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✅ HTTP API를 만들어보자</h2>\n<ol>\n<li>HTTP API를 만들어보자</li>\n<li>HTTP 메서드 - GET, POST</li>\n<li>HTTP 메서드 - PUT, PATCH, DELETE</li>\n<li>HTTP 메서드의 속성</li>\n</ol>\n<br>\n<h3 id=\"요구사항-ex-회원-정보-관리-api를-만들어라\" style=\"position:relative;\"><a href=\"#%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD-ex-%ED%9A%8C%EC%9B%90-%EC%A0%95%EB%B3%B4-%EA%B4%80%EB%A6%AC-api%EB%A5%BC-%EB%A7%8C%EB%93%A4%EC%96%B4%EB%9D%BC\" aria-label=\"요구사항 ex 회원 정보 관리 api를 만들어라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>요구사항 ex) 회원 정보 관리 API를 만들어라</h3>\n<ol>\n<li>회원 목록 조회</li>\n<li>회원 조회</li>\n<li>회원 등록</li>\n<li>회원 수정</li>\n<li>회원 삭제</li>\n</ol>\n<br>\n<h3 id=\"api-url-설정-초보-개발자\" style=\"position:relative;\"><a href=\"#api-url-%EC%84%A4%EC%A0%95-%EC%B4%88%EB%B3%B4-%EA%B0%9C%EB%B0%9C%EC%9E%90\" aria-label=\"api url 설정 초보 개발자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>API URL 설정: 초보 개발자</h3>\n<ol>\n<li>회원 목록 조회 : <code class=\"language-text\">/read-member-list</code></li>\n<li>회원 조회 : <code class=\"language-text\">/read-member-by-id</code></li>\n<li>회원 등록 : <code class=\"language-text\">/create-member</code></li>\n<li>회원 수정 : <code class=\"language-text\">/update-member</code></li>\n<li>회원 삭제 : <code class=\"language-text\">/delete-member</code></li>\n</ol>\n<p><strong>—> 이것은 좋은 URI 설계일까?</strong></p>\n<p><strong>—> 가장 중요한 것은 리소스 식별</strong></p>\n<br>\n<h3 id=\"api-uri-고민\" style=\"position:relative;\"><a href=\"#api-uri-%EA%B3%A0%EB%AF%BC\" aria-label=\"api uri 고민 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>API URI 고민</h3>\n<ol>\n<li>\n<p>리소스의 의미는 뭘까?</p>\n<ul>\n<li>회원을 등록하고 수정하고 조회하는게 리소스가 아니다!\nex) 미네랄을 캐라 —> 미네랄이 리소스</li>\n<li><strong>회원</strong>이라는 개념 자체가 바로 리소스이다.</li>\n</ul>\n</li>\n<li>\n<p>리소스를 어떻게 식별하는게 좋을까?</p>\n<ul>\n<li>회원을 등록하고 수정하고 조회하는 것을 모두 배제</li>\n<li>회원이라는 리소스만 식별하면 된다. —> 회원 리소스를 URI에 매핑</li>\n</ul>\n</li>\n</ol>\n<br>\n<h3 id=\"api-url-설정-위-상황-고려\" style=\"position:relative;\"><a href=\"#api-url-%EC%84%A4%EC%A0%95-%EC%9C%84-%EC%83%81%ED%99%A9-%EA%B3%A0%EB%A0%A4\" aria-label=\"api url 설정 위 상황 고려 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>API URL 설정: 위 상황 고려</h3>\n<ol>\n<li><code class=\"language-text\">회원</code> 목록 조회 : <code class=\"language-text\">/members</code></li>\n<li><code class=\"language-text\">회원</code> 조회 <code class=\"language-text\">/members/{id}</code> <strong>—> 어떻게 구분하지?</strong></li>\n<li><code class=\"language-text\">회원</code> 등록 : <code class=\"language-text\">/members/{id}</code> <strong>—> 어떻게 구분하지?</strong></li>\n<li><code class=\"language-text\">회원</code> 수정 : <code class=\"language-text\">/members/{id}</code> <strong>—> 어떻게 구분하지?</strong></li>\n<li><code class=\"language-text\">회원</code> 삭제 : <code class=\"language-text\">/members/{id}</code> <strong>—> 어떻게 구분하지?</strong></li>\n</ol>\n<p>참고: 계층 구조상 상위를 컬렉션으로 보고 복수단어 사용 권장 ( member —> members )</p>\n<br>\n<h3 id=\"리소스와-행위를-분리-가장-중요한-것은-리소스를-식별하는-것\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%EC%86%8C%EC%8A%A4%EC%99%80-%ED%96%89%EC%9C%84%EB%A5%BC-%EB%B6%84%EB%A6%AC-%EA%B0%80%EC%9E%A5-%EC%A4%91%EC%9A%94%ED%95%9C-%EA%B2%83%EC%9D%80-%EB%A6%AC%EC%86%8C%EC%8A%A4%EB%A5%BC-%EC%8B%9D%EB%B3%84%ED%95%98%EB%8A%94-%EA%B2%83\" aria-label=\"리소스와 행위를 분리 가장 중요한 것은 리소스를 식별하는 것 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리소스와 행위를 분리: 가장 중요한 것은 리소스를 식별하는 것</h3>\n<ol>\n<li>URI는 리소스만 식별</li>\n<li>\n<p><strong>리소스와</strong> 해당 리소스를 대상으로 하는 <strong>행위를</strong> 분리</p>\n<ul>\n<li><strong>리소스</strong> : 회원</li>\n<li><strong>행위</strong> : 조회, 등록, 삭제, 변경</li>\n</ul>\n</li>\n<li>리소는 명사, 행위는 동사</li>\n<li>행위는 어떻게 구분??? —> HTTP 메서드 : GET, POST로</li>\n</ol>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-http-api%EB%A5%BC-%EB%A7%8C%EB%93%A4%EC%96%B4%EB%B3%B4%EC%9E%90\">✅ HTTP API를 만들어보자</a></p>\n<ul>\n<li><a href=\"#%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD-ex-%ED%9A%8C%EC%9B%90-%EC%A0%95%EB%B3%B4-%EA%B4%80%EB%A6%AC-api%EB%A5%BC-%EB%A7%8C%EB%93%A4%EC%96%B4%EB%9D%BC\">요구사항 ex) 회원 정보 관리 API를 만들어라</a></li>\n<li><a href=\"#api-url-%EC%84%A4%EC%A0%95-%EC%B4%88%EB%B3%B4-%EA%B0%9C%EB%B0%9C%EC%9E%90\">API URL 설정: 초보 개발자</a></li>\n<li><a href=\"#api-uri-%EA%B3%A0%EB%AF%BC\">API URI 고민</a></li>\n<li><a href=\"#api-url-%EC%84%A4%EC%A0%95-%EC%9C%84-%EC%83%81%ED%99%A9-%EA%B3%A0%EB%A0%A4\">API URL 설정: 위 상황 고려</a></li>\n<li><a href=\"#%EB%A6%AC%EC%86%8C%EC%8A%A4%EC%99%80-%ED%96%89%EC%9C%84%EB%A5%BC-%EB%B6%84%EB%A6%AC-%EA%B0%80%EC%9E%A5-%EC%A4%91%EC%9A%94%ED%95%9C-%EA%B2%83%EC%9D%80-%EB%A6%AC%EC%86%8C%EC%8A%A4%EB%A5%BC-%EC%8B%9D%EB%B3%84%ED%95%98%EB%8A%94-%EA%B2%83\">리소스와 행위를 분리: 가장 중요한 것은 리소스를 식별하는 것</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"December 16, 2021","title":"HTTP - 4.HTTP 메서드(1)","categories":"CS","author":"Kay","emoji":"👨‍💻"},"fields":{"slug":"/study-cs-HTTP-6/"}},"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/study-js-es6-promise-1/","nextSlug":"/study-cs-HTTP-5/","prevSlug":"/study-cs-HTTP-6/"}},"staticQueryHashes":["1073350324","2938748437"]}