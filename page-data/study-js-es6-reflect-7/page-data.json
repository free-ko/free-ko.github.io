{"componentChunkName":"component---src-templates-blog-template-js","path":"/study-js-es6-reflect-7/","result":{"data":{"cur":{"id":"ec8d1af4-550c-54c9-8a5f-49c449eeeb1e","html":"<br>\n<h1 align=\"center\">\n  👋 construct(), apply()\n</h1>\n<br>\n<h2 id=\"1-constructo\" style=\"position:relative;\"><a href=\"#1-constructo\" aria-label=\"1 constructo permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. constructo()</h2>\n<ul>\n<li>인스턴스를 생성하여 반환함</li>\n<li>\n<p><code class=\"language-text\">Reflect.construct(target, params)</code> 형태</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">one<span class=\"token punctuation\">,</span> two</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>point <span class=\"token operator\">=</span> one <span class=\"token operator\">+</span> two<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">construct</span><span class=\"token punctuation\">(</span>Point<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 300</span>\n\n<span class=\"token comment\">// 1. Reflect.construct(Point, [100, 200], Point 클래스의 constructor()를 호출 함, [100]처럼 값이 하나라도 배열로 작성함</span>\n<span class=\"token comment\">// 2. constructor(one, two){...} 100이 one에 200이 two에 설정됨</span>\n<span class=\"token comment\">// 3. Point 인스턴스를 생성하여 반환함</span></code></pre></div>\n</li>\n<li>\n<p>세 번째 파라미터는 선택임</p>\n<ul>\n<li>생성자 함수를 작성함</li>\n<li>작성한 함수로 인스턴스를 생성함</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">point</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>point <span class=\"token operator\">=</span> point<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getPoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>point<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">getTitle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'JS: '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>point<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">construct</span><span class=\"token punctuation\">(</span>Point<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> Book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>getPoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">getTitle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// JS: 100</span>\n\n<span class=\"token comment\">// 1. Reflect.construct(Point, [100], Book); 3번째 파라미터에 Book 클래스를 작성함, Point 클래스의 constructor가 호출됨</span>\n<span class=\"token comment\">// 2. constructor(point){ this.point = point; } Point가 아니라 Book으로 인스턴스를 생성함, this가 Book 클래스를 참조함</span>\n<span class=\"token comment\">// 3. this.point = point; point가 인스턴스 프로퍼티로 설정됨</span>\n<span class=\"token comment\">// 4. 외부 API 사용처럼 변경할 수 없는 환경에서 클래스의 프로퍼티를 인스턴스 프로퍼티로 사용하면서 클래스의 prototype을 오버라이드하는 형태로 사용할 수 있음</span>\n<span class=\"token comment\">// 5. obj.getPoint, obj 인스턴스에 getPoint()가 없으므로 undefined 출력</span>\n<span class=\"token comment\">// 6. obj.getTitle() Bookd의 getTitle()이 호출됨</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">핸들러의 constrcut()</code> 트랩 호출</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>point</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>point <span class=\"token operator\">=</span> point<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">getPoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>point<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> handler <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">construct</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">,</span> proxy</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">construct</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> proxy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>Point<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">construct</span><span class=\"token punctuation\">(</span>proxy<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">getPoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1, 2]</span>\n\n<span class=\"token comment\">// 1. const obj = Reflect.construct(proxy, [1, 2]); construct() 트랩이 호출됨</span>\n<span class=\"token comment\">// 2. 트랩: construct(target, params, proxy) {...} Point 클래스가 target에 [1, 2]가 params에 설정됨, proxy에 Proxy 인스턴스가 설정됨</span></code></pre></div>\n</li>\n</ul>\n<br>\n<h2 id=\"2-apply\" style=\"position:relative;\"><a href=\"#2-apply\" aria-label=\"2 apply permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. apply()</h2>\n<ul>\n<li><code class=\"language-text\">target</code> 에 작성한 함수를 호출함</li>\n<li>\n<p><code class=\"language-text\">Relfect.apply(target, {}, key)</code> 형태</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>values</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> values<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> value <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>plus<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">Reflect</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> plus<span class=\"token operator\">:</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [101, 102]</span>\n\n<span class=\"token comment\">// 1. Reflect.apply(add, {plus: 100}, [1,2]) add() 함수를 호출함</span>\n<span class=\"token comment\">// 2. function add(...values){...} [1,2]가 values 파라미터에 설정됨</span>\n<span class=\"token comment\">// 3. map()에서 this가 {plus: 100}을 참조함, 코드처럼 화살표 함수를 사용해야 함, map(function(value){...}) 형태는 this가 window를 참조함</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">call(), apply()</code> 통합</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> indexOf <span class=\"token operator\">=</span> String<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>indexOf<span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ABC'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">Reflect</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>indexOf<span class=\"token punctuation\">,</span> <span class=\"token string\">'ABC'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'B'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n\n<span class=\"token comment\">// 1. const indexOf = String.prototype.indexOf; String.prototype.indexOf() 메소드 임</span>\n<span class=\"token comment\">// 2. call()로 호출 indexOf.call(\"ABC\", \"B\");</span>\n<span class=\"token comment\">// 3. Reflect.apply()로 호출, Reflect.apply(indexOf, \"ABC\", [\"B\"]) call()과 apply()를 통합하여 Reflect.apply()로 호출함</span></code></pre></div>\n</li>\n<li>\n<p>핸들러의 <code class=\"language-text\">apply()</code> 트랩 호출</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>values</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> values<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> value <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>plus<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> handler <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> that<span class=\"token punctuation\">,</span> params</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">Reflect</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> that<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">obj</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> plus<span class=\"token operator\">:</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [101, 102]</span>\n\n<span class=\"token comment\">// 1. const obj = new Proxy(add, handler); add가 apply() 트랩에서 호출할 함수임</span>\n<span class=\"token comment\">// 2. obj.apply({plus: 100}, [1, 2]) apply() 트랩이 호출 됨</span>\n<span class=\"token comment\">// 3. 트랩: apply(target, that, params) {...}, add() 함수가 target에 설정됨 {plus:100}이 that에 설정되고 [1,2]가 params에 설정됨</span></code></pre></div>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1-constructo\">1. constructo()</a></li>\n<li><a href=\"#2-apply\">2. apply()</a></li>\n</ul>\n</div>","excerpt":"1. constructo() 인스턴스를 생성하여 반환함  형태 세 번째 파라미터는 선택임 생성자 함수를 작성함 작성한 함수로 인스턴스를 생성함  트랩 호출 2. apply()  에 작성한 함수를 호출함  형태  통합 핸들러의  트랩 호출 1. constructo() 2. apply()","frontmatter":{"date":"December 11, 2021","title":"Reflect - construct(), apply()","categories":"JS","author":"Kay","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-reflect-7/"}},"next":{"id":"a2c95abc-5074-530d-99c5-c757ebd28d22","html":"<h2 id=\"-1-인터넷-통신\" style=\"position:relative;\"><a href=\"#-1-%EC%9D%B8%ED%84%B0%EB%84%B7-%ED%86%B5%EC%8B%A0\" aria-label=\" 1 인터넷 통신 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✅ 1. 인터넷 통신</h2>\n<ul>\n<li>클라이언트에서 특정 요청을 하면 서버에서 요청을 확인하고 다시 클라이언트에서 보내주는 방식.</li>\n<li>클라이언트와 서버를 연결해주는 무수한 연결망을 인터넷이라고 함.</li>\n</ul>\n<br>\n<h2 id=\"-2-ipinternet-protocol\" style=\"position:relative;\"><a href=\"#-2-ipinternet-protocol\" aria-label=\" 2 ipinternet protocol permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✅ 2. IP(Internet Protocol)</h2>\n<h3 id=\"ip-역할\" style=\"position:relative;\"><a href=\"#ip-%EC%97%AD%ED%95%A0\" aria-label=\"ip 역할 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>IP 역할</h3>\n<ul>\n<li>클라이언트 IP와 서버 IP를 명시해서 정확한 위치에 원하는 요청을 함</li>\n<li>지정한 IP(IP Address)에 데이터 전달</li>\n<li>패킷(Packet)이라는 통신 단위로 데이터 전달\n—> 패킷은 약간 편지 같은거? 보내는사람, 받는 사람 적어서 보내는 것처럼 데이터를 전달 할 때 <code class=\"language-text\">규칙</code>이 존재</li>\n</ul>\n<h3 id=\"서버-패킷-전달\" style=\"position:relative;\"><a href=\"#%EC%84%9C%EB%B2%84-%ED%8C%A8%ED%82%B7-%EC%A0%84%EB%8B%AC\" aria-label=\"서버 패킷 전달 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>서버 패킷 전달</h3>\n<ul>\n<li>인터넷을 통해 서버(주소)에게 데이터를 전달하는데, 다시 서버에서 클라이언트에게 전달 될 때에는 같은 경로로 오지 않을 수 있음.</li>\n</ul>\n<h3 id=\"ip-프로토콜의-한계--tcp-udp로-해결-가능\" style=\"position:relative;\"><a href=\"#ip-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C%EC%9D%98-%ED%95%9C%EA%B3%84--tcp-udp%EB%A1%9C-%ED%95%B4%EA%B2%B0-%EA%B0%80%EB%8A%A5\" aria-label=\"ip 프로토콜의 한계  tcp udp로 해결 가능 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>IP 프로토콜의 한계 —> TCP, UDP로 해결 가능</h3>\n<ul>\n<li><code class=\"language-text\">비연결성</code>: 패킷을 받을 대상이 없거나 서비스 불능 상태여도 패킷 전송</li>\n<li><code class=\"language-text\">비신뢰성</code>: 중간에 패킷이 사라지면? 패킷이 순서대로 안오면?</li>\n<li><code class=\"language-text\">프로그램 구분</code>: 같은 IP를 사용하는 서버에서 통신하는 App이 둘 2상이면?</li>\n</ul>\n<br>\n<h2 id=\"-3-tcp-udp\" style=\"position:relative;\"><a href=\"#-3-tcp-udp\" aria-label=\" 3 tcp udp permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✅ 3. TCP, UDP</h2>\n<h3 id=\"tcptransmission-control-protocol-특징\" style=\"position:relative;\"><a href=\"#tcptransmission-control-protocol-%ED%8A%B9%EC%A7%95\" aria-label=\"tcptransmission control protocol 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TCP(Transmission Control Protocol) 특징</h3>\n<ul>\n<li>연결 지향 TCP 3 Way HandShake(가상 연결): 실제로 연결되지 않고, 명목상으로 서버랑 연결했다고 이야기하는 것. 사실 그 과정에 많은 서버(노드)가 존재함</li>\n<li>데이터 전달 보증</li>\n<li>순서 보장</li>\n<li>신뢰 할 수 있는 프로토콜</li>\n<li>현재는 대부분 TCP 사용</li>\n</ul>\n<br>\n<h3 id=\"udpuser-datagram-protocol\" style=\"position:relative;\"><a href=\"#udpuser-datagram-protocol\" aria-label=\"udpuser datagram protocol permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>UDP(User Datagram Protocol)</h3>\n<ul>\n<li>하얀 도화지에 비유(기능이 거의 없음)</li>\n<li>연결 지향 X</li>\n<li>데이터 전달 보증 X</li>\n<li>순서 보장 X</li>\n<li>데이터 전달 및 순서가 보장되지 않지만, 단순하고 빠름</li>\n<li>IP와 거의 같음 + PORT + 체크섬 정도만 추가</li>\n<li>애플리케이션에서 추가 작업 필요</li>\n</ul>\n<br>\n<h2 id=\"-4-port\" style=\"position:relative;\"><a href=\"#-4-port\" aria-label=\" 4 port permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✅ 4. PORT</h2>\n<h3 id=\"q-한번에-2개이상-서버와-연결해야-하면\" style=\"position:relative;\"><a href=\"#q-%ED%95%9C%EB%B2%88%EC%97%90-2%EA%B0%9C%EC%9D%B4%EC%83%81-%EC%84%9C%EB%B2%84%EC%99%80-%EC%97%B0%EA%B2%B0%ED%95%B4%EC%95%BC-%ED%95%98%EB%A9%B4\" aria-label=\"q 한번에 2개이상 서버와 연결해야 하면 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q) 한번에 2개이상 서버와 연결해야 하면???</h3>\n<ul>\n<li>IP 패킷 안에 목적지 IP(서버)외에 해당 서버 안에 PORT를 지정하는 방법으로 해결 가능(이 때, TCP 세그먼트에 출발지 &#x26; 목적지 PORT를 기입할 수 있음)</li>\n</ul>\n<h3 id=\"내용\" style=\"position:relative;\"><a href=\"#%EB%82%B4%EC%9A%A9\" aria-label=\"내용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>내용</h3>\n<ol>\n<li>IP는 아파트, PORT는 동, 호수라고 생각하면 됨</li>\n<li>\n<p>IP에 추가로 각각의 PORT 존재</p>\n<ul>\n<li>ex) <code class=\"language-text\">클라이언트 IP</code>: 100.100.100.1 PORT 8080 —> <code class=\"language-text\">서버 IP</code>: 200.200.200.2 PORT 1120 이런식으로 보냄</li>\n</ul>\n</li>\n<li>\n<p>PORT 번호</p>\n<ul>\n<li>0 ~ 65535 할당가능</li>\n<li>0 ~ 1023: 잘 알려진 포트, 사용하지 않는 것이 좋음</li>\n<li>FTP : 20, 21</li>\n<li>TELNET : 23</li>\n<li>HTTP : 80</li>\n<li>HTTPS : 443</li>\n</ul>\n</li>\n</ol>\n<br>\n<h2 id=\"-5-dns\" style=\"position:relative;\"><a href=\"#-5-dns\" aria-label=\" 5 dns permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✅ 5. DNS</h2>\n<h3 id=\"ip-문제점\" style=\"position:relative;\"><a href=\"#ip-%EB%AC%B8%EC%A0%9C%EC%A0%90\" aria-label=\"ip 문제점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>IP 문제점</h3>\n<ul>\n<li>IP가 변경되거나, 숫자로 되어있어 구분이 용이 하지 않음.</li>\n</ul>\n<h3 id=\"해결\" style=\"position:relative;\"><a href=\"#%ED%95%B4%EA%B2%B0\" aria-label=\"해결 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>해결</h3>\n<ul>\n<li>도메인 네임 시스템(Domain Name System) ex) 전화번호부, 도메인 명을 IP주소로 변환</li>\n<li>도메인 명(google.com)을 요청하면 DNS에서 알아서 도메인명과 부합하는 IP를 응답으로 주고 이 응답 IP를 통해 서버에게 데이터를 요청</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#-1-%EC%9D%B8%ED%84%B0%EB%84%B7-%ED%86%B5%EC%8B%A0\">✅ 1. 인터넷 통신</a></li>\n<li>\n<p><a href=\"#-2-ipinternet-protocol\">✅ 2. IP(Internet Protocol)</a></p>\n<ul>\n<li><a href=\"#ip-%EC%97%AD%ED%95%A0\">IP 역할</a></li>\n<li><a href=\"#%EC%84%9C%EB%B2%84-%ED%8C%A8%ED%82%B7-%EC%A0%84%EB%8B%AC\">서버 패킷 전달</a></li>\n<li><a href=\"#ip-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C%EC%9D%98-%ED%95%9C%EA%B3%84--tcp-udp%EB%A1%9C-%ED%95%B4%EA%B2%B0-%EA%B0%80%EB%8A%A5\">IP 프로토콜의 한계 —> TCP, UDP로 해결 가능</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-3-tcp-udp\">✅ 3. TCP, UDP</a></p>\n<ul>\n<li><a href=\"#tcptransmission-control-protocol-%ED%8A%B9%EC%A7%95\">TCP(Transmission Control Protocol) 특징</a></li>\n<li><a href=\"#udpuser-datagram-protocol\">UDP(User Datagram Protocol)</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-4-port\">✅ 4. PORT</a></p>\n<ul>\n<li><a href=\"#q-%ED%95%9C%EB%B2%88%EC%97%90-2%EA%B0%9C%EC%9D%B4%EC%83%81-%EC%84%9C%EB%B2%84%EC%99%80-%EC%97%B0%EA%B2%B0%ED%95%B4%EC%95%BC-%ED%95%98%EB%A9%B4\">Q) 한번에 2개이상 서버와 연결해야 하면???</a></li>\n<li><a href=\"#%EB%82%B4%EC%9A%A9\">내용</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-5-dns\">✅ 5. DNS</a></p>\n<ul>\n<li><a href=\"#ip-%EB%AC%B8%EC%A0%9C%EC%A0%90\">IP 문제점</a></li>\n<li><a href=\"#%ED%95%B4%EA%B2%B0\">해결</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"December 11, 2021","title":"HTTP - 1.인터넷 네트워크","categories":"CS","author":"Kay","emoji":"👨‍💻"},"fields":{"slug":"/study-cs-HTTP-1/"}},"prev":{"id":"560bb56a-cb09-5746-bd0b-92925a3fc67f","html":"<br>\n<h2 id=\"-uri-의미\" style=\"position:relative;\"><a href=\"#-uri-%EC%9D%98%EB%AF%B8\" aria-label=\" uri 의미 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✅ URI 의미</h2>\n<ul>\n<li><code class=\"language-text\">Uniform</code>(리소스 식별하는 통일된 방식)</li>\n<li><code class=\"language-text\">Resource</code>(자원, URI로 식별할 수 있는 모든 것, 제한 없음)</li>\n<li><code class=\"language-text\">Identifier</code>(다른 항목과 구분하는데 필요요한 정보</li>\n</ul>\n<br>\n<h2 id=\"-url-urn-의미\" style=\"position:relative;\"><a href=\"#-url-urn-%EC%9D%98%EB%AF%B8\" aria-label=\" url urn 의미 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✅ URL, URN 의미</h2>\n<ul>\n<li>URL(Uniform Resource Locator): 리소스의 위치.</li>\n<li>URN(Uniform Resource Name): 리소스의 이름.\nex) urn:isbn:8969777331(어떤 책의 isbn URN)</li>\n</ul>\n<h3 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h3>\n<ul>\n<li>위치(Locator)는 변할 수 있지만, 이름(Name)은 변하지 않음.</li>\n</ul>\n<br>\n<h2 id=\"-url-문법\" style=\"position:relative;\"><a href=\"#-url-%EB%AC%B8%EB%B2%95\" aria-label=\" url 문법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✅ URL 문법</h2>\n<p><code class=\"language-text\">scheme://[userinfo@]host[:port][/path][?query][#fragment]</code></p>\n<p>ex) <a href=\"https://www.google.com:443/search?q=hello&#x26;hI=ko\">https://www.google.com:443/search?q=hello&#x26;hI=ko</a></p>\n<ul>\n<li>프로토콜 : https</li>\n<li>호스트명 : www.google.com</li>\n<li>포트 번호 : 443</li>\n<li>패스 : /search</li>\n<li>쿼리 파라미터 : q=hello&#x26;hi=ko</li>\n</ul>\n<br>\n<h3 id=\"scheme\" style=\"position:relative;\"><a href=\"#scheme\" aria-label=\"scheme permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scheme</h3>\n<ul>\n<li>주로 프로토콜 사용</li>\n<li>프로토콜 : 어떤 방식으로 자원에 접근할 것인가 하는 약속 규칙 ex) http, https, ftp 등</li>\n<li>http는 80포트, https는 443 포트를 주로 사용, 포트는 생략 가능</li>\n<li>https는 http에 보안 추가(HTTP Secure)</li>\n</ul>\n<h3 id=\"user-info\" style=\"position:relative;\"><a href=\"#user-info\" aria-label=\"user info permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>User info</h3>\n<ul>\n<li>사용자 정보를 포함해서 인증</li>\n<li>거의 사용하지 않음</li>\n</ul>\n<h3 id=\"host\" style=\"position:relative;\"><a href=\"#host\" aria-label=\"host permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Host</h3>\n<ul>\n<li>호스트명</li>\n<li>도메인명 또는 IP 주소를 직접 사용가능</li>\n</ul>\n<h3 id=\"port\" style=\"position:relative;\"><a href=\"#port\" aria-label=\"port permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Port</h3>\n<ul>\n<li>접속 포트</li>\n<li>일반적으로 생략, 생략시 http는 80, https는 443</li>\n</ul>\n<br>\n<h3 id=\"path\" style=\"position:relative;\"><a href=\"#path\" aria-label=\"path permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Path</h3>\n<ul>\n<li>리소스 경로(path), 계층적 구조 ex) <code class=\"language-text\">/home/file1.jpg</code>, <code class=\"language-text\">/members</code>, <code class=\"language-text\">/members/100, items/iphone12</code></li>\n</ul>\n<h3 id=\"query\" style=\"position:relative;\"><a href=\"#query\" aria-label=\"query permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Query</h3>\n<ul>\n<li><code class=\"language-text\">key=value</code> 형태</li>\n<li><code class=\"language-text\">?</code>로 시작, <code class=\"language-text\">&amp;</code>로 추가 가능 <code class=\"language-text\">?keyA=valueA&amp;keyB=valueB</code></li>\n<li>query parameter, query string으로 불림</li>\n<li>웹 서버에서 제공하는 파라미터, 문자 형태</li>\n</ul>\n<h3 id=\"fragment\" style=\"position:relative;\"><a href=\"#fragment\" aria-label=\"fragment permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Fragment</h3>\n<ul>\n<li>html 내부 북마크 등에 사용</li>\n<li>서버에 전송하는 정보 아님</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#-uri-%EC%9D%98%EB%AF%B8\">✅ URI 의미</a></li>\n<li>\n<p><a href=\"#-url-urn-%EC%9D%98%EB%AF%B8\">✅ URL, URN 의미</a></p>\n<ul>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-url-%EB%AC%B8%EB%B2%95\">✅ URL 문법</a></p>\n<ul>\n<li><a href=\"#scheme\">Scheme</a></li>\n<li><a href=\"#user-info\">User info</a></li>\n<li><a href=\"#host\">Host</a></li>\n<li><a href=\"#port\">Port</a></li>\n<li><a href=\"#path\">Path</a></li>\n<li><a href=\"#query\">Query</a></li>\n<li><a href=\"#fragment\">Fragment</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"December 12, 2021","title":"HTTP - 2.URL와 웹 브라우저 요청 흐름","categories":"CS","author":"Kay","emoji":"👨‍💻"},"fields":{"slug":"/study-cs-HTTP-2/"}},"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/study-js-es6-reflect-7/","nextSlug":"/study-cs-HTTP-1/","prevSlug":"/study-cs-HTTP-2/"}},"staticQueryHashes":["1073350324","2938748437"]}