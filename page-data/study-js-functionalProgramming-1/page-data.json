{"componentChunkName":"component---src-templates-blog-template-js","path":"/study-js-functionalProgramming-1/","result":{"data":{"cur":{"id":"15db8b59-6edf-596a-92d8-861fb67f3146","html":"<br>\n<h1 id=\"-1주차-배운-내용\" style=\"position:relative;\"><a href=\"#-1%EC%A3%BC%EC%B0%A8-%EB%B0%B0%EC%9A%B4-%EB%82%B4%EC%9A%A9\" aria-label=\" 1주차 배운 내용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✅ 1주차 배운 내용</h1>\n<ol>\n<li>테스터 입장에서 <code class=\"language-text\">돌아가기는 하지만 좋지 않은 코드</code>가 왜 문제인지, 어떻게 하면 이 코드를 더 좋은 코드로 만들 수 있을지 고민하는 시간 갖음.</li>\n<li><code class=\"language-text\">액션, 계산, 데이터</code> 관점으로 사고하는 방법</li>\n<li><code class=\"language-text\">실용적인</code> 함수형 프로그래밍 기술보다는 <code class=\"language-text\">함수형 사고</code> 에 초점을 맞추는 관점</li>\n<li><code class=\"language-text\">데이터 —> 액션(계산) —> 원하는 결과</code>의 데이터를 만드는 사고 방식</li>\n<li>\n<p>계산</p>\n<ul>\n<li>입력값과 반환값이 존재</li>\n<li>언제나 같은 입력에 대해서는 같은 결과를 반환</li>\n<li>테스트 용이하다는 특징을 갖음</li>\n</ul>\n</li>\n<li>\n<p>액션</p>\n<ul>\n<li>호출 시점에 따라서 행동이 달라짐.(시점과 횟수가 중요)</li>\n<li>시점과 횟수마다 액션이 달라지기 때문에, 테스트 코드를 짜기 힘듬.</li>\n</ul>\n</li>\n<li>액션 안에서 계산으로 뽑을 있는 코드를 분리하고 액션 -> 계산 -> 계산 -> 계산 -> 액션 -> 데이터 같은 계층 구조를 만들어 내는 것이 함수형 프로그래밍이고 즉, 함수형 사고</li>\n<li>우리가 직접 계산을 통해, 데이터를 조작하는지 혹은 간접으로 계산을 통해 데이터를 조작하는지에 따라 관점이 다름.</li>\n<li>함수의 목표가 무엇인지, 함수 안에서 어떠한 역할이 필요한지 파악한 뒤에 코드 작성하는 의식적 노력 필요.</li>\n</ol>\n<br/>\n<h3 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h3>\n<ul>\n<li><a href=\"https://github.com/FECrash/FunctionalProgramming\">함수형 프로그래밍 스터디</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>\n</div>","excerpt":"✅ 1주차 배운 내용 테스터 입장에서 가 왜 문제인지, 어떻게 하면 이 코드를 더 좋은 코드로 만들 수 있을지 고민하는 시간 갖음.  관점으로 사고하는 방법  함수형 프로그래밍 기술보다는  에 초점을 맞추는 관점 의 데이터를 만드는 사고 방식 계산 입력값과 반환값이 존재 언제나 같은 입력에 대해서는 같은 결과를 반환 테스트 용이하다는 특징을 갖음 액션 호출 시점에 따라서 행동이 달라짐.(시점과 횟수가 중요) 시점과 횟수마다 액션이 달라지기 때문에, 테스트 코드를 짜기 힘듬. 액션 안에서 계산으로 뽑을 있는 코드를 분리하고 액션 -> 계산 -> 계산 -> 계산 -> 액션 -> 데이터 같은 계층 구조를 만들어 내는 것이 함수형 프로그래밍이고 즉, 함수형 사고 우리가 직접 계산을 통해, 데이터를 조작하는지 혹은 간접으로 계산을 통해 데이터를 조작하는지에 따라 관점이 다름. 함수의 목표가 무엇인지, 함수 안에서 어떠한 역할이 필요한지 파악한 뒤에 코드 작성하는 의식적 노력 필요. 참고 함…","frontmatter":{"date":"January 22, 2023","title":"함수형 프로그래밍 - 스터디 1주차","categories":"Study","author":"Kay","emoji":"👨‍💻"},"fields":{"slug":"/study-js-functionalProgramming-1/"}},"next":{"id":"e09b7d48-89ca-53f0-bc25-bcae8593ec69","html":"<h1 id=\"개발\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EB%B0%9C\" aria-label=\"개발 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개발</h1>\n<ul>\n<li>기존에 개발한 코드들 중, 중복되어있는 코드를 최대한 외부로 빼어서 한 곳에서 관리할 수 잇도록 리팩토링을 진행하였다. 이 과정에서 어떻게 하면 팀원분들에게 가독성 있는 코드를 만들지, 관리 포인트를 줄일 수 있을지 고민을 하는 좋은 시간을 가졌다.</li>\n<li>또한 리팩토링을 하면서 뼈절이 느낀 것이 <b>테스트 코드</b>를 미리 짜지 못한 부분이 후회가 많이 되었다. 개발 당시 구현에 집중하다 보니, 테스트 코드를 나중에 짜야지 라는 안일함이 리팩토링하면서 매번 변경 사항이 있을 때마다, UI를 확인 하는 시간이 너무 스트레스로 다가왔다. 이번 일을 통해서 개발을 하면서 큰 동작들에 대해서는 통합 테스트를 꼭 짜는 시간을 가져야 겠다.</li>\n<li>함수형 프로그래밍 스터디를 통해서 자주 사용하고 있었던, <code class=\"language-text\">map, filter, reduce</code> 를 직접 구현해보았다. 또한 내가 만든 유틸 함수를 패키지로 배포 후 사용하는 경험을 해서 새로웠다.</li>\n</ul>\n<br>\n<h1 id=\"건강\" style=\"position:relative;\"><a href=\"#%EA%B1%B4%EA%B0%95\" aria-label=\"건강 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>건강</h1>\n<ul>\n<li>자기 전 휴대폰 하는 습관을 버리지 못했다. 눈 피로와 깊은 수면을 하지 못하는 걸 알면서도 잘 고쳐지지가 않는다. </li>\n</ul>\n<br>\n<h1 id=\"독서\" style=\"position:relative;\"><a href=\"#%EB%8F%85%EC%84%9C\" aria-label=\"독서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>독서</h1>\n<ul>\n<li>매일 아침에 Effective TypeScript 아이템 1개씩 읽는다. 계속 읽고 정리해서 체화해야함을 매번 읽을 때 마다 느낀다.</li>\n<li>자기 전에 휴대폰 하는 안 좋은 습관을 독서하는 습관으로 대체하는 연습을 해야겠다. 매일은 아니더라도 주 3회 도전부터 시작해야겠다.</li>\n</ul>\n<br>\n<h3 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h3>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>\n</div>","frontmatter":{"date":"January 21, 2023","title":"1월 3주 회고","categories":"Log","author":"Kay","emoji":"👋"},"fields":{"slug":"/write-log-230121/"}},"prev":{"id":"d858893f-b73c-54a3-80cf-d28b7edd6472","html":"<h1 id=\"-복습\" style=\"position:relative;\"><a href=\"#-%EB%B3%B5%EC%8A%B5\" aria-label=\" 복습 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👋 복습</h1>\n<ol>\n<li>\n<p>액션 → 계산 → 데이터</p>\n<ul>\n<li>이벤트 핸들러 : 액션</li>\n</ul>\n</li>\n<li>\n<p>계산을 꺼내기</p>\n<ul>\n<li>리턴 값 정하기</li>\n<li>리턴 값과 관련된 코드조각 모으기</li>\n<li>사용되는 모든 값을 함수인자로 만들기\n—> 명시적 출력 + 명시적 입력</li>\n</ul>\n</li>\n<li>외부 세계에 영향을 주거나, 실행할 때마다 달라지는 값이 있다면 제거(Array, Object)</li>\n<li>\n<p>유틸리티, 비즈니스 로직, 스키마, 구분해보기</p>\n<ul>\n<li>\n<p>유틸리티와 비즈니스 로직 차이는??????</p>\n<ul>\n<li>유틸리티 Lodash</li>\n<li>유틸리티가 아닌 로직들 = 비즈니스 로직</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"-2주차-배운-내용-정리\" style=\"position:relative;\"><a href=\"#-2%EC%A3%BC%EC%B0%A8-%EB%B0%B0%EC%9A%B4-%EB%82%B4%EC%9A%A9-%EC%A0%95%EB%A6%AC\" aria-label=\" 2주차 배운 내용 정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✅ 2주차 배운 내용 정리</h1>\n<ul>\n<li><code class=\"language-text\">어떻게</code> 액션으로 부터 <code class=\"language-text\">계산</code>을 빼낼 수 있는지에 대해서 배우고 실습 진행</li>\n<li>\n<p>액션에서 계산을 빼내는 작업은 암묵적 입력과 출력을 -> 명시적 입력과 출력으로 바꾸는 것</p>\n<ul>\n<li>암묵적 입력 : 함수인자가 아닌 형태로 사용되는 데이터 및 함수 안에서 선언한 데이터 등을 의미</li>\n<li>암묵적 출력 : 함수의 반환값이 아닌 출력 ex) DOM, console.log, 전역변수 수정 등을 의미</li>\n</ul>\n</li>\n<li>\n<p>암묵적 입력과 출력을 명시적 입력과 출력으로 바꾸는 방법</p>\n<ul>\n<li>함수에 반환값이 없다면 반환값을 만든다.(대개 마지막에 쓰이고 있는 변수)</li>\n<li>해당 값이 관련된 코드 조각을 모아 함수의 형태로 만든다.</li>\n<li>함수내에서 사용되고 있는 모든 데이터를 함수의 인자에 받을 수 있도록 리팩토링 한다. </li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">계산</code>은 여러번 수행이 되어도 외부 세계에 아무런 영향을 끼치면 안됨</p>\n<ul>\n<li>전역변수의 값이나, 객체 혹은 배열로 넘어온 인자의 값을 직접 수정하면 안됨</li>\n<li>만약 객체 혹은 배열로 넘어온 인자 값을 변경해야 하는 상황이라면 해당 값을 조작하여 반환하는 <code class=\"language-text\">카피 온 라이트(방어적 복사)</code>기법을 사용해야 함 ex) <code class=\"language-text\">ES6에서 spread operator [...arr], {...obj}</code></li>\n</ul>\n</li>\n<li>유닛 테스트란 <code class=\"language-text\">계산</code>을 검증하기 위함</li>\n<li>e2e 테스트란 <code class=\"language-text\">액션</code>을 테스트 하는 것</li>\n</ul>\n<br>\n<h3 id=\"️-함수형-프로그래밍-코드-작성하는-tip\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%ED%95%A8%EC%88%98%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%BD%94%EB%93%9C-%EC%9E%91%EC%84%B1%ED%95%98%EB%8A%94-tip\" aria-label=\"️ 함수형 프로그래밍 코드 작성하는 tip permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️ 함수형 프로그래밍 코드 작성하는 Tip</h3>\n<ul>\n<li><code class=\"language-text\">const</code> 쓰기</li>\n<li><code class=\"language-text\">TS</code> 쓰기</li>\n<li><code class=\"language-text\">spread operator</code> 사용하기(방어적 복사)</li>\n<li>Arrow function 사용하기</li>\n<li>Test Code 작성하기</li>\n<li>이벤트 핸들러, 상수 등 한글 변수를 사용해보자.</li>\n</ul>\n<br/>\n<h1 id=\"정리\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC\" aria-label=\"정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정리</h1>\n<ul>\n<li>FE 코딩이란, 데이터를 화면에 보여주고 -> 사용자의 액션에 따라 데이터를 조작해, 다시 사용자에게 화면을 다시 그리는 것입니다.</li>\n<li>FE에서 이벤트 핸들러가 90% 액션입니다.</li>\n<li>액션은 리턴값이 없기 때문에 굳이 계산으로 빼는 것이 아닌, 액션에서 사용되어야할 계산 함수를 쪼개서(순수함수) 액션을 조합해서 만드는 것이 함수형 코딩 본질에 맞닿아 있습니다.</li>\n</ul>\n<br/>\n<h3 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h3>\n<ul>\n<li><a href=\"https://github.com/FECrash/FunctionalProgramming\">함수형 프로그래밍 스터디</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EF%B8%8F-%ED%95%A8%EC%88%98%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%BD%94%EB%93%9C-%EC%9E%91%EC%84%B1%ED%95%98%EB%8A%94-tip\">✏️ 함수형 프로그래밍 코드 작성하는 Tip</a></li>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>\n</div>","frontmatter":{"date":"January 25, 2023","title":"함수형 프로그래밍 - 스터디 2주차","categories":"Study","author":"Kay","emoji":"👨‍💻"},"fields":{"slug":"/study-js-functionalProgramming-2/"}},"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":"zoomkoding/zoomkoding-gatsby-blog"}}}}},"pageContext":{"slug":"/study-js-functionalProgramming-1/","nextSlug":"/write-log-230121/","prevSlug":"/study-js-functionalProgramming-2/"}},"staticQueryHashes":["1073350324","2938748437"]}