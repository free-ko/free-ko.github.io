{"componentChunkName":"component---src-templates-blog-template-js","path":"/study-js-functionalProgramming-2/","result":{"data":{"cur":{"id":"d858893f-b73c-54a3-80cf-d28b7edd6472","html":"<h1 id=\"-복습\" style=\"position:relative;\"><a href=\"#-%EB%B3%B5%EC%8A%B5\" aria-label=\" 복습 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👋 복습</h1>\n<ol>\n<li>\n<p>액션 → 계산 → 데이터</p>\n<ul>\n<li>이벤트 핸들러 : 액션</li>\n</ul>\n</li>\n<li>\n<p>계산을 꺼내기</p>\n<ul>\n<li>리턴 값 정하기</li>\n<li>리턴 값과 관련된 코드조각 모으기</li>\n<li>사용되는 모든 값을 함수인자로 만들기\n—> 명시적 출력 + 명시적 입력</li>\n</ul>\n</li>\n<li>외부 세계에 영향을 주거나, 실행할 때마다 달라지는 값이 있다면 제거(Array, Object)</li>\n<li>\n<p>유틸리티, 비즈니스 로직, 스키마, 구분해보기</p>\n<ul>\n<li>\n<p>유틸리티와 비즈니스 로직 차이는??????</p>\n<ul>\n<li>유틸리티 Lodash</li>\n<li>유틸리티가 아닌 로직들 = 비즈니스 로직</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"-2주차-배운-내용-정리\" style=\"position:relative;\"><a href=\"#-2%EC%A3%BC%EC%B0%A8-%EB%B0%B0%EC%9A%B4-%EB%82%B4%EC%9A%A9-%EC%A0%95%EB%A6%AC\" aria-label=\" 2주차 배운 내용 정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✅ 2주차 배운 내용 정리</h1>\n<ul>\n<li><code class=\"language-text\">어떻게</code> 액션으로 부터 <code class=\"language-text\">계산</code>을 빼낼 수 있는지에 대해서 배우고 실습 진행</li>\n<li>\n<p>액션에서 계산을 빼내는 작업은 암묵적 입력과 출력을 -> 명시적 입력과 출력으로 바꾸는 것</p>\n<ul>\n<li>암묵적 입력 : 함수인자가 아닌 형태로 사용되는 데이터 및 함수 안에서 선언한 데이터 등을 의미</li>\n<li>암묵적 출력 : 함수의 반환값이 아닌 출력 ex) DOM, console.log, 전역변수 수정 등을 의미</li>\n</ul>\n</li>\n<li>\n<p>암묵적 입력과 출력을 명시적 입력과 출력으로 바꾸는 방법</p>\n<ul>\n<li>함수에 반환값이 없다면 반환값을 만든다.(대개 마지막에 쓰이고 있는 변수)</li>\n<li>해당 값이 관련된 코드 조각을 모아 함수의 형태로 만든다.</li>\n<li>함수내에서 사용되고 있는 모든 데이터를 함수의 인자에 받을 수 있도록 리팩토링 한다. </li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">계산</code>은 여러번 수행이 되어도 외부 세계에 아무런 영향을 끼치면 안됨</p>\n<ul>\n<li>전역변수의 값이나, 객체 혹은 배열로 넘어온 인자의 값을 직접 수정하면 안됨</li>\n<li>만약 객체 혹은 배열로 넘어온 인자 값을 변경해야 하는 상황이라면 해당 값을 조작하여 반환하는 <code class=\"language-text\">카피 온 라이트(방어적 복사)</code>기법을 사용해야 함 ex) <code class=\"language-text\">ES6에서 spread operator [...arr], {...obj}</code></li>\n</ul>\n</li>\n<li>유닛 테스트란 <code class=\"language-text\">계산</code>을 검증하기 위함</li>\n<li>e2e 테스트란 <code class=\"language-text\">액션</code>을 테스트 하는 것</li>\n</ul>\n<br>\n<h3 id=\"️-함수형-프로그래밍-코드-작성하는-tip\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%ED%95%A8%EC%88%98%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%BD%94%EB%93%9C-%EC%9E%91%EC%84%B1%ED%95%98%EB%8A%94-tip\" aria-label=\"️ 함수형 프로그래밍 코드 작성하는 tip permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️ 함수형 프로그래밍 코드 작성하는 Tip</h3>\n<ul>\n<li><code class=\"language-text\">const</code> 쓰기</li>\n<li><code class=\"language-text\">TS</code> 쓰기</li>\n<li><code class=\"language-text\">spread operator</code> 사용하기(방어적 복사)</li>\n<li>Arrow function 사용하기</li>\n<li>Test Code 작성하기</li>\n<li>이벤트 핸들러, 상수 등 한글 변수를 사용해보자.</li>\n</ul>\n<br/>\n<h1 id=\"정리\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC\" aria-label=\"정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정리</h1>\n<ul>\n<li>FE 코딩이란, 데이터를 화면에 보여주고 -> 사용자의 액션에 따라 데이터를 조작해, 다시 사용자에게 화면을 다시 그리는 것입니다.</li>\n<li>FE에서 이벤트 핸들러가 90% 액션입니다.</li>\n<li>액션은 리턴값이 없기 때문에 굳이 계산으로 빼는 것이 아닌, 액션에서 사용되어야할 계산 함수를 쪼개서(순수함수) 액션을 조합해서 만드는 것이 함수형 코딩 본질에 맞닿아 있습니다.</li>\n</ul>\n<br/>\n<h3 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h3>\n<ul>\n<li><a href=\"https://github.com/FECrash/FunctionalProgramming\">함수형 프로그래밍 스터디</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EF%B8%8F-%ED%95%A8%EC%88%98%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%BD%94%EB%93%9C-%EC%9E%91%EC%84%B1%ED%95%98%EB%8A%94-tip\">✏️ 함수형 프로그래밍 코드 작성하는 Tip</a></li>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>\n</div>","excerpt":"👋 복습 액션 → 계산 → 데이터 이벤트 핸들러 : 액션 계산을 꺼내기 리턴 값 정하기 리턴 값과 관련된 코드조각 모으기 사용되는 모든 값을 함수인자로 만들기\n—> 명시적 출력 + 명시적 입력 외부 세계에 영향을 주거나, 실행할 때마다 달라지는 값이 있다면 제거(Array, Object) 유틸리티, 비즈니스 로직, 스키마, 구분해보기 유틸리티와 비즈니스 로직 차이는?????? 유틸리티 Lodash 유틸리티가 아닌 로직들 = 비즈니스 로직 ✅ 2주차 배운 내용 정리  액션으로 부터 을 빼낼 수 있는지에 대해서 배우고 실습 진행 액션에서 계산을 빼내는 작업은 암묵적 입력과 출력을 -> 명시적 입력과 출력으로 바꾸는 것 암묵적 입력 : 함수인자가 아닌 형태로 사용되는 데이터 및 함수 안에서 선언한 데이터 등을 의미 암묵적 출력 : 함수의 반환값이 아닌 출력 ex) DOM, console.log, 전역변수 수정 등을 의미 암묵적 입력과 출력을 명시적 입력과 출력으로 바꾸는 방법 함수에 반…","frontmatter":{"date":"January 25, 2023","title":"함수형 프로그래밍 - 스터디 2주차","categories":"Study","author":"Kay","emoji":"👨‍💻"},"fields":{"slug":"/study-js-functionalProgramming-2/"}},"next":{"id":"15db8b59-6edf-596a-92d8-861fb67f3146","html":"<br>\n<h1 id=\"-1주차-배운-내용\" style=\"position:relative;\"><a href=\"#-1%EC%A3%BC%EC%B0%A8-%EB%B0%B0%EC%9A%B4-%EB%82%B4%EC%9A%A9\" aria-label=\" 1주차 배운 내용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✅ 1주차 배운 내용</h1>\n<ol>\n<li>테스터 입장에서 <code class=\"language-text\">돌아가기는 하지만 좋지 않은 코드</code>가 왜 문제인지, 어떻게 하면 이 코드를 더 좋은 코드로 만들 수 있을지 고민하는 시간 갖음.</li>\n<li><code class=\"language-text\">액션, 계산, 데이터</code> 관점으로 사고하는 방법</li>\n<li><code class=\"language-text\">실용적인</code> 함수형 프로그래밍 기술보다는 <code class=\"language-text\">함수형 사고</code> 에 초점을 맞추는 관점</li>\n<li><code class=\"language-text\">데이터 —> 액션(계산) —> 원하는 결과</code>의 데이터를 만드는 사고 방식</li>\n<li>\n<p>계산</p>\n<ul>\n<li>입력값과 반환값이 존재</li>\n<li>언제나 같은 입력에 대해서는 같은 결과를 반환</li>\n<li>테스트 용이하다는 특징을 갖음</li>\n</ul>\n</li>\n<li>\n<p>액션</p>\n<ul>\n<li>호출 시점에 따라서 행동이 달라짐.(시점과 횟수가 중요)</li>\n<li>시점과 횟수마다 액션이 달라지기 때문에, 테스트 코드를 짜기 힘듬.</li>\n</ul>\n</li>\n<li>액션 안에서 계산으로 뽑을 있는 코드를 분리하고 액션 -> 계산 -> 계산 -> 계산 -> 액션 -> 데이터 같은 계층 구조를 만들어 내는 것이 함수형 프로그래밍이고 즉, 함수형 사고</li>\n<li>우리가 직접 계산을 통해, 데이터를 조작하는지 혹은 간접으로 계산을 통해 데이터를 조작하는지에 따라 관점이 다름.</li>\n<li>함수의 목표가 무엇인지, 함수 안에서 어떠한 역할이 필요한지 파악한 뒤에 코드 작성하는 의식적 노력 필요.</li>\n</ol>\n<br/>\n<h3 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h3>\n<ul>\n<li><a href=\"https://github.com/FECrash/FunctionalProgramming\">함수형 프로그래밍 스터디</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>\n</div>","frontmatter":{"date":"January 22, 2023","title":"함수형 프로그래밍 - 스터디 1주차","categories":"Study","author":"Kay","emoji":"👨‍💻"},"fields":{"slug":"/study-js-functionalProgramming-1/"}},"prev":{"id":"5c23ff2a-9aa4-5616-bebc-691cd0428d0f","html":"<h1 id=\"-복습\" style=\"position:relative;\"><a href=\"#-%EB%B3%B5%EC%8A%B5\" aria-label=\" 복습 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👋 복습</h1>\n<ul>\n<li>함수형 사고에서 말하는 <code class=\"language-text\">액션 / 계산 / 데이터</code>의 3가지 영역으로 나눠서 만들어진 함수들간의 계층을 시각화 함</li>\n<li>더 나은 구조에 대해서 생각하고, 요구사항의 추가나 변화가 발생했을 때, 꼭 필요한 만큼의 <code class=\"language-text\">추가/변화</code>가 발생하는지 혹은 더 복잡한 사항이 발생하는지 팀끼리 실습을 함</li>\n</ul>\n<br/>\n<h1 id=\"-fe의-요구-사항이란\" style=\"position:relative;\"><a href=\"#-fe%EC%9D%98-%EC%9A%94%EA%B5%AC-%EC%82%AC%ED%95%AD%EC%9D%B4%EB%9E%80\" aria-label=\" fe의 요구 사항이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🙋‍ FE의 요구 사항이란?</h1>\n<ul>\n<li>사용자가 특정 <code class=\"language-text\">액션(동작)</code>을 하면</li>\n<li>관련된 <code class=\"language-text\">기존 데이터</code>를 찾아서,</li>\n<li>특정 <code class=\"language-text\">조건에 의해</code> 기존 <code class=\"language-text\">데이터를 가공</code> 하고,</li>\n<li>그 결과를 다시 <code class=\"language-text\">사용자가 보기 편하게 바꿔서</code> 화면에 보여주는 큰 틀을 가짐</li>\n</ul>\n<br/>\n<h1 id=\"-계층과-흐름에-관한-보충-설명\" style=\"position:relative;\"><a href=\"#-%EA%B3%84%EC%B8%B5%EA%B3%BC-%ED%9D%90%EB%A6%84%EC%97%90-%EA%B4%80%ED%95%9C-%EB%B3%B4%EC%B6%A9-%EC%84%A4%EB%AA%85\" aria-label=\" 계층과 흐름에 관한 보충 설명 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👀 계층과 흐름에 관한 보충 설명</h1>\n<ul>\n<li>계층 보단, <code class=\"language-text\">흐름(요구 사항)</code>을 먼저 생각해보자.</li>\n<li>위 요구 사항을 보면, <code class=\"language-text\">함수들 간의 순서</code>를 잡고, 함수 전 후 데이터들의 Input &#x26; Output을 생각해보자.</li>\n<li><code class=\"language-text\">계산</code>은 명시적 입출력이 있는 함수라면, <code class=\"language-text\">액션</code>은 암묵적 입출력이 있는 함수.</li>\n<li>이렇게 여러개의 큰 흐름을 그리다 보면, 같은 계층의 함수 그룹을 발견 할 수 있음.</li>\n<li>계층에 대한 개념이 확립되고 나면 새로운 요구사항들을 구현할 때, 요구사항에 맞게 계층에 맞는 함수들을 조립하는 형식으로 발전 가능</li>\n</ul>\n<br/>\n<h3 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h3>\n<ul>\n<li><a href=\"https://github.com/FECrash/FunctionalProgramming\">함수형 프로그래밍 스터디</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>\n</div>","frontmatter":{"date":"January 26, 2023","title":"함수형 프로그래밍 - 스터디 3주차","categories":"Study","author":"Kay","emoji":"👨‍💻"},"fields":{"slug":"/study-js-functionalProgramming-3/"}},"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":"zoomkoding/zoomkoding-gatsby-blog"}}}}},"pageContext":{"slug":"/study-js-functionalProgramming-2/","nextSlug":"/study-js-functionalProgramming-1/","prevSlug":"/study-js-functionalProgramming-3/"}},"staticQueryHashes":["1073350324","2938748437"]}