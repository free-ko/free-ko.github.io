{"componentChunkName":"component---src-templates-blog-template-js","path":"/write-log-230521/","result":{"data":{"cur":{"id":"70d32b5d-6b9d-5370-92c4-e49a697f57eb","html":"<h2 id=\"한-주-회고\" style=\"position:relative;\"><a href=\"#%ED%95%9C-%EC%A3%BC-%ED%9A%8C%EA%B3%A0\" aria-label=\"한 주 회고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>한 주 회고</h2>\n<p>저의 새로운 출발을 응원해주기 위해 전 직장 동료들과 함께 점심 식사를 하면서 이런저런 이야기를 하는 시간을 많이 가졌습니다.\n대화 속에서 동기부여되는 말들이 많아 오히려 힘도 많이 나고 앞으로 어떤 개발자가 되어야 하는지 더 깊게 생각해보는 시간을 가져 좋았습니다.(팀원들 너무나 감사합니다.)</p>\n<p>그리고 사실 이번 주는 설렘과 걱정이 동반되는 시간들이 많았습니다. 그 이유는 새로운 시작에 앞서 스스로 부족하다는 생각을 많이 했기 때문입니다.\n‘과연 내가 할 수 있을까?’, ‘내가 잘 할 수 있을까’ 등에 보이지만 실체가 없는 걱정과 불안에 휩싸인채로 하루하루 시간들을 보냈습니다.</p>\n<p>그래도 스스로 극복하고자 새로운 시작에 앞서 필요한 것들을 나열해보고 학습을 멈추지 않았습니다. 어차피 행동을 하나 안하나 똑같이 불안하다면 그냥 무엇 하나라도 하는 것이 낫다는 생각이 들어 몸을 움직였습니다.(물론 글로써는 대담하게 행동한 것처럼 보이지만 행동하면서도 많이 불안했습니다.)</p>\n<p>하기 싫은 일들도 해야 한다는 것도 알게 되었고, 어쩌면 인생 자체가 불안과 걱정을 동반한 채로 살아가야 하는건 아닌가 라는 생각도 해보게되었습니다.\n그 속에서 제대로 성장할려면 이왕하는 거 제대로 이해하고 차분히 학습해 나아가야 겠다는 다짐도 해보았습니다.</p>\n<p>앞으로 어떤 일들이 벌어질지 모르겠지만 일희일비 하지 말고 그저 묵묵히 부족한 부분을 채워 원하는 목표에 도달하기 위해 노력하는 시간으로 가득 차길 바라며 이번 한 주도 수고했습니다.</p>\n<br>\n<h3 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h3>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%ED%95%9C-%EC%A3%BC-%ED%9A%8C%EA%B3%A0\">한 주 회고</a></p>\n<ul>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"한 주 회고 저의 새로운 출발을 응원해주기 위해 전 직장 동료들과 함께 점심 식사를 하면서 이런저런 이야기를 하는 시간을 많이 가졌습니다.\n대화 속에서 동기부여되는 말들이 많아 오히려 힘도 많이 나고 앞으로 어떤 개발자가 되어야 하는지 더 깊게 생각해보는 시간을 가져 좋았습니다.(팀원들 너무나 감사합니다.) 그리고 사실 이번 주는 설렘과 걱정이 동반되는 시간들이 많았습니다. 그 이유는 새로운 시작에 앞서 스스로 부족하다는 생각을 많이 했기 때문입니다.\n‘과연 내가 할 수 있을까?’, ‘내가 잘 할 수 있을까’ 등에 보이지만 실체가 없는 걱정과 불안에 휩싸인채로 하루하루 시간들을 보냈습니다. 그래도 스스로 극복하고자 새로운 시작에 앞서 필요한 것들을 나열해보고 학습을 멈추지 않았습니다. 어차피 행동을 하나 안하나 똑같이 불안하다면 그냥 무엇 하나라도 하는 것이 낫다는 생각이 들어 몸을 움직였습니다.(물론 글로써는 대담하게 행동한 것처럼 보이지만 행동하면서도 많이 불안했습니다.) 하기…","frontmatter":{"date":"May 21, 2023","title":"5월 3주 회고","categories":"Log","author":"Kay","emoji":"👋"},"fields":{"slug":"/write-log-230521/"}},"next":{"id":"7dd9e59b-ea69-5ef9-8d4e-5f55c040967f","html":"<h2 id=\"아이템-38-any-타입은-가능한-한-좁은-범위에서만-사용하기\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-38-any-%ED%83%80%EC%9E%85%EC%9D%80-%EA%B0%80%EB%8A%A5%ED%95%9C-%ED%95%9C-%EC%A2%81%EC%9D%80-%EB%B2%94%EC%9C%84%EC%97%90%EC%84%9C%EB%A7%8C-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"아이템 38 any 타입은 가능한 한 좁은 범위에서만 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이템 38: any 타입은 가능한 한 좁은 범위에서만 사용하기</h2>\n<ol>\n<li>\n<p>any 작성 방식</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">const</span> x<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> <span class=\"token function\">expressionReturningFoo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// X</span>\n <span class=\"token function\">processBar</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">f2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> <span class=\"token function\">expressionReturningFoo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// O</span>\n <span class=\"token function\">processBar</span><span class=\"token punctuation\">(</span>x <span class=\"token keyword\">as</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>any 타입이 processBar 함수의 매개변수에만 사용된 표현식이므로 다른 코드에는 영향을 미치지 않기 때문</li>\n</ul>\n</li>\n<li>TS가 함수의 반환 타입을 추론할 수 있는 경우에도 함수의 반환 타입을 명시하는 것이 좋음</li>\n<li>\n<p>강제로 타입 오류 제거 시 any 대신 @ts-ignore 사용</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// 근본적인 문제 해결은 아님</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> <span class=\"token function\">expressionReturningFoo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token comment\">// @ts-ignore</span>\n <span class=\"token function\">processBar</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>객체와 관련한 any의 사용법</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// 모든 속성이 타입 체크가 되지 않는 부작용 발생</span>\n<span class=\"token keyword\">const</span> config<span class=\"token operator\">:</span> Config <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n a<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n b<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n c<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n   key<span class=\"token operator\">:</span> value<span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// X</span>\n\n<span class=\"token keyword\">const</span> config<span class=\"token operator\">:</span> Config <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n a<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n b<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 이 속성은 여전히 체크됨</span>\n c<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n   key<span class=\"token operator\">:</span> value <span class=\"token keyword\">as</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ol>\n<br>\n<h2 id=\"아이템-39-any를-구체적으로-변형해서-사용하기\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-39-any%EB%A5%BC-%EA%B5%AC%EC%B2%B4%EC%A0%81%EC%9C%BC%EB%A1%9C-%EB%B3%80%ED%98%95%ED%95%B4%EC%84%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"아이템 39 any를 구체적으로 변형해서 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이템 39: any를 구체적으로 변형해서 사용하기</h2>\n<ol>\n<li>\n<p>일반적인 상황에서는 any보다 더 구체적으로 표현할 수 있는 타입이 존재할 가능성이 높음</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">getLengthBad</span><span class=\"token punctuation\">(</span>array<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">// X</span>\n <span class=\"token keyword\">return</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getLength</span><span class=\"token punctuation\">(</span>array<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">return</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>함수 매개변수로 객체 사용 시 타입 구체화</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">hasTwelveLetterKey</span><span class=\"token punctuation\">(</span>o<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> key <span class=\"token keyword\">in</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span>\n <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>함수 타입 구체화</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Fn0</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 매개변수 없이 호출 가능한 모든 함수</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Fn1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>arg<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 매개변수 1개</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">FnN</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 모든 개수의 매개변수 (\"Function\" 타입과 동일)</span></code></pre></div>\n</li>\n</ol>\n<br>\n<h2 id=\"아이템-40-함수-안으로-타입-단언문-감추기\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-40-%ED%95%A8%EC%88%98-%EC%95%88%EC%9C%BC%EB%A1%9C-%ED%83%80%EC%9E%85-%EB%8B%A8%EC%96%B8%EB%AC%B8-%EA%B0%90%EC%B6%94%EA%B8%B0\" aria-label=\"아이템 40 함수 안으로 타입 단언문 감추기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이템 40: 함수 안으로 타입 단언문 감추기</h2>\n<ol>\n<li>함수 내부에는 타입 단언 사용하고, 함수 외부로 드러나는 타입은 정의를 정확히 명시하는 것이 좋음</li>\n<li>\n<p>어떤 함수든 캐싱할 수 있는 래퍼 함수 <code class=\"language-text\">cacheWrapper</code></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">cacheWrapper</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">Function</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>fn<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> <span class=\"token function\">shallowEqual</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// TS는 반환문에 있는 함수와 원본 함수 T 타입이 어떤 관련이 있는지 알지 못하기 때문에 오류 발생</span>\n<span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">cacheWrapper</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">Function</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>fn<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">let</span> lastArgs<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> lastResult<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 🚨 '(...args: any[]) => any' 형식은 'T' 형식에 할당할 수 없습니다.</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>lastArgs <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token function\">shallowEqual</span><span class=\"token punctuation\">(</span>lastArgs<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    lastResult <span class=\"token operator\">=</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    lastArgs <span class=\"token operator\">=</span> args<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> lastResult<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>단언문을 추가해서 오류를 제거</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">cacheWrapper</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">Function</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>fn<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">let</span> lastArgs<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> lastResult<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>lastArgs <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token function\">shallowEqual</span><span class=\"token punctuation\">(</span>lastArgs<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    lastResult <span class=\"token operator\">=</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    lastArgs <span class=\"token operator\">=</span> args<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> lastResult<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>객체를 매개변수로 하는 shallowObjectEqual</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">shallowObjectEqual</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> object<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">shallowObjectEqual</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> object<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>k <span class=\"token keyword\">in</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> value <span class=\"token operator\">!==</span> <span class=\"token punctuation\">(</span>b <span class=\"token keyword\">as</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// b[k] 구문에 타입 단언 필요</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ol>\n<br>\n<h2 id=\"아이템-41-any-타입의-변환\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-41-any-%ED%83%80%EC%9E%85%EC%9D%98-%EB%B3%80%ED%99%98\" aria-label=\"아이템 41 any 타입의 변환 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이템 41: Any 타입의 변환</h2>\n<ol>\n<li>\n<p>예제 코드</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// out의 타입은 any[]로 선언되었지만,</span>\n<span class=\"token comment\">// number 타입의 값을 넣는 순간부터 타입은 number[]로 변환</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">range</span><span class=\"token punctuation\">(</span>start<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> limit<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">const</span> out <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 타입이 any[]</span>\n\n <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> start<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> limit<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   out<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// out의 타입이 any[]</span>\n <span class=\"token punctuation\">}</span>\n\n <span class=\"token keyword\">return</span> out<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 타입이 number[]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>타입의 전환</li>\n<li>\n<p>배열에 다양한 타입의 요소를 넣으면 배열의 타입이 변환됨</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 타입 any[]</span>\nresult<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 타입 string[]</span>\n\nresult<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nresult<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 타입 (string | number)[]</span></code></pre></div>\n</li>\n<li>기타</li>\n<li>조건문에서는 분기에 따라 타입이 변환</li>\n<li>변수의 초깃값이 null인 경우도 any의 변환 발생</li>\n<li>any 타입의 변환은 noImplicitAny가 설정된 상태에서 변수의 타입이 암시적 any인 경우에만 발생한며, 명시적 any 선언 시 타입이 그대로 유지됨</li>\n<li>any 타입의 변환은 암시적 any 타입에 어떤 값을 할당할 때만 발생하며, 암시적 any 타입은 함수 호출을 거쳐도 변환되지 않음</li>\n<li>타입을 안전하게 지키기 위해서는 암시적 any를 진화시키는 방식보다, 명시적 타입 구문을 사용하는 것이 좋음</li>\n</ol>\n<br>\n<h2 id=\"아이템-42-모르는-타입에는-any-대신-unknown을-사용하기\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-42-%EB%AA%A8%EB%A5%B4%EB%8A%94-%ED%83%80%EC%9E%85%EC%97%90%EB%8A%94-any-%EB%8C%80%EC%8B%A0-unknown%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"아이템 42 모르는 타입에는 any 대신 unknown을 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이템 42: 모르는 타입에는 any 대신 unknown을 사용하기</h2>\n<ol>\n<li>\n<p>함수의 반환값에 unknown 사용</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">parseYAML</span><span class=\"token punctuation\">(</span>yaml<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">safeParseYAML</span><span class=\"token punctuation\">(</span>yaml<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">return</span> <span class=\"token function\">parseYAML</span><span class=\"token punctuation\">(</span>yaml<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> book <span class=\"token operator\">=</span> <span class=\"token function\">safeParseYAML</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n name: Villette\n author: Charlotte Bronte\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> Book<span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 🚨 'Book' 형식에 'title' 속성이 없습니다.</span>\n<span class=\"token function\">book</span><span class=\"token punctuation\">(</span><span class=\"token string\">'read'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 🚨 이 식은 호출할 수 없습니다.</span></code></pre></div>\n</li>\n<li>any가 강력하면서도 위험한 이유</li>\n<li>어떠한 타입이든 any 타입에 할당 가능</li>\n<li>어떠한 타입이든 unknown 타입에 할당 가능</li>\n<li>어떠한 타입도 never에 할당할 수 업음</li>\n<li>any 타입은 어떠한 타입으로도 할당 가능</li>\n<li>unknown은 오직 unknown과 any에만 할당 가능</li>\n<li>never 타입은 어떠한 타입으로도 할당 가능\n→ 타입 시스템과 상충됨</li>\n<li>instanceof 체크 후 unknown에서 원하는 타입으로 변환</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">processValue</span><span class=\"token punctuation\">(</span>val<span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>val <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    val<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 타입이 Date</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"4\">\n<li>사용자 정의 타입 가드로 unknown에서 원하는 타입으로 변환</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">isBook</span><span class=\"token punctuation\">(</span>val<span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> val <span class=\"token keyword\">is</span> Book <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">typeof</span> val <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span> <span class=\"token operator\">&amp;&amp;</span> val <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">'name'</span> <span class=\"token keyword\">in</span> val <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">'author'</span> <span class=\"token keyword\">in</span> val<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">processValue</span><span class=\"token punctuation\">(</span>val<span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isBook</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    val<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 타입이 Book</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"5\">\n<li>\n<p>unknown 대신 제네릭 매개변수 사용</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">//  타입 단언문과 똑같음</span>\n<span class=\"token comment\">// 제네릭보다는 unknown을 반환하고, 사용자가 직접 단언문을 사용하거나 원하는 대로 타입을 좁히도록 강제하는 것이 좋음</span>\n<span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">safeParseYAML</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>yaml<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">return</span> <span class=\"token function\">parseYAML</span><span class=\"token punctuation\">(</span>yaml<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>단언문</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">declare</span> <span class=\"token keyword\">const</span> foo<span class=\"token operator\">:</span> Foo<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> barAny <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>foo <span class=\"token keyword\">as</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> Bar<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> barUnk <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>foo <span class=\"token keyword\">as</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> Bar<span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>unknown의 경우 분리되는 즉시 오류를 발생하므로 any보다 안전(에러가 전파되지 않음)</li>\n</ul>\n</li>\n<li>정말 null과 undefined가 불가능하다면 unknown 대신 {} 사용</li>\n</ol>\n<br>\n<h2 id=\"아이템-43-몽키-패치보다는-안전한-타입을-사용하기\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-43-%EB%AA%BD%ED%82%A4-%ED%8C%A8%EC%B9%98%EB%B3%B4%EB%8B%A4%EB%8A%94-%EC%95%88%EC%A0%84%ED%95%9C-%ED%83%80%EC%9E%85%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"아이템 43 몽키 패치보다는 안전한 타입을 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이템 43: 몽키 패치보다는 안전한 타입을 사용하기</h2>\n<ol>\n<li>\n<p>JS는 객체나 클래스에 임의의 속성을 추가할 수 있음</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">window<span class=\"token punctuation\">.</span>monkey <span class=\"token operator\">=</span> <span class=\"token string\">'Tamarin'</span><span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span>monkey <span class=\"token operator\">=</span> <span class=\"token string\">'Howler'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 'Document' 유형에 'monkey' 속성이 없습니다</span>\ndocument<span class=\"token punctuation\">.</span>monkey <span class=\"token operator\">=</span> <span class=\"token string\">'Tamarin'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 해결</span>\n<span class=\"token comment\">// 단 타입 안정성을 해치는 안 좋은 코드</span>\n<span class=\"token punctuation\">(</span>document <span class=\"token keyword\">as</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>monkey <span class=\"token operator\">=</span> <span class=\"token string\">'Tamarin'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 정상</span></code></pre></div>\n<ul>\n<li>일반적으로 좋은 설계는 아님(전역 변수 사이드 이펙트의 문제)</li>\n</ul>\n</li>\n<li>\n<p>interface 의 보강(augmentation)</p>\n<ul>\n<li>보강은 전역적으로 적용되기 때문에, 코드의 다른 부분이나 라이브러리로부터 분리할 수 없음</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Document</span> <span class=\"token punctuation\">{</span>\n  monkey<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\ndocument<span class=\"token punctuation\">.</span>monkey <span class=\"token operator\">=</span> <span class=\"token string\">'Tamarin'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 정상</span>\n\n<span class=\"token comment\">// 모듈 관점에서라면 global 선언 추가</span>\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">declare</span> global <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Document</span> <span class=\"token punctuation\">{</span>\n    monkey<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\ndocument<span class=\"token punctuation\">.</span>monkey <span class=\"token operator\">=</span> <span class=\"token string\">'Tamarin'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 정상</span></code></pre></div>\n</li>\n<li>\n<p>더 구체적인 타입 단언문 사용</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">MonkeyDocument</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Document</span> <span class=\"token punctuation\">{</span>\n monkey<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">(</span>document <span class=\"token keyword\">as</span> MonkeyDocument<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>monkey <span class=\"token operator\">=</span> <span class=\"token string\">'Macaque'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 정상</span></code></pre></div>\n</li>\n</ol>\n<br>\n<h2 id=\"아이템-44-타입-커버리지를-추적하여-타입-안전성-유지하기\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-44-%ED%83%80%EC%9E%85-%EC%BB%A4%EB%B2%84%EB%A6%AC%EC%A7%80%EB%A5%BC-%EC%B6%94%EC%A0%81%ED%95%98%EC%97%AC-%ED%83%80%EC%9E%85-%EC%95%88%EC%A0%84%EC%84%B1-%EC%9C%A0%EC%A7%80%ED%95%98%EA%B8%B0\" aria-label=\"아이템 44 타입 커버리지를 추적하여 타입 안전성 유지하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이템 44: 타입 커버리지를 추적하여 타입 안전성 유지하기</h2>\n<ol>\n<li><code class=\"language-text\">any</code> 타입이 여전히 프로그램 내에 존재할 수 있는 2가지 경우</li>\n<li>명시적 any 타입 ex) <code class=\"language-text\">any[], {[key: string]: any}</code></li>\n<li>\n<p>서드파티 타입 선언</p>\n<ul>\n<li>@types 선언 파일로부터 any 타입이 전파되는 경우</li>\n<li>\n<p>가장 극단적인 예시는 전체 모듈에 any 타입을 부여하는 경우</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// my-module 에서 어떤 것이든 오류 없이 임포트할 수 있음</span>\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">module</span> <span class=\"token string\">'my-module'</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>타입에 버그가 있는 경우 : 선언된 타입과 실제 반환된 타입이 맞지 않는 경우</li>\n</ul>\n</li>\n<li>npm의 type-coverage 패키지 활용하여 any 추적하기</li>\n</ol>\n<br>\n<h3 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h3>\n<ul>\n<li><a href=\"https://github.com/pagers-org/Effective-TypeScript\">이펙티브 타입스크립트 Study</a></li>\n<li><a href=\"http://www.yes24.com/Product/Goods/102124327\">이펙티브 타입스크립트 책</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-38-any-%ED%83%80%EC%9E%85%EC%9D%80-%EA%B0%80%EB%8A%A5%ED%95%9C-%ED%95%9C-%EC%A2%81%EC%9D%80-%EB%B2%94%EC%9C%84%EC%97%90%EC%84%9C%EB%A7%8C-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\">아이템 38: any 타입은 가능한 한 좁은 범위에서만 사용하기</a></li>\n<li><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-39-any%EB%A5%BC-%EA%B5%AC%EC%B2%B4%EC%A0%81%EC%9C%BC%EB%A1%9C-%EB%B3%80%ED%98%95%ED%95%B4%EC%84%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\">아이템 39: any를 구체적으로 변형해서 사용하기</a></li>\n<li><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-40-%ED%95%A8%EC%88%98-%EC%95%88%EC%9C%BC%EB%A1%9C-%ED%83%80%EC%9E%85-%EB%8B%A8%EC%96%B8%EB%AC%B8-%EA%B0%90%EC%B6%94%EA%B8%B0\">아이템 40: 함수 안으로 타입 단언문 감추기</a></li>\n<li><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-41-any-%ED%83%80%EC%9E%85%EC%9D%98-%EB%B3%80%ED%99%98\">아이템 41: Any 타입의 변환</a></li>\n<li><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-42-%EB%AA%A8%EB%A5%B4%EB%8A%94-%ED%83%80%EC%9E%85%EC%97%90%EB%8A%94-any-%EB%8C%80%EC%8B%A0-unknown%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\">아이템 42: 모르는 타입에는 any 대신 unknown을 사용하기</a></li>\n<li><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-43-%EB%AA%BD%ED%82%A4-%ED%8C%A8%EC%B9%98%EB%B3%B4%EB%8B%A4%EB%8A%94-%EC%95%88%EC%A0%84%ED%95%9C-%ED%83%80%EC%9E%85%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\">아이템 43: 몽키 패치보다는 안전한 타입을 사용하기</a></li>\n<li>\n<p><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-44-%ED%83%80%EC%9E%85-%EC%BB%A4%EB%B2%84%EB%A6%AC%EC%A7%80%EB%A5%BC-%EC%B6%94%EC%A0%81%ED%95%98%EC%97%AC-%ED%83%80%EC%9E%85-%EC%95%88%EC%A0%84%EC%84%B1-%EC%9C%A0%EC%A7%80%ED%95%98%EA%B8%B0\">아이템 44: 타입 커버리지를 추적하여 타입 안전성 유지하기</a></p>\n<ul>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"May 15, 2023","title":"Effective TypeScript 5장","categories":"Study","author":"Kay","emoji":"👋"},"fields":{"slug":"/effective-typescript-5/"}},"prev":{"id":"1ef8ad64-5791-5960-bf4a-a2bcc78f5302","html":"<h2 id=\"한-주-회고\" style=\"position:relative;\"><a href=\"#%ED%95%9C-%EC%A3%BC-%ED%9A%8C%EA%B3%A0\" aria-label=\"한 주 회고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>한 주 회고</h2>\n<p>새로운 장소에서 새로운 시작을 하게 되었습니다. 개인적으로 팀원들 모두 좋은 사람 같았습니다. 또한 자신의 업무에 대해 책임감을 가지고 누구보다 열심히 하는 모습을 보면서 저도 강한 동기를 얻었습니다.</p>\n<p>특히 새로운 도메인 분야에서 도전을 하는 만큼, 누군가에게 꼭 도움을 줄 수 있는 사람이 될 수 있도록 다짐을 해봅니다.</p>\n<p>그리고 팀 리더 분께서 타운홀에서 좋은 이야기를 해주셨는데 문득’피드백은 비싸다’라는 말이 떠올랐습니다.</p>\n<p>저는 성장하기 위해 꼭 필요한 것 중 하나는 ‘피드백’이라고 생각합니다.</p>\n<p>이렇게 ‘피드백’을 자유롭게 할 수 있는 조직에 있다는 것만으로도 너무나 감사하며, 자기 객관화 능력을 키워갈 수 있다고 확신했습니다. 왜냐하면 6개월, 1년 동안 자신이 한 업무가 팀 내 그리고 조직에 어떠한 영향을 주었는지 셀프 회고를 해보고, 나와 같이 일한 동료로부터 피드백을 받아 내가 생각한 나의 모습과 타인이 생각한 나의 모습을 비교하면서 나를 온전히 바라볼 수 있기 때문입니다.</p>\n<p>그래서 저는 앞으로 솔직하고 세세하게 근무 시간에 무엇을 했는지 적으면서 어떻게 하면 팀 그리고 회사에 도움을 줄 수 있는지 생각하고, 더 나아가 우리가 만들어 가고 있는 이 서비스가 다른 사람들에게 어떻게 기억되길 원하는지 끝임없이 팀원들과 고민하면서 만들어 가고 싶습니다.</p>\n<p>물론 아직 프론트엔드 개발자로서 채워가야 할 능력들이 많지만, 하나씩 차분히 채워가는 맛으로 이번 도전을 즐기고 싶습니다.</p>\n<p>이번 주도 수고하셨습니다.</p>\n<br>\n<h3 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h3>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%ED%95%9C-%EC%A3%BC-%ED%9A%8C%EA%B3%A0\">한 주 회고</a></p>\n<ul>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"May 27, 2023","title":"5월 4주 회고","categories":"Log","author":"Kay","emoji":"👋"},"fields":{"slug":"/write-log-230527/"}},"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":"zoomkoding/zoomkoding-gatsby-blog"}}}}},"pageContext":{"slug":"/write-log-230521/","nextSlug":"/effective-typescript-5/","prevSlug":"/write-log-230527/"}},"staticQueryHashes":["1073350324","2938748437"]}