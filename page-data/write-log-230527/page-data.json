{"componentChunkName":"component---src-templates-blog-template-js","path":"/write-log-230527/","result":{"data":{"cur":{"id":"1ef8ad64-5791-5960-bf4a-a2bcc78f5302","html":"<h2 id=\"한-주-회고\" style=\"position:relative;\"><a href=\"#%ED%95%9C-%EC%A3%BC-%ED%9A%8C%EA%B3%A0\" aria-label=\"한 주 회고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>한 주 회고</h2>\n<p>새로운 장소에서 새로운 시작을 하게 되었습니다. 개인적으로 팀원들 모두 좋은 사람 같았습니다. 또한 자신의 업무에 대해 책임감을 가지고 누구보다 열심히 하는 모습을 보면서 저도 강한 동기를 얻었습니다.</p>\n<p>특히 새로운 도메인 분야에서 도전을 하는 만큼, 누군가에게 꼭 도움을 줄 수 있는 사람이 될 수 있도록 다짐을 해봅니다.</p>\n<p>그리고 팀 리더 분께서 타운홀에서 좋은 이야기를 해주셨는데 문득’피드백은 비싸다’라는 말이 떠올랐습니다.</p>\n<p>저는 성장하기 위해 꼭 필요한 것 중 하나는 ‘피드백’이라고 생각합니다.</p>\n<p>이렇게 ‘피드백’을 자유롭게 할 수 있는 조직에 있다는 것만으로도 너무나 감사하며, 자기 객관화 능력을 키워갈 수 있다고 확신했습니다. 왜냐하면 6개월, 1년 동안 자신이 한 업무가 팀 내 그리고 조직에 어떠한 영향을 주었는지 셀프 회고를 해보고, 나와 같이 일한 동료로부터 피드백을 받아 내가 생각한 나의 모습과 타인이 생각한 나의 모습을 비교하면서 나를 온전히 바라볼 수 있기 때문입니다.</p>\n<p>그래서 저는 앞으로 솔직하고 세세하게 근무 시간에 무엇을 했는지 적으면서 어떻게 하면 팀 그리고 회사에 도움을 줄 수 있는지 생각하고, 더 나아가 우리가 만들어 가고 있는 이 서비스가 다른 사람들에게 어떻게 기억되길 원하는지 끝임없이 팀원들과 고민하면서 만들어 가고 싶습니다.</p>\n<p>물론 아직 프론트엔드 개발자로서 채워가야 할 능력들이 많지만, 하나씩 차분히 채워가는 맛으로 이번 도전을 즐기고 싶습니다.</p>\n<p>이번 주도 수고하셨습니다.</p>\n<br>\n<h3 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h3>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%ED%95%9C-%EC%A3%BC-%ED%9A%8C%EA%B3%A0\">한 주 회고</a></p>\n<ul>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"한 주 회고 새로운 장소에서 새로운 시작을 하게 되었습니다. 개인적으로 팀원들 모두 좋은 사람 같았습니다. 또한 자신의 업무에 대해 책임감을 가지고 누구보다 열심히 하는 모습을 보면서 저도 강한 동기를 얻었습니다. 특히 새로운 도메인 분야에서 도전을 하는 만큼, 누군가에게 꼭 도움을 줄 수 있는 사람이 될 수 있도록 다짐을 해봅니다. 그리고 팀 리더 분께서 타운홀에서 좋은 이야기를 해주셨는데 문득’피드백은 비싸다’라는 말이 떠올랐습니다. 저는 성장하기 위해 꼭 필요한 것 중 하나는 ‘피드백’이라고 생각합니다. 이렇게 ‘피드백’을 자유롭게 할 수 있는 조직에 있다는 것만으로도 너무나 감사하며, 자기 객관화 능력을 키워갈 수 있다고 확신했습니다. 왜냐하면 6개월, 1년 동안 자신이 한 업무가 팀 내 그리고 조직에 어떠한 영향을 주었는지 셀프 회고를 해보고, 나와 같이 일한 동료로부터 피드백을 받아 내가 생각한 나의 모습과 타인이 생각한 나의 모습을 비교하면서 나를 온전히 바라볼 수 있…","frontmatter":{"date":"May 27, 2023","title":"5월 4주 회고","categories":"Log","author":"Kay","emoji":"👋"},"fields":{"slug":"/write-log-230527/"}},"next":{"id":"70d32b5d-6b9d-5370-92c4-e49a697f57eb","html":"<h2 id=\"한-주-회고\" style=\"position:relative;\"><a href=\"#%ED%95%9C-%EC%A3%BC-%ED%9A%8C%EA%B3%A0\" aria-label=\"한 주 회고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>한 주 회고</h2>\n<p>저의 새로운 출발을 응원해주기 위해 전 직장 동료들과 함께 점심 식사를 하면서 이런저런 이야기를 하는 시간을 많이 가졌습니다.\n대화 속에서 동기부여되는 말들이 많아 오히려 힘도 많이 나고 앞으로 어떤 개발자가 되어야 하는지 더 깊게 생각해보는 시간을 가져 좋았습니다.(팀원들 너무나 감사합니다.)</p>\n<p>그리고 사실 이번 주는 설렘과 걱정이 동반되는 시간들이 많았습니다. 그 이유는 새로운 시작에 앞서 스스로 부족하다는 생각을 많이 했기 때문입니다.\n‘과연 내가 할 수 있을까?’, ‘내가 잘 할 수 있을까’ 등에 보이지만 실체가 없는 걱정과 불안에 휩싸인채로 하루하루 시간들을 보냈습니다.</p>\n<p>그래도 스스로 극복하고자 새로운 시작에 앞서 필요한 것들을 나열해보고 학습을 멈추지 않았습니다. 어차피 행동을 하나 안하나 똑같이 불안하다면 그냥 무엇 하나라도 하는 것이 낫다는 생각이 들어 몸을 움직였습니다.(물론 글로써는 대담하게 행동한 것처럼 보이지만 행동하면서도 많이 불안했습니다.)</p>\n<p>하기 싫은 일들도 해야 한다는 것도 알게 되었고, 어쩌면 인생 자체가 불안과 걱정을 동반한 채로 살아가야 하는건 아닌가 라는 생각도 해보게되었습니다.\n그 속에서 제대로 성장할려면 이왕하는 거 제대로 이해하고 차분히 학습해 나아가야 겠다는 다짐도 해보았습니다.</p>\n<p>앞으로 어떤 일들이 벌어질지 모르겠지만 일희일비 하지 말고 그저 묵묵히 부족한 부분을 채워 원하는 목표에 도달하기 위해 노력하는 시간으로 가득 차길 바라며 이번 한 주도 수고했습니다.</p>\n<br>\n<h3 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h3>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%ED%95%9C-%EC%A3%BC-%ED%9A%8C%EA%B3%A0\">한 주 회고</a></p>\n<ul>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"May 21, 2023","title":"5월 3주 회고","categories":"Log","author":"Kay","emoji":"👋"},"fields":{"slug":"/write-log-230521/"}},"prev":{"id":"6e10efb6-b3ff-561a-b1e0-2d650ed89e61","html":"<h2 id=\"아이템-45-devdependencies에-ts와-types-추가하기\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-45-devdependencies%EC%97%90-ts%EC%99%80-types-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0\" aria-label=\"아이템 45 devdependencies에 ts와 types 추가하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이템 45: devDependencies에 TS와 @types 추가하기</h2>\n<ol>\n<li>\n<p>npm의 의존성 구분</p>\n<ul>\n<li>dependencies: 현재 프로젝트 실행 시 필수적인 라이브러리</li>\n<li>devDependencies: 런타임에는 필요없는 라이브러리</li>\n<li>peerDependencies: 런타임에 필요하긴 하지만, 의존성을 직접 관리하지 않는 라이브러리</li>\n</ul>\n</li>\n<li>TS는 개발 도구일 뿐이고 타입 정보는 런타임에 존재하지 않기 때문에, TS와 관련된 라이브러리는 일반적으로 devDependencies에 속함</li>\n<li>\n<p>TS 프로젝트에서 고려해야 할 의존성</p>\n<ul>\n<li>TS 시스템 레벨로 설치하기보다는 devDependencies에 넣는 것을 권장\n→ npm install 시 팀원들 모두 항상 정확한 버전의 TS 설치 가능</li>\n<li>대부분의 TS IDE와 빌드 도구는 devDependencies를 통해 설치된 타입스크립트의 버전을 인식할 수 있음</li>\n<li>DefinitelyTyped에서 라이브러리에 대한 타입 정보를 얻을 수 있음</li>\n<li>@types 라이브러리는 타입 정보만 포함하고 있으며 구현체는 포함하지 않음</li>\n<li>원본 라이브러리 자체가 dependencies에 있더라도 @types 의존성은 devDependencies에 있어야 함</li>\n</ul>\n</li>\n</ol>\n<br>\n<h2 id=\"아이템-46-타입-선언과-관련된-3가지-버전-이해하기\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-46-%ED%83%80%EC%9E%85-%EC%84%A0%EC%96%B8%EA%B3%BC-%EA%B4%80%EB%A0%A8%EB%90%9C-3%EA%B0%80%EC%A7%80-%EB%B2%84%EC%A0%84-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0\" aria-label=\"아이템 46 타입 선언과 관련된 3가지 버전 이해하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이템 46: 타입 선언과 관련된 3가지 버전 이해하기</h2>\n<ol>\n<li>\n<p>TS 사용 시 고려해야 할 사항</p>\n<ul>\n<li>라이브러리의 버전</li>\n<li>타입 선언(@types)의 버전</li>\n<li>타입스크립트의 버전</li>\n</ul>\n</li>\n<li>\n<p>타입스크립트에서 의존성을 사용하는 방식</p>\n<ul>\n<li>특정 라이브러리는 dependencies로, 타입 정보는 devDependencies로 설치</li>\n</ul>\n</li>\n<li>\n<p>실제 라이브러리와 타입 정보의 버전이 별도로 관리되는 방식의 문제점</p>\n<div class=\"gatsby-highlight\" data-language=\"md\"><pre class=\"language-md\"><code class=\"language-md\"><span class=\"token list punctuation\">1.</span>  라이브러리를 업데이트했지만 실수로 타입 선언은 업데이트하지 않은 경우\n\n<span class=\"token code keyword\">    - 타입 선언도 업데이트하여 라이브러리와 버전을 맞춤\n    - 보강 기법 또는 타입 선언의 업데이트를 직접 작성</span>\n\n<span class=\"token list punctuation\">2.</span>  라이브러리보다 타입 선언의 버전이 최신인 경우\n\n<span class=\"token code keyword\">    - 라이브러리 버전을 올리거나 타입 선언의 버전을 내리기</span>\n\n<span class=\"token list punctuation\">3.</span>  프로젝트에서 사용하는 타입스크립트 버전보다 라이브러리에서 필요로 하는 타입스크립트 버전이 최신인 경우\n\n<span class=\"token code keyword\">    - 타입스크립트의 최신 버전을 사용\n    - 라이브러리 타입 선언의 버전을 내리거나, declare module 선언으로 라이브러리의 타입 정보를 없애 버림</span>\n\n<span class=\"token list punctuation\">4.</span>  @types 의존성이 중복되는 경우\n\n<span class=\"token code keyword\">    a. ex) @types/bar가 현재 호환되지 않는 버전의 @types/foo에 의존하는 경우</span>\n\n<span class=\"token code keyword\">    - 전역 네임스페이스에 있는 타입 선언 모듈인 경우 중복 문제가 발생\n      → 서로 버전이 호환되도록 업데이트</span>\n\n<span class=\"token code keyword\">    b. 일부 라이브러리는 자체적으로 타입 선언을 포함(번들링)</span>\n\n<span class=\"token code keyword\">    - package.json 의 types 필드가 .d.ts 파일을 가리키도록 되어 있음\n    - 버전 불일치 문제를 해결할 수 있지만, 네 가지 부수적인 문제점이 있음\n      - 번들된 타입 선언에 보강 기법으로 해결할 수 없는 오류가 있는 경우, 또는 공개 시점에는 잘 동작했지만 타입스크립트 버전이 올라가면서 오류가 발생하는 경우(번들된 타입에서는 @types의 버전 선택 불가능)\n      - 프로젝트 내의 타입 선언이 다른 라이브러리의 타입 선언에 의존하는 경우(devDependencies에 들어간 의존성을 다른 사용자는 설치할 수 없기 때문)\n        → DefinitelyTyped에 타입 선언을 공개하여 타입 선언을 @types로 분리\n      - 프로젝트의 과거 버전에 있는 타입 선언에 문제가 있는 경우\n        → 과거 버전으로 돌아가서 패치 업데이트를 함\n      - 타입 선언의 패치 업데이트를 자주 하기 어렵다는 문제</span></code></pre></div>\n</li>\n<li>잘 작성된 타입 선언은 라이브러리를 올바르게 사용하는 방법에 도움이 되며 생산성을 크게 향상시킴</li>\n<li>라이브러리 공개 시, 타입 선언을 자체적으로 포함하는 것과 타입 정보만 분리하여 DefinitelyTyped에 공개하는 것의 장단점을 비교 해야 함</li>\n<li>라이브러리가 타입스크립트로 작성된 경우만 타입 선언을 라이브러리에 포함하는 것을 권장</li>\n</ol>\n<br>\n<h2 id=\"아이템-47-공개-api에-등장하는-모든-타입을-익스포트하기\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-47-%EA%B3%B5%EA%B0%9C-api%EC%97%90-%EB%93%B1%EC%9E%A5%ED%95%98%EB%8A%94-%EB%AA%A8%EB%93%A0-%ED%83%80%EC%9E%85%EC%9D%84-%EC%9D%B5%EC%8A%A4%ED%8F%AC%ED%8A%B8%ED%95%98%EA%B8%B0\" aria-label=\"아이템 47 공개 api에 등장하는 모든 타입을 익스포트하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이템 47: 공개 API에 등장하는 모든 타입을 익스포트하기</h2>\n<ol>\n<li>\n<p>라이브러리 제작자는 프로젝트 초기에 타입 익스포트부터 작성해야 함</p>\n<ul>\n<li>\n<p>타입을 익스포트하지 않았을 경우</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// 해당 라이브러리 사용자는 SecretName 또는 SecretSanta 를 직접 임포트할 수 없고, getGift만 임포트할 수 있음</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">SecretName</span> <span class=\"token punctuation\">{</span>\n  first<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  last<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">SecretSanta</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> SecretName<span class=\"token punctuation\">;</span>\n  gift<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getGift</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> SecretName<span class=\"token punctuation\">,</span> gift<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> SecretSanta <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>Parameters와 ReturnType을 이용해 추출</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">MySanta</span> <span class=\"token operator\">=</span> ReturnType<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> getGift<span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// SecretSanta</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">MyName</span> <span class=\"token operator\">=</span> Parameters<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> getGift<span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// SecretName</span></code></pre></div>\n<p>→ 사용자가 추출하기 전에 공개 메서드에 사용된 타입은 익스포트 지향</p>\n</li>\n</ul>\n</li>\n</ol>\n<br>\n<h2 id=\"아이템-48-api-주석에-tsdoc-사용하기\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-48-api-%EC%A3%BC%EC%84%9D%EC%97%90-tsdoc-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"아이템 48 api 주석에 tsdoc 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이템 48: API 주석에 TSDoc 사용하기</h2>\n<ol>\n<li>함수 주석에 <code class=\"language-text\">// ...</code> 대신 JSDoc 스타일의 <code class=\"language-text\">/** ... **/</code> 을 사용하면 대부분의 편집기는 함수 사용부에서 주석을 툴팁으로 표시해 줌</li>\n<li>\n<p>타입스크립트 관점의 TSDoc</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">/**\n * Generate a greeting\n * @param name Name of the person to greet\n * @param title ...\n * returns ...\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">greetFullTSDoc</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> title<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>title<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>타입 정의에 TSDoc 사용하기</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">/** 특정 시간과 장소에서 수행된 측정 */</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Measurement</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/** 어디에서 측정되었나? */</span>\n  position<span class=\"token operator\">:</span> Vector3D<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/** 언제 측정되었나? */</span>\n  time<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/** 측정된 운동량 */</span>\n  momentum<span class=\"token operator\">:</span> Vector3D<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Measurement 객체의 각 필드에 마우스를 올려 보면 필드별로 설명을 볼 수 있음</span></code></pre></div>\n</li>\n<li>타입스크립트에서는 타입 정보가 코드에 있기 때문에 TSDoc에서는 타입 정보를 명시하면 안 됨(주의)</li>\n</ol>\n<br>\n<h2 id=\"아이템-49-콜백에서-this에-대한-타입-제공하기\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-49-%EC%BD%9C%EB%B0%B1%EC%97%90%EC%84%9C-this%EC%97%90-%EB%8C%80%ED%95%9C-%ED%83%80%EC%9E%85-%EC%A0%9C%EA%B3%B5%ED%95%98%EA%B8%B0\" aria-label=\"아이템 49 콜백에서 this에 대한 타입 제공하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이템 49: 콜백에서 this에 대한 타입 제공하기</h2>\n<ol>\n<li>JS에서 this는 다이나믹 스코프</li>\n<li>‘정의된’ 방식이 아니라 ‘호출된’ 방식에 따라 달라짐</li>\n<li>TS는 JS의 this 바인딩을 그대로 모델링 함</li>\n<li>\n<p>this를 사용하는 콜백 함수에서 this 바인딩 문제 해결</p>\n<ul>\n<li>\n<p>콜백 함수의 매개변수에 this를 추가하고, 콜백 함수를 call로 호출하는 방법</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// 이때 반드시 call 을 사용해야 함</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">addKeyListener</span><span class=\"token punctuation\">(</span>el<span class=\"token operator\">:</span> HTMLElement<span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">fn</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">:</span> HTMLElement<span class=\"token punctuation\">,</span> e<span class=\"token operator\">:</span> KeyboardEvent<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\nel<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'keydown'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>만약 라이브러리 사용자가 콜백을 화살표 함수로 작성하고 this를 참조하려고 하면 TS가 문제를 잡아 냄</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">registerHandler</span><span class=\"token punctuation\">(</span>el<span class=\"token operator\">:</span> HTMLElement<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">addKeyListener</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>innerHTML<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'Foo' 유형에 'innerHTML' 속성이 없음</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>콜백 함수에서 this 값을 사용해야 한다면, this는 API의 일부가 되는 것이기 때문에 반드시 타입 선언에 포함해야 함</li>\n</ol>\n<br>\n<h2 id=\"아이템-50-오버로딩-타입보다는-조건부-타입을-사용하기\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-50-%EC%98%A4%EB%B2%84%EB%A1%9C%EB%94%A9-%ED%83%80%EC%9E%85%EB%B3%B4%EB%8B%A4%EB%8A%94-%EC%A1%B0%EA%B1%B4%EB%B6%80-%ED%83%80%EC%9E%85%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"아이템 50 오버로딩 타입보다는 조건부 타입을 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이템 50: 오버로딩 타입보다는 조건부 타입을 사용하기</h2>\n<ol>\n<li>\n<p>두 가지 타입의 매개변수를 받는 함수</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// 선언문에는 number 타입을 매개변수로 넣고 string 타입을 반환하는 경우도 포함되어 있음</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">double</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">double</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> num <span class=\"token operator\">=</span> <span class=\"token function\">double</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// string | number</span>\n<span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token function\">double</span><span class=\"token punctuation\">(</span><span class=\"token string\">'x'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// string | number</span></code></pre></div>\n<p>→ 제네릭을 사용하여 동작을 모델링할 수 있음</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// 타입이 너무 과하게 구체적인 문제</span>\n<span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">double</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">double</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> num <span class=\"token operator\">=</span> <span class=\"token function\">double</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 타입이 12</span>\n<span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token function\">double</span><span class=\"token punctuation\">(</span><span class=\"token string\">'x'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 타입이 'x' (😮 string을 원하고 있다.)</span></code></pre></div>\n</li>\n<li>조건부 타입</li>\n<li>\n<p>타입 공간의 if 구문</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">double</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token builtin\">string</span></span> <span class=\"token operator\">?</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">double</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>개별 타입의 유니온으로 일반화하기 때문에 타입이 더 정확해짐</li>\n<li>각각이 독립적으로 처리되는 타입 오버로딩과 달리, 조건부 타입은 타입 체커가 단일 표현식으로 받아들이기 때문에 유니온 문제를 해결할 수 있음</li>\n</ol>\n<br>\n<h2 id=\"아이템-51-의존성-분리를-위해-미러-타입-사용\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-51-%EC%9D%98%EC%A1%B4%EC%84%B1-%EB%B6%84%EB%A6%AC%EB%A5%BC-%EC%9C%84%ED%95%B4-%EB%AF%B8%EB%9F%AC-%ED%83%80%EC%9E%85-%EC%82%AC%EC%9A%A9\" aria-label=\"아이템 51 의존성 분리를 위해 미러 타입 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이템 51: 의존성 분리를 위해 미러 타입 사용</h2>\n<ol>\n<li>\n<p>CSV 파일을 파싱하는 라이브러리 작성 시, NodeJS 사용자를 위해 매개변수에 Buffer 타입을 허용하는 경우</p>\n<ul>\n<li>Buffer 타입 정의를 위해 <code class=\"language-text\">@types/node</code> 패키지 필요</li>\n<li>그러나 다른 라이브러리 사용자들은 해당 패키지가 불필요</li>\n</ul>\n</li>\n<li>\n<p>각자가 필요한 모듈만 사용할 수 있도록 구조적 타이핑 적용</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// CsvBuffer가 Buffer 타입과 호환되기 때문에 NodeJS 프로젝트에서도 사용 가능</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">CsvBuffer</span> <span class=\"token punctuation\">{</span>\n <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>encoding<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">parseCSV</span><span class=\"token punctuation\">(</span>contents<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> CsvBuffer<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>column<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">parseCSV</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Buffer</span><span class=\"token punctuation\">(</span><span class=\"token string\">'column1, column2\\nval2,val2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>미러링</p>\n<ul>\n<li>작성 중인 라이브러리가 의존하는 라이브러리의 구현과 무관하게 타입에만 의존한다면, 필요한 선언부만 추출하여 작성 중인 라이브러리에 넣는 것</li>\n</ul>\n</li>\n<li>다른 라이브러리의 타입이 아닌 구현에 의존하는 경우에도 동일한 기법을 적용할 수 있고 타입 의존성을 피할 수 있음</li>\n</ol>\n<p>→ 유닛 테스트와 상용 시스템 간의 의존성을 분리하는 데도 유용</p>\n<br>\n<h2 id=\"아이템-52-테스팅-타입의-함정에-주의하기\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-52-%ED%85%8C%EC%8A%A4%ED%8C%85-%ED%83%80%EC%9E%85%EC%9D%98-%ED%95%A8%EC%A0%95%EC%97%90-%EC%A3%BC%EC%9D%98%ED%95%98%EA%B8%B0\" aria-label=\"아이템 52 테스팅 타입의 함정에 주의하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이템 52: 테스팅 타입의 함정에 주의하기</h2>\n<ol>\n<li>\n<p>타입 선언 테스트</p>\n<ul>\n<li>유틸리티 라이브러리에서 제공하는 <code class=\"language-text\">map</code> 함수의 타입 작성</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// 단순히 함수를 호출하는 테스트만으로는 반환값에 대한 체크가 누락될 수 있음 (’실행’에서의 오류만 검사함)</span>\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">map</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">U</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">V</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>array<span class=\"token operator\">:</span> <span class=\"token constant\">U</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">fn</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>u<span class=\"token operator\">:</span> <span class=\"token constant\">U</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">V</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">V</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>반환값을 특정 타입의 변수에 할당하여 간단히 반환 타입을 체크할 수 있는 방법</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// number[] 타입 선언은 map 함수의 반환 타입이 number[] 임을 보장</span>\n\n<span class=\"token keyword\">const</span> lengths<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'john'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'paul'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> name<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>그러나 테스팅을 위해 할당을 사용하는 방법에는 두 가지 문제가 있음</p>\n<ul>\n<li>\n<p>불필요한 변수를 만들어야 함 그래서 일반적인 해결책은 변수 도입 대신 헬퍼 함수를 정의하는 것</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">assertType</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token generic-function\"><span class=\"token function\">assertType</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'john'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'paul'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> name<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>두 타입이 동일한지 체크하는 것이 아니라 할당 가능성을 체크</p>\n<ul>\n<li>객체의 타입을 체크하는 경우</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> beatles <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'john'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'paul'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'george'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ringo'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 반환된 배열은 {name: string}[] 에 할당 가능하지만, inYellowSubmarine 속성에 대한 부분이 체크되지 않음</span>\n<span class=\"token generic-function\"><span class=\"token function\">assertType</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>\n  <span class=\"token function\">map</span><span class=\"token punctuation\">(</span>beatles<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">,</span>\n    inYellowSubmarine<span class=\"token operator\">:</span> name <span class=\"token operator\">===</span> <span class=\"token string\">'ringo'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 정상</span></code></pre></div>\n<ul>\n<li>TS의 함수는 매개변수가 더 적은 함수 타입에 할당 가능하다는 문제</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">double</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> x<span class=\"token punctuation\">;</span>\nassertType<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">number</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>double<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//  정상?!</span></code></pre></div>\n<ul>\n<li>Parameters와 ReturnType 제네릭 타입을 이용해, 함수의 매개변수 타입과 반환 타입만 분리하여 테스트할 수 있음</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">double</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> x<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> p<span class=\"token operator\">:</span> Parameters<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> double<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token generic-function\"><span class=\"token function\">assertType</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 🚨 '[number]' 형식의 인수는 '[number, number]' 형식의 매개변수에 할당될 수 없습니다</span>\n<span class=\"token keyword\">let</span> r<span class=\"token operator\">:</span> ReturnType<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> double<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token generic-function\"><span class=\"token function\">assertType</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 정상</span></code></pre></div>\n<ul>\n<li>map의 콜백 함수에서 사용하게 되는 this 값에 대한 타입 선언 테스트</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">map</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">U</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">V</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>\narray<span class=\"token operator\">:</span> <span class=\"token constant\">U</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token function-variable function\">fn</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">:</span> <span class=\"token constant\">U</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> u<span class=\"token operator\">:</span> <span class=\"token constant\">U</span><span class=\"token punctuation\">,</span> i<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> array<span class=\"token operator\">:</span> <span class=\"token constant\">U</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">V</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">V</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>타입 시스템 내에서 암시적 any 타입을 발견하기 위해 DefinitelyTyped의 타입 선언을 위한 도구 <code class=\"language-text\">tslint</code> 사용함</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// dtslint는 할당 가능성을 체크하는 대신 각 심벌의 타입을 추출하여 글자 자체가 같은지 비교한다</span>\n<span class=\"token keyword\">const</span> beatles <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'john'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'paul'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'george'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ringo'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">map</span><span class=\"token punctuation\">(</span>beatles<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>\n  name<span class=\"token punctuation\">,</span> <span class=\"token comment\">// $ExpectType string</span>\n  i<span class=\"token punctuation\">,</span> <span class=\"token comment\">// $ExpectType number</span>\n  array<span class=\"token punctuation\">,</span> <span class=\"token comment\">// $ExpectType string[]</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// $ExpectType string[]</span>\n  <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token comment\">// $ExpectType number[]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ol>\n<br>\n<h3 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h3>\n<ul>\n<li><a href=\"https://github.com/pagers-org/Effective-TypeScript\">이펙티브 타입스크립트 Study</a></li>\n<li><a href=\"http://www.yes24.com/Product/Goods/102124327\">이펙티브 타입스크립트 책</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-45-devdependencies%EC%97%90-ts%EC%99%80-types-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0\">아이템 45: devDependencies에 TS와 @types 추가하기</a></li>\n<li><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-46-%ED%83%80%EC%9E%85-%EC%84%A0%EC%96%B8%EA%B3%BC-%EA%B4%80%EB%A0%A8%EB%90%9C-3%EA%B0%80%EC%A7%80-%EB%B2%84%EC%A0%84-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0\">아이템 46: 타입 선언과 관련된 3가지 버전 이해하기</a></li>\n<li><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-47-%EA%B3%B5%EA%B0%9C-api%EC%97%90-%EB%93%B1%EC%9E%A5%ED%95%98%EB%8A%94-%EB%AA%A8%EB%93%A0-%ED%83%80%EC%9E%85%EC%9D%84-%EC%9D%B5%EC%8A%A4%ED%8F%AC%ED%8A%B8%ED%95%98%EA%B8%B0\">아이템 47: 공개 API에 등장하는 모든 타입을 익스포트하기</a></li>\n<li><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-48-api-%EC%A3%BC%EC%84%9D%EC%97%90-tsdoc-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\">아이템 48: API 주석에 TSDoc 사용하기</a></li>\n<li><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-49-%EC%BD%9C%EB%B0%B1%EC%97%90%EC%84%9C-this%EC%97%90-%EB%8C%80%ED%95%9C-%ED%83%80%EC%9E%85-%EC%A0%9C%EA%B3%B5%ED%95%98%EA%B8%B0\">아이템 49: 콜백에서 this에 대한 타입 제공하기</a></li>\n<li><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-50-%EC%98%A4%EB%B2%84%EB%A1%9C%EB%94%A9-%ED%83%80%EC%9E%85%EB%B3%B4%EB%8B%A4%EB%8A%94-%EC%A1%B0%EA%B1%B4%EB%B6%80-%ED%83%80%EC%9E%85%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\">아이템 50: 오버로딩 타입보다는 조건부 타입을 사용하기</a></li>\n<li><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-51-%EC%9D%98%EC%A1%B4%EC%84%B1-%EB%B6%84%EB%A6%AC%EB%A5%BC-%EC%9C%84%ED%95%B4-%EB%AF%B8%EB%9F%AC-%ED%83%80%EC%9E%85-%EC%82%AC%EC%9A%A9\">아이템 51: 의존성 분리를 위해 미러 타입 사용</a></li>\n<li>\n<p><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-52-%ED%85%8C%EC%8A%A4%ED%8C%85-%ED%83%80%EC%9E%85%EC%9D%98-%ED%95%A8%EC%A0%95%EC%97%90-%EC%A3%BC%EC%9D%98%ED%95%98%EA%B8%B0\">아이템 52: 테스팅 타입의 함정에 주의하기</a></p>\n<ul>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"May 29, 2023","title":"Effective TypeScript 6장","categories":"Study","author":"Kay","emoji":"👋"},"fields":{"slug":"/effective-typescript-6/"}},"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/write-log-230527/","nextSlug":"/write-log-230521/","prevSlug":"/effective-typescript-6/"}},"staticQueryHashes":["1073350324","2938748437"]}