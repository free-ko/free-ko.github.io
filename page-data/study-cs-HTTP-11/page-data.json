{"componentChunkName":"component---src-templates-blog-template-js","path":"/study-cs-HTTP-11/","result":{"data":{"cur":{"id":"9e233de4-05f0-5ca5-96aa-9c3e25d7a0fa","html":"<br>\n<h1 align=\"center\">\n  👋  HTTP API 설계 예시\n</h1>\n<br>\n<h2 id=\"1api-설계\" style=\"position:relative;\"><a href=\"#1api-%EC%84%A4%EA%B3%84\" aria-label=\"1api 설계 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.API 설계</h2>\n<ol>\n<li>\n<p>HTTP API - 컬렉션</p>\n<ul>\n<li>POST 기반 등록 ex) 회원 관리 API 제공</li>\n</ul>\n</li>\n<li>\n<p>HTTP API - 스토어</p>\n<ul>\n<li>PUT 기반 등록 ex) 정적 컨텐츠 관리, 원격 파일 관리</li>\n</ul>\n</li>\n<li>\n<p>HTML FORM 사용</p>\n<ul>\n<li>웹 페이지 회원 관리</li>\n<li>GET, POST만 지원</li>\n</ul>\n</li>\n</ol>\n<br>\n<h2 id=\"2회원-관리-시스템--api-설계---post-기반-등록\" style=\"position:relative;\"><a href=\"#2%ED%9A%8C%EC%9B%90-%EA%B4%80%EB%A6%AC-%EC%8B%9C%EC%8A%A4%ED%85%9C--api-%EC%84%A4%EA%B3%84---post-%EA%B8%B0%EB%B0%98-%EB%93%B1%EB%A1%9D\" aria-label=\"2회원 관리 시스템  api 설계   post 기반 등록 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.회원 관리 시스템 : API 설계 - POST 기반 등록</h2>\n<ol>\n<li>회원 목록 <code class=\"language-text\">/members</code>—> GET</li>\n<li>회원 등록 <code class=\"language-text\">/members</code> —> POST</li>\n<li>회원 조회 <code class=\"language-text\">/members{id}</code> —> GET</li>\n<li>회원 수정<code class=\"language-text\">/members{id}</code> —> PATCH, PUT, POST</li>\n<li>회원 삭제<code class=\"language-text\">/members{id}</code> —> DELETE</li>\n</ol>\n<br>\n<h2 id=\"3회원-관리-시스템--post---신규-자원-등록실무에서-사용\" style=\"position:relative;\"><a href=\"#3%ED%9A%8C%EC%9B%90-%EA%B4%80%EB%A6%AC-%EC%8B%9C%EC%8A%A4%ED%85%9C--post---%EC%8B%A0%EA%B7%9C-%EC%9E%90%EC%9B%90-%EB%93%B1%EB%A1%9D%EC%8B%A4%EB%AC%B4%EC%97%90%EC%84%9C-%EC%82%AC%EC%9A%A9\" aria-label=\"3회원 관리 시스템  post   신규 자원 등록실무에서 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.회원 관리 시스템 : POST - 신규 자원 등록(실무에서 사용)</h2>\n<ol>\n<li>\n<p>클라이언트는 등록될 리소스의 URI를 모른다.</p>\n<ul>\n<li>회원 등록 <code class=\"language-text\">/members</code> —> POST</li>\n<li>POST <code class=\"language-text\">/members</code></li>\n</ul>\n</li>\n<li>\n<p>서버가 새로 등록된 리소스 URI를 생성해준다.</p>\n<ul>\n<li>HTTP/1.1 201 Create Location: <code class=\"language-text\">/members/100</code></li>\n</ul>\n</li>\n<li>\n<p>컬렉션</p>\n<ul>\n<li>서버가 관리하는 리소스 디렉토리</li>\n<li>서버가 리소스의 URI를 생성하고 관리</li>\n<li>여리서 컬렉션은 <code class=\"language-text\">/members</code></li>\n</ul>\n</li>\n</ol>\n<br>\n<h2 id=\"4-파일-관리-시스템--api-설계---put-기반-등록\" style=\"position:relative;\"><a href=\"#4-%ED%8C%8C%EC%9D%BC-%EA%B4%80%EB%A6%AC-%EC%8B%9C%EC%8A%A4%ED%85%9C--api-%EC%84%A4%EA%B3%84---put-%EA%B8%B0%EB%B0%98-%EB%93%B1%EB%A1%9D\" aria-label=\"4 파일 관리 시스템  api 설계   put 기반 등록 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 파일 관리 시스템 : API 설계 - PUT 기반 등록</h2>\n<ol>\n<li>파일 목록 <code class=\"language-text\">/files</code> —> GET</li>\n<li>파일 조회 <code class=\"language-text\">/files/{finename}</code> —> GET</li>\n<li>파일 등록 <code class=\"language-text\">/files/{finename}</code> —> PUT</li>\n<li>파일 삭제 <code class=\"language-text\">/files/{finename}</code> —> DELETE</li>\n<li>파일 대량 등록 <code class=\"language-text\">/files</code> —> POST</li>\n</ol>\n<br>\n<h2 id=\"5파일-관리-시스템--put---신규-자원-등록-특징\" style=\"position:relative;\"><a href=\"#5%ED%8C%8C%EC%9D%BC-%EA%B4%80%EB%A6%AC-%EC%8B%9C%EC%8A%A4%ED%85%9C--put---%EC%8B%A0%EA%B7%9C-%EC%9E%90%EC%9B%90-%EB%93%B1%EB%A1%9D-%ED%8A%B9%EC%A7%95\" aria-label=\"5파일 관리 시스템  put   신규 자원 등록 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.파일 관리 시스템 : PUT - 신규 자원 등록 특징</h2>\n<ol>\n<li>\n<p>클라이언트가 리소스 URI를 알고 잇어야 한다.</p>\n<ul>\n<li>파일 등록 <code class=\"language-text\">/files/{filename}</code> —> PUT</li>\n<li>PUT <code class=\"language-text\">/files/star.jpg</code></li>\n</ul>\n</li>\n<li>클라이언트가 직접 리소스의 <code class=\"language-text\">URI</code>를 지정한다.</li>\n<li>\n<p>스토어</p>\n<ul>\n<li>클라이언트가 관리하는 리소스 저장소</li>\n<li>클라이언트가 리소스의 URI를 알고 관리</li>\n<li>여기서 스토어는 <code class=\"language-text\">/files</code></li>\n</ul>\n</li>\n</ol>\n<br>\n<h2 id=\"6html-form-사용\" style=\"position:relative;\"><a href=\"#6html-form-%EC%82%AC%EC%9A%A9\" aria-label=\"6html form 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6.HTML FORM 사용</h2>\n<ol>\n<li>HTML FORM은 GET, POST만 지원</li>\n<li>\n<p>컨트롤 URI</p>\n<ul>\n<li>GET, POST만 지원하므로 제약이 있음</li>\n<li>이런 제약을 해결하기 위해 동사로 된 리소스 경로 사용</li>\n<li>POST의 <code class=\"language-text\">/new</code>, <code class=\"language-text\">/edit</code>, <code class=\"language-text\">/delete</code>가 컨트롤 URI</li>\n<li>HTTP 메서드로 해결하기 애매한 경우 사용(HTTP API 포함)</li>\n</ul>\n</li>\n<li>AJAX 같은 기술을 사용해서 해결 가능 —> 회원 API 참고</li>\n<li>순수 HTML, HTML FORM 이야기</li>\n<li>GET, POST만 지원하므로 제약이 있음</li>\n<li>\n<p>API 설계</p>\n<ul>\n<li>회원 목록 <code class=\"language-text\">/members</code> —> GET</li>\n<li>회원 등록 폼 <code class=\"language-text\">/members/new</code> —> GET</li>\n<li>회원 등록 <code class=\"language-text\">/members/new</code>, <code class=\"language-text\">/members</code> —> POST</li>\n<li>회원 조회 <code class=\"language-text\">/members{id}</code> —> GET</li>\n<li>회원 수정 폼 <code class=\"language-text\">/members/{id}/edit</code> —> GET</li>\n<li>회원 수정 <code class=\"language-text\">/members/{id}/edit</code>, <code class=\"language-text\">/members/{id}</code> —> POST</li>\n<li>회원 삭제 <code class=\"language-text\">/members/{id}/delete</code> —> GET</li>\n</ul>\n</li>\n</ol>\n<br>\n<h2 id=\"7정리--참고하면-좋은-uri-설계-개념\" style=\"position:relative;\"><a href=\"#7%EC%A0%95%EB%A6%AC--%EC%B0%B8%EA%B3%A0%ED%95%98%EB%A9%B4-%EC%A2%8B%EC%9D%80-uri-%EC%84%A4%EA%B3%84-%EA%B0%9C%EB%85%90\" aria-label=\"7정리  참고하면 좋은 uri 설계 개념 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>7.정리 : 참고하면 좋은 URI 설계 개념</h2>\n<ol>\n<li>\n<p>문서 : Document</p>\n<ul>\n<li>단일 개념(파일 하나, 객체 인스턴스, 데이터베이스 row) ex) <code class=\"language-text\">/members/100</code>, <code class=\"language-text\">/files/star.jpg</code></li>\n</ul>\n</li>\n<li>\n<p>컬렉션 : Collenction</p>\n<ul>\n<li>서버가 관리하는 리소스 디렉터리</li>\n<li>서버가 리소스의 URI를 생성하고 관리\nex) <code class=\"language-text\">/members</code></li>\n</ul>\n</li>\n<li>\n<p>스토어 : Store</p>\n<ul>\n<li>클라이언트가 관리하는 자원 저장소</li>\n<li>클라이언트가 리소스의 URI를 알고 관리 ex) <code class=\"language-text\">/files</code></li>\n</ul>\n</li>\n<li>\n<p>컨트롤러, 컨트롤 URI</p>\n<ul>\n<li>문서, 컬렉션, 스토어로 해결하기 어려운 추가 프로세스 실행</li>\n<li>동사를 직접 사용 ex) <code class=\"language-text\">/members/{id}/delete</code></li>\n</ul>\n</li>\n</ol>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1api-%EC%84%A4%EA%B3%84\">1.API 설계</a></li>\n<li><a href=\"#2%ED%9A%8C%EC%9B%90-%EA%B4%80%EB%A6%AC-%EC%8B%9C%EC%8A%A4%ED%85%9C--api-%EC%84%A4%EA%B3%84---post-%EA%B8%B0%EB%B0%98-%EB%93%B1%EB%A1%9D\">2.회원 관리 시스템 : API 설계 - POST 기반 등록</a></li>\n<li><a href=\"#3%ED%9A%8C%EC%9B%90-%EA%B4%80%EB%A6%AC-%EC%8B%9C%EC%8A%A4%ED%85%9C--post---%EC%8B%A0%EA%B7%9C-%EC%9E%90%EC%9B%90-%EB%93%B1%EB%A1%9D%EC%8B%A4%EB%AC%B4%EC%97%90%EC%84%9C-%EC%82%AC%EC%9A%A9\">3.회원 관리 시스템 : POST - 신규 자원 등록(실무에서 사용)</a></li>\n<li><a href=\"#4-%ED%8C%8C%EC%9D%BC-%EA%B4%80%EB%A6%AC-%EC%8B%9C%EC%8A%A4%ED%85%9C--api-%EC%84%A4%EA%B3%84---put-%EA%B8%B0%EB%B0%98-%EB%93%B1%EB%A1%9D\">4. 파일 관리 시스템 : API 설계 - PUT 기반 등록</a></li>\n<li><a href=\"#5%ED%8C%8C%EC%9D%BC-%EA%B4%80%EB%A6%AC-%EC%8B%9C%EC%8A%A4%ED%85%9C--put---%EC%8B%A0%EA%B7%9C-%EC%9E%90%EC%9B%90-%EB%93%B1%EB%A1%9D-%ED%8A%B9%EC%A7%95\">5.파일 관리 시스템 : PUT - 신규 자원 등록 특징</a></li>\n<li><a href=\"#6html-form-%EC%82%AC%EC%9A%A9\">6.HTML FORM 사용</a></li>\n<li><a href=\"#7%EC%A0%95%EB%A6%AC--%EC%B0%B8%EA%B3%A0%ED%95%98%EB%A9%B4-%EC%A2%8B%EC%9D%80-uri-%EC%84%A4%EA%B3%84-%EA%B0%9C%EB%85%90\">7.정리 : 참고하면 좋은 URI 설계 개념</a></li>\n</ul>\n</div>","excerpt":"1.API 설계 HTTP API - 컬렉션 POST 기반 등록 ex) 회원 관리 API 제공 HTTP API - 스토어 PUT 기반 등록 ex) 정적 컨텐츠 관리, 원격 파일 관리 HTML FORM 사용 웹 페이지 회원 관리 GET, POST만 지원 2.회원 관리 시스템 : API 설계 - POST 기반 등록 회원 목록 —> GET 회원 등록  —> POST 회원 조회  —> GET 회원 수정 —> PATCH, PUT, POST 회원 삭제 —> DELETE 3.회원 관리 시스템 : POST - 신규 자원 등록(실무에서 사용) 클라이언트는 등록될 리소스의 URI를 모른다. 회원 등록  —> POST POST  서버가 새로 등록된 리소스 URI를 생성해준다. HTTP/1.1 201 Create Location:  컬렉션 서버가 관리하는 리소스 디렉토리 서버가 리소스의 URI를 생성하고 관리 여리서 컬렉션은  4. 파일 관리 시스템 : API 설계 - PUT 기반 등록 파일 목록  —>…","frontmatter":{"date":"December 22, 2021","title":"HTTP - 5.메서드 활용(2)","categories":"CS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-cs-HTTP-11/"}},"next":{"id":"067704c8-c9f1-5d3e-8922-3c7f192a9933","html":"<br>\n<h1 align=\"center\">\n  👋  Promise -  메커니즘 분석\n</h1>\n<br>\n<h2 id=\"1-code-classlanguage-textnew-promisefunctioncode-형태\" style=\"position:relative;\"><a href=\"#1-code-classlanguage-textnew-promisefunctioncode-%ED%98%95%ED%83%9C\" aria-label=\"1 code classlanguage textnew promisefunctioncode 형태 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. <code class=\"language-text\">new Promise(function(){})</code> 형태</h2>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'성공'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1. new Promise(function(resolve, reject) {...}) new 연산자로 Promise를 호출하면 prototype.constructor를 호출하며 인스턴스를 만듬</span>\n<span class=\"token comment\">// 2. 일반적으로 new Point(one, two)처럼 인스턴스의 초깃값을 파라미터에 작성하지만</span>\n<span class=\"token comment\">// 3. 비동기 처리를 위한 환경을 만들기 위해 파라미터에 함수를 사용함, 코드의 확장성을 고려한 접근임</span>\n<span class=\"token comment\">// 4. 실행자 함수는 constructor의 확장이며 constructor에서 연속해서 실행 함</span></code></pre></div>\n<br>\n<h2 id=\"2실행자의-파라미터에-함수-이름-작성\" style=\"position:relative;\"><a href=\"#2%EC%8B%A4%ED%96%89%EC%9E%90%EC%9D%98-%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0%EC%97%90-%ED%95%A8%EC%88%98-%EC%9D%B4%EB%A6%84-%EC%9E%91%EC%84%B1\" aria-label=\"2실행자의 파라미터에 함수 이름 작성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.실행자의 파라미터에 함수 이름 작성</h2>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">reoslve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'성공'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'실패'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">reason</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reason<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1. resolve, reject는 함수 이름이며 엔진이 이름의 Function 오브젝트를 생성함</span>\n<span class=\"token comment\">// 2. resolve(\"성공\"); 실행자의 파라미터가 Function 오브젝트이므로 resolve() 함수를 호출할 수 있음</span>\n<span class=\"token comment\">// 3. 함수 호출은 단지 파라미터 값인 \"성공\"을 설정하는 것 외에도 부가적인 처리를 한다는 의도가 포함되어 있음</span>\n<span class=\"token comment\">// 4. abc()처럼 실행자의 파라미터에 함수 이름이 없는 함수를 호출하면 에러가 발생하지만 then()의 핸들러 함수가 실행되지 않음</span>\n<span class=\"token comment\">// 5. resolve(\"성공\")이 호출되면 실행자 파라미터의 reoslve가 호출되며 파라미터의 resolve 함수는 엔진에서 만든 것이므로 엔진 내부 처리를 할 수 있음</span>\n\n<span class=\"token comment\">// [실행결과]</span>\n<span class=\"token comment\">// 성공</span></code></pre></div>\n<br>\n<h2 id=\"3파라미터-위치로-성공실패-처리\" style=\"position:relative;\"><a href=\"#3%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0-%EC%9C%84%EC%B9%98%EB%A1%9C-%EC%84%B1%EA%B3%B5%EC%8B%A4%ED%8C%A8-%EC%B2%98%EB%A6%AC\" aria-label=\"3파라미터 위치로 성공실패 처리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.파라미터 위치로 성공/실패 처리</h2>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">one<span class=\"token punctuation\">,</span> two</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">two</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'성공'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">reason</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'실패'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1. two()를 호출하면 then()의 두 번째 파라미터 함수가 호출됨</span>\n<span class=\"token comment\">// 2. 두 번째 파라미터는 실패를 나타내는 함수 임 즉, 엔진은 호출된 파라미터 위치의 함수로 성공/실패를 처리한다는 뜻</span>\n<span class=\"token comment\">// 3. 임의의 함수 이름을 사용할 수 있음 resolve()와 reject()를 사용한 것은 일반적인 시맨틱이기 때문</span>\n<span class=\"token comment\">// 4. 호출된 파라미터의 함수에 따라 비동기 처리를 위한 즉, then()에서 사용하기 위한 fulfilled 또는 rejected를 Promise 인스턴스의 [[PromiseStatus]]에 설정 함</span>\n\n<span class=\"token comment\">// [실행결과]</span>\n<span class=\"token comment\">// 실패</span></code></pre></div>\n<br>\n<h2 id=\"4실행자에-code-classlanguage-textresolvecode-code-classlanguage-textrejectcode-순서로-작성\" style=\"position:relative;\"><a href=\"#4%EC%8B%A4%ED%96%89%EC%9E%90%EC%97%90-code-classlanguage-textresolvecode-code-classlanguage-textrejectcode-%EC%88%9C%EC%84%9C%EB%A1%9C-%EC%9E%91%EC%84%B1\" aria-label=\"4실행자에 code classlanguage textresolvecode code classlanguage textrejectcode 순서로 작성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.실행자에 <code class=\"language-text\">resolve()</code>, <code class=\"language-text\">reject()</code> 순서로 작성</h2>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promoise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">reoslve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'실패'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'성공'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">reason</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reason<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'성공'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'실패'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">reason</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reason<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1. 성공과 실패가 모두 발생한다는 것은 논리에 맞지 않음 따라서 성공/실패 중에서 하나만 발생함</span>\n<span class=\"token comment\">// 2. reject() 함수, resolve() 함수 순서로 작성하면 [[PromiseStatus]]가 rejected가 됨</span>\n<span class=\"token comment\">// 3. resolve() 함수, reject() 함수 순서로 작성하면 [[PromiseStatus]]가 fulfilled가 됨</span>\n<span class=\"token comment\">// 4. 먼저 호출한 함수의 상태를 설정함</span>\n\n<span class=\"token comment\">// [실행결과]</span>\n<span class=\"token comment\">// 실패</span>\n<span class=\"token comment\">// 성공</span></code></pre></div>\n<br>\n<h2 id=\"5-code-classlanguage-textthencode-의-핸들러-함수에서-사용할-값을-인스턴스에-저장\" style=\"position:relative;\"><a href=\"#5-code-classlanguage-textthencode-%EC%9D%98-%ED%95%B8%EB%93%A4%EB%9F%AC-%ED%95%A8%EC%88%98%EC%97%90%EC%84%9C-%EC%82%AC%EC%9A%A9%ED%95%A0-%EA%B0%92%EC%9D%84-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4%EC%97%90-%EC%A0%80%EC%9E%A5\" aria-label=\"5 code classlanguage textthencode 의 핸들러 함수에서 사용할 값을 인스턴스에 저장 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. <code class=\"language-text\">then()</code> 의 핸들러 함수에서 사용할 값을 인스턴스에 저장</h2>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'성공'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'끝'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1. resolve(\"성공\"); 파라미터 값 \"성공\"을 Promise 인스턴스의 [[PromiseValue]]에 저장함</span>\n<span class=\"token comment\">// 2. then()이 비동기로 처리되므로 then()에서 값을 사용하기 위한 것</span>\n<span class=\"token comment\">// 3. [[PromiseStatue]]에 값을 설정하는 것도 같은 접근 임</span>\n\n<span class=\"token comment\">// [실행결과]</span>\n<span class=\"token comment\">// 끝</span>\n<span class=\"token comment\">// 성공</span></code></pre></div>\n<br>\n<h2 id=\"6code-classlanguage-textpromisecode-인스턴스-반환\" style=\"position:relative;\"><a href=\"#6code-classlanguage-textpromisecode-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EB%B0%98%ED%99%98\" aria-label=\"6code classlanguage textpromisecode 인스턴스 반환 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6.<code class=\"language-text\">Promise</code> 인스턴스 반환</h2>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1. then(), catch()에서 Promise 인스턴스를 생성하여 반환함</span>\n<span class=\"token comment\">// 2. 처음의 then()은 비동기로 실행되지만 이어지는 처리는 동기/비동기로 실행할 수 있음</span>\n<span class=\"token comment\">// 3. 실행 중인 then()에서 비동기 처리를 하지 않으면 이어지는 then()/catch()는 동기 형태로 처리 하게 됨</span>\n<span class=\"token comment\">// 4. 실행 중인 then()에서 다시 비동기로 처리하면 이어지는 then()/cathc()는 비동기로 처리하게 됨</span>\n<span class=\"token comment\">// 5. Promise 인스턴스를 생성하여 반환하므로 이어지는 처리를 동기/비동기로 처리할 수 있음</span>\n\n<span class=\"token comment\">// 실행결과</span>\n<span class=\"token comment\">// 100</span>\n<span class=\"token comment\">// 200</span></code></pre></div>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1-new-promisefunction-%ED%98%95%ED%83%9C\">1. <code class=\"language-text\">new Promise(function(){})</code> 형태</a></li>\n<li><a href=\"#2%EC%8B%A4%ED%96%89%EC%9E%90%EC%9D%98-%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0%EC%97%90-%ED%95%A8%EC%88%98-%EC%9D%B4%EB%A6%84-%EC%9E%91%EC%84%B1\">2.실행자의 파라미터에 함수 이름 작성</a></li>\n<li><a href=\"#3%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0-%EC%9C%84%EC%B9%98%EB%A1%9C-%EC%84%B1%EA%B3%B5%EC%8B%A4%ED%8C%A8-%EC%B2%98%EB%A6%AC\">3.파라미터 위치로 성공/실패 처리</a></li>\n<li><a href=\"#4%EC%8B%A4%ED%96%89%EC%9E%90%EC%97%90-resolve-reject-%EC%88%9C%EC%84%9C%EB%A1%9C-%EC%9E%91%EC%84%B1\">4.실행자에 <code class=\"language-text\">resolve()</code>, <code class=\"language-text\">reject()</code> 순서로 작성</a></li>\n<li><a href=\"#5-then-%EC%9D%98-%ED%95%B8%EB%93%A4%EB%9F%AC-%ED%95%A8%EC%88%98%EC%97%90%EC%84%9C-%EC%82%AC%EC%9A%A9%ED%95%A0-%EA%B0%92%EC%9D%84-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4%EC%97%90-%EC%A0%80%EC%9E%A5\">5. <code class=\"language-text\">then()</code> 의 핸들러 함수에서 사용할 값을 인스턴스에 저장</a></li>\n<li><a href=\"#6promise-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EB%B0%98%ED%99%98\">6.<code class=\"language-text\">Promise</code> 인스턴스 반환</a></li>\n</ul>\n</div>","frontmatter":{"date":"December 21, 2021","title":"Promise - 메커니즘 분석","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-promise-6/"}},"prev":{"id":"1292527d-1676-5d44-91c1-5500a23faff3","html":"<br>\n<h1 align=\"center\">\n  👋  async/await - 개요, 함수\n</h1>\n<br>\n<h2 id=\"1-asyncawait-개요\" style=\"position:relative;\"><a href=\"#1-asyncawait-%EA%B0%9C%EC%9A%94\" aria-label=\"1 asyncawait 개요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. async/await 개요</h2>\n<ul>\n<li>\n<p>비동기 환경에서 실행하지만 실행이 끝나야 다음을 실행함</p>\n<ul>\n<li>즉, 실행은 비동기이고 실행 순서는 동기 임</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">param</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getPoint</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">option</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span>option<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>vaule<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">getPoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> point<span class=\"token operator\">:</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1. async function getPoint(option){...} 비동기 함수로 선언함</span>\n<span class=\"token comment\">// 2. const value = await create(option); create() 함수를 호출함</span>\n<span class=\"token comment\">// 3. 호출된 함수에서 Promise 인스턴스를 반환함 따라서 비동기 처리를 하게 됨 즉, resolve()가 실행되기 전에 아래 코드를 실행함</span>\n<span class=\"token comment\">// 4. 한편, await는 아래로 내려가지 않고 resolve()가 끝나는 것을 기다림</span>\n<span class=\"token comment\">// 5. resolve(param)가 실행되면 param 값을 create()로 보내며 이 값을 받아 value 변수에 할당함</span>\n<span class=\"token comment\">// 6. 이어서 console.log(value)를 실행함</span>\n\n<span class=\"token comment\">// 실행결과</span>\n<span class=\"token comment\">// {point: 100}</span></code></pre></div>\n</li>\n<li><code class=\"language-text\">async</code> 키워드가 아니며 <code class=\"language-text\">\"async function\"</code> 이 키워드 개념이며</li>\n<li><code class=\"language-text\">async</code> 함수라고 부름</li>\n<li><code class=\"language-text\">await</code> 는 키워드(키워드 나름대로 기능을 가지고 있음)</li>\n</ul>\n<br>\n<h2 id=\"2-async-함수\" style=\"position:relative;\"><a href=\"#2-async-%ED%95%A8%EC%88%98\" aria-label=\"2 async 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. async 함수</h2>\n<ul>\n<li>\n<p>비동기 함수를 뜻하며 <code class=\"language-text\">AsyncFunction</code> 오브젝트를 생성하여 반환함</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">sports</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> <span class=\"token string\">'축구'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>sports<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1. async function sports(){...} 엔진이 async 함수를 만나면 AsyncFunction 오브젝트로 생성함</span>\n<span class=\"token comment\">// 2. 함수 표현식으로 작성할 수도 있음 const sport = async function(){...}</span>\n<span class=\"token comment\">// 3. Object.prototype.toString.call(sports) toString()을 call하면 Symbol.toStringTag()가 실행되며 오브젝트를 설명하는 디폴트 문자열을 반환함</span>\n<span class=\"token comment\">// 4. [object AsyncFunction]이 출력됨 즉, sports는 AsyncFunction 오브젝트임</span>\n<span class=\"token comment\">// 5. AsyncFunction 오브젝트는 자체에 Symbol.toStringTag만 있으면 빌트인 Function 오브젝트를 상속받음 따라서 호출할 수 있음</span>\n\n<span class=\"token comment\">// 실행결과</span>\n<span class=\"token comment\">// [object AsyncFunction]</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">async</code> 함수가 호출되며 <code class=\"language-text\">Promise</code> 인스턴스를 반환함</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">sports</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> <span class=\"token string\">'축구'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token function\">sports</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1. const obj = sports(); async 함수를 호출하면 \"축구\"를 반환하지 않고 Promise 인스턴스를 반환함</span>\n<span class=\"token comment\">// 2. console.log(obj instanceof Promise); true가 출력되면, Promise 인스턴스를 뜻함 그래서 비동기 환경에서 실행됨</span>\n\n<span class=\"token comment\">// 실행환경</span>\n<span class=\"token comment\">// true</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">async</code> 함수의 <code class=\"language-text\">return</code> 값을 처리하려면 <code class=\"language-text\">then()</code> 을 함수 호출에 연결하여 작성</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">sports</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> <span class=\"token string\">'축구'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">sports</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'여기 먼저'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1. sports()를 호출하면 Promise 인스턴스를 반환하므로 then()을 연결하여 사용할 수 있음</span>\n<span class=\"token comment\">// 2. then()을 실행하지 않고 아래의 console.log(\"여기 먼저\")를 먼저 실행함</span>\n<span class=\"token comment\">// 3. return \"축구\"; resolve()를 작성하지 않았지만 return문의 표현식 평가 결과를 resolve()의 파라미터 값으로 사용하여 then()의 첫 번째 파라미터 함수를 호출함</span>\n<span class=\"token comment\">// 4. then((res) => console.log(res)); return 문의 표현식 평가 결과가 then()의 첫 번째 파라미터 함수의 res 파라미터에 설정됨</span>\n\n<span class=\"token comment\">// 실행결과</span>\n<span class=\"token comment\">// 여기 먼저</span>\n<span class=\"token comment\">// 축구</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">async</code> 함수에서 <code class=\"language-text\">throw</code> 가 발생하면 <code class=\"language-text\">reject()</code> 로 처리 됨</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">sports</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">throw</span> <span class=\"token string\">'에러'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">sports</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token parameter\">rej</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>rej<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1. async 함수에서 throw가 발생하면 reject()로 처리되며 표현식의 평가 결과를 파라미터 값으로 사용함</span>\n<span class=\"token comment\">// 2. then()의 두 번째 파라미터 함수가 호출되며 표현식의 평가 결과가 rej에 설정됨</span>\n\n<span class=\"token comment\">// 실행결과</span>\n<span class=\"token comment\">// 에러</span></code></pre></div>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1-asyncawait-%EA%B0%9C%EC%9A%94\">1. async/await 개요</a></li>\n<li><a href=\"#2-async-%ED%95%A8%EC%88%98\">2. async 함수</a></li>\n</ul>\n</div>","frontmatter":{"date":"December 22, 2021","title":"async/await - 개요, 함수","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-async-await-1/"}},"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":"zoomkoding/zoomkoding-gatsby-blog"}}}}},"pageContext":{"slug":"/study-cs-HTTP-11/","nextSlug":"/study-js-es6-promise-6/","prevSlug":"/study-js-es6-async-await-1/"}},"staticQueryHashes":["1073350324","2938748437"]}