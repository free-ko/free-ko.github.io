{"componentChunkName":"component---src-templates-blog-template-js","path":"/effective-typescript-2-1/","result":{"data":{"cur":{"id":"3538c81b-e8eb-5a5c-9817-e3333940d3ba","html":"<h2 id=\"️-아이템-6-편집기를-사용하여-타입-시스템-탐색하기\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%EC%95%84%EC%9D%B4%ED%85%9C-6-%ED%8E%B8%EC%A7%91%EA%B8%B0%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-%ED%83%80%EC%9E%85-%EC%8B%9C%EC%8A%A4%ED%85%9C-%ED%83%90%EC%83%89%ED%95%98%EA%B8%B0\" aria-label=\"️ 아이템 6 편집기를 사용하여 타입 시스템 탐색하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️ 아이템 6: 편집기를 사용하여 타입 시스템 탐색하기</h2>\n<ol>\n<li>\n<p>TS에서 실행할 수 있는 프로그램</p>\n<ul>\n<li>TS 컴파일러(tsc)</li>\n<li>단독 실행 가능한 TS 서버(tsserver)</li>\n</ul>\n</li>\n<li>TS 서버에서 제공하는 언어 서비스를 사용 권장</li>\n<li>많은 편집기에서 TS가 그 타입을 어떻게 판단하는지 확인 가능</li>\n<li>편집기 타입 오류를 살펴보는 것도 타입 시스템을 파악하는 데 좋은 방법</li>\n<li>\n<p>라이브러리와 라이브러리의 타입 선언</p>\n<ul>\n<li>Go to Definition 옵션으로 <code class=\"language-text\">d.ts</code>에서 타입 정의 확인 가능</li>\n</ul>\n</li>\n</ol>\n<br>\n<h2 id=\"️-아이템-7-타입이-값들의-집합이라고-생각하기\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%EC%95%84%EC%9D%B4%ED%85%9C-7-%ED%83%80%EC%9E%85%EC%9D%B4-%EA%B0%92%EB%93%A4%EC%9D%98-%EC%A7%91%ED%95%A9%EC%9D%B4%EB%9D%BC%EA%B3%A0-%EC%83%9D%EA%B0%81%ED%95%98%EA%B8%B0\" aria-label=\"️ 아이템 7 타입이 값들의 집합이라고 생각하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️ 아이템 7: 타입이 값들의 집합이라고 생각하기</h2>\n<ol>\n<li>런타임시 모든 변수는 JS로 정해진 고유한 값 존재</li>\n<li>코드가 실행되기 전 TS가 오류를 체크하는 순간에는 타입을 가지고 있으며, 이는 할당 가능한 값들의 집합</li>\n<li>\n<p>집합의 종류</p>\n<ul>\n<li>\n<p><code class=\"language-text\">never</code> : 아무것도 포함하지 않는 공집합(아무 값도 할당 불가) cf) <code class=\"language-text\">void</code>는 undefined 반환</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// 🚨 '12' 형식은 'never' 형식에 할당할 수 없습니다.</span>\n<span class=\"token keyword\">const</span> x<span class=\"token operator\">:</span> <span class=\"token builtin\">never</span> <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>리터럴(유닛)타입 : 한 가지 값만 포함하는 타입</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span> <span class=\"token operator\">=</span> <span class=\"token string\">\"A\"</span><span class=\"token punctuation\">;</span> </code></pre></div>\n</li>\n<li>\n<p>유니온 타입 : 두 개 혹은 세 개 값 포함하는 집합들의 합집합</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">AB</span></span> <span class=\"token operator\">=</span> <span class=\"token string\">\"A\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">;</span> </code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>‘할당 가능’하다는 뜻 -> ‘부분 집합’</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// 'A'는 집합 {'A', 'B'}의 원소</span>\n<span class=\"token keyword\">const</span> a<span class=\"token operator\">:</span> <span class=\"token constant\">AB</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"A\"</span><span class=\"token punctuation\">;</span> </code></pre></div>\n</li>\n<li>\n<p>실제 다루게 되는 타입은 대부분 범위가 무한대</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Int</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">|</span> <span class=\"token number\">2</span> <span class=\"token operator\">|</span> <span class=\"token number\">3</span> <span class=\"token operator\">|</span> <span class=\"token number\">4</span> <span class=\"token operator\">|</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// | ...</span></code></pre></div>\n</li>\n<li>\n<p>원소를 서술하는 방법</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Identified</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>타입(값의 집합)</p>\n<ul>\n<li><code class=\"language-text\">&amp;</code> 연산자는 두 타입의 인터섹션(교집합)을 계산</li>\n<li>\n<p><code class=\"language-text\">|</code> 연산자는 두 인터페이스의 유니온, 교집합이 없는 두 개 이상의 타입에서 사용 시 주의</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Lifespan</span> <span class=\"token punctuation\">{</span>\n    birth<span class=\"token operator\">:</span> Date<span class=\"token punctuation\">;</span>\n    death<span class=\"token operator\">?</span><span class=\"token operator\">:</span> Date<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n\n <span class=\"token keyword\">type</span> <span class=\"token class-name\">PersonSpan</span> <span class=\"token operator\">=</span> Person <span class=\"token operator\">&amp;</span> Lifespan<span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">K</span></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">keyof</span> <span class=\"token punctuation\">(</span>Person <span class=\"token operator\">|</span> Lifespan<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 타입이 never</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">extends</code> : ~에 할당 가능한, ~의 부분집합</p>\n<ul>\n<li>\n<p>서브타입 : 어떤 집합이 다른 집합의 부분집합</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Vector1D</span> <span class=\"token punctuation\">{</span>\n   x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Vector2D는 Vector1D의 서브타입</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Vector2D</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Vector1D</span> <span class=\"token punctuation\">{</span>\n  y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Vector3D는 Vector2D의 서브타입</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Vector3D</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Vector2D</span> <span class=\"token punctuation\">{</span>\n  z<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>제네릭에서 <code class=\"language-text\">extends</code></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// K는 집합 관점에서 string을 상속</span>\n<span class=\"token comment\">// string 리터럴 타입, string 리터럴 타입의 유니온, string 자신을 포함</span>\n<span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">getKey</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>val<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> key<span class=\"token operator\">:</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>타입이 집합이라는 관점에서 배열과 튜플의 관계 확인</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// 타입은 number[]</span>\n<span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 🚨 'number[]' 타입이 '[number, number]'타입 보다 큰 집합이여서</span>\n<span class=\"token comment\">// 에러 발생 </span>\n<span class=\"token comment\">// Target requires 2 element(s) but source may have fewer</span>\n<span class=\"token keyword\">const</span> tuple<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> list<span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>트리플</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> triple<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 🚨 숫자의 length값이 맞지 않기 때문에 할당문에 오류 발생</span>\n<span class=\"token keyword\">const</span> doulbe<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> triple<span class=\"token punctuation\">;</span></code></pre></div>\n<ol start=\"12\">\n<li>타입이 값의 집합이라는 뜻은, 동일한 값의 집합을 가지는 두 타입은 같다는 의미</li>\n</ol>\n<br>\n<h2 id=\"️-아이템-8-타입-공간과-값-공간의-심벌-구분하기\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%EC%95%84%EC%9D%B4%ED%85%9C-8-%ED%83%80%EC%9E%85-%EA%B3%B5%EA%B0%84%EA%B3%BC-%EA%B0%92-%EA%B3%B5%EA%B0%84%EC%9D%98-%EC%8B%AC%EB%B2%8C-%EA%B5%AC%EB%B6%84%ED%95%98%EA%B8%B0\" aria-label=\"️ 아이템 8 타입 공간과 값 공간의 심벌 구분하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️ 아이템 8: 타입 공간과 값 공간의 심벌 구분하기</h2>\n<ol>\n<li>\n<p>TS 심벌(symbol)은 타입 공간이나 값 공간 중 한 곳에 존재</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Cylinder</span> <span class=\"token punctuation\">{</span>\n  radius<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  height<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Cylinder</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>radius<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> height<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> \n  <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> radius<span class=\"token punctuation\">,</span> height <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>interface Cylinder는 타입, const Cylinder는 변수</li>\n<li>일반적으로 type이나 interface 다음에 나오는 심벌은 타입, const나 let 선언에 쓰이는 것은 값</li>\n</ul>\n</li>\n<li>\n<p>class와 enum 은 상황에 따라 타입과 값 두 가지 모두 가능</p>\n<ul>\n<li>클래스가 타입으로 쓰일 때는 형태(속성과 메서드)가 사용되는 반면, 값으로 쓰일 때는 생성자가 사용됨</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// 타입으로 쓰인 Cylinder 클래스</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Cylinder</span> <span class=\"token punctuation\">{</span>\n  radius <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  height <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">calculateVolume</span><span class=\"token punctuation\">(</span>shape<span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>shape <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Cylinder</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    shape<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 정상, 타입은 Cylinder</span>\n    shape<span class=\"token punctuation\">.</span>radius<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 정상, 타입은 number</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">typeof</code> : 타입에서 쓰일 때와 값에서 쓰일 때가 다름</p>\n<ul>\n<li>타입의 관점에서 typeof는 값을 읽어서 TS 타입을 반환</li>\n<li>\n<p>값의 관점에서 typeof는 JS 런타임의 typeof 연산자를 반환(심벌의 런타임 타입을 가리킴)</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// 타입은 Person</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T1</span></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> p<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 타입은 (p: Person, subject: string, body: string) => Response</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T2</span></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> email<span class=\"token punctuation\">;</span> \n\n<span class=\"token comment\">// 값은 'object'</span>\n<span class=\"token keyword\">const</span> v1 <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> p<span class=\"token punctuation\">;</span> \n\n<span class=\"token comment\">// 값은 'function'</span>\n<span class=\"token keyword\">const</span> v2 <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> email<span class=\"token punctuation\">;</span> </code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>클래스</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// 타입이 typeof Cylinder</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T</span></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> Cylinder<span class=\"token punctuation\">;</span> \n\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">let</span> fn<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 타입이 Cylinder</span></code></pre></div>\n<ul>\n<li>\n<p>InstanceType 제너릭을 사용해 생성자 타입과 인스턴스 타입 전환 가능</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">C</span></span> <span class=\"token operator\">=</span> InstanceType<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> Cylinder<span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 타입이 Cylinder</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>속성 접근자 []</p>\n<ul>\n<li><code class=\"language-text\">obj['field']</code>와 <code class=\"language-text\">obj.field</code>는 값이 동일하더라도 타입은 다를 수 있으므로, 타입의 속성을 얻을 때는 <code class=\"language-text\">obj['field']</code>를 지향</li>\n</ul>\n</li>\n</ol>\n<br>\n<h2 id=\"️-아이템-9-타입-단언보다는-타입-선언을-사용하기\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%EC%95%84%EC%9D%B4%ED%85%9C-9-%ED%83%80%EC%9E%85-%EB%8B%A8%EC%96%B8%EB%B3%B4%EB%8B%A4%EB%8A%94-%ED%83%80%EC%9E%85-%EC%84%A0%EC%96%B8%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"️ 아이템 9 타입 단언보다는 타입 선언을 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️ 아이템 9: 타입 단언보다는 타입 선언을 사용하기</h2>\n<ol>\n<li>\n<p>타입 단언은 오류를 발견하지 못 함</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 🚨 'Person' 유형에 필요한 'name' 속성이 '{}' 유형에 없습니다.</span>\n<span class=\"token keyword\">const</span> kay<span class=\"token operator\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">const</span> bob <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> Person<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 오류 없음</span></code></pre></div>\n<ul>\n<li>속성을 추가할 때도 마찬가지(타입 선언문에서는 잉여 속성 체크가 동작하지만, 단언문에서는 적용되지 않음)</li>\n</ul>\n</li>\n<li>\n<p>화살표 함수의 타입 선언</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> people <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"kay\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bob\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"jun\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> name <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Person[]을 원했지만 결과는 { name: string; }[]...</span></code></pre></div>\n<ul>\n<li>\n<p>단언문 대신 화살표 함수의 반환 타입을 선언</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// 타입은 Person[]</span>\n<span class=\"token keyword\">const</span> people <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"kay\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bob\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"jun\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Person <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> name <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>그러나 함수 호출 체이닝이 연속되는 곳에서는 체이닝 시작에서부터 명명된 타입을 가져야 오류가 정확하게 표시 됨</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>타입 단언이 꼭 필요한 경우</p>\n<ul>\n<li>타입 체커가 추론한 타입보다 개발자가 판단하는 타입이 더 정확할 때</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#myButton\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\ne<span class=\"token punctuation\">.</span>currentTarget<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 타입은 EventTarget</span>\n   \n<span class=\"token comment\">// 타입은 HTMLButtonElement</span>\n<span class=\"token keyword\">const</span> button <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>currentTarget <span class=\"token keyword\">as</span> HTMLButtonElement<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">!</code> 문법을 사용해서 <code class=\"language-text\">null</code>이 아님을 단언하는 경우</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// 타입은 HTMLElement | null</span>\n<span class=\"token keyword\">const</span> elNull <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 타입은 HTMLElement </span>\n<span class=\"token keyword\">const</span> el <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>타입 단언문으로 임의의 타입 간에 변환</p>\n<ul>\n<li><code class=\"language-text\">A</code>가 <code class=\"language-text\">B</code>의 부분집합(서브타입)인 경우 사용</li>\n</ul>\n</li>\n</ol>\n<br>\n<h2 id=\"️-아이템-10--객체-래퍼-타입-피하기\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%EC%95%84%EC%9D%B4%ED%85%9C-10--%EA%B0%9D%EC%B2%B4-%EB%9E%98%ED%8D%BC-%ED%83%80%EC%9E%85-%ED%94%BC%ED%95%98%EA%B8%B0\" aria-label=\"️ 아이템 10  객체 래퍼 타입 피하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️ 아이템 10 : 객체 래퍼 타입 피하기</h2>\n<ol>\n<li>JS는 기본형과 객체 타입을 서로 자유롭게 변환 가능(래퍼 객체)</li>\n<li>\n<p>string 기본형과 String 래퍼 객체가 항상 동일하게 동작하는 것은 아님</p>\n<ul>\n<li>\n<p>String 객체는 오직 자기 자신하고만 동일하다</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token string\">\"hello\"</span> <span class=\"token operator\">===</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>TS는 기본형과 객체 래퍼 타입을 별도로 모델링 함</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// 🚨 'String' 형식의 인수는 'string' 형식의 매개변수에 할당될 수 없습니다.</span>\n<span class=\"token comment\">// 'String'은 Object 임</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">isGreeting</span><span class=\"token punctuation\">(</span>phrase<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"good day\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>phrase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>string은 String에 할당할 수 있지만, String은 string에 할당할 수 없음</li>\n<li>TS가 제공하는 타입 선언은 전부 기본형 타입</li>\n</ul>\n</li>\n</ol>\n<br>\n<h2 id=\"️-아이템-11-잉여-속성-체크의-한계-인지하기\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%EC%95%84%EC%9D%B4%ED%85%9C-11-%EC%9E%89%EC%97%AC-%EC%86%8D%EC%84%B1-%EC%B2%B4%ED%81%AC%EC%9D%98-%ED%95%9C%EA%B3%84-%EC%9D%B8%EC%A7%80%ED%95%98%EA%B8%B0\" aria-label=\"️ 아이템 11 잉여 속성 체크의 한계 인지하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️ 아이템 11: 잉여 속성 체크의 한계 인지하기</h2>\n<ol>\n<li>\n<p>타입이 명시된 변수에 객체 리터럴을 할당할 때 TS는 해당 타입의 속성이 있는지, 그리고 ‘그 외의 속성은 없는지’ 확인</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Room</span> <span class=\"token punctuation\">{</span>\n  numb<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  size<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> room <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  numb<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  size<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n  bed<span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> secondRoom<span class=\"token operator\">:</span> Room <span class=\"token operator\">=</span> room<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 정상</span></code></pre></div>\n<ul>\n<li>room 타입은 Room 타입의 부분 집합을 포함하므로, Room에 할당 가능하며 타입 체커도 통과 함</li>\n<li>잉여 속성 체크는 할당 가능 검사와는 별도의 과정</li>\n</ul>\n</li>\n<li>\n<p>TS는 런타임 오류 뿐 아니라, 의도와 다르게 작성된 코드까지 찾음</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Options</span> <span class=\"token punctuation\">{</span>\n  title<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  darkMode<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">createWindow</span><span class=\"token punctuation\">(</span>options<span class=\"token operator\">:</span> Options<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>darkMode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setDarkMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">createWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  title<span class=\"token operator\">:</span> <span class=\"token string\">\"Spider Solitaire\"</span><span class=\"token punctuation\">,</span>\n  darkmode<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 🚨 에러 darkMode 아님?</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>런타임에 에러가 발생하지 않지만, TS에서 에러가 발생 함</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">Options</code>는 넓은 타입으로 해석 됨</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Options</span> <span class=\"token punctuation\">{</span>\n  title<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  darkMode<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> o1<span class=\"token operator\">:</span> Options <span class=\"token operator\">=</span> document<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 정상</span>\n<span class=\"token keyword\">const</span> o2<span class=\"token operator\">:</span> Options <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HTMLAnchorElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 정상</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">document</code>와 <code class=\"language-text\">HTMLAnchorElement</code>의 인스턴스 모두 string 타입인 title 속성을 갖고 있기 때문에 할당문 정상</li>\n</ul>\n</li>\n<li>\n<p>잉여 속성 체크는 객체 리터럴만 체크 함</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">  <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Options</span> <span class=\"token punctuation\">{</span>\n    title<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    darkMode<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 🚨 에러 - darkMode 아님?</span>\n  <span class=\"token keyword\">const</span> o1<span class=\"token operator\">:</span> Options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> darkmode<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> title<span class=\"token operator\">:</span> <span class=\"token string\">\"Ski Free\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">const</span> intermediate <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> darkmode<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> title<span class=\"token operator\">:</span> <span class=\"token string\">\"Ski Free\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> o2<span class=\"token operator\">:</span> Options <span class=\"token operator\">=</span> intermediate<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 정상</span>\n  \n  <span class=\"token comment\">// 타입 단언문을 사용할 때도 적용되지 않는다</span>\n  <span class=\"token keyword\">const</span> o3<span class=\"token operator\">:</span> Options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> darkmode<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> title<span class=\"token operator\">:</span> <span class=\"token string\">\"Ski Free\"</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> Options<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 정상</span></code></pre></div>\n</li>\n</ol>\n<br>\n<h2 id=\"️-아이템-12-함수-표현식에-타입-적용하기\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%EC%95%84%EC%9D%B4%ED%85%9C-12-%ED%95%A8%EC%88%98-%ED%91%9C%ED%98%84%EC%8B%9D%EC%97%90-%ED%83%80%EC%9E%85-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"️ 아이템 12 함수 표현식에 타입 적용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️ 아이템 12: 함수 표현식에 타입 적용하기</h2>\n<ol>\n<li>\n<p>TS는 함수 선언문이 아닌 함수 표현식을 권장</p>\n<ul>\n<li>\n<p>함수의 매개변수부터 반환값까지 전체를 함수 타입으로 선언하여 함수 표현식에 재사용할 수 있다는 장점 존재(시그니처)</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">DiceRollFn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>sides<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> rollDice<span class=\"token operator\">:</span> <span class=\"token function-variable function\">DiceRollFn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>sides<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>반복되는 함수 시그니처를 하나의 함수로 통합하여 불필요한 코드의 반복을 줄일 수 있음</p>\n<ul>\n<li>라이브러리는 공통 함수 시그니처를 타입으로 제공 ex) 리액트 MouseEventHandler</li>\n</ul>\n</li>\n<li>\n<p>시그니처가 일치하는 다른 함수가 있을 때도 함수 표현식에 타입 적용 가능</p>\n<ul>\n<li>\n<p>ex) fetch 함수</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// 타입이 Promise&lt;Response></span>\n<span class=\"token keyword\">const</span> responsePromise <span class=\"token operator\">=</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/search?by=Kay\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>응답의 데이터를 추출</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getSearch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/search?by=Kay\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">return</span> data<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>이때 /search가 존재하지 않는 API거나 fetch가 실패하는 경우 버그가 발생 함</li>\n<li>상태 체크를 수행해 줄 checkedFetch 함수 작성</li>\n<li>함수 선언문을 함수 표현식으로 바꾸고, 함수 전체에 타입을 적용</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// lib.dom.d.ts</span>\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>\ninput<span class=\"token operator\">:</span> RequestInfo<span class=\"token punctuation\">,</span>\ninit<span class=\"token operator\">?</span><span class=\"token operator\">:</span> RequestInit\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>Response<span class=\"token operator\">></span>\n\n<span class=\"token keyword\">const</span> checkedFetch<span class=\"token operator\">:</span> <span class=\"token keyword\">typeof</span> <span class=\"token function-variable function\">fetch</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">,</span> init<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">,</span> init<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>response<span class=\"token punctuation\">.</span>ok<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Request failed: \"</span> <span class=\"token operator\">+</span> response<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n</li>\n</ol>\n<br>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<ul>\n<li><a href=\"https://github.com/pagers-org/Effective-TypeScript\">이펙티브 타입스크립트 Study</a></li>\n<li><a href=\"http://www.yes24.com/Product/Goods/102124327\">이펙티브 타입스크립트 책</a></li>\n<li><a href=\"https://yozm.wishket.com/magazine/detail/1661/\">타입을 집합의 관점에서 바라보기</a></li>\n<li><a href=\"https://velog.io/@dltlsgh5/typescript%ED%83%80%EC%9E%85%EC%9D%84-%EC%A7%91%ED%95%A9%EC%9C%BC%EB%A1%9C-%EC%83%9D%EA%B0%81%ED%95%98%EA%B8%B0\">타입을 집합으로 생각하기</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EF%B8%8F-%EC%95%84%EC%9D%B4%ED%85%9C-6-%ED%8E%B8%EC%A7%91%EA%B8%B0%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-%ED%83%80%EC%9E%85-%EC%8B%9C%EC%8A%A4%ED%85%9C-%ED%83%90%EC%83%89%ED%95%98%EA%B8%B0\">✏️ 아이템 6: 편집기를 사용하여 타입 시스템 탐색하기</a></li>\n<li><a href=\"#%EF%B8%8F-%EC%95%84%EC%9D%B4%ED%85%9C-7-%ED%83%80%EC%9E%85%EC%9D%B4-%EA%B0%92%EB%93%A4%EC%9D%98-%EC%A7%91%ED%95%A9%EC%9D%B4%EB%9D%BC%EA%B3%A0-%EC%83%9D%EA%B0%81%ED%95%98%EA%B8%B0\">✏️ 아이템 7: 타입이 값들의 집합이라고 생각하기</a></li>\n<li><a href=\"#%EF%B8%8F-%EC%95%84%EC%9D%B4%ED%85%9C-8-%ED%83%80%EC%9E%85-%EA%B3%B5%EA%B0%84%EA%B3%BC-%EA%B0%92-%EA%B3%B5%EA%B0%84%EC%9D%98-%EC%8B%AC%EB%B2%8C-%EA%B5%AC%EB%B6%84%ED%95%98%EA%B8%B0\">✏️ 아이템 8: 타입 공간과 값 공간의 심벌 구분하기</a></li>\n<li><a href=\"#%EF%B8%8F-%EC%95%84%EC%9D%B4%ED%85%9C-9-%ED%83%80%EC%9E%85-%EB%8B%A8%EC%96%B8%EB%B3%B4%EB%8B%A4%EB%8A%94-%ED%83%80%EC%9E%85-%EC%84%A0%EC%96%B8%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\">✏️ 아이템 9: 타입 단언보다는 타입 선언을 사용하기</a></li>\n<li><a href=\"#%EF%B8%8F-%EC%95%84%EC%9D%B4%ED%85%9C-10--%EA%B0%9D%EC%B2%B4-%EB%9E%98%ED%8D%BC-%ED%83%80%EC%9E%85-%ED%94%BC%ED%95%98%EA%B8%B0\">✏️ 아이템 10 : 객체 래퍼 타입 피하기</a></li>\n<li><a href=\"#%EF%B8%8F-%EC%95%84%EC%9D%B4%ED%85%9C-11-%EC%9E%89%EC%97%AC-%EC%86%8D%EC%84%B1-%EC%B2%B4%ED%81%AC%EC%9D%98-%ED%95%9C%EA%B3%84-%EC%9D%B8%EC%A7%80%ED%95%98%EA%B8%B0\">✏️ 아이템 11: 잉여 속성 체크의 한계 인지하기</a></li>\n<li><a href=\"#%EF%B8%8F-%EC%95%84%EC%9D%B4%ED%85%9C-12-%ED%95%A8%EC%88%98-%ED%91%9C%ED%98%84%EC%8B%9D%EC%97%90-%ED%83%80%EC%9E%85-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0\">✏️ 아이템 12: 함수 표현식에 타입 적용하기</a></li>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>\n</div>","excerpt":"✏️ 아이템 6: 편집기를 사용하여 타입 시스템 탐색하기 TS에서 실행할 수 있는 프로그램 TS 컴파일러(tsc) 단독 실행 가능한 TS 서버(tsserver) TS 서버에서 제공하는 언어 서비스를 사용 권장 많은 편집기에서 TS가 그 타입을 어떻게 판단하는지 확인 가능 편집기 타입 오류를 살펴보는 것도 타입 시스템을 파악하는 데 좋은 방법 라이브러리와 라이브러리의 타입 선언 Go to Definition 옵션으로 에서 타입 정의 확인 가능 ✏️ 아이템 7: 타입이 값들의 집합이라고 생각하기 런타임시 모든 변수는 JS로 정해진 고유한 값 존재 코드가 실행되기 전 TS가 오류를 체크하는 순간에는 타입을 가지고 있으며, 이는 할당 가능한 값들의 집합 집합의 종류  : 아무것도 포함하지 않는 공집합(아무 값도 할당 불가) cf) 는 undefined 반환 리터럴(유닛)타입 : 한 가지 값만 포함하는 타입 유니온 타입 : 두 개 혹은 세 개 값 포함하는 집합들의 합집합 ‘할당 가능’하다는 뜻…","frontmatter":{"date":"April 17, 2023","title":"Effective TypeScript 2장-1","categories":"Study","author":"Kay","emoji":"👋"},"fields":{"slug":"/effective-typescript-2-1/"}},"next":{"id":"5c98f460-cb17-5db2-a430-ebe043551899","html":"<h2 id=\"️-아이템-1-타입스크립트와-자바스크립트의-관계\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%EC%95%84%EC%9D%B4%ED%85%9C-1-%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%99%80-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%9D%98-%EA%B4%80%EA%B3%84\" aria-label=\"️ 아이템 1 타입스크립트와 자바스크립트의 관계 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️ 아이템 1: 타입스크립트와 자바스크립트의 관계</h2>\n<blockquote>\n<p>“타입스크립트는 자바스크립트의 상위집합(superset)이다”</p>\n</blockquote>\n<ol>\n<li>\n<p>그렇기 때문에 JS 코드는 이미 TS다.</p>\n<ul>\n<li>기존 JS 코드를 타입스크립트로 마이그레이션하는데 큰 이점</li>\n<li>타입 구문을 사용하는 순간부터 JS는 TS 영역으로 들어가게 됨</li>\n</ul>\n</li>\n<li>\n<p>타입 시스템에서는 런타임에 오류를 발생시킬 코드를 미리 찾아낸다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> city <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"jeon-ju\"</span><span class=\"token punctuation\">,</span> food<span class=\"token operator\">:</span> <span class=\"token string\">\"kong-na-mul-kook-bob\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"seoul\"</span><span class=\"token punctuation\">,</span> food<span class=\"token operator\">:</span> <span class=\"token string\">\"none\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> localCity <span class=\"token keyword\">of</span> city<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>localCity<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// JS에서는 undefined, TS에서는 에러</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>타입을 명시적으로 선언하여 의도를 분명하게 하면 오류를 구체적으로 알 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">City</span> <span class=\"token punctuation\">{</span>\n name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n food<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> city<span class=\"token operator\">:</span> City<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"jeon-ju\"</span><span class=\"token punctuation\">,</span> food<span class=\"token operator\">:</span> <span class=\"token string\">\"kong-na-mul-kook-bob\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"seoul\"</span><span class=\"token punctuation\">,</span> food<span class=\"token operator\">:</span> <span class=\"token string\">\"none\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 🚨 Error</span>\n<span class=\"token comment\">// 'City' 형식에 'size'이 없습니다.</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> localCity <span class=\"token keyword\">of</span> city<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ol>\n<br>\n<h2 id=\"-아이템-2-타입스크립트-설정\" style=\"position:relative;\"><a href=\"#-%EC%95%84%EC%9D%B4%ED%85%9C-2-%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%84%A4%EC%A0%95\" aria-label=\" 아이템 2 타입스크립트 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏ 아이템 2: 타입스크립트 설정</h2>\n<ol>\n<li>\n<p><code class=\"language-text\">tsconfig.json</code>으로 타입스크립트 설정 작성</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n <span class=\"token string\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token comment\">// ...</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">noImplicitAny</code> : 변수들이 미리 정의된 타입을 가져야 하는지 여부를 제어(any 타입을 사용하면 에러 설정)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 이를 암시적 any라고 부른다</span>\n<span class=\"token comment\">// noImplicitAny가 설정되었다면 오류 발생</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token operator\">:</span> any<span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> any<span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>strictNullChecks</p>\n<ul>\n<li>\n<p><code class=\"language-text\">null</code>과 <code class=\"language-text\">undefined</code>가 모든 타입에서 허용되는지 설정</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// strictNullChecks 해제 시</span>\n<span class=\"token keyword\">const</span> x<span class=\"token operator\">:</span> number <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 정상</span>\n\n<span class=\"token comment\">// strictNullChecks 설정 시</span>\n<span class=\"token comment\">// 🚨 에러: 'null' 형식은 'number' 형식에 할당할 수 없습니다.</span>\n<span class=\"token keyword\">const</span> x<span class=\"token operator\">:</span> number <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> </code></pre></div>\n</li>\n</ul>\n</li>\n</ol>\n<br>\n<h2 id=\"-아이템-3-코드-생성과-타입은-관계가-없음\" style=\"position:relative;\"><a href=\"#-%EC%95%84%EC%9D%B4%ED%85%9C-3-%EC%BD%94%EB%93%9C-%EC%83%9D%EC%84%B1%EA%B3%BC-%ED%83%80%EC%9E%85%EC%9D%80-%EA%B4%80%EA%B3%84%EA%B0%80-%EC%97%86%EC%9D%8C\" aria-label=\" 아이템 3 코드 생성과 타입은 관계가 없음 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏ 아이템 3: 코드 생성과 타입은 관계가 없음</h2>\n<ol>\n<li>\n<p>TS 컴파일러는 2가지 역할을 수행</p>\n<ul>\n<li>최신 TS,JS를 브라우저에서 동작할 수 있도록 구버전 JS로 트랜스파일 함</li>\n<li>코드의 타입 오류를 체크 함</li>\n</ul>\n</li>\n<li>\n<p>타입 오류가 있는 코드도 컴파일 가능</p>\n<ul>\n<li>컴파일은 타입 체크와 독립적으로 동작하기 때문</li>\n<li>작성한 TS가 유효한 JS라면 TS 컴파일러는 컴파일 진행</li>\n</ul>\n</li>\n<li>\n<p>런타임에는 타입 체크가 불가능</p>\n<ul>\n<li>TS의 타입은 ‘제거 가능’ 즉, JS로 컴파일되는 과정에서 모든 인터페이스, 타입, 타입 구문은 그냥 사라짐</li>\n<li>\n<p>런타임에 타입 정보를 유지하는 방법</p>\n<ul>\n<li>특정 속성이 존재하는지 체크</li>\n<li>\n<p><code class=\"language-text\">태그</code>기법 : 런타임에 접근 가능한 타입 정보를 명시적으로 저장</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Square</span> <span class=\"token punctuation\">{</span>\n    kind<span class=\"token operator\">:</span> <span class=\"token string\">\"square\"</span><span class=\"token punctuation\">;</span>\n    width<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n\n <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Rectangle</span> <span class=\"token punctuation\">{</span>\n    kind<span class=\"token operator\">:</span> <span class=\"token string\">\"rectangle\"</span><span class=\"token punctuation\">;</span>\n    height<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    width<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n\n <span class=\"token comment\">// '태그된 유니온(tagged union)'</span>\n <span class=\"token keyword\">type</span> <span class=\"token class-name\">Shape</span> <span class=\"token operator\">=</span> Square <span class=\"token operator\">|</span> Rectangle<span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">function</span> <span class=\"token function\">calculateArea</span><span class=\"token punctuation\">(</span>shape<span class=\"token operator\">:</span> Shape<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>shape<span class=\"token punctuation\">.</span>kind <span class=\"token operator\">===</span> <span class=\"token string\">\"rectangle\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       shape<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 타입이 Rectangle</span>\n       <span class=\"token keyword\">return</span> shape<span class=\"token punctuation\">.</span>width <span class=\"token operator\">*</span> shape<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n       shape<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 타입이 Square</span>\n       <span class=\"token keyword\">return</span> shape<span class=\"token punctuation\">.</span>width <span class=\"token operator\">*</span> shape<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>타입 연산은 런타임에 영향을 주지 않음</p>\n<ul>\n<li>값을 정제하기 위해서는 런타임의 타입을 체크해야 하고 JS 연산을 통해 변환을 수행해야 함</li>\n</ul>\n</li>\n<li>\n<p>런타임 타입은 선언된 타입과 다를 수 있음</p>\n<ul>\n<li><code class=\"language-text\">switch~case</code> 구문의 <code class=\"language-text\">default</code> 구문</li>\n<li>API 요청의 반환값을 사용하는 경우</li>\n</ul>\n</li>\n<li>\n<p>TS 타입으로는 함수를 오버로드할 수 없음</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token comment\">// 🚨 에러: 중복된 함수 구현입니다.</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token comment\">// 🚨 에러: 중복된 함수 구현입니다.</span></code></pre></div>\n<ul>\n<li>\n<p>TS 함수 오버로딩은 타입 수준에서만 가능(구현체는 불가)</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>TS 타입은 런타임 성능에 영향을 주지 않음</p>\n<ul>\n<li>타입과 타입 연산자는 JS 변환 시점에 제거되기 때문</li>\n<li>런타임 오베허드가 없는 대신, TS 컴파일러는 ‘빌드타임’ 오버헤드가 있음</li>\n<li>TS 컴파일하는 코드는 오래된 런타임 환경을 지원하기 위해 호환성을 높이고 성능 오버헤드를 감안할지, 호환성을 포기하고 성능 중심의 네이티브 구현체를 선택할지의 문제에 맞닥뜨릴 수도 있음</li>\n</ul>\n</li>\n</ol>\n<br>\n<h2 id=\"-아이템-4-구조적-타이핑에-익숙해지기\" style=\"position:relative;\"><a href=\"#-%EC%95%84%EC%9D%B4%ED%85%9C-4-%EA%B5%AC%EC%A1%B0%EC%A0%81-%ED%83%80%EC%9D%B4%ED%95%91%EC%97%90-%EC%9D%B5%EC%88%99%ED%95%B4%EC%A7%80%EA%B8%B0\" aria-label=\" 아이템 4 구조적 타이핑에 익숙해지기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏ 아이템 4: 구조적 타이핑에 익숙해지기</h2>\n<ol>\n<li>\n<p>JS는 본질적으로 덕 타이핑(duck typing) 기반</p>\n<ul>\n<li>덕 타이핑 : 객체가 어떤 타입에 부합하는 변수와 메서드를 가질 경우 객체를 해당 타입에 속하는 것으로 간주하는 방식</li>\n</ul>\n</li>\n<li>\n<p>TS도 JS 처럼 덕 타이핑 동작을 그대로 모델링 함</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Vector2D</span> <span class=\"token punctuation\">{</span>\n  x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">calculateLength</span><span class=\"token punctuation\">(</span>v<span class=\"token operator\">:</span> Vector2D<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>x <span class=\"token operator\">*</span> v<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> v<span class=\"token punctuation\">.</span>y <span class=\"token operator\">*</span> v<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Vector2D 인터페이스를 확장하며, name 프로퍼티를 추가로 가지고 있음</span>\n<span class=\"token comment\">// 구조적 타이핑 때문에, Vector2D 인터페이스와 호환</span>\n<span class=\"token comment\">// NamedVector 인터페이스의 x,y와 Vector2D의 x와 y 동일</span>\n<span class=\"token comment\">// 따라서 NamedVector 인터페이스를 구현한 객체도</span>\n<span class=\"token comment\">// calculateLength 함수의 인자로 사용할 수 있음</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">NamedVector</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> v<span class=\"token operator\">:</span> NamedVector <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'vec1'</span><span class=\"token punctuation\">,</span> x<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">calculateLength</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5</span></code></pre></div>\n</li>\n<li>\n<p>구조적 타이핑을 사용하면 유닛 테스트를 쉽게 할 수 있음</p>\n<ul>\n<li>TS는 테스트 DB가 특정 인터페이스를 충족하는지 확인</li>\n<li>\n<p>추상화(DB)를 함으로써, 로직과 테스트를 특정한 구현으로부터 분리 가능</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"> <span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token constant\">DB</span></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token function-variable function\">runQuery</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>sql<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n\n <span class=\"token keyword\">function</span> <span class=\"token function\">getAuthors</span><span class=\"token punctuation\">(</span>database<span class=\"token operator\">:</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Author<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">const</span> authorRows <span class=\"token operator\">=</span> database<span class=\"token punctuation\">.</span><span class=\"token function\">runQuery</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">SELECT FIRST, LAST FROM AUTHORS</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">return</span> authorRows<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> first<span class=\"token operator\">:</span> row<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> last<span class=\"token operator\">:</span> row<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n</li>\n</ol>\n<br>\n<h2 id=\"-아이템-5-any-타입-지양하기\" style=\"position:relative;\"><a href=\"#-%EC%95%84%EC%9D%B4%ED%85%9C-5-any-%ED%83%80%EC%9E%85-%EC%A7%80%EC%96%91%ED%95%98%EA%B8%B0\" aria-label=\" 아이템 5 any 타입 지양하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏ 아이템 5: any 타입 지양하기</h2>\n<ol>\n<li>\n<p>any 타입에는 타입 안정성이 없음</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\nage <span class=\"token operator\">=</span> <span class=\"token string\">\"12\"</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 정상</span>\nage <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 런타임에 정상, 🚨 age는 '121'</span></code></pre></div>\n</li>\n<li>\n<p>any는 함수 시그니처를 무시 함</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">calculateAge</span><span class=\"token punctuation\">(</span>birthDate<span class=\"token operator\">:</span> Date<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n   \n<span class=\"token keyword\">let</span> birthDate<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"1592-05-11\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">calculateAge</span><span class=\"token punctuation\">(</span>birthDate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 정상 (🚨 추후 에러 발생 가능)</span></code></pre></div>\n</li>\n<li>\n<p>any 타입에는 언어 서비스가 적용되지 않음</p>\n<ul>\n<li>IDE의 자동완성 기능과 적절한 도움말 제공 불가</li>\n</ul>\n</li>\n<li>\n<p>any 타입은 코드 리팩터링 때 버그를 감춤</p>\n<ul>\n<li>any가 아닌 구체적인 타입을 사용하여 타입 체커가 오류를 발견하도록 해야 함</li>\n</ul>\n</li>\n<li>\n<p>any는 타입 설계를 감춤</p>\n<ul>\n<li>애플리케이션 상태 등의 객체 설계 시 any 사용을 지양</li>\n</ul>\n</li>\n<li>\n<p>any는 타입시스템의 신뢰도를 떨어뜨림</p>\n<ul>\n<li>사람은 항상 실수를 함</li>\n<li>any 타입을 쓰지 않으면 런타임에 발견될 오류를 미리 잡을 수 있고 신뢰도를 높일 수 있음</li>\n</ul>\n</li>\n</ol>\n<br>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<ul>\n<li><a href=\"https://github.com/pagers-org/Effective-TypeScript\">이펙티브 타입스크립트 Study</a></li>\n<li><a href=\"http://www.yes24.com/Product/Goods/102124327\">이펙티브 타입스크립트 책</a></li>\n<li><a href=\"https://yozm.wishket.com/magazine/detail/1661/\">구조적 타이핑</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EF%B8%8F-%EC%95%84%EC%9D%B4%ED%85%9C-1-%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%99%80-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%9D%98-%EA%B4%80%EA%B3%84\">✏️ 아이템 1: 타입스크립트와 자바스크립트의 관계</a></li>\n<li><a href=\"#-%EC%95%84%EC%9D%B4%ED%85%9C-2-%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%84%A4%EC%A0%95\">✏ 아이템 2: 타입스크립트 설정</a></li>\n<li><a href=\"#-%EC%95%84%EC%9D%B4%ED%85%9C-3-%EC%BD%94%EB%93%9C-%EC%83%9D%EC%84%B1%EA%B3%BC-%ED%83%80%EC%9E%85%EC%9D%80-%EA%B4%80%EA%B3%84%EA%B0%80-%EC%97%86%EC%9D%8C\">✏ 아이템 3: 코드 생성과 타입은 관계가 없음</a></li>\n<li><a href=\"#-%EC%95%84%EC%9D%B4%ED%85%9C-4-%EA%B5%AC%EC%A1%B0%EC%A0%81-%ED%83%80%EC%9D%B4%ED%95%91%EC%97%90-%EC%9D%B5%EC%88%99%ED%95%B4%EC%A7%80%EA%B8%B0\">✏ 아이템 4: 구조적 타이핑에 익숙해지기</a></li>\n<li><a href=\"#-%EC%95%84%EC%9D%B4%ED%85%9C-5-any-%ED%83%80%EC%9E%85-%EC%A7%80%EC%96%91%ED%95%98%EA%B8%B0\">✏ 아이템 5: any 타입 지양하기</a></li>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>\n</div>","frontmatter":{"date":"April 16, 2023","title":"Effective TypeScript 1장","categories":"Study","author":"Kay","emoji":"👋"},"fields":{"slug":"/effective-typescript-1/"}},"prev":{"id":"01e62d6a-925b-5195-8adf-7f81f49f36ce","html":"<h2 id=\"️-아이템-13-타입과-인터페이스의-차이점-알기\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%EC%95%84%EC%9D%B4%ED%85%9C-13-%ED%83%80%EC%9E%85%EA%B3%BC-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90-%EC%95%8C%EA%B8%B0\" aria-label=\"️ 아이템 13 타입과 인터페이스의 차이점 알기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️ 아이템 13: 타입과 인터페이스의 차이점 알기</h2>\n<ol>\n<li>\n<p>인터페이스와 타입 모두 사용 가능한 경우</p>\n<ul>\n<li>인덱스 시그니처</li>\n<li>함수 타입</li>\n<li>\n<p>제너릭 </p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">TPair<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  first<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>\n  second<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">IPair<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  first<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>\n  second<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>인터페이스는 다른 타입을 포함할 수 있어 타입을 확장 할 수 있고 타입이 인터페이스를 포함 시킬 경우 인터페이스를 확장 할 수 있음</p>\n<ul>\n<li>\n<p>인터페이스가 타입을 확장하는 경우</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Employee</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  salary<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>타입이 인터페이스를 확장하는 경우</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Shape</span> <span class=\"token punctuation\">{</span>\n  color<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">area</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Circle</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  radius<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token operator\">&amp;</span> Shape<span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>인터페이스와 타입의 차이점</p>\n<ul>\n<li>인터페이스는 객체의 구조를 정의하기 위한 것으로 사용</li>\n<li>타입은 객체, 변수, 함수 등의 값을 설명하기 위해 사용</li>\n<li>\n<p>유니온 타입은 있지만 유니온 인터페이스는 없음</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">AorB</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"a\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>유니온 타입 확장이 필요한 경우</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Input</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* ... */</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Output</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* ... */</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">VariableMap</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> Input <span class=\"token operator\">|</span> Output<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>유니온 타입에 추가 속성을 붙인 타입 만들기(인터페이스로 표현 불가)</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">NamedVariable</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Input <span class=\"token operator\">|</span> Output<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>튜플과 배열 타입</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Pair</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">StringList</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">NamedNums</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 인터페이스로 튜블과 비슷하게 구현(제한적, 튜플 메서드 사용 불가)</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Tuple</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token number\">0</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  <span class=\"token number\">1</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  length<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> t<span class=\"token operator\">:</span> Tuple <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 정상</span></code></pre></div>\n</li>\n<li>\n<p>타입에는 없는 인터페이스의 보강 기능(선언 병합)</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IState</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  capital<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">IState</span> <span class=\"token punctuation\">{</span>\n  population<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> city<span class=\"token operator\">:</span> IState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"Jeon-Ju\"</span><span class=\"token punctuation\">,</span>\n  capital<span class=\"token operator\">:</span> <span class=\"token string\">\"Jeon-Ju\"</span><span class=\"token punctuation\">,</span>\n  population<span class=\"token operator\">:</span> <span class=\"token number\">500</span><span class=\"token punctuation\">,</span><span class=\"token number\">000</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 정상</span></code></pre></div>\n<ul>\n<li>TS는 여러 버전의 JS 표준 라이브러리에서 타입을 모아 병합 함</li>\n<li>타입은 기존 타입에 추가적인 보강이 없는 경우에만 사용해야 함</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>복잡한 타입이라면 타입 별칭을, 간단한 객체 타입이라면 인터페이스를 사용(협업시 일관성 있게 사용하는 것이 중요)</li>\n</ol>\n<br>\n<h2 id=\"️-아이템-14-타입-연산과-제너릭-사용으로-반복-줄이기\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%EC%95%84%EC%9D%B4%ED%85%9C-14-%ED%83%80%EC%9E%85-%EC%97%B0%EC%82%B0%EA%B3%BC-%EC%A0%9C%EB%84%88%EB%A6%AD-%EC%82%AC%EC%9A%A9%EC%9C%BC%EB%A1%9C-%EB%B0%98%EB%B3%B5-%EC%A4%84%EC%9D%B4%EA%B8%B0\" aria-label=\"️ 아이템 14 타입 연산과 제너릭 사용으로 반복 줄이기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️ 아이템 14: 타입 연산과 제너릭 사용으로 반복 줄이기</h2>\n<ol>\n<li>\n<p>타입에 이름 붙이기</p>\n<ul>\n<li>\n<p>타입이 반복적으로 등장하는 함수</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">distance</span><span class=\"token punctuation\">(</span>\n  a<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  b<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>x <span class=\"token operator\">-</span> b<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> b<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>타입에 이름을 붙여 개선하기</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Point2D</span> <span class=\"token punctuation\">{</span>\n  x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">distance</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> Point2D<span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> Point2D<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">/* ... */</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>함수의 타입 시그니처 개선하기</p>\n<ul>\n<li>\n<p>몇몇 함수가 같은 타입 시그니처를 공유하는 경우</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>url<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> opts<span class=\"token operator\">:</span> Options<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>Response<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* ... */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">post</span><span class=\"token punctuation\">(</span>url<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> opts<span class=\"token operator\">:</span> Options<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>Response<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* ... */</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>해당 시그니처를 명명된 타입으로 분리하기</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">HTTPFunction</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>url<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> opts<span class=\"token operator\">:</span> Options<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>Response<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> get<span class=\"token operator\">:</span> <span class=\"token function-variable function\">HTTPFunction</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> opts<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* ... */</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> post<span class=\"token operator\">:</span> <span class=\"token function-variable function\">HTTPFunction</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> opts<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* ... */</span> <span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>인터페이스를 확장하여 반복 제거하기</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  firstName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  lastName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">PersonWithBirthDate</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  birth<span class=\"token operator\">:</span> Date<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>이미 존재하는 타입을 확장하는 경우 인터섹션 연산자(&#x26;) 사용하기</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">PersonWithBirthDate</span> <span class=\"token operator\">=</span> Person <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">{</span> birth<span class=\"token operator\">:</span> Date <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>전체 애플리케이션의 상태를 표현하는 State 타입과 부분만 표현하는 TopNavState 합치기</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">State</span> <span class=\"token punctuation\">{</span>\n  userId<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  pageTitle<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  recentFiles<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  pageContents<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">TopNavState</span> <span class=\"token punctuation\">{</span>\n  userId<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  pageTitle<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  recentFiles<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>\n<p>매핑된 타입 사용하기</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">TopNavState</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>k <span class=\"token keyword\">in</span> <span class=\"token string\">\"userId\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"pageTitle\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"recentFiles\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> State<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>유틸 타입 Pick 사용하기</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">TopNavState</span> <span class=\"token operator\">=</span> Pick<span class=\"token operator\">&lt;</span>State<span class=\"token punctuation\">,</span> <span class=\"token string\">\"userId\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"pageTitle\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"recentFiles\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>태그된 유니온에서 인덱싱하기</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">SaveAction</span> <span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">\"save\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">LoadAction</span> <span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">\"load\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Action</span> <span class=\"token operator\">=</span> SaveAction <span class=\"token operator\">|</span> LoadAction<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">ActionType</span> <span class=\"token operator\">=</span> Action<span class=\"token punctuation\">[</span><span class=\"token string\">\"type\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 타입은 'save' | 'load'</span></code></pre></div>\n</li>\n<li>\n<p>타입을 선택적 필드를 포함하는 타입으로 변환하기</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Options</span> <span class=\"token punctuation\">{</span>\n  width<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  height<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  color<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  label<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">OptionsUpdate</span> <span class=\"token punctuation\">{</span>\n  width<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  height<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  color<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  label<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>\n<p>매핑된 타입과 keyof 사용하기</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">OptionsUpdate</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>k <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> Options<span class=\"token punctuation\">]</span><span class=\"token operator\">?</span><span class=\"token operator\">:</span> Options<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>유틸 타입 Partial 사용하기</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">OptionsUpdate</span> <span class=\"token operator\">=</span> Partial<span class=\"token operator\">&lt;</span>Options<span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>값의 형태를 타입의 형태로 전환하는 방법</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> <span class=\"token constant\">INIT_OPTIONS</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n width<span class=\"token operator\">:</span> <span class=\"token number\">640</span><span class=\"token punctuation\">,</span>\n height<span class=\"token operator\">:</span> <span class=\"token number\">480</span><span class=\"token punctuation\">,</span>\n color<span class=\"token operator\">:</span> <span class=\"token string\">\"#00FF00\"</span><span class=\"token punctuation\">,</span>\n label<span class=\"token operator\">:</span> <span class=\"token string\">\"VGA\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Options</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> <span class=\"token constant\">INIT_OPTIONS</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>함수나 메서드의 반환 값에 명명된 타입 만들기</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">getUserInfo</span><span class=\"token punctuation\">(</span>userId<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> userId<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">,</span> weight<span class=\"token punctuation\">,</span> favoriteColor <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 추론된 반환 타입은 { userId: string; name: string; age: number, ... };</span></code></pre></div>\n<ul>\n<li>\n<p>ReturnType 제네릭 사용하기</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">UserInfo</span> <span class=\"token operator\">=</span> ReturnType<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> getUserInfo<span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>제너릭 타입에서 매개변수 제한하기</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Name</span> <span class=\"token punctuation\">{</span>\n  first<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  last<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">DancingDuo<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> Name<span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> couple1<span class=\"token operator\">:</span> DancingDuo<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span> first<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> first<span class=\"token operator\">:</span> <span class=\"token string\">\"Kay\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> first<span class=\"token operator\">:</span> <span class=\"token string\">\"Su\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 🚨 에러</span>\n\n<span class=\"token comment\">// extends를 사용하여 Pick의 정의 완성하기</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Pick<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>k <span class=\"token keyword\">in</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">FirstLast</span> <span class=\"token operator\">=</span> Pick<span class=\"token operator\">&lt;</span>Name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"first\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"last\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 정상</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">FirstMiddle</span> <span class=\"token operator\">=</span> Pick<span class=\"token operator\">&lt;</span>Name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"first\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"middle\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 🚨 에러</span></code></pre></div>\n</li>\n</ol>\n<br>\n<h2 id=\"️-아이템-15-동적-데이터에-인덱스-시그니처-사용하기\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%EC%95%84%EC%9D%B4%ED%85%9C-15-%EB%8F%99%EC%A0%81-%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%97%90-%EC%9D%B8%EB%8D%B1%EC%8A%A4-%EC%8B%9C%EA%B7%B8%EB%8B%88%EC%B2%98-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"️ 아이템 15 동적 데이터에 인덱스 시그니처 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️ 아이템 15: 동적 데이터에 인덱스 시그니처 사용하기</h2>\n<ol>\n<li>\n<p>TS에서는 타입에 ‘인덱스 시그니처’를 명시하여 유연하게 매핑을 표현</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// 키의 이름(키의 위치만 표시하는 용도), 키의 타입, 값의 타입</span>\n<span class=\"token comment\">// 🚨 자동완성, 정의로 이동, 이름 바꾸기 등에서 문제 발생</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Rocket</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>property<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> rocket<span class=\"token operator\">:</span> Rocket <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n name<span class=\"token operator\">:</span> <span class=\"token string\">\"Falcon 9\"</span><span class=\"token punctuation\">,</span>\n variant<span class=\"token operator\">:</span> <span class=\"token string\">\"v1.0\"</span><span class=\"token punctuation\">,</span>\n thrust<span class=\"token operator\">:</span> <span class=\"token string\">\"4,940 kN\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 정상</span></code></pre></div>\n<ul>\n<li>\n<p>인덱스 시그니처는 부정확하므로 인터페이스 사용</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Rocket</span> <span class=\"token punctuation\">{</span>\n   name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n   variant<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n   thrust_kN<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>인덱스 시그니처는 동적 데이터를 표현할 때 사용 </p>\n<ul>\n<li>\n<p>CSV 파일의 데이터 행을 열 이름과 값으로 매핑하는 객체로 나타내고 싶은 경우, 열 이름이 무엇인지 미리 알 방법이 없을 때 사용</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">parseCSV</span><span class=\"token punctuation\">(</span>input<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>columnName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> lines <span class=\"token operator\">=</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>header<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rows<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> lines<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> headerColumns <span class=\"token operator\">=</span> header<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 연관 배열의 경우, 객체에 인덱스 시그니처를 사용하는 대신 Map 타입을 사용하는 것을 고려</span>\n    <span class=\"token keyword\">return</span> rows<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>rowStr<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> row<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>columnName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n      rowStr<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>cell<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      row<span class=\"token punctuation\">[</span>headerColumns<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> cell<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">return</span> row<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>특정 타입에 필드가 제한되어 있는 경우 인덱스 시그니처로 모델링 지양</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Row1</span> <span class=\"token punctuation\">{</span>\n <span class=\"token punctuation\">[</span>column<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token comment\">// 너무 광범위</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Row2</span> <span class=\"token punctuation\">{</span>\n a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n b<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n c<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n d<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token comment\">// 최선</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Row3</span> <span class=\"token operator\">=</span>\n <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span>\n <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span>\n <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> c<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span>\n <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> c<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> d<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 가장 정확하지만 사용하기 번거로움</span></code></pre></div>\n<ul>\n<li>\n<p>Record 사용</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"> <span class=\"token keyword\">type</span> <span class=\"token class-name\">Vec3D</span> <span class=\"token operator\">=</span> Record<span class=\"token operator\">&lt;</span><span class=\"token string\">\"x\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"y\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"z\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>매핑된 타입 사용(키마다 별도의 타입 사용 가능)</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"> <span class=\"token keyword\">type</span> <span class=\"token class-name\">Vec3D</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>k <span class=\"token keyword\">in</span> <span class=\"token string\">\"x\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"y\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"z\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">ABC</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>k <span class=\"token keyword\">in</span> <span class=\"token string\">\"a\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"b\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> k <span class=\"token keyword\">extends</span> <span class=\"token string\">\"b\"</span> <span class=\"token operator\">?</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n</li>\n</ol>\n<br>\n<h2 id=\"️-아이템-16-number-인덱스-시그니처보다는-array-튜플-arraylike를-사용하기\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%EC%95%84%EC%9D%B4%ED%85%9C-16-number-%EC%9D%B8%EB%8D%B1%EC%8A%A4-%EC%8B%9C%EA%B7%B8%EB%8B%88%EC%B2%98%EB%B3%B4%EB%8B%A4%EB%8A%94-array-%ED%8A%9C%ED%94%8C-arraylike%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"️ 아이템 16 number 인덱스 시그니처보다는 array 튜플 arraylike를 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️ 아이템 16: number 인덱스 시그니처보다는 Array, 튜플, ArrayLike를 사용하기</h2>\n<ol>\n<li>\n<p>JS 객체의 키는 문자열만 가능</p>\n<ul>\n<li>숫자는 키로 사용 불가</li>\n<li>배열의 인덱스도 사실은 문자열</li>\n</ul>\n</li>\n<li>\n<p>TS는 숫자 키를 허용하고, 문자열 키와 다른 것으로 인식</p>\n<ul>\n<li>\n<p>Array의 타입 선언(<code class=\"language-text\">lib.es5.d.ts</code>)</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>n<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>인덱스 시그니처가 number로 표현되어 있다면 입력한 값이 number여야 한다는 것을 의미하지만, 실제 런타임에 사용되는 키는 string 타입</li>\n<li>만약 숫자로 인덱싱을 한다면 Array 또는 튜플 타입을 사용하는 것을 권장</li>\n<li>\n<p>Array의 메서드를 사용하고자 하는 게 아니라면 <code class=\"language-text\">ArrayLike</code> 타입을 사용</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">ArrayLike<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">readonly</span> length<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">readonly</span> <span class=\"token punctuation\">[</span>n<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">checkedAccess</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>xs<span class=\"token operator\">:</span> ArrayLike<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> i<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> xs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span> xs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>ArrayLike는 길이와 인덱스 시그니처만 있음</li>\n<li>ArrayLike도 키는 숫자 또는 문자열</li>\n</ul>\n</li>\n</ol>\n<br>\n<h2 id=\"️-아이템-17-변경-관련된-오류-방지를-위해-readonly-사용하기\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%EC%95%84%EC%9D%B4%ED%85%9C-17-%EB%B3%80%EA%B2%BD-%EA%B4%80%EB%A0%A8%EB%90%9C-%EC%98%A4%EB%A5%98-%EB%B0%A9%EC%A7%80%EB%A5%BC-%EC%9C%84%ED%95%B4-readonly-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"️ 아이템 17 변경 관련된 오류 방지를 위해 readonly 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️ 아이템 17: 변경 관련된 오류 방지를 위해 readonly 사용하기</h2>\n<ol>\n<li>함수 파라미터로 넘어가는 배열의 변경을 방지</li>\n<li>\n<p>readonly</p>\n<ul>\n<li>배열의 요소를 읽을 수 있지만, 쓸 수는 없음</li>\n<li><code class=\"language-text\">length</code>를 읽을 수 있지만, 바꿀 수는 없음</li>\n<li>배열을 변경하는 <code class=\"language-text\">pop</code>을 비롯한 다른 메서드를 호출할 수 없음</li>\n</ul>\n</li>\n<li><code class=\"language-text\">number[]</code>는 readonly number[]의 서브타입</li>\n<li>\n<p>매개변수를 readonly로 선언하면?</p>\n<ul>\n<li>TS는 매개변수가 함수 내에서 변경이 일어나는지 체크 함</li>\n<li>호출하는 쪽에서는 함수가 매개변수를 변경하지 않는다는 보장을 받게 됨</li>\n<li>호출하는 쪽에서 함수에 readonly 배열을 매개변수로 넣을 수도 있음</li>\n</ul>\n</li>\n<li>JS에서는 기본적으로 함수가 매개변수를 변경하지 않는다고 가정하지만, 이러한 암묵적인 방법은 타입 체크에 문제를 일으킬 수 있음</li>\n<li>어떤 함수를 readonly로 만들면, 그 함수를 호출하는 다른 함수들도 모두 readonly로 만들어야 함(타입의 안전성을 높임)</li>\n<li>\n<p>readonly 배열을 조작하는 방법</p>\n<ul>\n<li><code class=\"language-text\">arr.length = 0</code> 대신 <code class=\"language-text\">arr = []</code></li>\n<li><code class=\"language-text\">arr.push('abc')</code> 대신 <code class=\"language-text\">arr = arr.concat(['abc'])</code></li>\n</ul>\n</li>\n<li>\n<p>readonly는 얕게(shallow) 동작한다</p>\n<ul>\n<li>객체로 구성된 readonly 배열이 있다면, 그 객체 자체는 readonly가 아님</li>\n<li>\n<p>객체에 사용할 때는 Readonly 제네릭을 사용</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Outer</span> <span class=\"token punctuation\">{</span>\n    inner<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> o<span class=\"token operator\">:</span> ReadOnly<span class=\"token operator\">&lt;</span>Outer<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> inner<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\no<span class=\"token punctuation\">.</span>inner <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 🚨 에러</span>\no<span class=\"token punctuation\">.</span>inner<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 정상</span></code></pre></div>\n</li>\n<li>cf) ts-essentials의 DeepReadonly 제네릭</li>\n<li>인덱스 시그니처에 readonly를 사용하면 객체 속성 변경 방지 가능</li>\n</ul>\n</li>\n</ol>\n<br>\n<h2 id=\"️-아이템-18-매핑된-타입을-사용하여-값을-동기화하기\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%EC%95%84%EC%9D%B4%ED%85%9C-18-%EB%A7%A4%ED%95%91%EB%90%9C-%ED%83%80%EC%9E%85%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-%EA%B0%92%EC%9D%84-%EB%8F%99%EA%B8%B0%ED%99%94%ED%95%98%EA%B8%B0\" aria-label=\"️ 아이템 18 매핑된 타입을 사용하여 값을 동기화하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️ 아이템 18: 매핑된 타입을 사용하여 값을 동기화하기</h2>\n<ol>\n<li>\n<p>여러번 반복되는 타이핑 줄이기</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">ScatterProps</span> <span class=\"token punctuation\">{</span>\n xs<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n ys<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n xRange<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n yRange<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n color<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n <span class=\"token function-variable function\">onClick</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> index<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">REQUIRES_UPDATE</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>k <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> ScatterProps<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n xs<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n ys<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n xRange<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n yRange<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n color<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n onClick<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">shouldUpdate</span><span class=\"token punctuation\">(</span>oldProps<span class=\"token operator\">:</span> ScatterProps<span class=\"token punctuation\">,</span> newProps<span class=\"token operator\">:</span> ScatterProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">let</span> k<span class=\"token operator\">:</span> <span class=\"token keyword\">keyof</span> ScatterProps<span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>k <span class=\"token keyword\">in</span> oldProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldProps<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> newProps<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token constant\">REQUIRES_UPDATE</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span>\n <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>매핑된 타입을 사용해서 관련된 값과 타입을 동기화할 수 있음</li>\n<li>인터페이스에 새로운 속성을 추가할 때, 선택을 강제하도록 매핑된 타입을 고려 해야 함</li>\n</ul>\n</li>\n</ol>\n<br>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<ul>\n<li><a href=\"https://github.com/pagers-org/Effective-TypeScript\">이펙티브 타입스크립트 Study</a></li>\n<li><a href=\"http://www.yes24.com/Product/Goods/102124327\">이펙티브 타입스크립트 책</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EF%B8%8F-%EC%95%84%EC%9D%B4%ED%85%9C-13-%ED%83%80%EC%9E%85%EA%B3%BC-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90-%EC%95%8C%EA%B8%B0\">✏️ 아이템 13: 타입과 인터페이스의 차이점 알기</a></li>\n<li><a href=\"#%EF%B8%8F-%EC%95%84%EC%9D%B4%ED%85%9C-14-%ED%83%80%EC%9E%85-%EC%97%B0%EC%82%B0%EA%B3%BC-%EC%A0%9C%EB%84%88%EB%A6%AD-%EC%82%AC%EC%9A%A9%EC%9C%BC%EB%A1%9C-%EB%B0%98%EB%B3%B5-%EC%A4%84%EC%9D%B4%EA%B8%B0\">✏️ 아이템 14: 타입 연산과 제너릭 사용으로 반복 줄이기</a></li>\n<li><a href=\"#%EF%B8%8F-%EC%95%84%EC%9D%B4%ED%85%9C-15-%EB%8F%99%EC%A0%81-%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%97%90-%EC%9D%B8%EB%8D%B1%EC%8A%A4-%EC%8B%9C%EA%B7%B8%EB%8B%88%EC%B2%98-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\">✏️ 아이템 15: 동적 데이터에 인덱스 시그니처 사용하기</a></li>\n<li><a href=\"#%EF%B8%8F-%EC%95%84%EC%9D%B4%ED%85%9C-16-number-%EC%9D%B8%EB%8D%B1%EC%8A%A4-%EC%8B%9C%EA%B7%B8%EB%8B%88%EC%B2%98%EB%B3%B4%EB%8B%A4%EB%8A%94-array-%ED%8A%9C%ED%94%8C-arraylike%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\">✏️ 아이템 16: number 인덱스 시그니처보다는 Array, 튜플, ArrayLike를 사용하기</a></li>\n<li><a href=\"#%EF%B8%8F-%EC%95%84%EC%9D%B4%ED%85%9C-17-%EB%B3%80%EA%B2%BD-%EA%B4%80%EB%A0%A8%EB%90%9C-%EC%98%A4%EB%A5%98-%EB%B0%A9%EC%A7%80%EB%A5%BC-%EC%9C%84%ED%95%B4-readonly-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\">✏️ 아이템 17: 변경 관련된 오류 방지를 위해 readonly 사용하기</a></li>\n<li><a href=\"#%EF%B8%8F-%EC%95%84%EC%9D%B4%ED%85%9C-18-%EB%A7%A4%ED%95%91%EB%90%9C-%ED%83%80%EC%9E%85%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-%EA%B0%92%EC%9D%84-%EB%8F%99%EA%B8%B0%ED%99%94%ED%95%98%EA%B8%B0\">✏️ 아이템 18: 매핑된 타입을 사용하여 값을 동기화하기</a></li>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>\n</div>","frontmatter":{"date":"April 18, 2023","title":"Effective TypeScript 2장-2","categories":"Study","author":"Kay","emoji":"👋"},"fields":{"slug":"/effective-typescript-2-2/"}},"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/effective-typescript-2-1/","nextSlug":"/effective-typescript-1/","prevSlug":"/effective-typescript-2-2/"}},"staticQueryHashes":["1073350324","2938748437"]}