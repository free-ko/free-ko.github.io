{"componentChunkName":"component---src-templates-blog-template-js","path":"/study-js-es6-class-1/","result":{"data":{"cur":{"id":"e213910d-0f64-59a2-ba62-b60121d6b45b","html":"<br>\n<h1 align=\"center\">\n  👋  객체 지향 프로그래밍: 객체 구성 요소, 객체의 구체화, 자바스크립트로 OOP 구현\n</h1>\n<br>\n<h2 id=\"1-js\" style=\"position:relative;\"><a href=\"#1-js\" aria-label=\"1 js permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. JS</h2>\n<ul>\n<li>\n<p>객체 지향 프로그래밍 언어</p>\n<ul>\n<li><code class=\"language-text\">OOP</code> : Object Oriented Programming</li>\n</ul>\n</li>\n<li>\n<p>ECMASciprt 스펙에 OOP라고 작성되어 있음</p>\n<ul>\n<li>ECMAScripte is an object-oriented programming language</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"2-객체-구성-요소\" style=\"position:relative;\"><a href=\"#2-%EA%B0%9D%EC%B2%B4-%EA%B5%AC%EC%84%B1-%EC%9A%94%EC%86%8C\" aria-label=\"2 객체 구성 요소 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 객체 구성 요소</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">OOP</code>에서 Object(객체)는 JS Object가 아님</p>\n<ul>\n<li>개념적, 사상적 접근</li>\n<li>형체, 실체가 없음</li>\n</ul>\n</li>\n<li>\n<p>행위와 속성으로 객체의 특성을 표현 함</p>\n<ul>\n<li>행위 : 먹다, 마시다와 같은 동적인 모습</li>\n<li>속성 : 밥을 먹다, 물을 마시다와 같은 행위의 대상이 속성</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"3-객체의-구체화\" style=\"position:relative;\"><a href=\"#3-%EA%B0%9D%EC%B2%B4%EC%9D%98-%EA%B5%AC%EC%B2%B4%ED%99%94\" aria-label=\"3 객체의 구체화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 객체의 구체화</h2>\n<ul>\n<li>\n<p>객체를 코드로 구체화하면 객체는 <code class=\"language-text\">Class</code>가 됨</p>\n<ul>\n<li>행위는 <code class=\"language-text\">Method</code>가 됨</li>\n<li>속성은 <code class=\"language-text\">Property</code>가 됨</li>\n</ul>\n</li>\n<li>\n<p>클래스에서</p>\n<ul>\n<li>메소드와 프로퍼티를 작성함</li>\n<li>클래스 자체로는 사용할 수 없으며</li>\n<li>인스턴스로 생성해야 사용 할 수 있음</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">point</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>point <span class=\"token operator\">=</span> point<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getPoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>point<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">getPoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 100</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 100</span></code></pre></div>\n<ol>\n<li>\n<p><code class=\"language-text\">class Point {...}</code></p>\n<ul>\n<li><code class=\"language-text\">class</code> 키워드로 클래스를 선언 함, 이 시점에서 <code class=\"language-text\">class</code>를 사용할 수 없음</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">const obj = new Point(100);</code></p>\n<ul>\n<li><code class=\"language-text\">constructor</code> 가 호출되며 파라미터 값을 넘겨 줌</li>\n<li>인스턴스를 생성하여 반환하며 <code class=\"language-text\">obj</code> 에 할당함</li>\n<li>이제 인스턴스로 클래스를 사용할 수 있음</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">obj.getPoint()</code></p>\n<ul>\n<li>인스턴스의 <code class=\"language-text\">getPoint()</code> 메소드를 호출 함</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">return this.point</code></p>\n<ul>\n<li><code class=\"language-text\">point</code> 프로퍼티 임</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">obj.point</code></p>\n<ul>\n<li><code class=\"language-text\">obj</code> 인스턴스의 <code class=\"language-text\">point</code> 프로퍼티 값을 구함</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n<br>\n<h2 id=\"4-js로-oop-구현\" style=\"position:relative;\"><a href=\"#4-js%EB%A1%9C-oop-%EA%B5%AC%ED%98%84\" aria-label=\"4 js로 oop 구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. JS로 OOP 구현</h2>\n<ul>\n<li>\n<p>다른 언어와 <code class=\"language-text\">OOP</code> 개념은 같지만 클래스 구조와 구현 방법이 다름</p>\n<ul>\n<li><code class=\"language-text\">prototype</code> 에 메소드를 연결하는 구조</li>\n<li>연결된 메소드로 인스턴스 생성</li>\n</ul>\n</li>\n<li>따라서 비교하는 것은 의미가 없음</li>\n<li><code class=\"language-text\">JS</code>에 적합한 방법과 <code class=\"language-text\">JS</code> 특징을 활용하여 <code class=\"language-text\">OOP</code>를 구현해야 함</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1-js\">1. JS</a></li>\n<li><a href=\"#2-%EA%B0%9D%EC%B2%B4-%EA%B5%AC%EC%84%B1-%EC%9A%94%EC%86%8C\">2. 객체 구성 요소</a></li>\n<li><a href=\"#3-%EA%B0%9D%EC%B2%B4%EC%9D%98-%EA%B5%AC%EC%B2%B4%ED%99%94\">3. 객체의 구체화</a></li>\n<li><a href=\"#4-js%EB%A1%9C-oop-%EA%B5%AC%ED%98%84\">4. JS로 OOP 구현</a></li>\n</ul>\n</div>","excerpt":"1. JS 객체 지향 프로그래밍 언어  : Object Oriented Programming ECMASciprt 스펙에 OOP라고 작성되어 있음 ECMAScripte is an object-oriented programming language 2. 객체 구성 요소 에서 Object(객체)는 JS Object가 아님 개념적, 사상적 접근 형체, 실체가 없음 행위와 속성으로 객체의 특성을 표현 함 행위 : 먹다, 마시다와 같은 동적인 모습 속성 : 밥을 먹다, 물을 마시다와 같은 행위의 대상이 속성 3. 객체의 구체화 객체를 코드로 구체화하면 객체는 가 됨 행위는 가 됨 속성은 가 됨 클래스에서 메소드와 프로퍼티를 작성함 클래스 자체로는 사용할 수 없으며 인스턴스로 생성해야 사용 할 수 있음   키워드로 클래스를 선언 함, 이 시점에서 를 사용할 수 없음   가 호출되며 파라미터 값을 넘겨 줌 인스턴스를 생성하여 반환하며  에 할당함 이제 인스턴스로 클래스를 사용할 수 있음  인스턴스…","frontmatter":{"date":"November 15, 2021","title":"객체 지향 프로그래밍 - 객체 구성 요소, 객체의 구체화, 자바스크립트로 OOP 구현","categories":"JS","author":"Kay","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-class-1/"}},"next":{"id":"6a81e48c-f70b-5b7e-b3bd-ce3b92df6d04","html":"<br>\n<h1 align=\"center\">\n  👋  WeakSet 오브젝트 개요, new WeakSet(), has(), add(), delete()\n</h1>\n<br>\n<h2 id=\"1-weakset-오브젝트\" style=\"position:relative;\"><a href=\"#1-weakset-%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8\" aria-label=\"1 weakset 오브젝트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. WeakSet 오브젝트</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">Set</code> 오브젝트와 차이</p>\n<ul>\n<li>오브젝트만 <code class=\"language-text\">value</code> 값으로 사용할 수 있음</li>\n<li><code class=\"language-text\">number</code> 등의 프리미티브 타입 사용 불가</li>\n</ul>\n</li>\n<li>\n<p>개념은 <code class=\"language-text\">WeakMap</code>과 같음</p>\n<ul>\n<li><code class=\"language-text\">value</code>만 작성하는 것이 다름</li>\n<li><code class=\"language-text\">value</code>의 참조가 바뀌면 <code class=\"language-text\">GC</code> 대상</li>\n</ul>\n</li>\n<li>\n<p>지원 메소드</p>\n<ul>\n<li><code class=\"language-text\">has()</code>, <code class=\"language-text\">add()</code>, <code class=\"language-text\">delete()</code></li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"2-new-weakset\" style=\"position:relative;\"><a href=\"#2-new-weakset\" aria-label=\"2 new weakset permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. new WeakSet()</h2>\n<ul>\n<li><code class=\"language-text\">WeakSet</code> 인스턴스 생성, 반환</li>\n<li>\n<p>파라미터</p>\n<ul>\n<li>대괄호 <code class=\"language-text\">[ ]</code> 안에 오브젝트 작성</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> empty <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WeakSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> sports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WeakSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n\tsports\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1. 파라미터를 작성하지 않아도 됨</span>\n<span class=\"token comment\">// 2. new 연산자를 사용 함</span></code></pre></div>\n</li>\n</ul>\n<br>\n<h2 id=\"3-has\" style=\"position:relative;\"><a href=\"#3-has\" aria-label=\"3 has permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. has()</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">WeakSet</code> 인스턴스에서 <code class=\"language-text\">value</code>의 존재 여부 반환</p>\n<ul>\n<li>존재하면 <code class=\"language-text\">true</code>, 아니면 <code class=\"language-text\">false</code> 반환</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WeakSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n\tfn\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// true</span></code></pre></div>\n</li>\n</ul>\n<br>\n<h2 id=\"4-add\" style=\"position:relative;\"><a href=\"#4-add\" aria-label=\"4 add permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. add()</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">WeakSet</code> 인스턴스에 <code class=\"language-text\">value</code> 설정</p>\n<ul>\n<li>파라미터에 <code class=\"language-text\">value</code> 로 설정될 오브젝트 작성</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WeakSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n</li>\n</ul>\n<br>\n<h2 id=\"5-delete\" style=\"position:relative;\"><a href=\"#5-delete\" aria-label=\"5 delete permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. delete()</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">WeakSet</code> 인스턴스에서 <code class=\"language-text\">value</code>와 일치하는 엘리먼트 삭제</p>\n<ul>\n<li>삭제 성공이면 <code class=\"language-text\">true</code> 반환</li>\n<li>삭제를 실패하면 <code class=\"language-text\">false</code> 반환</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WeakSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>fn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></code></pre></div>\n</li>\n</ul>\n<br>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1-weakset-%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8\">1. WeakSet 오브젝트</a></li>\n<li><a href=\"#2-new-weakset\">2. new WeakSet()</a></li>\n<li><a href=\"#3-has\">3. has()</a></li>\n<li><a href=\"#4-add\">4. add()</a></li>\n<li><a href=\"#5-delete\">5. delete()</a></li>\n</ul>\n</div>","frontmatter":{"date":"November 14, 2021","title":"WeakSet 오브젝트 개요, new WeakSet(), has(), add(), delete()","categories":"JS","author":"Kay","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-weakSetObject-1/"}},"prev":{"id":"12a38cb9-58df-5b8c-9f7e-2549427df979","html":"<br>\n<h1 align=\"center\">\n  👋  Class 선언, Class 구조: Class 선언문, Class 표현식\n</h1>\n<br>\n<h2 id=\"1-class-선언\" style=\"position:relative;\"><a href=\"#1-class-%EC%84%A0%EC%96%B8\" aria-label=\"1 class 선언 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Class 선언</h2>\n<ul>\n<li>Syntax : <code class=\"language-text\">class Name { body }</code></li>\n<li>대문자 Class는 개념적인 클래스를 뜻하고 소문자 class는 키워드 임</li>\n<li>\n<p>클래스 작성 방법</p>\n<ul>\n<li><code class=\"language-text\">class</code> 키워드에 이어 클래스 이름 작성함</li>\n<li>이름의 첫 문자는 대문자를 사용 함(개발자들 사이의 관례)</li>\n<li>블록 <code class=\"language-text\">{ }</code> 을 작성하고 블록 안에 메소드를 작성함</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">getPoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">getPoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 100</span>\n\n<span class=\"token comment\">// 1. 엔진이 class 키워드를 만나면 클래스 오브젝트를 생성함</span>\n<span class=\"token comment\">// 2. const obj = new Point();</span>\n<span class=\"token comment\">//   - new 연산자를 사용하여 인스턴스를 생성함</span>\n<span class=\"token comment\">// 3. new 연산자를 사용하지 않고 Point()를 호출하면 에러가 발생함</span>\n<span class=\"token comment\">// 4. obj.getPoint() 인스턴스의 getPoint() 메소드를 호출 함</span></code></pre></div>\n</li>\n</ul>\n<br>\n<h2 id=\"2-class-표현식\" style=\"position:relative;\"><a href=\"#2-class-%ED%91%9C%ED%98%84%EC%8B%9D\" aria-label=\"2 class 표현식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Class 표현식</h2>\n<ul>\n<li>Syntax : <code class=\"language-text\">const/let Name = class { body }</code></li>\n<li>\n<p>클래스 작성 방법</p>\n<ul>\n<li>변수 이름 <code class=\"language-text\">Name</code>이 클래스 이름이 됨</li>\n<li>변수에 <code class=\"language-text\">Class</code> 오브젝트를 할당하는 형태 임</li>\n<li>다른 것은 클래스 선언문과 같음</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> Point <span class=\"token operator\">=</span> <span class=\"token keyword\">class</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">getPoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">getPoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 100</span>\n\n<span class=\"token comment\">// 1. 엔진이 class 키워드를 만나면 클래스 오브젝트를 생성하여 Point 변수에 할당함</span>\n<span class=\"token comment\">// 2. Point가 클래스 이름이 됨</span></code></pre></div>\n</li>\n<li>\n<p>Class 형태</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> Point <span class=\"token operator\">=</span> <span class=\"token keyword\">class</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">getPoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n\t1. Point를 펼치면\n\t\t- 프로퍼티, prototype, __proto__가 있음\n\n\t2. prototype을 펼치면\n\t\t- constructor가 있으며, getPoint()가 있음\n\n\t3. constructor는 Point 클래스 전체를 참조 함\n\n\t4. 클래스에 메소드를 작성하면 prototype에 연결됨\n\t\t- Point.prototype.getPoint = function(){} 형태로 작성한 것과 같음\n\n\t5. __proto__ 에서 빌트인 Function 오브젝트의 prototype에 연결된 메소드를 참조함\n*/</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n\t1. Point 클래스로 인스턴스를 생성함\n\t\n\t2. obj를 펼치면 __proto__가 있으며 construtor와 getPoint()가 있음\n\n\t3. Point.prototype에 연결된 메소드로\n\t\t- 인스턴스를 생성하고\n\t\t- __proto__에서 참조할 수 있도록 만듬\n*/</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ojb<span class=\"token punctuation\">.</span><span class=\"token function\">getPoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n\t1. obj 인스턴스의 getPoint() 메소드를 호출함\n\t\t- obj.__proto__에 연결된 getPoint()가 호출 됨\n*/</span></code></pre></div>\n</li>\n</ul>\n<br>\n<h3 id=\"-const-let-사용-기준\" style=\"position:relative;\"><a href=\"#-const-let-%EC%82%AC%EC%9A%A9-%EA%B8%B0%EC%A4%80\" aria-label=\" const let 사용 기준 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✅ const, let 사용 기준</h3>\n<ol>\n<li>\n<p><code class=\"language-text\">const</code> 사용 : 값이 대체되지 않을 경우(오브젝트의 <code class=\"language-text\">프로퍼티가</code> 변경되더라도 오브젝트 <code class=\"language-text\">자체가</code> 대체되지 않는 것도 포함)</p>\n<p>ex) <code class=\"language-text\">Class</code>, <code class=\"language-text\">Array</code>, <code class=\"language-text\">인스턴스</code></p>\n</li>\n<li><code class=\"language-text\">let</code> 사용 : 값이 대체되는 경우</li>\n</ol>\n<br>\n<h3 id=\"-함수-메소드-기준\" style=\"position:relative;\"><a href=\"#-%ED%95%A8%EC%88%98-%EB%A9%94%EC%86%8C%EB%93%9C-%EA%B8%B0%EC%A4%80\" aria-label=\" 함수 메소드 기준 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✅ 함수, 메소드 기준</h3>\n<ol>\n<li>\n<p>함수</p>\n<ul>\n<li>인스턴스를 생성하지 않고 직접 호출</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">Array</span><span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n\n<span class=\"token keyword\">const</span> point <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">getPoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>point<span class=\"token punctuation\">.</span><span class=\"token function\">getPoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 100</span></code></pre></div>\n</li>\n<li>\n<p>메소드</p>\n<ul>\n<li>인스턴스를 사용하여 호출하는 함수로 <code class=\"language-text\">prototype</code>에 연결되어 있음</li>\n<li>클래스에 작성한 함수</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">getPoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">getPoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 100</span>\n\n<span class=\"token comment\">// 1. getPoint는 직접 호출 할 수 없고, 인스턴스를 사용하여 호출해야 함</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">prototype</code>에 연결된 <code class=\"language-text\">function</code></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Point</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nPoint<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getPoint</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">getPoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 100</span>\n\n<span class=\"token comment\">// 1. Point.prototype.getPoint, prototype에 연결된 함수는 메소드 임</span>\n<span class=\"token comment\">// 2. getPoint를 직접 호출 할 수도 있지만 일반적으로 인스턴스를 생성하여 호출 함</span></code></pre></div>\n<ul>\n<li>빌트인 오브젝트의 <code class=\"language-text\">prototype</code>에 연결된 함수</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nlist<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'책'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"책\"]</span>\n\n<span class=\"token comment\">// 1. push() 메소드는 Array.prototype에 연결되어 있음</span></code></pre></div>\n</li>\n</ol>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1-class-%EC%84%A0%EC%96%B8\">1. Class 선언</a></li>\n<li>\n<p><a href=\"#2-class-%ED%91%9C%ED%98%84%EC%8B%9D\">2. Class 표현식</a></p>\n<ul>\n<li><a href=\"#-const-let-%EC%82%AC%EC%9A%A9-%EA%B8%B0%EC%A4%80\">✅ const, let 사용 기준</a></li>\n<li><a href=\"#-%ED%95%A8%EC%88%98-%EB%A9%94%EC%86%8C%EB%93%9C-%EA%B8%B0%EC%A4%80\">✅ 함수, 메소드 기준</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"November 16, 2021","title":"Class 선언, Class 구조 - Class 선언문, Class 표현식","categories":"JS","author":"Kay","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-class-2/"}},"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/study-js-es6-class-1/","nextSlug":"/study-js-es6-weakSetObject-1/","prevSlug":"/study-js-es6-class-2/"}},"staticQueryHashes":["1073350324","2938748437"]}