{"componentChunkName":"component---src-templates-blog-template-js","path":"/study-js-es6-weakSetObject-1/","result":{"data":{"cur":{"id":"0c718dc9-c172-5c01-b10b-1e7f0161c1c7","html":"<br>\n<h1 align=\"center\">\n  👋  WeakSet 오브젝트 개요, new WeakSet(), has(), add(), delete()\n</h1>\n<br>\n<h2 id=\"1-weakset-오브젝트\" style=\"position:relative;\"><a href=\"#1-weakset-%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8\" aria-label=\"1 weakset 오브젝트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. WeakSet 오브젝트</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">Set</code> 오브젝트와 차이</p>\n<ul>\n<li>오브젝트만 <code class=\"language-text\">value</code> 값으로 사용할 수 있음</li>\n<li><code class=\"language-text\">number</code> 등의 프리미티브 타입 사용 불가</li>\n</ul>\n</li>\n<li>\n<p>개념은 <code class=\"language-text\">WeakMap</code>과 같음</p>\n<ul>\n<li><code class=\"language-text\">value</code>만 작성하는 것이 다름</li>\n<li><code class=\"language-text\">value</code>의 참조가 바뀌면 <code class=\"language-text\">GC</code> 대상</li>\n</ul>\n</li>\n<li>\n<p>지원 메소드</p>\n<ul>\n<li><code class=\"language-text\">has()</code>, <code class=\"language-text\">add()</code>, <code class=\"language-text\">delete()</code></li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"2-new-weakset\" style=\"position:relative;\"><a href=\"#2-new-weakset\" aria-label=\"2 new weakset permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. new WeakSet()</h2>\n<ul>\n<li><code class=\"language-text\">WeakSet</code> 인스턴스 생성, 반환</li>\n<li>\n<p>파라미터</p>\n<ul>\n<li>대괄호 <code class=\"language-text\">[ ]</code> 안에 오브젝트 작성</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const empty = new WeakSet();\nconst sports = {};\nconst obj = new WeakSet([\n\tsports\n]};\n\n// 1. 파라미터를 작성하지 않아도 됨\n// 2. new 연산자를 사용 함</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<h2 id=\"3-has\" style=\"position:relative;\"><a href=\"#3-has\" aria-label=\"3 has permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. has()</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">WeakSet</code> 인스턴스에서 <code class=\"language-text\">value</code>의 존재 여부 반환</p>\n<ul>\n<li>존재하면 <code class=\"language-text\">true</code>, 아니면 <code class=\"language-text\">false</code> 반환</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const fn = () =&gt; {};\nconst obj = new WeakSet([\n\tfn\n]};\n\nconsole.log(obj.has(fn));   // true</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<h2 id=\"4-add\" style=\"position:relative;\"><a href=\"#4-add\" aria-label=\"4 add permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. add()</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">WeakSet</code> 인스턴스에 <code class=\"language-text\">value</code> 설정</p>\n<ul>\n<li>파라미터에 <code class=\"language-text\">value</code> 로 설정될 오브젝트 작성</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const obj = new WeakSet();\nconst fn = () =&gt; {};\nobj.add(fn);\n\nconsole.log(obj.has(fn)); // true</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<h2 id=\"5-delete\" style=\"position:relative;\"><a href=\"#5-delete\" aria-label=\"5 delete permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. delete()</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">WeakSet</code> 인스턴스에서 <code class=\"language-text\">value</code>와 일치하는 엘리먼트 삭제</p>\n<ul>\n<li>삭제 성공이면 <code class=\"language-text\">true</code> 반환</li>\n<li>삭제를 실패하면 <code class=\"language-text\">false</code> 반환</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const fn = () =&gt; {};\nconst obj = new WeakSet([fn]);\n\nconsole.log(obj.delete(fn)); // true\nconsole.log(obj.has(fn)); // false</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","excerpt":"1. WeakSet 오브젝트  오브젝트와 차이 오브젝트만  값으로 사용할 수 있음  등의 프리미티브 타입 사용 불가 개념은 과 같음 만 작성하는 것이 다름 의 참조가 바뀌면  대상 지원 메소드 , ,  2. new WeakSet()  인스턴스 생성, 반환 파라미터 대괄호  안에 오브젝트 작성 3. has()  인스턴스에서 의 존재 여부 반환 존재하면 , 아니면  반환 4. add()  인스턴스에  설정 파라미터에  로 설정될 오브젝트 작성 5. delete()  인스턴스에서 와 일치하는 엘리먼트 삭제 삭제 성공이면  반환 삭제를 실패하면  반환","frontmatter":{"date":"November 14, 2021","title":"WeakSet 오브젝트 개요, new WeakSet(), has(), add(), delete()","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-weakSetObject-1/"}},"next":{"id":"dd85fcb0-073b-5dad-9f98-4cc3f192e161","html":"<br>\n<h1 align=\"center\">\n  👋  콜백 함수, 삭제, 지우기 - forEach(), delete(), clear()\n</h1>\n<br>\n<h2 id=\"1-foreach\" style=\"position:relative;\"><a href=\"#1-foreach\" aria-label=\"1 foreach permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. forEach()</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">Set</code> 인스턴스를 반복하면서 <code class=\"language-text\">callBack</code> 함수 호출</p>\n<ul>\n<li><code class=\"language-text\">map()</code>, <code class=\"language-text\">filter()</code> 등의 <code class=\"language-text\">callback</code> 함수가 동반되는 메소드 사용 불가</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">callbak</code> 함수에 넘겨주는 파라미터</p>\n<ul>\n<li><code class=\"language-text\">value</code>, <code class=\"language-text\">key(value)</code>, <code class=\"language-text\">Set</code> 인스턴스</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const obj = new Set([&#39;one&#39;, () =&gt; {}]);\n\nfunction callback(value, key, set) {\n  console.log(value);\n}\n\nobj.forEach(callback);\n\n// 실행결과\n// one\n// () =&gt; {}</code>\n        </deckgo-highlight-code>\n<ul>\n<li>콜백 함수에서 <code class=\"language-text\">this</code> 사용</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const obj = new Set([&#39;one&#39;, &#39;two&#39;]);\n\nfunction callback(value, key, set) {\n  console.log(`${value}, ${this.check}`);\n}\n\nobj.forEach(callback, { check: &#39;ABC&#39; });\n// 콜백 함수에서 this가 forEach()의 두 번째 파라미터에 작성한 오브젝트를 참조하게 하려면\n// 일반 함수로 작성해야 함\n\n// 실행결과\n// one, ABC\n// two, ABC</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<h2 id=\"2-delete\" style=\"position:relative;\"><a href=\"#2-delete\" aria-label=\"2 delete permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. delete()</h2>\n<ul>\n<li><code class=\"language-text\">Set</code> 인스턴스에서 파라미터 갑솨 같은 엘리먼트 삭제</li>\n<li>\n<p>같은 <code class=\"language-text\">value</code> 가 있어 삭제에 성공하면 <code class=\"language-text\">true</code> 반환</p>\n<ul>\n<li>삭제에 실패하면 <code class=\"language-text\">false</code> 반환</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const obj = new Set([&#39;one&#39;, &#39;two&#39;]);\n\nconsole.log(obj.delete(&#39;one&#39;)); // true\nconsole.log(obj.delete(&#39;one&#39;)); // false</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<h2 id=\"3-clear\" style=\"position:relative;\"><a href=\"#3-clear\" aria-label=\"3 clear permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. clear()</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">Set</code> 인스턴스의 모든 엘리먼트를 지움</p>\n<ul>\n<li><code class=\"language-text\">Set</code> 인스턴스를 삭제하는 것은 아님, 따라서 <code class=\"language-text\">value</code>를 추가할 수 있음</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const obj = new Set([&#39;one&#39;, &#39;two&#39;]);\n\nconsole.log(obj.size); // 2\n\nobj.clear();\nconsole.log(obj.size); // 0\n\nobj.add(&#39;one&#39;);\nconsole.log(obj.size); // 1</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","frontmatter":{"date":"November 13, 2021","title":"콜백 함수, 삭제, 지우기 - forEach(), delete(), clear()","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-setObject-4/"}},"prev":{"id":"abb4e680-93e2-53a7-96cd-ec5c2044569b","html":"<br>\n<h1 align=\"center\">\n  👋  객체 지향 프로그래밍: 객체 구성 요소, 객체의 구체화, 자바스크립트로 OOP 구현\n</h1>\n<br>\n<h2 id=\"1-js\" style=\"position:relative;\"><a href=\"#1-js\" aria-label=\"1 js permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. JS</h2>\n<ul>\n<li>\n<p>객체 지향 프로그래밍 언어</p>\n<ul>\n<li><code class=\"language-text\">OOP</code> : Object Oriented Programming</li>\n</ul>\n</li>\n<li>\n<p>ECMASciprt 스펙에 OOP라고 작성되어 있음</p>\n<ul>\n<li>ECMAScripte is an object-oriented programming language</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"2-객체-구성-요소\" style=\"position:relative;\"><a href=\"#2-%EA%B0%9D%EC%B2%B4-%EA%B5%AC%EC%84%B1-%EC%9A%94%EC%86%8C\" aria-label=\"2 객체 구성 요소 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 객체 구성 요소</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">OOP</code>에서 Object(객체)는 JS Object가 아님</p>\n<ul>\n<li>개념적, 사상적 접근</li>\n<li>형체, 실체가 없음</li>\n</ul>\n</li>\n<li>\n<p>행위와 속성으로 객체의 특성을 표현 함</p>\n<ul>\n<li>행위 : 먹다, 마시다와 같은 동적인 모습</li>\n<li>속성 : 밥을 먹다, 물을 마시다와 같은 행위의 대상이 속성</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"3-객체의-구체화\" style=\"position:relative;\"><a href=\"#3-%EA%B0%9D%EC%B2%B4%EC%9D%98-%EA%B5%AC%EC%B2%B4%ED%99%94\" aria-label=\"3 객체의 구체화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 객체의 구체화</h2>\n<ul>\n<li>\n<p>객체를 코드로 구체화하면 객체는 <code class=\"language-text\">Class</code>가 됨</p>\n<ul>\n<li>행위는 <code class=\"language-text\">Method</code>가 됨</li>\n<li>속성은 <code class=\"language-text\">Property</code>가 됨</li>\n</ul>\n</li>\n<li>\n<p>클래스에서</p>\n<ul>\n<li>메소드와 프로퍼티를 작성함</li>\n<li>클래스 자체로는 사용할 수 없으며</li>\n<li>인스턴스로 생성해야 사용 할 수 있음</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">class Point {\n  constructor(point) {\n    this.point = point;\n  }\n\n  getPoint() {\n    return this.point;\n  }\n}\n\nconst obj = new Point(100);\n\nconsole.log(obj.getPoint()); // 100\nconsole.log(obj.point); // 100</code>\n        </deckgo-highlight-code>\n<ol>\n<li>\n<p><code class=\"language-text\">class Point {...}</code></p>\n<ul>\n<li><code class=\"language-text\">class</code> 키워드로 클래스를 선언 함, 이 시점에서 <code class=\"language-text\">class</code>를 사용할 수 없음</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">const obj = new Point(100);</code></p>\n<ul>\n<li><code class=\"language-text\">constructor</code> 가 호출되며 파라미터 값을 넘겨 줌</li>\n<li>인스턴스를 생성하여 반환하며 <code class=\"language-text\">obj</code> 에 할당함</li>\n<li>이제 인스턴스로 클래스를 사용할 수 있음</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">obj.getPoint()</code></p>\n<ul>\n<li>인스턴스의 <code class=\"language-text\">getPoint()</code> 메소드를 호출 함</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">return this.point</code></p>\n<ul>\n<li><code class=\"language-text\">point</code> 프로퍼티 임</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">obj.point</code></p>\n<ul>\n<li><code class=\"language-text\">obj</code> 인스턴스의 <code class=\"language-text\">point</code> 프로퍼티 값을 구함</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n<br>\n<h2 id=\"4-js로-oop-구현\" style=\"position:relative;\"><a href=\"#4-js%EB%A1%9C-oop-%EA%B5%AC%ED%98%84\" aria-label=\"4 js로 oop 구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. JS로 OOP 구현</h2>\n<ul>\n<li>\n<p>다른 언어와 <code class=\"language-text\">OOP</code> 개념은 같지만 클래스 구조와 구현 방법이 다름</p>\n<ul>\n<li><code class=\"language-text\">prototype</code> 에 메소드를 연결하는 구조</li>\n<li>연결된 메소드로 인스턴스 생성</li>\n</ul>\n</li>\n<li>따라서 비교하는 것은 의미가 없음</li>\n<li><code class=\"language-text\">JS</code>에 적합한 방법과 <code class=\"language-text\">JS</code> 특징을 활용하여 <code class=\"language-text\">OOP</code>를 구현해야 함</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","frontmatter":{"date":"November 15, 2021","title":"객체 지향 프로그래밍 - 객체 구성 요소, 객체의 구체화, 자바스크립트로 OOP 구현","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-class-1/"}},"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":"zoomkoding/zoomkoding-gatsby-blog"}}}}},"pageContext":{"slug":"/study-js-es6-weakSetObject-1/","nextSlug":"/study-js-es6-setObject-4/","prevSlug":"/study-js-es6-class-1/"}},"staticQueryHashes":["1073350324","2938748437"]}