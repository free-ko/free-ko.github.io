{"componentChunkName":"component---src-templates-blog-template-js","path":"/study-js-es6-object-4/","result":{"data":{"cur":{"id":"bd27811e-1fcf-5f4c-85ff-1dfc72933441","html":"<br>\n<h1 align=\"center\">\n  👋  Object 변환: entries(), values(), fromEntries(), getOwnPropertyDescriptors()\n</h1>\n<br>\n<h2 id=\"1-entries\" style=\"position:relative;\"><a href=\"#1-entries\" aria-label=\"1 entries permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. entries()</h2>\n<ul>\n<li>\n<p>열거 가능한 오브젝트의 <code class=\"language-text\">{key: value}</code>를 <code class=\"language-text\">[[key, value]]</code> 형태로 변환</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const obj = { music: &#39;음악&#39;, book: &#39;책&#39; };\nconst list = Object.entries(obj);\n\nfor (let keyValue of list) {\nconsole.log(keyValue);\n}\n\n// 1. list는 이터러블 오브젝트 임\n// 2. [[key, value]] 형태를 Map 형태라고 부름\n// 결과 : [music, 음악], [book, 책]</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>작성한 순서가 바뀌는 경우</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const obj = { 10: &#39;십&#39;, book: &#39;책&#39;, 7: &#39;칠&#39; };\nconst list = Object.entries(obj);\n\nfor (let keyValue of list) {\nconsole.log(keyValue);\n}\n\n// 1. 앞의 [코드 1]처럼 key가 영문자일 때는 key값을 분류하지 않고 작성한 대로 반환\n// 2. 반면, [코드 2]처럼 숫자와 문자가 섞여 있으면 숫자, 문자 순서로 분류함\n// 결과\n// [7, 칠]\n// [10, 십]\n// [book, 책]</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>문자열은 문자 하나씩 분리</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const list = Object.entries(&#39;ABC&#39;);\n\nfor (let keyValue of list) {\nconsole.log(keyValue);\n}\n\n// 1. 문자열은 문자 하나씩 분리 하며\n// 2. 인덱스를 key 값으로 사용 함\n// 결과\n// [0, A]\n// [1, B]\n// [2, C]</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<h2 id=\"2-values\" style=\"position:relative;\"><a href=\"#2-values\" aria-label=\"2 values permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. values()</h2>\n<ul>\n<li>\n<p>열거 가능한 오브젝트의 <code class=\"language-text\">{key: value}</code>를 <code class=\"language-text\">[value1, value2]</code> 형태로 변환</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const obj = { music: &#39;음악&#39;, book: &#39;책&#39; };\nconst list = Object.values(obj);\n\nfor (let value of list) {\nconsole.log(value);\n}\n\n// 음악\n// 책</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>작성한 순서가 바뀌는 경우</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const obj = { 10: &#39;십&#39;, book: &#39;책&#39;, 7: &#39;칠&#39; };\nconst list = Object.values(obj);\n\nfor (let keyValue of list) {\nconsole.log(value);\n}\n\n// 1. 앞의 [코드 1]처럼 key가 영문자일 때는 key값을 분류하지 않지만\n// 2. 반면, [코드 2]처럼 숫자와 문자가 섞여 있으면 숫자, 문자 순서로 분류함\n// 결과\n// 칠\n// 십\n// 책</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>문자열은 문자 하나씩 분리</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const list = Object.entries(&#39;ABC&#39;);\n\nfor (let keyValue of list) {\nconsole.log(keyValue);\n}\n\n// 1. 문자열은 문자 하나씩 분리\n// 결과\n// A\n// B\n// C</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<h2 id=\"3-fromentires\" style=\"position:relative;\"><a href=\"#3-fromentires\" aria-label=\"3 fromentires permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. fromEntires()</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">[[key, value]]</code> 형태를 <code class=\"language-text\">{key: value}</code> 형태로 변환</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const list = [\n[&#39;one&#39;, 10],\n[&#39;two&#39;, 20],\n];\nconst obj = Object.fromEntries(list);\n\nconsole.log(obj);\n\n// {one: 10, two: 20}</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>프로퍼티 키 값이 같으면 값 대체</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const list = [\n[&#39;one&#39;, 10],\n[&#39;one&#39;, 20],\n];\nconst obj = Object.fromEntries(list);\n\nconsole.log(obj);\n\n// {one: 20}</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<h2 id=\"4-getownpropertydescriptors\" style=\"position:relative;\"><a href=\"#4-getownpropertydescriptors\" aria-label=\"4 getownpropertydescriptors permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. getOwnPropertyDescriptors()</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">Object</code>의 프로퍼티 디스크립터를 반환</p>\n<ul>\n<li>데이터 디스크립터</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const obj = { music: &#39;음악&#39; };\nconst des = Object.getOwnPropertyDescriptors(obj);\n\nfor (let name in des.music) {\nconsolel.log(name + &#39;: &#39; + des.music[name]);\n}\n\n// value: 음악\n// writable: true\n// enumerable: true\n// configurable: true</code>\n        </deckgo-highlight-code>\n<ul>\n<li>액세스 디스크립터</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const obj = {\nget music() {},\n};\n\nconst des = Object.getOwnPropertyDescriptors(obj);\n\nfor (let name in des.music) {\nconsole.log(name + &#39;: &#39; + des.music[name]);\n}\n\n// get: get music() {}\n// set: undefined\n// enumerable: true\n// configurable: true</code>\n        </deckgo-highlight-code>\n<ul>\n<li>상속받은 오브젝트는 반환하지 않음</li>\n</ul>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","excerpt":"1. entries() 열거 가능한 오브젝트의 를  형태로 변환 작성한 순서가 바뀌는 경우 문자열은 문자 하나씩 분리 2. values() 열거 가능한 오브젝트의 를  형태로 변환 작성한 순서가 바뀌는 경우 문자열은 문자 하나씩 분리 3. fromEntires()  형태를  형태로 변환 프로퍼티 키 값이 같으면 값 대체 4. getOwnPropertyDescriptors() 의 프로퍼티 디스크립터를 반환 데이터 디스크립터 액세스 디스크립터 상속받은 오브젝트는 반환하지 않음","frontmatter":{"date":"September 25, 2021","title":"Object 변환","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-object-4/"}},"next":{"id":"5bd56bd9-8a9d-5f6b-a44d-f6cd4e67e1a4","html":"<br>\n<h1 align=\"center\">\n  👋  오브젝트 복사: Deep copy\n</h1>\n<br>\n<h2 id=\"deep-copyt\" style=\"position:relative;\"><a href=\"#deep-copyt\" aria-label=\"deep copyt permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Deep Copyt</h2>\n<ul>\n<li>\n<p>Object를 할당하면 프로퍼티 값이 연동됨</p>\n<ul>\n<li>한 쪽 오브젝트의 프로퍼티 값을 바꾸면, 다른 오브젝트의 프로퍼티 값도 바뀜</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const sports = {\nitem: &#39;축구&#39;,\n};\n\nlet copy = sports;\nsports.item = &#39;농구&#39;;\n\nconsole.log(copy.item); // 농구</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p><code class=\"language-text\">assign()</code> 함수로 복사</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const sports = {\nitem: &#39;축구&#39;,\n};\n\nlet copy = {};\nObject.assign(copy, sports);\nsports.item = &#39;농구&#39;;\n\nconsole.log(copy.item); // 축구</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>그래도 연동되는 형태</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const book = {\nitem: { title: &#39;자바스크립트&#39; },\n};\n\nlet copy = {};\nObject.assign(copy, book);\ncopy.item.title = &#39;책&#39;;\n\nconsole.log(book.item.title); // 책\n\n// 위에서는 프로퍼티를 복사하지 않고 Object 참조를 복사하기 때문</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>연동되지 않게 하려면 프로퍼티 단위로 복사</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const book = {\n\titem : {title: &quot;JS&quot;}\n}\n\nlet copy = {};\n\nfor (let key in book) {\n\tlet value = book[key];\n\tcopy[key] = {};\n\n\tfor (let name in value) {\n\t\tcopy[key]name] = value[name];\n\t}\n}\n\nbook.item.title = &quot;책&quot;;\n\nconsole.log(copy.item.title);   // JS\n\n// 1. 프로퍼티 단위로 복사하면 연동되지만\n// 2. 단계의 깊이가 유동적이면 코드가 복잡해짐\n// 3. 다단계 계층 구조에서 값이 연동되지 않도록 복사하는 것을 deep copy, deep clone이라고 부름</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>JSON 함수 활용</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const book = {\nitem: { title: &#39;JS&#39; },\n};\n\nconst copy = JSON.parse(JSON.stringify(book));\n\nbook.item.title = &#39;책&#39;;\n\nconsole.log(copy.item.title); // JS\n\n// 1. JSON.strigify()로 문자열로 변환 후\n// 2. JSON.parse()로 파싱하면 연동되지 않음\n// 3. 이것도 하나의 방법</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","frontmatter":{"date":"September 24, 2021","title":"오브젝트 복사 - deep copy","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-object-3/"}},"prev":{"id":"f1340f31-1055-57e2-9bb9-d6da9ade70f0","html":"<br>\n<h1 align=\"center\">\n  👋  prototype와 proto, 메소드 호출 방법\n</h1>\n<br>\n<h2 id=\"메소드-호출-방법\" style=\"position:relative;\"><a href=\"#%EB%A9%94%EC%86%8C%EB%93%9C-%ED%98%B8%EC%B6%9C-%EB%B0%A9%EB%B2%95\" aria-label=\"메소드 호출 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>메소드 호출 방법</h2>\n<ul>\n<li><code class=\"language-text\">prototype</code>과 <code class=\"language-text\">__proto__</code>에 연결된 메소드를 호출하는 방법이 다름</li>\n<li>\n<p><code class=\"language-text\">prototpye</code>에 연결된 메소드 호출</p>\n<ul>\n<li><code class=\"language-text\">Array.prototype.slice()</code> 처럼 <code class=\"language-text\">prototype</code>을 작성하여 호출</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">function Book() {\nthis.point = 100;\n}\n\nBook.prototype.getPoint = function () {\nconsole.log(Object.is(this, Book.prototype));\nreturn this.point;\n};\n\nconsole.log(Book.prototype.getPoint());\nconsole.log(Book.prototype.getPoint.call(Book));\n\n// 결과\n// true\n// undefined\n// false\n// undefined\n\n// 1. Book.prototype.getPoint() prototype을 작성하여 호출하면 getPoint()에서 this가 Book.prototype을 참조\n// 2. Book.prototype.getPoint.call(Book) this가 Book을 참조함\n// 3. this.point를 참조하려면 인스턴스를 생성하고 인스턴스의 메소드를 호출해야함</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<ul>\n<li>\n<p><code class=\"language-text\">__proto__</code>에 연결된 메소드 호출</p>\n<ul>\n<li>인스턴스를 생성하여 호출</li>\n<li><code class=\"language-text\">new</code> 연산자로 생성한 인스턴스 구조</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">function Book() {\nthis.point = 100;\n}\n\nBook.prototype.getPoint = function () {\nreturn this.point;\n};\n\nconst obj = new Book();\n/*\n\t1. 오른쪽 obj를 펼치면\n\t- point: 100이 있으며 인스턴스 프로퍼티임\n\t- 생성자 함수에서 this.point = 100으로 설정한 것\n\n\t2. __proto__를 펼치면\n\t- prototype에 연결된 메소드가 표시됨\n\t- getPoint는 Book.prototype.getPoint를 참조함\n\t- __proto__에 복사하지 않음\n*/\n\nconsole.log(obj.getPoint());\n/*\n\t1. 생성한 인스턴스 이름을 사용하여\n\t- getPoint() 메소드를 호출하면\n\t- 호출된 메소드에서 this로 인스턴스를 참조 할 수 있음\n*/</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","frontmatter":{"date":"September 26, 2021","title":"prototype와 proto, 메소드 호출 방법","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-object-5/"}},"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":"zoomkoding/zoomkoding-gatsby-blog"}}}}},"pageContext":{"slug":"/study-js-es6-object-4/","nextSlug":"/study-js-es6-object-3/","prevSlug":"/study-js-es6-object-5/"}},"staticQueryHashes":["1073350324","2938748437"]}