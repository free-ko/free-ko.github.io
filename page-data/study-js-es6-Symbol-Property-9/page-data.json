{"componentChunkName":"component---src-templates-blog-template-js","path":"/study-js-es6-Symbol-Property-9/","result":{"data":{"cur":{"id":"78c49048-270c-5470-9b44-91448226fade","html":"<br>\n<h1 align=\"center\">\n  👋 Symbol.match\n</h1>\n<br>\n<h2 id=\"1-well-known-symbol\" style=\"position:relative;\"><a href=\"#1-well-known-symbol\" aria-label=\"1 well known symbol permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Well-Known Symbol</h2>\n<ul>\n<li>\n<p>Well-Known Symbol을 지원하는 String 메소드</p>\n<ul>\n<li><code class=\"language-text\">match()</code></li>\n<li><code class=\"language-text\">replace()</code></li>\n<li><code class=\"language-text\">search()</code></li>\n<li><code class=\"language-text\">split()</code></li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">String.prototype.match()</code></p>\n<ul>\n<li>문자열에 패턴을 매치하고</li>\n<li>매치된 결과를 배열로 반환</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token string\">'Sports'</span><span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">s</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [s]</span>\n\n<span class=\"token comment\">// 1. 문자열 \"Sports\"에 패턴 /s/를 매치합니다. 처음 S는 대문자이므로 매치가 되지 않지만 끝 s는 소문자이므로 매치가 됨</span>\n<span class=\"token comment\">// 2. 매치된 결과를 배열로 반환</span></code></pre></div>\n</li>\n</ul>\n<br>\n<h2 id=\"2-symbolmatch\" style=\"position:relative;\"><a href=\"#2-symbolmatch\" aria-label=\"2 symbolmatch permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Symbol.match()</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">Symbol.match()</code></p>\n<ul>\n<li>개발자 코드를 함수 블록에 작성</li>\n<li><code class=\"language-text\">String.prototype.match()</code> 대신에 <code class=\"language-text\">Symbol.match()</code> 대신에 <code class=\"language-text\">Symbol.match()</code>가 실행됨</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> sports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  base<span class=\"token operator\">:</span> <span class=\"token string\">'ball'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>match<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>base<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token string\">'없음'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'있음'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'al'</span><span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>sports<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 있음</span>\n\n<span class=\"token comment\">// 1. 'ball'에 'al'이 있으면 '있음'을 반환하고 없으면 '없음'을 반환함</span>\n<span class=\"token comment\">// 2. 'al'.match(sports)</span>\n<span class=\"token comment\">// 3. sports 오브젝트에서 Symbol.match 작성 체크 없으면 String.prototype.match()를 호출하고 있으면 Symbol.match()를 호출 함</span>\n<span class=\"token comment\">// 4. Symbol.match(value)를 호출하면서 'al'를 파라미터 값으로 넘겨 줌</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">Symbol.match = false</code></p>\n<ul>\n<li><code class=\"language-text\">//</code>를 패턴으로 인식하지 않고 문자열로 인식</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">'/book/'</span><span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">book</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'정규 표현식으로 처리'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> check <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">book</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\ncheck<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>match<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/book/'</span><span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span>check<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1. 파라미터 /book/을 패턴으로 처리 함, 정규 표현식을 사용할 수 없으므로 에러 발생</span>\n<span class=\"token comment\">// 2. check[Symbol.match] = false; 정규 표현식으로 인식하지 않도록 설정</span>\n<span class=\"token comment\">// 3. \"/book/\".startWith(check) 파라미터 check 값을 문자열로 인식 함</span>\n<span class=\"token comment\">// 4. endsWith()도 값음</span>\n\n<span class=\"token comment\">// 실행 결과</span>\n<span class=\"token comment\">// 정규 표현식으로 처리</span>\n<span class=\"token comment\">// true</span></code></pre></div>\n</li>\n<li>메소드를 오버라이드 하는 것이므로 메소드의 시맨틱은 유지해야 함</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1-well-known-symbol\">1. Well-Known Symbol</a></li>\n<li><a href=\"#2-symbolmatch\">2. Symbol.match()</a></li>\n</ul>\n</div>","excerpt":"1. Well-Known Symbol Well-Known Symbol을 지원하는 String 메소드      문자열에 패턴을 매치하고 매치된 결과를 배열로 반환 2. Symbol.match()  개발자 코드를 함수 블록에 작성  대신에  대신에 가 실행됨  를 패턴으로 인식하지 않고 문자열로 인식 메소드를 오버라이드 하는 것이므로 메소드의 시맨틱은 유지해야 함 1. Well-Known Symbol 2. Symbol.match()","frontmatter":{"date":"October 29, 2021","title":"Symbol.match","categories":"JS","author":"Kay","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-Symbol-Property-9/"}},"next":{"id":"ad9283ad-dc89-5e48-a4cb-83342a285d62","html":"<br>\n<h1 align=\"center\">\n  👋 Symbol.iterator에 제너레이터 함수 연결\n</h1>\n<br>\n<h2 id=\"generator-함수-연결\" style=\"position:relative;\"><a href=\"#generator-%ED%95%A8%EC%88%98-%EC%97%B0%EA%B2%B0\" aria-label=\"generator 함수 연결 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>generator 함수 연결</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">Object{}</code> 에 <code class=\"language-text\">Symbol.iterator</code> 를 작성하고 <code class=\"language-text\">generator</code> 함수를 연결하면 반복 할 때마다 <code class=\"language-text\">yield</code>를 수행</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nobj<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">yield</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">yield</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">yield</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>obj<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1. obj의 Symbol.iterator에 제너레이터 함수를 연결 함</span>\n<span class=\"token comment\">// 2. [...obj]를 실행하면 obj에서 [Symbol.iterator]를 검색함</span>\n<span class=\"token comment\">// 3. 존재하므로 [Symbol.iterator]()를 실행하며 이터레이터 오브젝트를 생성하여 반환함</span>\n<span class=\"token comment\">// 4. yield가 끝날 때까지 반복하면서 yield에서 반환된 값을 배열에 첨부 함</span>\n\n<span class=\"token comment\">// 실행결과</span>\n<span class=\"token comment\">// [1,2,3]</span></code></pre></div>\n</li>\n<li>\n<p>연결 구조</p>\n<ul>\n<li><code class=\"language-text\">Symbol.iterator</code>의 <code class=\"language-text\">__proto__</code>에 제너레이터 오브젝트가 있는 구조</li>\n</ul>\n</li>\n<li>\n<p>제너레이터 오브젝트에 이터레이터 오브젝트를 연결하여 값을 <code class=\"language-text\">공유하는</code> 형태</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">gen</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">yield</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">yield</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> genObj <span class=\"token operator\">=</span> <span class=\"token function\">gen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>genObj<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> genObj<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1. genObj.next() 첫 번째 yield를 수행하여 10을 반환</span>\n<span class=\"token comment\">// 2. const obj = genObj[Symbol.iterator](); 제너레이터 오브젝트의 Symbol.iterator() 호출, 이터레이터 오브젝트를 반환</span>\n<span class=\"token comment\">// 3. obj.next() 제너레이터 함수에서 수행했던 첫 번째 yield는 수행하지 않고 두 번째 yield를 수행하여 값을 반환 함</span>\n<span class=\"token comment\">// 4. 이터레이터 오브젝트에서 yield 처리를 공유함</span>\n\n<span class=\"token comment\">// 실행 결과</span>\n<span class=\"token comment\">// {value: 10, done: false}</span>\n<span class=\"token comment\">// {value: 20, done: false}</span></code></pre></div>\n<ul>\n<li>제너레이터 오브젝트에 이터레이터 오브젝트가 포함된 구조</li>\n</ul>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#generator-%ED%95%A8%EC%88%98-%EC%97%B0%EA%B2%B0\">generator 함수 연결</a></li>\n</ul>\n</div>","frontmatter":{"date":"October 28, 2021","title":"Symbol.iterator에 제너레이터 함수 연결","categories":"JS","author":"Kay","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-Symbol-Property-8/"}},"prev":{"id":"90c90dbe-39a8-551c-b0bd-228f5eac9785","html":"<br>\n<h1 align=\"center\">\n  👋 Symbol 함수: for(), keyFor()\n</h1>\n<h2 id=\"1-for\" style=\"position:relative;\"><a href=\"#1-for\" aria-label=\"1 for permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. for()</h2>\n<ul>\n<li>\n<p>글로벌 <code class=\"language-text\">Symbol</code> 레지스트리에</p>\n<ul>\n<li><code class=\"language-text\">{key: value}</code> 형태로 <code class=\"language-text\">Symbol</code> 을 저장</li>\n<li><code class=\"language-text\">파라미터()</code>의 문자열이 <code class=\"language-text\">Key</code>가 되고 <code class=\"language-text\">Symbol()</code>로 생성한 값이 <code class=\"language-text\">value</code>가 됨</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> one <span class=\"token operator\">=</span> Symbol<span class=\"token punctuation\">.</span><span class=\"token function\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sports'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>one<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Symbol(sports)</span>\n\n<span class=\"token comment\">// 1. {key: value} 형태로 one에 설정함, one이 글로벌 Symbol 레지스트리에 저장됨</span>\n<span class=\"token comment\">// 2. 파라미터인 'sports'가 key가 되고 Symbol()로 생성한 값이 value가 됨</span>\n<span class=\"token comment\">// 3. Symbol(\"sports\") 함수에서 파라미터가 주석이었던 것과는 차이가 있음</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">registry</code> : 등록, 기록</li>\n</ul>\n</li>\n<li>\n<p>글로벌 <code class=\"language-text\">Symbol</code> 레지스트리는 공유 영역</p>\n<ul>\n<li>다른 오브젝트에서도 사용 가능</li>\n<li>같은 <code class=\"language-text\">key</code>가 존재하면 등록된 값을 사용</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> one <span class=\"token operator\">=</span> Symbol<span class=\"token punctuation\">.</span><span class=\"token function\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sports\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> two <span class=\"token operator\">=</span> Symbol<span class=\"token punctuation\">.</span><span class=\"token function\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sports\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>one <span class=\"token operator\">===</span> two<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// true</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Symbol<span class=\"token punctuation\">.</span><span class=\"token function\">for</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Symbol(true)</span>\n\n<span class=\"token comment\">// 1. one의 key 값과 two의 key값이 같으므로 Symbol 값을 생성하지 않고 one에 설정된 값을 사용</span>\n<span class=\"token comment\">// 2. one === two 그래서 비교 결과가 true가 나옴</span>\n<span class=\"token comment\">// 3. Symbol.for(true) true를 문자열로 반환하여 key 값으로 사용</span></code></pre></div>\n</li>\n</ul>\n<br>\n<h2 id=\"2-keyfor\" style=\"position:relative;\"><a href=\"#2-keyfor\" aria-label=\"2 keyfor permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. keyFor()</h2>\n<ul>\n<li>글로벌 <code class=\"language-text\">Symbol</code> 레지스트리에서 <code class=\"language-text\">Symbol</code>의 <code class=\"language-text\">key</code> 값을 구함</li>\n<li>\n<p>파라미터에 <code class=\"language-text\">Symbol.for()</code> 로 등록한 <code class=\"language-text\">Symbol</code> 작성</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> one <span class=\"token operator\">=</span> Symbol<span class=\"token punctuation\">.</span><span class=\"token function\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">'book'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> six <span class=\"token operator\">=</span> Symbol<span class=\"token punctuation\">.</span><span class=\"token function\">keyFor</span><span class=\"token punctuation\">(</span>one<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>six<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// book</span>\n\n<span class=\"token comment\">// 1. const six = Symbol.keyFor(one); 파라미터에 글로벌 Symbol 레지스트리에 등록한 Symbol을 작성함</span>\n<span class=\"token comment\">// 2. one의 key 값인 \"book\"을 반환</span></code></pre></div>\n</li>\n<li><code class=\"language-text\">Symbol key</code> 값이 존재하면 <code class=\"language-text\">key</code> 값을 반환하고 존재하지 않으면 <code class=\"language-text\">Undefined</code> 반환</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1-for\">1. for()</a></li>\n<li><a href=\"#2-keyfor\">2. keyFor()</a></li>\n</ul>\n</div>","frontmatter":{"date":"October 30, 2021","title":"Symbol 함수 - for(), keyFor()","categories":"JS","author":"Kay","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-Symbol-Function-1/"}},"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":"zoomkoding/zoomkoding-gatsby-blog"}}}}},"pageContext":{"slug":"/study-js-es6-Symbol-Property-9/","nextSlug":"/study-js-es6-Symbol-Property-8/","prevSlug":"/study-js-es6-Symbol-Function-1/"}},"staticQueryHashes":["1073350324","2938748437"]}