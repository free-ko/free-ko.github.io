{"componentChunkName":"component---src-templates-blog-template-js","path":"/study-js-es6-reflect-5/","result":{"data":{"cur":{"id":"b57d8114-5179-5ef6-8db2-1bd5369bd3f7","html":"<br>\n<h1 align=\"center\">\n  👋 defineProperty(), preventExtensions(), isExtensible()\n</h1>\n<br>\n<h2 id=\"1-defineproperty\" style=\"position:relative;\"><a href=\"#1-defineproperty\" aria-label=\"1 defineproperty permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. defineProperty()</h2>\n<ul>\n<li><code class=\"language-text\">target</code> 에 프로퍼티를 추가, 변경함</li>\n<li>\n<p><code class=\"language-text\">Reflect.defineProperty()</code> 형태</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const target = {};\nReflect.defineProperty(target, &#39;point&#39;, {\nvalue: 100,\nwritable: true,\n});\n\nconsole.log(Object.getownPropertyDescriptor(target, &#39;point&#39;));\n\n// 1. target에 프로퍼티를 설정함\n// {value: 100, writable: true, enumerable: false, configurable: false}</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p><code class=\"language-text\">Object.defineProperty()</code> 와 차이</p>\n<ul>\n<li><code class=\"language-text\">true, false</code>를 반환</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const target = {};\n\nObject.defineProperty(target, &#39;point&#39;, {\n  value: 100,\n  configurable: false,\n});\n\nconst resutl = Reflect.defineProperty(target, &#39;point&#39;, {\n  value: 200,\n});\n\nconsole.log(result); // false\nconsole.log(Reflect.get(target, &#39;point&#39;)); // 100\n\n// 1. Object.defineProperty(...)는 처리에 성공하면 Object를 반환하고 실패하면 TypeError가 발생함, 따라서 try-catch를 사용해야 함\n// 2. Reflect.defineProperty(...)는 처리에 성공하면 true를, 실패하면 false를 반환함 try-catch를 사용하지 않아도 됨\n// 3. point 프로퍼티가 {configurable: false}이므로 에러가 발생하게 되면 false를 반환 함, 따라서 100이 200으로 바뀌지 않음</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<h2 id=\"2preventextensions\" style=\"position:relative;\"><a href=\"#2preventextensions\" aria-label=\"2preventextensions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.preventExtensions()</h2>\n<ul>\n<li><code class=\"language-text\">target</code> 에 프로퍼티 추가 금지를 설정함</li>\n<li>\n<p><code class=\"language-text\">Reflect.preventExtensions()</code> 형태</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const target = {};\nconsole.log(Reflect.preventExtensions(target)); // true\n\nconst result = Reflect.defineProperty(target, &#39;point&#39;, { value: 100 });\nconsole.log(result); // false\n\n// 1. console.log(Reflect.preventExtensions(target)); 처리를 성공하면 true, 실패하면 false를 반환\n// 2. const result = Reflect.defineProperty(target, &quot;point&quot;, { value: 100 }); 프로퍼티를 추가 할 수 없는데 추가하고 있음, 처리 실패이므로 false가 반환됨</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<h2 id=\"3-isextensible\" style=\"position:relative;\"><a href=\"#3-isextensible\" aria-label=\"3 isextensible permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. isExtensible()</h2>\n<ul>\n<li><code class=\"language-text\">target</code> 에 프로퍼티 추가 가능 여부를 반환함</li>\n<li>\n<p><code class=\"language-text\">Reflect.isExtensible()</code> 형태</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const target = { point: 100 };\nconsole.log(Reflect.isExtensible(target)); // true\n\nReflect.preventExtensions(target);\nconsole.log(Reflect.isExtensible(target)); // false</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>아래 함수를 실행한 상태이면 false를 반환함</p>\n<ul>\n<li><code class=\"language-text\">Object.seal()</code></li>\n<li><code class=\"language-text\">Object.freeze()</code></li>\n<li><code class=\"language-text\">Object.preventExtensions()</code></li>\n</ul>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","excerpt":"1. defineProperty()  에 프로퍼티를 추가, 변경함  형태  와 차이 를 반환 2.preventExtensions()  에 프로퍼티 추가 금지를 설정함  형태 3. isExtensible()  에 프로퍼티 추가 가능 여부를 반환함  형태 아래 함수를 실행한 상태이면 false를 반환함","frontmatter":{"date":"December 09, 2021","title":"Reflect - defineProperty(), preventExtensions(), isExtensible()","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-reflect-5/"}},"next":{"id":"cc2a0360-8ca1-5a04-9452-9a6fb19fc157","html":"<br>\n<h1 align=\"center\">\n  👋 has(), deleteProperty()\n</h1>\n<br>\n<h2 id=\"1-has\" style=\"position:relative;\"><a href=\"#1-has\" aria-label=\"1 has permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. has()</h2>\n<ul>\n<li><code class=\"language-text\">target</code> 에 <code class=\"language-text\">key</code> 이 존재 여부를 반환함</li>\n<li>\n<p><code class=\"language-text\">Reflect.has(target, key)</code> 형태로 작성</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const target = {\npoint: 100,\n};\n\nconsole.log(Reflect.has(target, &#39;point&#39;)); // true\n\n// 1. Reflect.has(target, &quot;point&quot;), target 오브젝트에 &quot;point&quot;가 프로퍼티 키로 존재하면 true를 반환하고 존재하지 않으면 false를 반환</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>상속받은 <code class=\"language-text\">prototype, __proto__</code>도 검색</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">function target() {}\n\nconsole.log(Reflect.has(target, &#39;hasOwnProperty&#39;)); // true\n\n// 1. Reflect.has(target, &quot;hasOwnProperty&quot;); target 함수에 hasOwnProperty()를 작성하지 않지만 true가 반환됨\n// 2. target 함수 구조를 보면 target.prototype에 hasOwnProperty()가 없지만 target.prototype.__proto__에 있기 때문</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>핸들러의 <code class=\"language-text\">has()</code> 트랩 호출</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const target = { point: 100 };\n\nconst handler = {\nhas(target, key) {\n  return Reflect.has(target, key);\n},\n};\n\nconst proxy = new Proxy(target, handler);\n\nconsole.log(&#39;point&#39; in proxy); // true\n\n// 1. console.log(&quot;point&quot; in proxy); has() 트랩이 호출됨\n// 2. 트랩: has(target, key){...}, target 오브젝트, &quot;point&quot;가 설정됨\n// 3. 트랩: return Reflect.has(target, key); return을 작성하지 않으면 target에 key가 존재하더라도 false가 반환됨</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<h2 id=\"2-deleteproperty\" style=\"position:relative;\"><a href=\"#2-deleteproperty\" aria-label=\"2 deleteproperty permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. deleteProperty()</h2>\n<ul>\n<li><code class=\"language-text\">target</code> 에서 <code class=\"language-text\">key</code>를 삭제 함</li>\n<li>\n<p><code class=\"language-text\">Reflect.deleteProperty()</code> 형태</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const target = { point: 100 };\n\nconsole.log(Reflect.deleteProperty(target, &#39;point&#39;)); // true\nconsole.log(Reflect.deleteProperty(target, &#39;point&#39;)); // true\n\n// 1. Reflect.deleteProperty(target, &quot;point&quot;); 삭제 처리를 성공하면 true를 반환하고 실패하면 flase를 반환함\n// 2. 두 번째의 Reflect.deleteProperty(target, &quot;point&quot;); 프로퍼티가 존재하지 않더라도 true를 반환함, 프로퍼티 삭제 여부가 아닌 삭제 처리 수행의 성공/실패가 기준임\n// 3. 이어서 false가 반환되는 경우를 살펴봄</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p><code class=\"language-text\">false</code> 반환</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const target = {};\nObject.definedProperty(target, &quot;point&quot;, {\n\tvalue: 100, configurable: false;\n});\n\nconsole.log(Reflect.deleteProperty(target, &quot;point&quot;));   // false\n\n// 1. (Reflect.deleteProperty(target, &quot;point&quot;), point가 {configurable: false}이므로 삭제 할 수 없기 때문에 false를 반환합니다.\n// 2. 이것이 삭제 처리 실패 입니다.</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>인덱스로 배열 엘리먼트 삭제</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const target = [1, 2, 3, 4];\nReflect.deleteProperty(target, 1);\n\nconsole.log(target); // [1, undefined, 3, 4]\n\n// 1. Reflect.deleteProperty(target, 1); target이 배열일 때 두 번째 파라미터 1은 배열의 인덱스 임\n// 2. 1번 인덱스 값인 2를 삭제하며 삭제한 인덱스의 엘리먼트에 undefined를 설정함, 3과 4를 앞으로 당기지 않음</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","frontmatter":{"date":"December 08, 2021","title":"has(), deleteProperty()","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-reflect-4/"}},"prev":{"id":"79fbe71b-5c10-56ac-ab4d-1316c99ce12d","html":"<br>\n<h1 align=\"center\">\n  👋 getPrototypeof(), setPrototypeof(), ownKeys(), getOwnPropertyDescriptor()\n</h1>\n<br>\n<h2 id=\"1-getprototypeof\" style=\"position:relative;\"><a href=\"#1-getprototypeof\" aria-label=\"1 getprototypeof permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. getPrototypeOf()</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">target.__proto__</code>를 반환 함</p>\n<ul>\n<li><code class=\"language-text\">target</code> 이 확장 불가라도 반환함</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">Relflect.getPrototypeOf()</code> 형태로 작성</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">let proto = Reflect.getPrototypeOf(Array);\nconsole.log(proto === Function.prototype);   // true\nconsole.log(proto === Array.prototype);      // flase\n\nconst list = [];\nproto = Reflect.gePrototypeOf(list);\nconsole.log((proto === Array.prototype);     // true\n\n// 1. let proto = Reflect.getPrototypeOf(Array); Array 오브젝트의 __proto__를 반환함\n// 2. Array.prototype에 Array 오브젝트의 메소드가 있으며 Array.__proto__에 Function.prototype의 메소드가 있음\n// 3. __proto__를 반환하므로 Function.prototype이 반환됨\n// 4. 사용하는 오브젝트의 prototype과 __proto__ 구조가 연상되어야 함\n// 5. proto === Function.prototype: true를 반환함\n// 6. proto === Array.prototype: false를 반환함\n// 7. const list = []; Array 인스턴스를 생성하면, list.__proto__에 Array.prototype의 메소드가 있음\n// 8. proto = Relfect.getPrototypeOf(this); proto에 list.__proto__가 할당됨\n// 9. console.log(proto === Array.prototype) proto와 Array.prototype이 같음</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p><code class=\"language-text\">prototype</code> 의 <code class=\"language-text\">__proto__</code> 를 반환</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const proto = Reflect.getPrototypeOf(Array.prototype);\n\nconsole.log(proto.map); // undefined\nconsole.log(proto.hasOwnProperty); // function hasOwnProperty() {[native code]}\n\n// 1. Reflect.getPrototypeOf(Array.prototype), Array.prototype.__proto__을 반환함, 여기에 빌트인 Object.prototype의 메소드가 있음\n// 2. console.log(proto.map) map()은 Array.prototype에 있으므로 undefined가 반환됨\n// 3. console.log(proto.hasOwnProperty) hasOwnProperty()는 Object.prototype의 메소드로 Array.prototype.__proto__에 있음</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<h2 id=\"2-setprototypeof\" style=\"position:relative;\"><a href=\"#2-setprototypeof\" aria-label=\"2 setprototypeof permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. setPrototypeof()</h2>\n<ul>\n<li><code class=\"language-text\">target.__proto__</code>에 <code class=\"language-text\">prototype</code>에 연결된 메소드를 설정함</li>\n<li>\n<p><code class=\"language-text\">Reflect.setPrototypeOf()</code> 형태로 작성</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">class Point {\ngetPoint() {\n  return 100;\n}\n}\n\nconst target = function () {};\ntarget.prototype.getPoint = function () {\nreturn 200;\n};\n\nReflect.setPrototypeOf(target, Point.prototype);\nconsole.log(target.getPoint()); // 100\n\n// 1. Reflect.setPrototypeOf(target, Point.prototype); targt의 __proto__에 Point.prototype에 연결된 메소드를 설정함\n// 2. console.log(target.getPoint()) target.__proto__의 getPoint()가 호출됨, target.prototype.getPoint()가 호출되지 않음</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<h2 id=\"3-ownkeys\" style=\"position:relative;\"><a href=\"#3-ownkeys\" aria-label=\"3 ownkeys permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. ownKeys()</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">target</code> 의 모든 프로퍼티 키를 배열로 반환함</p>\n<ul>\n<li><code class=\"language-text\">[[Configurable]]: false</code> 이거나 오브젝트가 확장 불가라도 반환함</li>\n<li>상속 받은 프로퍼티는 제외 함</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">Reflect.ownKeys()</code> 형태로 작성</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const sym = Symbol(&#39;심볼&#39;);\nconst target = {};\nObject.defineProperties(target, {\npoint: { value: 100, configurable: false },\n[sym]: { value: 200 },\n});\n\nReflect.preventExtensions(target);\nconsole.log(Reflect.ownKeys(target)); // [point, Symbol(심볼)]\n\n// 1. console.log(Reflect.ownKeys(target)) target 오브젝트가 확장 불가이지만 모든 프로퍼티 키를 배열로 반환함, Symbol도 반환함</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<h2 id=\"4-getownpropertydescriptor\" style=\"position:relative;\"><a href=\"#4-getownpropertydescriptor\" aria-label=\"4 getownpropertydescriptor permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. getOwnPropertyDescriptor()</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">target</code> 에서 프로퍼티 디스크립터를 반환함</p>\n<ul>\n<li>상속 받은 프로퍼티는 제외 함</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">Reflect.getOwnPropertyDescriptor()</code> 형태로 작성</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const target = {};\nObject.defineProperty(target, &#39;point&#39;, {\nvalue: 100,\nconfigurable: true,\n});\n\nconst desc = Reflect.getOwnPropertyDescriptor(target, &#39;point&#39;);\n\nconsole.log(desc); // {value: 100, writable: false, enumerable: false, configurable: treu}\n\n// 1. Reflect.getOwnPropertyDescriptor(target, &quot;point&quot;); target에 {value: 100, configurable: true}를 작성했지만 디폴트 속성도 반환함</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","frontmatter":{"date":"December 10, 2021","title":"Reflect - getPrototypeof(), setPrototypeof(), ownKeys(), getOwnPropertyDescriptor()","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-reflect-6/"}},"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":"zoomkoding/zoomkoding-gatsby-blog"}}}}},"pageContext":{"slug":"/study-js-es6-reflect-5/","nextSlug":"/study-js-es6-reflect-4/","prevSlug":"/study-js-es6-reflect-6/"}},"staticQueryHashes":["1073350324","2938748437"]}