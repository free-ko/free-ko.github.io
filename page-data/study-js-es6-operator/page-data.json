{"componentChunkName":"component---src-templates-blog-template-js","path":"/study-js-es6-operator/","result":{"data":{"cur":{"id":"da30f078-9791-5b6a-817a-228fe27e8cb1","html":"<br>\n<h1 align=\"center\">\n  👋 Trailing commas, 거듭 제곱, try-catch, 함수 작성 형태\n</h1>\n<br>\n<h2 id=\"1-trailing-commas\" style=\"position:relative;\"><a href=\"#1-trailing-commas\" aria-label=\"1 trailing commas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Trailing Commas</h2>\n<ul>\n<li>\n<p>배열 끝에 콤바 사용 가능</p>\n<ul>\n<li><code class=\"language-text\">]</code> 앞에 콤마 사용 가능</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">Object</code> 끝에 콤바 사용</p>\n<ul>\n<li><code class=\"language-text\">}</code> 앞에 콤마 사용 가능</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const obj = {\nbook: 100,\npoint: 200,\n};\n\nconst list = [100, 200];</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<h2 id=\"2-거듭-제곱\" style=\"position:relative;\"><a href=\"#2-%EA%B1%B0%EB%93%AD-%EC%A0%9C%EA%B3%B1\" aria-label=\"2 거듭 제곱 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 거듭 제곱</h2>\n<ul>\n<li>\n<p>좌결 합성</p>\n<ul>\n<li>왼쪽에서 오른쪽으로 계산</li>\n<li><code class=\"language-text\">1 + 2 + 3</code>은 <code class=\"language-text\">(1 + 2) + 3</code>으로 계산</li>\n</ul>\n</li>\n<li>\n<p>우결 합성(거듭제곱 계산 할 때만)</p>\n<ul>\n<li>오른쪽에서 왼쪽으로 계산</li>\n<li><code class=\"language-text\">A ** B ** C</code>에서 <code class=\"language-text\">A ** (B ** C)</code>로 계산</li>\n</ul>\n</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">console.log(2 ** 3);\nconsole.log(3 ** 2);\n\nconsole.log(2 ** (3 ** 2)); // 512\nconsole.log(2 ** (3 ** 2));\nconsole.log((2 ** 3) ** 2);</code>\n        </deckgo-highlight-code>\n<ol>\n<li><code class=\"language-text\">2 ** 3 ** 2</code>은 2의 3승의 2승이 아니라</li>\n<li>먼저 3의 2승을 구하며(9) 2의 9승으로 512가 됨</li>\n</ol>\n<br>\n<h2 id=\"2-try-catch\" style=\"position:relative;\"><a href=\"#2-try-catch\" aria-label=\"2 try catch permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Try-Catch</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">tyr-catch</code>의 <code class=\"language-text\">catch(error)</code>에서</p>\n<ul>\n<li><code class=\"language-text\">catch</code>처럼 (error)를 생략 가능</li>\n<li>ES2019</li>\n</ul>\n</li>\n<li><code class=\"language-text\">(error)</code>에서 메시지를 받아 사용하지 않을 때 편리 함</li>\n<li>타이핑 실수를 방지 할 수 있음</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const sports = &#39;스포츠&#39;;\n\ntry {\n  sports = &#39;축구&#39;;\n} catch (error) {\n  console.log(&#39;(error) 작성&#39;);\n}\n\n// catch만 작성\n\ntry {\n  sports = &#39;축구&#39;;\n} catch {\n  console.log(&#39;(error) 생략&#39;);\n}\n\n// (error) 작성\n// (error) 생략</code>\n        </deckgo-highlight-code>\n<br>\n<h2 id=\"3-함수-작성-형태\" style=\"position:relative;\"><a href=\"#3-%ED%95%A8%EC%88%98-%EC%9E%91%EC%84%B1-%ED%98%95%ED%83%9C\" aria-label=\"3 함수 작성 형태 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 함수 작성 형태</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">Object</code>에 함수를 작성할 때</p>\n<ul>\n<li><code class=\"language-text\">function</code> 키워드를 작성하지 않아도됨</li>\n</ul>\n</li>\n<li>\n<p>참고 : <code class=\"language-text\">Object</code>에 함수를 작성하는 이유</p>\n<ul>\n<li>함수에서 <code class=\"language-text\">this</code>로 <code class=\"language-text\">Object</code> 전체 참조</li>\n<li><code class=\"language-text\">new</code> 연산자로 인스턴스를 생성하지 않음, 메소드가 아닌 함수로 접근</li>\n<li><code class=\"language-text\">Object</code> 전체가 하나의 묶음 접근성, 가독성이 좋음</li>\n<li><code class=\"language-text\">sports</code>에 시맨틱을 부여할 수 있으며 다른 오브젝트와 이름과 프로퍼티 이름이 충돌되지 않음</li>\n</ul>\n</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const sports = {\n  point: 100,\n  // ES5 형태\n  getValue: function () {\n    return this.point;\n  },\n\n  // ES6 형태\n  getPoint() {\n    return this.point;\n  },\n};\n\nconsole.log(sports.getPoint());</code>\n        </deckgo-highlight-code>\n<ul>\n<li><code class=\"language-text\">getPoint(){}</code>처럼 <code class=\"language-text\">function</code> 키워드를 사용하지 않음</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","excerpt":"1. Trailing Commas 배열 끝에 콤바 사용 가능  앞에 콤마 사용 가능  끝에 콤바 사용  앞에 콤마 사용 가능 2. 거듭 제곱 좌결 합성 왼쪽에서 오른쪽으로 계산 은 으로 계산 우결 합성(거듭제곱 계산 할 때만) 오른쪽에서 왼쪽으로 계산 에서 로 계산 은 2의 3승의 2승이 아니라 먼저 3의 2승을 구하며(9) 2의 9승으로 512가 됨 2. Try-Catch 의 에서 처럼 (error)를 생략 가능 ES2019 에서 메시지를 받아 사용하지 않을 때 편리 함 타이핑 실수를 방지 할 수 있음 3. 함수 작성 형태 에 함수를 작성할 때  키워드를 작성하지 않아도됨 참고 : 에 함수를 작성하는 이유 함수에서 로  전체 참조  연산자로 인스턴스를 생성하지 않음, 메소드가 아닌 함수로 접근  전체가 하나의 묶음 접근성, 가독성이 좋음 에 시맨틱을 부여할 수 있으며 다른 오브젝트와 이름과 프로퍼티 이름이 충돌되지 않음 처럼  키워드를 사용하지 않음","frontmatter":{"date":"September 13, 2021","title":"Operator","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-operator/"}},"next":{"id":"94db4223-afa1-5805-8eb0-09ae8e13c3fc","html":"<br>\n<h1 align=\"center\">\n  👋 for-of, for-in for-of 차이, for-of Object\n</h1>\n<br>\n<h2 id=\"1-for-of\" style=\"position:relative;\"><a href=\"#1-for-of\" aria-label=\"1 for of permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. For-Of</h2>\n<ul>\n<li><code class=\"language-text\">Syntax: for (variable of iterable) { }</code></li>\n<li>\n<p>이터러블 오브젝트를 반복</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const list = [1, 2, 3];\n\nfor (let k = 0; k &lt; list.length; k++) {\nconsole.log(list[k]);\n}\n\nfor (let value of list) {\nconsole.log(value);\n}</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>Iterable</p>\n<ul>\n<li>이터러블 오브젝트를 작성</li>\n<li>표현식을 작성하면 평가 결과를 사용</li>\n</ul>\n</li>\n<li>\n<p>Variable</p>\n<ul>\n<li>변수 이름 작성</li>\n<li>이터러블 오브젝트를 반복할 때마다 Variable에 값이 할당됨</li>\n</ul>\n</li>\n<li>\n<p>배열</p>\n<ul>\n<li>배열을 반복하면서 엘리먼트를 하나씩 전개</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">for (let value of [1, 2, 3]) {\nconsole.log(value);\n}</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>String</p>\n<ul>\n<li>문자열을 반복하면서 문자를 하나씩 전개</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">for (let value of &#39;ABC&#39;) {\nconsole.log(value);\n}\n\n// A\n// B\n// C</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>NodeList</p>\n<ul>\n<li>NodeList를 반복하면서 엘리먼트를 하나씩 전개</li>\n</ul>\n<deckgo-highlight-code language=\"html\"  >\n          <code slot=\"code\">&lt;ul&gt;\n&lt;li class=&quot;show&quot;&gt;첫 번째&lt;/li&gt;\n&lt;li class=&quot;show&quot;&gt;두 번째&lt;/li&gt;\n&lt;li class=&quot;show&quot;&gt;세 번째&lt;/li&gt;\n&lt;/ul&gt;</code>\n        </deckgo-highlight-code>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const nodes = document.querySelectorAll(&#39;.show&#39;);\n\nfor (let node of nodes) {\nconsole.log(node.textContent);\n}\n\n// 첫 번째\n// 두 번째\n// 세 번째</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<h2 id=\"2-for-in-for-of의-차이\" style=\"position:relative;\"><a href=\"#2-for-in-for-of%EC%9D%98-%EC%B0%A8%EC%9D%B4\" aria-label=\"2 for in for of의 차이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. For-in, For-of의 차이</h2>\n<ul>\n<li>\n<p>for-in</p>\n<ul>\n<li>열거 가능한 프로퍼티가 대상</li>\n<li><code class=\"language-text\">{key: value}</code> 형태는 디폴트가 <code class=\"language-text\">enumerable: true</code></li>\n<li><code class=\"language-text\">Object.defineProperty()</code>는 디폴트가 <code class=\"language-text\">enumerable: false</code></li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const obj = {};\n\nObject.definedProperties(obj, {\nsports: {\n  enumerable: false,\n  value: &#39;스포츠&#39;,\n},\n\nbook: {\n  enumerable: true,\n  value: &#39;책&#39;,\n},\n});\n\nfor (let item in obj) {\nconsole.log(item + &#39;: &#39; + obj[item]);\n}\n\n// book: 책</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>for-of</p>\n<ul>\n<li>이터러블 오브젝트가 대상</li>\n<li>Object는 전개되지 않음</li>\n<li>Property의 프로퍼티도 전개되지 않음</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"3-for-of-object\" style=\"position:relative;\"><a href=\"#3-for-of-object\" aria-label=\"3 for of object permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. for-of, Object</h2>\n<ul>\n<li>Object는 이터러블 오브젝트가 아니므로 for-of 사용 불가</li>\n<li>\n<p>Object를 <code class=\"language-text\">for-of</code>로 전개할 수 있는 방법</p>\n<ul>\n<li><code class=\"language-text\">Object.keys()</code>로 프로퍼티 이름을 배열로 만들고</li>\n<li>만든 배열을 <code class=\"language-text\">for-of</code>로 전개</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const sports = {\nsoccer: &#39;축구&#39;,\nbaseball: &#39;야구&#39;,\n};\n\nconst keyList = Object.keys(sports);\n\nfor (let key of keyList) {\nconsole.log(key + &#39;: &#39; + sports[key]);\n}\n\n// soccer: 축구\n// baseball: 야구</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","frontmatter":{"date":"September 12, 2021","title":"for-of, for-in for-of 차이, for-of Object","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-for-in/"}},"prev":{"id":"b13e80d0-ae7d-5799-a10d-894abb6151ff","html":"<br>\n<h1 align=\"center\">\n  👋  Getter, Setter\n</h1>\n<br>\n<h2 id=\"1-getter\" style=\"position:relative;\"><a href=\"#1-getter\" aria-label=\"1 getter permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Getter</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">getter</code>로 선언된 함수를 자동으로 호출</p>\n<ul>\n<li>값을 반환하는 시맨틱을 갖고 있으므로 <code class=\"language-text\">getter</code> 함수에서 값을 반환해야 함</li>\n</ul>\n</li>\n<li>\n<p>ES5 형태</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">var book = {};\n\nObject.defineProperty(book, &#39;title&#39;, {\nget: function () {\n  return &#39;책&#39;;\n},\n});\n\nconsole.log(book.title);</code>\n        </deckgo-highlight-code>\n<ol>\n<li><code class=\"language-text\">book.title</code>을 실행하면 <code class=\"language-text\">title</code> 프로퍼티에서 <code class=\"language-text\">get</code> 속성의 존재를 체크 함</li>\n<li>있으면, <code class=\"language-text\">get()</code> 함수를 호출하며 <code class=\"language-text\">\"책\"</code>이 반환되어 출력 됨</li>\n<li><code class=\"language-text\">book.title.get()</code> 처럼 함수로 호출하면 에러가 발생함</li>\n<li>ES5의 <code class=\"language-text\">Descriptor</code>를 참조하세요</li>\n</ol>\n</li>\n<li>\n<p>ES6 형태</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const book = {\n\tpoint: 100,\n\tget getPint() {\n\t\treturn this.point;\n\t}\n};\n\nconsole.log(book.**getPoint**);   // 100</code>\n        </deckgo-highlight-code>\n<ol>\n<li><code class=\"language-text\">get getPoint(){}</code> 처럼 <code class=\"language-text\">getPoint()</code> 앞에 <code class=\"language-text\">get</code>을 작성하면 <code class=\"language-text\">getter</code>로 선언됨</li>\n<li><code class=\"language-text\">getPoint()</code> 함수가 자동으로 호출 됨</li>\n</ol>\n</li>\n<li>\n<p>ES6 장점</p>\n<ul>\n<li>ES5처럼 프로퍼티의 속성 구조가 아님</li>\n<li>작성 편리</li>\n<li>다수의 <code class=\"language-text\">getter</code> 사용 가능</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const book = {\n\tget getPoint() {\n\t\treturn &quot;포인트&quot;;\n\t}\n\n\tget getTitle() {\n\t\treturn &quot;제목&quot;;\n\t}\n}\n\nconsole.log(book.**getPoint**);   // 포인트\nconsole.log(book.**getTitle**);   // 제목</code>\n        </deckgo-highlight-code>\n<br>\n<h2 id=\"2-setter\" style=\"position:relative;\"><a href=\"#2-setter\" aria-label=\"2 setter permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Setter</h2>\n<ul>\n<li>프로퍼티에 값을 할당하면</li>\n<li><code class=\"language-text\">setter</code>로 선언된 함수 자동 호출</li>\n<li>값을 설정하는 시맨틱을 갖고 있으므로 <code class=\"language-text\">setter</code> 함수에서 값을 설정해야 함</li>\n</ul>\n<br>\n<ul>\n<li>ES5 형태</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">var book = { title: &#39;HTML&#39; };\n\nObject.defineProperty(book, &#39;change&#39;, {\n  set: function (param) {\n    this.title = param;\n  },\n});\n\nbook.change = &#39;JS&#39;;\n\nconsole.log(book); // {title: &quot;JS&quot;};</code>\n        </deckgo-highlight-code>\n<ol>\n<li><code class=\"language-text\">book.change = \"JS\"</code>를 실행하면 <code class=\"language-text\">change</code> 프로퍼티에 <code class=\"language-text\">set</code> 속성의 존재 여부를 체크</li>\n<li>있으면, <code class=\"language-text\">set()</code> 함수를 호출</li>\n<li><code class=\"language-text\">\"JS\"</code>를 파라미터 값으로 넘겨 줌</li>\n</ol>\n<br>\n<ul>\n<li>ES6 형태</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const bookt = {\n  point: 100,\n  set setPoint(param) {\n    this.point = param;\n  },\n};\n\nbook.setPoint = 200;\n\nconsole.log(book.point); // 200</code>\n        </deckgo-highlight-code>\n<ol>\n<li><code class=\"language-text\">setPoint(</code>) 앞에 <code class=\"language-text\">set</code>을 작성하면 <code class=\"language-text\">setter</code>로 선언됨</li>\n<li><code class=\"language-text\">book.setPoint = 200;</code> <code class=\"language-text\">setPoint</code>에 값을 할당하면 <code class=\"language-text\">setPoint()</code>가 자동으로 호출 됨</li>\n<li>파라미터 값으로 <code class=\"language-text\">200</code>을 넘겨줌</li>\n</ol>\n<br>\n<ul>\n<li>변숫값을 함수 이름으로 사용</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const name = &#39;setPoint&#39;;\nconst book = {\n  point: 100,\n  set [name](param) {\n    this.point = param;\n  },\n};\n\nbook[name] = 200;\n\nconsole.log(book.point); // 200</code>\n        </deckgo-highlight-code>\n<ol>\n<li><code class=\"language-text\">name</code> 변숫값인 “setPoint”가 함수 이름으로 사용됨</li>\n<li><code class=\"language-text\">getter</code>도 같은 방법으로 사용 할 수 있음</li>\n</ol>\n<br>\n<ul>\n<li>setter 삭제</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const name = &#39;setPoint&#39;;\nconst book = {\n  set [name](param) {\n    this.point = param;\n  },\n};\n\ndelete book[name];\n\nconsole.log(book[name]); // undefined</code>\n        </deckgo-highlight-code>\n<ul>\n<li><code class=\"language-text\">delete</code> 연산자로 <code class=\"language-text\">setter</code>를 삭제 할 수 있음</li>\n</ul>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","frontmatter":{"date":"September 14, 2021","title":"Getter, Setter","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-getter-setter/"}},"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":"zoomkoding/zoomkoding-gatsby-blog"}}}}},"pageContext":{"slug":"/study-js-es6-operator/","nextSlug":"/study-js-es6-for-in/","prevSlug":"/study-js-es6-getter-setter/"}},"staticQueryHashes":["1073350324","2938748437"]}