{"componentChunkName":"component---src-templates-blog-template-js","path":"/write-log-230422/","result":{"data":{"cur":{"id":"9f0b6340-a837-5f29-82be-3a32c13251a1","html":"<br>\n<h2 id=\"한-주-회고\" style=\"position:relative;\"><a href=\"#%ED%95%9C-%EC%A3%BC-%ED%9A%8C%EA%B3%A0\" aria-label=\"한 주 회고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>한 주 회고</h2>\n<p>새로운 도전을 위해 이력서를 정리했습니다.</p>\n<p>이 과정에서 제가 지금까지 개발한 경력을 정리하면서, 전주에서 서울로 올라와 프론트엔드 개발자로써 고군분투한 경험을 되돌아보았습니다.\n이 과정에서 많은 인연들을 만나고, 완전히 다른 환경에서 하나씩 배우고 성장했다는 사실을 깨달았습니다.</p>\n<p>새로운 환경에서 다양한 인연들과 함께 일하고, 외부 스터디를 통해 다른 개발자들과 직접 만나 개발에 대한 이야기를 나누었던 것은 저에게 잊지 못할 시간이었습니다.</p>\n<p>그리고 나는 개발 할 때 무엇을 가장 중요시 여기는지, 어떤 개발자가 되고 싶은지 등 본질적인 질문을 다시 한 번 고민해보는 시간을 가졌습니다.</p>\n<p>저는 개발 할 때, 문제를 차분히 분석하고 단계별로 해결해 나아가면서 스스로 성장하고 있다는 사실을 크게 중요시 여기고 이렇게 개발한 기능들이 많은 사람들에게 좋은 영향을 줬다는 것을 알았을 때\n엄청난 보람을 느꼈습니다.</p>\n<p>면접에서는 ‘왜 이러한 선택을 가지고 개발을 했는지’ 등과 같은 ‘왜’와 관련된 질문을 많이 받았습니다.\n이를 통해 문제의 핵심과 문제를 대하는 태도를 먼저 고민해야 한다는 것을 깨달았습니다.</p>\n<p>또한, 이력서를 작성할 때에는 어떤 문제를 만나 어떤 태도로 문제를 해결했는지, 이 문제를 통해 어떤 결과를 얻었는지를 명확하게 작성해야 한다는 것도 알게 되었습니다.</p>\n<p>마지막으로 ‘나는 어떤 사람과 일하고 싶은가? 이력서에 어떤 내용을 작성해야 함께 하고 싶은 개발자 인가?‘를 고민하며 이력서를 수정해야 한다는 사실도 깨달았습니다.</p>\n<p>앞으로 더 본질적인 질문에 확신있게 대답 할 수 있을 정도로 깊이가 있는 개발자가 되기 위해 노력해야 겠습니다. </p>\n<p>이번 한 주도 고생 했습니다.</p>\n<br>\n<h3 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h3>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%ED%95%9C-%EC%A3%BC-%ED%9A%8C%EA%B3%A0\">한 주 회고</a></p>\n<ul>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"한 주 회고 새로운 도전을 위해 이력서를 정리했습니다. 이 과정에서 제가 지금까지 개발한 경력을 정리하면서, 전주에서 서울로 올라와 프론트엔드 개발자로써 고군분투한 경험을 되돌아보았습니다.\n이 과정에서 많은 인연들을 만나고, 완전히 다른 환경에서 하나씩 배우고 성장했다는 사실을 깨달았습니다. 새로운 환경에서 다양한 인연들과 함께 일하고, 외부 스터디를 통해 다른 개발자들과 직접 만나 개발에 대한 이야기를 나누었던 것은 저에게 잊지 못할 시간이었습니다. 그리고 나는 개발 할 때 무엇을 가장 중요시 여기는지, 어떤 개발자가 되고 싶은지 등 본질적인 질문을 다시 한 번 고민해보는 시간을 가졌습니다. 저는 개발 할 때, 문제를 차분히 분석하고 단계별로 해결해 나아가면서 스스로 성장하고 있다는 사실을 크게 중요시 여기고 이렇게 개발한 기능들이 많은 사람들에게 좋은 영향을 줬다는 것을 알았을 때\n엄청난 보람을 느꼈습니다. 면접에서는 ‘왜 이러한 선택을 가지고 개발을 했는지’ 등과 같은 ‘왜’…","frontmatter":{"date":"April 22, 2023","title":"4월 4주 회고","categories":"Log","author":"Kay","emoji":"👋"},"fields":{"slug":"/write-log-230422/"}},"next":{"id":"a54fb33f-b8ad-5561-99b7-e0cfc0433294","html":"<h2 id=\"️-아이템-19-추론-가능한-타입을-사용해-장황한-코드-방지하기\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%EC%95%84%EC%9D%B4%ED%85%9C-19-%EC%B6%94%EB%A1%A0-%EA%B0%80%EB%8A%A5%ED%95%9C-%ED%83%80%EC%9E%85%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%B4-%EC%9E%A5%ED%99%A9%ED%95%9C-%EC%BD%94%EB%93%9C-%EB%B0%A9%EC%A7%80%ED%95%98%EA%B8%B0\" aria-label=\"️ 아이템 19 추론 가능한 타입을 사용해 장황한 코드 방지하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️ 아이템 19: 추론 가능한 타입을 사용해 장황한 코드 방지하기</h2>\n<ol>\n<li>코드의 모든 변수에 타입을 선언하는 것은 비 생산적</li>\n<li>\n<p>객체는 비구조화 할당문 사용 지향</p>\n<ul>\n<li>\n<p>모든 지역 변수의 타입이 추론되도록 해야 함</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">logProduct</span><span class=\"token punctuation\">(</span>product<span class=\"token operator\">:</span> Product<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> price <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> product<span class=\"token punctuation\">;</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>타입 구문을 생략하는 경우</p>\n<ul>\n<li>함수 내에서 생성된 지역 변수</li>\n<li>함수 파라미터에 기본 값이 있는 경우</li>\n</ul>\n</li>\n<li>\n<p>타입을 명시하면 좋은 경우</p>\n<ul>\n<li>객체 리터럴을 정의할 때, 잉여 속성 체크가 동작 함</li>\n<li>\n<p>함수의 반환 타입</p>\n<ul>\n<li>함수의 입출력 타입에 대해 더욱 명확하게 알 수 있음</li>\n<li>\n<p>명명된 타입을 사용할 수 있음</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Vector2D</span> <span class=\"token punctuation\">{</span>\n  x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 이 함수의 반환 타입은 Vector2D 와 호환되지 않음         </span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> Vector2D<span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> Vector2D<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> a<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> b<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> a<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> b<span class=\"token punctuation\">.</span>y <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>cf) eslint 규칙 중 <code class=\"language-text\">no-inferrable-types</code> 사용 가능</p>\n<ul>\n<li>작성된 모든 타입 구문이 정말로 필요한지 확인</li>\n</ul>\n</li>\n</ol>\n<br>\n<h2 id=\"️-아이템-20-다른-타입에는-다른-변수-사용하기\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%EC%95%84%EC%9D%B4%ED%85%9C-20-%EB%8B%A4%EB%A5%B8-%ED%83%80%EC%9E%85%EC%97%90%EB%8A%94-%EB%8B%A4%EB%A5%B8-%EB%B3%80%EC%88%98-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"️ 아이템 20 다른 타입에는 다른 변수 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️ 아이템 20: 다른 타입에는 다른 변수 사용하기</h2>\n<ol>\n<li>변수의 값은 바뀔 수 있지만, 그 타입은 바뀌지 않음</li>\n<li>\n<p>타입 확장하기 - 유니온 타입</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> id<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"12-34-56\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 개선 - let 대신 const 사용</span>\n<span class=\"token keyword\">const</span> newId <span class=\"token operator\">=</span> <span class=\"token string\">\"12-34-56\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> serial <span class=\"token operator\">=</span> <span class=\"token number\">123456</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ol>\n<br>\n<h2 id=\"️-아이템-21-타입-넓히기\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%EC%95%84%EC%9D%B4%ED%85%9C-21-%ED%83%80%EC%9E%85-%EB%84%93%ED%9E%88%EA%B8%B0\" aria-label=\"️ 아이템 21 타입 넓히기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️ 아이템 21: 타입 넓히기</h2>\n<ol>\n<li>TS가 작성된 코드를 체크하는 정적 분석 시점에, 변수는 <code class=\"language-text\">가능한</code> 값들의 집합인 타입을 가짐</li>\n<li>\n<p>TS의 <code class=\"language-text\">넓히기</code></p>\n<ul>\n<li>\n<p>지정된 단일 값을 가지고 할당 가능한 값들의 집합을 유추하는 것</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// 변수 x는 할당 시점에 넓히기가 동작해서 string으로 추론 됨</span>\n<span class=\"token comment\">// const 사용 지향</span>\n<span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token string\">\"x\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>넓히기를 제어하는 방법</p>\n<ul>\n<li><code class=\"language-text\">const</code>로 변수 선언</li>\n<li>\n<p>객체에서 TS의 넓히기 알고리즘은 각 요소를 let으로 할당된 것처럼 다룸</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> v <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nv<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 정상</span>\nv<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 🚨 '3' 형식은 'number' 형식에 할당할 수 없음</span>\nv<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 🚨 '{ x: number; }' 형식에 'y' 속성이 없음</span>\nv<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Kay\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 🚨 '{ x: number; }' 형식에 'name' 속성이 없음</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>TS의 기본 동작 재 정의</p>\n<ul>\n<li>\n<p>명시적 타입 구문 제공</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> v<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token operator\">|</span> <span class=\"token number\">3</span> <span class=\"token operator\">|</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  x<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 타입이 { x: 1 | 3 | 5; }</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>타입 체커에 추가적인 문맥 제공 ex) 함수의 매개변수로 값을 전달</li>\n<li>\n<p><code class=\"language-text\">const</code> 단언문 사용하기 (<code class=\"language-text\">as const</code>)</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> v1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n   x<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n   y<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token comment\">// 타입은 { x: number, y: number; }</span>\n\n<span class=\"token keyword\">const</span> v2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n   x<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n   y<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 타입은 { x: 1, y: number; }</span>\n\n<span class=\"token keyword\">const</span> v3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n   x<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n   y<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 타입은 { readonly x: 1; readonly y: 2; }</span></code></pre></div>\n</li>\n</ol>\n<br>\n<h2 id=\"️-아이템-22-타입-좁히기\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%EC%95%84%EC%9D%B4%ED%85%9C-22-%ED%83%80%EC%9E%85-%EC%A2%81%ED%9E%88%EA%B8%B0\" aria-label=\"️ 아이템 22 타입 좁히기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️ 아이템 22: 타입 좁히기</h2>\n<ol>\n<li>분기문에서 예외를 던지거나, 함수를 반환하여 블록의 나머지 부분에서 변수의 타입 좁히기</li>\n<li><code class=\"language-text\">instanceof</code> 으로 타입 좁히기</li>\n<li>\n<p>속성 체크로 타입 좁히기</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span> <span class=\"token punctuation\">{</span>\n a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token constant\">B</span></span> <span class=\"token punctuation\">{</span>\n b<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">pickAB</span><span class=\"token punctuation\">(</span>ab<span class=\"token operator\">:</span> <span class=\"token constant\">A</span> <span class=\"token operator\">|</span> <span class=\"token constant\">B</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span> <span class=\"token keyword\">in</span> ab<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   ab<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 타입이 A</span>\n <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n   ab<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 타입이 B</span>\n <span class=\"token punctuation\">}</span>\n ab<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 타입이 a | B</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li><code class=\"language-text\">Array.isArray</code> 등의 내장 함수로 타입 좁히기</li>\n<li>null 체크 시 <code class=\"language-text\">typeof null === 'object'</code>가 됨</li>\n<li>\n<p>명시적 ‘태그’ 붙이기 (tagged union)</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">handleEvent</span><span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> AppEvent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">case</span> <span class=\"token string\">\"download\"</span><span class=\"token operator\">:</span>\n     e<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">case</span> <span class=\"token string\">\"upload\"</span><span class=\"token operator\">:</span>\n     e<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>TS를 돕기 위해 커스텀 함수 도입(사용자 정의 타입 가드)</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">isInputElement</span><span class=\"token punctuation\">(</span>el<span class=\"token operator\">:</span> HTMLElement<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> el <span class=\"token keyword\">is</span> HTMLInputElement <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">return</span> <span class=\"token string\">\"value\"</span> <span class=\"token keyword\">in</span> el<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>배열에서 <code class=\"language-text\">undefined</code> 걸러내기</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">isDefined</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> x <span class=\"token keyword\">is</span> <span class=\"token constant\">T</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">return</span> x <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> members <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Janet\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Michael\"</span><span class=\"token punctuation\">]</span>\n <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>who<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> jackson5<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> n <span class=\"token operator\">===</span> who<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>isDefined<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 타입이 string[]</span></code></pre></div>\n</li>\n</ol>\n<br>\n<h2 id=\"️-아이템-23-한꺼번에-객체-생성하기\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%EC%95%84%EC%9D%B4%ED%85%9C-23-%ED%95%9C%EA%BA%BC%EB%B2%88%EC%97%90-%EA%B0%9D%EC%B2%B4-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0\" aria-label=\"️ 아이템 23 한꺼번에 객체 생성하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️ 아이템 23: 한꺼번에 객체 생성하기</h2>\n<ol>\n<li>TS의 타입은 일반적으로 변경되지 않음. 따라서 객체를 생성할 때는 속성을 하나씩 추가하기보다는 여러 속성을 포함해서 한꺼번에 생성해야 타입 추론에 유리</li>\n<li>\n<p>객체를 제 각각 나눠야 한다면, 타입 단언문(as)을 사용</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\n x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> pt <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> Point<span class=\"token punctuation\">;</span>\npt<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\npt<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 정상</span></code></pre></div>\n<ul>\n<li>객체 전개 연산자(…) 사용</li>\n</ul>\n</li>\n<li>\n<p>선택적 필드 방식으로 표현</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">addOptional</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> object<span class=\"token punctuation\">,</span> <span class=\"token constant\">U</span> <span class=\"token keyword\">extends</span> object<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>\n a<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span>\n b<span class=\"token operator\">:</span> <span class=\"token constant\">U</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token operator\">&amp;</span> Partial<span class=\"token operator\">&lt;</span><span class=\"token constant\">U</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>a<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>b <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> nameTitle <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"Kay\"</span><span class=\"token punctuation\">,</span> title<span class=\"token operator\">:</span> <span class=\"token string\">\"Dev\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> ko <span class=\"token operator\">=</span> <span class=\"token function\">addOptional</span><span class=\"token punctuation\">(</span>\n nameTitle<span class=\"token punctuation\">,</span>\n hasDates <span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span> start<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1589</span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1566</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ol>\n<br>\n<h2 id=\"️-아이템-24-일관성-있는-별칭-사용하기\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%EC%95%84%EC%9D%B4%ED%85%9C-24-%EC%9D%BC%EA%B4%80%EC%84%B1-%EC%9E%88%EB%8A%94-%EB%B3%84%EC%B9%AD-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"️ 아이템 24 일관성 있는 별칭 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️ 아이템 24: 일관성 있는 별칭 사용하기</h2>\n<ol>\n<li>별칭을 남발하면 제어 흐름을 분석하기 어려움</li>\n<li>\n<p>객체의 속성을 별칭에 할당하면 <code class=\"language-text\">strictNullChecks</code>에서 걸릴 위험이 있음</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Polygon</span> <span class=\"token punctuation\">{</span>\n exterior<span class=\"token operator\">:</span> Coordinate<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n holes<span class=\"token operator\">:</span> Coordinate<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n bbox<span class=\"token operator\">?</span><span class=\"token operator\">:</span> BoundingBox<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 속성 체크는 polygon.bbox의 타입을 정제했지만 box는 그렇지 않음</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">isPointInPolygon</span><span class=\"token punctuation\">(</span>polygon<span class=\"token operator\">:</span> Polygon<span class=\"token punctuation\">,</span> pt<span class=\"token operator\">:</span> Coordinate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n polygon<span class=\"token punctuation\">.</span>bbox<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 타입이 BoundingBox | undefined</span>\n <span class=\"token keyword\">const</span> box <span class=\"token operator\">=</span> polygon<span class=\"token punctuation\">.</span>bbox<span class=\"token punctuation\">;</span>\n box<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 타입이 BoundingBox | undefined</span>\n <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>polygon<span class=\"token punctuation\">.</span>bbox<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   polygon<span class=\"token punctuation\">.</span>bbox<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 타입이 BoundingBox</span>\n   box<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 타입이 BoundingBox | undefined</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 객체 비 구조화 할당 이용</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">isPointInPolygon</span><span class=\"token punctuation\">(</span>polygon<span class=\"token operator\">:</span> Polygon<span class=\"token punctuation\">,</span> pt<span class=\"token operator\">:</span> Coordinate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> bbox <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> polygon<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bbox<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> x<span class=\"token punctuation\">,</span> y <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> bbox<span class=\"token punctuation\">;</span>\n     <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 객체 비구조화 이용 시 주의사항</span>\n<span class=\"token comment\">// - 전체 bbox 속성이 아니라 x와 y가 선택적 속성일 경우 속성 체크가 더 필요 함</span>\n<span class=\"token comment\">// - bbox에는 선택적 속성이 적합했지만 holes에는 그렇지 않음</span>\n<span class=\"token comment\">// - 런타임에도 혼동을 야기할 가능성</span>\n<span class=\"token comment\">// - 속성보다 지역 변수 사용 </span></code></pre></div>\n</li>\n</ol>\n<br>\n<h2 id=\"️-아이템-25-비동기-코드에는-콜백-대신-async-함수-사용하기\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%EC%95%84%EC%9D%B4%ED%85%9C-25-%EB%B9%84%EB%8F%99%EA%B8%B0-%EC%BD%94%EB%93%9C%EC%97%90%EB%8A%94-%EC%BD%9C%EB%B0%B1-%EB%8C%80%EC%8B%A0-async-%ED%95%A8%EC%88%98-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"️ 아이템 25 비동기 코드에는 콜백 대신 async 함수 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️ 아이템 25: 비동기 코드에는 콜백 대신 async 함수 사용하기</h2>\n<ol>\n<li>\n<p>과거 JS의 비동기 콜백 지옥 발생</p>\n<ul>\n<li>ES2015는 Promise 개념을 도입</li>\n<li>ES2017에서는 <code class=\"language-text\">async/await</code> 도입\\</li>\n<li>TS 런타임에 관계없이 <code class=\"language-text\">async/await</code> 사용 가능</li>\n<li>TS의 프로미스 반환 타입은 <code class=\"language-text\">Promise&lt;Response></code></li>\n</ul>\n</li>\n<li>\n<p>일반적으로 프로미스보다는 <code class=\"language-text\">async/await</code>을 권장</p>\n<ul>\n<li>더 간결하고 직관적</li>\n<li>\n<p><code class=\"language-text\">async</code> 함수는 항상 프로미스를 반환하도록 강제 됨</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// function getNumber(): Promise&lt;number></span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>콜백이나 프로미스를 사용하면 실수로 반(half)동기 코드를 작성할 수 있지만, <code class=\"language-text\">async</code>를 사용하면 항상 비동기 코드를 작성할 수 있음</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> _cache<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>url<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">fetchWithCache</span><span class=\"token punctuation\">(</span>url<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>url <span class=\"token keyword\">in</span> _cache<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span> _cache<span class=\"token punctuation\">[</span>url<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">const</span> text <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n _cache<span class=\"token punctuation\">[</span>url<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> text<span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">return</span> text<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> requestStatus<span class=\"token operator\">:</span> <span class=\"token string\">\"loading\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"success\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span>userId<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n requestStatus <span class=\"token operator\">=</span> <span class=\"token string\">\"loading\"</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">const</span> profile <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetchWithCache</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/user/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>userId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n requestStatus <span class=\"token operator\">=</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">async</code> 함수에서 프로미스를 반환하면 반환 타입은 <code class=\"language-text\">Promise&lt;Promise&lt;T>></code>가 아닌 <code class=\"language-text\">Promise&lt;T></code>가 됨</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// function getJSON(url: string): Promise&lt;any></span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getJSON</span><span class=\"token punctuation\">(</span>url<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">const</span> jsonPromise <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 타입이 Promise&lt;any></span>\n <span class=\"token keyword\">return</span> jsonPromise<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ol>\n<br>\n<h2 id=\"️-아이템-26-타입-추론에-문맥이-어떻게-사용되는지-이해하기\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%EC%95%84%EC%9D%B4%ED%85%9C-26-%ED%83%80%EC%9E%85-%EC%B6%94%EB%A1%A0%EC%97%90-%EB%AC%B8%EB%A7%A5%EC%9D%B4-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%82%AC%EC%9A%A9%EB%90%98%EB%8A%94%EC%A7%80-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0\" aria-label=\"️ 아이템 26 타입 추론에 문맥이 어떻게 사용되는지 이해하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️ 아이템 26: 타입 추론에 문맥이 어떻게 사용되는지 이해하기</h2>\n<ol>\n<li>\n<p>문자열 타입을 문자열 리터럴 타입의 유니온으로 사용하는 경우</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Language</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"JavaScript\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"TypeScript\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"Python\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">setLanguage</span><span class=\"token punctuation\">(</span>language<span class=\"token operator\">:</span> Language<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">/* ... */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">setLanguage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"JavaScript\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 정상</span>\n\n<span class=\"token keyword\">let</span> language <span class=\"token operator\">=</span> <span class=\"token string\">\"JavaScript\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">setLanguage</span><span class=\"token punctuation\">(</span>language<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 🚨 에러 language는 string type</span></code></pre></div>\n<ul>\n<li>해결 방법</li>\n<li>\n<p>타입 선언에서 language의 가능한 값을 제한</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> language<span class=\"token operator\">:</span> Language <span class=\"token operator\">=</span> <span class=\"token string\">\"JavaScript\"</span><span class=\"token punctuation\">;</span>\n <span class=\"token function\">setLanguage</span><span class=\"token punctuation\">(</span>language<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 정상</span></code></pre></div>\n</li>\n<li>const를 사용하여 타입 체커에게 변경할 수 없다고 할 수 있음</li>\n</ul>\n</li>\n<li>\n<p>튜플 사용 시 주의점</p>\n<ul>\n<li>\n<p>위와 마찬가지로 값을 분리 당함</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">panTo</span><span class=\"token punctuation\">(</span>where<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* ... */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">panTo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 정상</span>\n\n<span class=\"token keyword\">const</span> loc <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 🚨 'number[]' 형식의 인수는 '[number, number]' 형식의 매개변수에 할당될 수 없음</span>\n<span class=\"token function\">panTo</span><span class=\"token punctuation\">(</span>loc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>해결 방법</p>\n<ul>\n<li>\n<p>타입 선언 제공</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> loc<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">panTo</span><span class=\"token punctuation\">(</span>loc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 정상</span></code></pre></div>\n</li>\n<li>\n<p>상수 문맥 제공</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> loc <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 🚨 에러: 'readonly [10, 20]' 형식은 '[number, number]'에 할당할 수 없음</span>\n<span class=\"token function\">panTo</span><span class=\"token punctuation\">(</span>loc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>최선의 해결책</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">panTo</span><span class=\"token punctuation\">(</span>where<span class=\"token operator\">:</span> <span class=\"token keyword\">readonly</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* ... */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> loc <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">panTo</span><span class=\"token punctuation\">(</span>loc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 정상</span></code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>객체 사용 시 주의점</p>\n<ul>\n<li>문자열 리터럴이나 튜플을 포함하는 큰 객체에서 상수를 뽑아낼 때, 프로퍼티 타입이 string으로 추론되는 경우 타입 단언이나 상수 단언을 사용할 수 있음</li>\n</ul>\n</li>\n<li>\n<p>콜백 사용 시 주의점</p>\n<ul>\n<li>콜백을 다른 함수로 전달할 때, TS는 콜백의 매개변수 타입을 추론하기 위해 문맥을 사용. 이 경우 넘겨주는 함수의 매개변수에 타입 구문을 추가해서 해결할 수 있음.</li>\n</ul>\n</li>\n</ol>\n<br>\n<h2 id=\"️-아이템-27-함수형-기법과-라이브러리로-타입-흐름-유지하기\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%EC%95%84%EC%9D%B4%ED%85%9C-27-%ED%95%A8%EC%88%98%ED%98%95-%EA%B8%B0%EB%B2%95%EA%B3%BC-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC%EB%A1%9C-%ED%83%80%EC%9E%85-%ED%9D%90%EB%A6%84-%EC%9C%A0%EC%A7%80%ED%95%98%EA%B8%B0\" aria-label=\"️ 아이템 27 함수형 기법과 라이브러리로 타입 흐름 유지하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️ 아이템 27: 함수형 기법과 라이브러리로 타입 흐름 유지하기</h2>\n<ol>\n<li>\n<p>함수형 프로그래밍을 지원하는 최근의 라이브러리</p>\n<ul>\n<li>ex) map, flatMap, filter, reduce 등</li>\n<li>타입 정보가 그대로 유지되면서 타입 흐름(flow)이 계속 전달 됨</li>\n</ul>\n</li>\n<li>\n<p>lodash의 Dictionary 타입</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// 타입이 _.Dictionary&lt;string>[]</span>\n<span class=\"token keyword\">const</span> rows <span class=\"token operator\">=</span> rawRows\n  <span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>rowStr<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> _<span class=\"token punctuation\">.</span><span class=\"token function\">zipObject</span><span class=\"token punctuation\">(</span>headers<span class=\"token punctuation\">,</span> rowStr<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">Dictionary&lt;string></code>은 <code class=\"language-text\">{[key: string]: string}</code> 또는 <code class=\"language-text\">Record&lt;string, string></code>과 동일</li>\n</ul>\n</li>\n<li>\n<p>flat 메서드</p>\n<ul>\n<li>\n<p><code class=\"language-text\">T[][] => T[]</code></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">declare</span> <span class=\"token keyword\">const</span> rosters<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>team<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> BasketBallPlayer<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 타입이 BasketBallPlayer[]   </span>\n<span class=\"token keyword\">const</span> allPlayers <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span>rosters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">flat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>TS의 많은 부분이 JS 라이브러리의 동작을 정확히 모델링하기 위해서 개발되었으므로, 라이브러리 사용 시 타입 정보가 잘 유지되는 점을 활용</li>\n</ol>\n<br>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<ul>\n<li><a href=\"https://github.com/pagers-org/Effective-TypeScript\">이펙티브 타입스크립트 Study</a></li>\n<li><a href=\"http://www.yes24.com/Product/Goods/102124327\">이펙티브 타입스크립트 책</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EF%B8%8F-%EC%95%84%EC%9D%B4%ED%85%9C-19-%EC%B6%94%EB%A1%A0-%EA%B0%80%EB%8A%A5%ED%95%9C-%ED%83%80%EC%9E%85%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%B4-%EC%9E%A5%ED%99%A9%ED%95%9C-%EC%BD%94%EB%93%9C-%EB%B0%A9%EC%A7%80%ED%95%98%EA%B8%B0\">✏️ 아이템 19: 추론 가능한 타입을 사용해 장황한 코드 방지하기</a></li>\n<li><a href=\"#%EF%B8%8F-%EC%95%84%EC%9D%B4%ED%85%9C-20-%EB%8B%A4%EB%A5%B8-%ED%83%80%EC%9E%85%EC%97%90%EB%8A%94-%EB%8B%A4%EB%A5%B8-%EB%B3%80%EC%88%98-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\">✏️ 아이템 20: 다른 타입에는 다른 변수 사용하기</a></li>\n<li><a href=\"#%EF%B8%8F-%EC%95%84%EC%9D%B4%ED%85%9C-21-%ED%83%80%EC%9E%85-%EB%84%93%ED%9E%88%EA%B8%B0\">✏️ 아이템 21: 타입 넓히기</a></li>\n<li><a href=\"#%EF%B8%8F-%EC%95%84%EC%9D%B4%ED%85%9C-22-%ED%83%80%EC%9E%85-%EC%A2%81%ED%9E%88%EA%B8%B0\">✏️ 아이템 22: 타입 좁히기</a></li>\n<li><a href=\"#%EF%B8%8F-%EC%95%84%EC%9D%B4%ED%85%9C-23-%ED%95%9C%EA%BA%BC%EB%B2%88%EC%97%90-%EA%B0%9D%EC%B2%B4-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0\">✏️ 아이템 23: 한꺼번에 객체 생성하기</a></li>\n<li><a href=\"#%EF%B8%8F-%EC%95%84%EC%9D%B4%ED%85%9C-24-%EC%9D%BC%EA%B4%80%EC%84%B1-%EC%9E%88%EB%8A%94-%EB%B3%84%EC%B9%AD-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\">✏️ 아이템 24: 일관성 있는 별칭 사용하기</a></li>\n<li><a href=\"#%EF%B8%8F-%EC%95%84%EC%9D%B4%ED%85%9C-25-%EB%B9%84%EB%8F%99%EA%B8%B0-%EC%BD%94%EB%93%9C%EC%97%90%EB%8A%94-%EC%BD%9C%EB%B0%B1-%EB%8C%80%EC%8B%A0-async-%ED%95%A8%EC%88%98-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\">✏️ 아이템 25: 비동기 코드에는 콜백 대신 async 함수 사용하기</a></li>\n<li><a href=\"#%EF%B8%8F-%EC%95%84%EC%9D%B4%ED%85%9C-26-%ED%83%80%EC%9E%85-%EC%B6%94%EB%A1%A0%EC%97%90-%EB%AC%B8%EB%A7%A5%EC%9D%B4-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%82%AC%EC%9A%A9%EB%90%98%EB%8A%94%EC%A7%80-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0\">✏️ 아이템 26: 타입 추론에 문맥이 어떻게 사용되는지 이해하기</a></li>\n<li><a href=\"#%EF%B8%8F-%EC%95%84%EC%9D%B4%ED%85%9C-27-%ED%95%A8%EC%88%98%ED%98%95-%EA%B8%B0%EB%B2%95%EA%B3%BC-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC%EB%A1%9C-%ED%83%80%EC%9E%85-%ED%9D%90%EB%A6%84-%EC%9C%A0%EC%A7%80%ED%95%98%EA%B8%B0\">✏️ 아이템 27: 함수형 기법과 라이브러리로 타입 흐름 유지하기</a></li>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>\n</div>","frontmatter":{"date":"April 19, 2023","title":"Effective TypeScript 3장","categories":"Study","author":"Kay","emoji":"👋"},"fields":{"slug":"/effective-typescript-3/"}},"prev":{"id":"e33e4cd7-054f-53c4-9de3-499936a696d7","html":"<h2 id=\"️-아이템-28-유효한-상태만-표현하는-타입을-지향하기\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%EC%95%84%EC%9D%B4%ED%85%9C-28-%EC%9C%A0%ED%9A%A8%ED%95%9C-%EC%83%81%ED%83%9C%EB%A7%8C-%ED%91%9C%ED%98%84%ED%95%98%EB%8A%94-%ED%83%80%EC%9E%85%EC%9D%84-%EC%A7%80%ED%96%A5%ED%95%98%EA%B8%B0\" aria-label=\"️ 아이템 28 유효한 상태만 표현하는 타입을 지향하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️ 아이템 28: 유효한 상태만 표현하는 타입을 지향하기</h2>\n<ol>\n<li>\n<p>애플리케이션의 상태 표현하기</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">RequestPending</span> <span class=\"token punctuation\">{</span>\n state<span class=\"token operator\">:</span> <span class=\"token string\">\"pending\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">RequestError</span> <span class=\"token punctuation\">{</span>\n state<span class=\"token operator\">:</span> <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">;</span>\n error<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">RequestSuccess</span> <span class=\"token punctuation\">{</span>\n state<span class=\"token operator\">:</span> <span class=\"token string\">\"ok\"</span><span class=\"token punctuation\">;</span>\n pageText<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">RequestState</span> <span class=\"token operator\">=</span> RequestPending <span class=\"token operator\">|</span> RequestError <span class=\"token operator\">|</span> RequestSuccess<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">State</span> <span class=\"token punctuation\">{</span>\n currentPage<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n requests<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>page<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> RequestState <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>모든 상황 고려하기</li>\n<li>어떤 값들을 포함하고 어떤 값들을 제외할지 신중하기 생각하기</li>\n</ul>\n</li>\n</ol>\n<br>\n<h2 id=\"️-아이템-29-사용할-때는-너그럽게-생성할-때는-엄격하게\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%EC%95%84%EC%9D%B4%ED%85%9C-29-%EC%82%AC%EC%9A%A9%ED%95%A0-%EB%95%8C%EB%8A%94-%EB%84%88%EA%B7%B8%EB%9F%BD%EA%B2%8C-%EC%83%9D%EC%84%B1%ED%95%A0-%EB%95%8C%EB%8A%94-%EC%97%84%EA%B2%A9%ED%95%98%EA%B2%8C\" aria-label=\"️ 아이템 29 사용할 때는 너그럽게 생성할 때는 엄격하게 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️ 아이템 29: 사용할 때는 너그럽게, 생성할 때는 엄격하게</h2>\n<ol>\n<li>\n<p>TCP 구현체의 견고성 원칙 또는 포스텔의 법칙(함수의 시그니처에도 적용가능)</p>\n<ul>\n<li>함수의 매개변수는 타입의 범위가 넓어도 되지만, 결과를 반환할 때는 일반적으로 타입의 범위가 더 구체적이어야 함</li>\n</ul>\n</li>\n<li>\n<p>예시 </p>\n<ul>\n<li>\n<p>👎 Bad Case</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> <span class=\"token function\">setCamera</span><span class=\"token punctuation\">(</span>camera<span class=\"token operator\">:</span> CameraOptions<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> <span class=\"token function\">viewportForBounds</span><span class=\"token punctuation\">(</span>bounds<span class=\"token operator\">:</span> LngLatBounds<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> CameraOptions<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">CameraOptions</span> <span class=\"token punctuation\">{</span>\n  center<span class=\"token operator\">?</span><span class=\"token operator\">:</span> LngLat<span class=\"token punctuation\">;</span>\n  zoom<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  bearing<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  pitch<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">LngLat</span> <span class=\"token operator\">=</span>\n  <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span> lng<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> lat<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span> lon<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> lat<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">|</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>👍 Good Case</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">LngLat</span> <span class=\"token punctuation\">{</span>\n  lng<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  lat<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">LngLatLike</span> <span class=\"token operator\">=</span> LngLat <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span> lon<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> lat<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Camera</span> <span class=\"token punctuation\">{</span>\n  center<span class=\"token operator\">:</span> LngLat<span class=\"token punctuation\">;</span>\n  zoom<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  bearing<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  pitch<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">CameraOptions</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Omit<span class=\"token operator\">&lt;</span>Partial<span class=\"token operator\">&lt;</span>Camera<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"center\"</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n  center<span class=\"token operator\">?</span><span class=\"token operator\">:</span> LngLatLike<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">LngLatBounds</span> <span class=\"token operator\">=</span>\n  <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span> northeast<span class=\"token operator\">:</span> LngLatLike<span class=\"token punctuation\">;</span> southwest<span class=\"token operator\">:</span> LngLatLike <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">|</span> <span class=\"token punctuation\">[</span>LngLatLike<span class=\"token punctuation\">,</span> LngLatLike<span class=\"token punctuation\">]</span>\n  <span class=\"token operator\">|</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> <span class=\"token function\">setCamera</span><span class=\"token punctuation\">(</span>camera<span class=\"token operator\">:</span> CameraOptions<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> <span class=\"token function\">viewportForBounds</span><span class=\"token punctuation\">(</span>bounds<span class=\"token operator\">:</span> LngLatBounds<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Camera<span class=\"token punctuation\">;</span></code></pre></div>\n<p>→ 매개변수와 반환 타입의 재사용을 위해서 기본 형태(반환 타입)와 느슨한 형태(매개변수 타입)를 지향</p>\n</li>\n</ul>\n</li>\n</ol>\n<br>\n<h2 id=\"️-아이템-30-문서에-타입-정보를-쓰지-않기\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%EC%95%84%EC%9D%B4%ED%85%9C-30-%EB%AC%B8%EC%84%9C%EC%97%90-%ED%83%80%EC%9E%85-%EC%A0%95%EB%B3%B4%EB%A5%BC-%EC%93%B0%EC%A7%80-%EC%95%8A%EA%B8%B0\" aria-label=\"️ 아이템 30 문서에 타입 정보를 쓰지 않기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️ 아이템 30: 문서에 타입 정보를 쓰지 않기</h2>\n<ol>\n<li>타입 구문은 TS 타입 체커가 타입 정보를 동기화하도록 강제</li>\n<li>함수의 입력과 출력의 타입을 코드로 표현하는 것이 주석보다 더 나음</li>\n<li>값을 변경하지 않는다고 설명하는 주석 대신, readonly 사용</li>\n<li>변수명에 타입 정보 넣지 않기 (단위가 있는 숫자들은 제외)</li>\n</ol>\n<br>\n<h2 id=\"️-아이템-31-타입-주변에-null-값-배치하기\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%EC%95%84%EC%9D%B4%ED%85%9C-31-%ED%83%80%EC%9E%85-%EC%A3%BC%EB%B3%80%EC%97%90-null-%EA%B0%92-%EB%B0%B0%EC%B9%98%ED%95%98%EA%B8%B0\" aria-label=\"️ 아이템 31 타입 주변에 null 값 배치하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️ 아이템 31: 타입 주변에 null 값 배치하기</h2>\n<ol>\n<li>\n<p>문제가 있는 예제</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// 최솟값이나 최댓값이 0인 경우</span>\n<span class=\"token comment\">// nums 배열이 비어있는 경우</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">extent</span><span class=\"token punctuation\">(</span>nums<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">let</span> min<span class=\"token punctuation\">,</span> max<span class=\"token punctuation\">;</span>\n \n <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> num <span class=\"token keyword\">of</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>min<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     min <span class=\"token operator\">=</span> num<span class=\"token punctuation\">;</span>\n     max <span class=\"token operator\">=</span> num<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n     min <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>min<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     max <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span>\n \n <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>min<span class=\"token punctuation\">,</span> max<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>\n<p>min과 max를 한 객체 안에 넣고 null이거나 null이 아니게 하기</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">extent</span><span class=\"token punctuation\">(</span>nums<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> result<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> num <span class=\"token keyword\">of</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>min<span class=\"token punctuation\">,</span> max<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>null과 null이 아닌 값을 섞어서 클래스 만들기</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">userPosts</span> <span class=\"token punctuation\">{</span>\n  user<span class=\"token operator\">:</span> UserInfo<span class=\"token punctuation\">;</span>\n  posts<span class=\"token operator\">:</span> Post<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>user<span class=\"token operator\">:</span> UserInfo<span class=\"token punctuation\">,</span> posts<span class=\"token operator\">:</span> Post<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>user <span class=\"token operator\">=</span> user<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>posts <span class=\"token operator\">=</span> posts<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">async</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span>userId<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>UserPosts<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>user<span class=\"token punctuation\">,</span> posts<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n      <span class=\"token function\">fetchUser</span><span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function\">fetchPostsForUser</span><span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserPosts</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span> posts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getUserName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> </code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>정리</p>\n<ul>\n<li>값들 중 null 여부에 따라, 다른 값이 암시적으로 null이 될 수있는 가능성을 두고 설계하면 안 됨</li>\n<li>API 작성 시에는 반환 타입을 큰 객체로 만들고, 반환 타입 전체가 null 이거나 null이 아니게 만들어야 함</li>\n<li>클래스를 만들 때는 필요한 모든 값이 준비되었을 때, 생성하여 null이 존재하지 않도록 하는 것이 좋음</li>\n</ul>\n</li>\n</ol>\n<br>\n<h2 id=\"️-아이템-32-유니온의-인터페이스보다는-인터페이스의-유니온을-사용하기\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%EC%95%84%EC%9D%B4%ED%85%9C-32-%EC%9C%A0%EB%8B%88%EC%98%A8%EC%9D%98-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EB%B3%B4%EB%8B%A4%EB%8A%94-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EC%9D%98-%EC%9C%A0%EB%8B%88%EC%98%A8%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"️ 아이템 32 유니온의 인터페이스보다는 인터페이스의 유니온을 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️ 아이템 32: 유니온의 인터페이스보다는 인터페이스의 유니온을 사용하기</h2>\n<ol>\n<li>\n<p>문제가 있는 예제</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Layer</span> <span class=\"token punctuation\">{</span>\n layout<span class=\"token operator\">:</span> FillLayout <span class=\"token operator\">|</span> LineLayout <span class=\"token operator\">|</span> PointLayout<span class=\"token punctuation\">;</span>\n paint<span class=\"token operator\">:</span> FillPaint <span class=\"token operator\">|</span> LinePaint <span class=\"token operator\">|</span> PointPaint<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>→ 각각 타입의 계층을 분리된 인터페이스로 나누기</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">FillLayer</span> <span class=\"token punctuation\">{</span>\n type<span class=\"token operator\">:</span> <span class=\"token string\">\"fill\"</span><span class=\"token punctuation\">;</span>\n layout<span class=\"token operator\">:</span> FillLayout<span class=\"token punctuation\">;</span>\n paint<span class=\"token operator\">:</span> FillPaint<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">LineLayer</span> <span class=\"token punctuation\">{</span>\n type<span class=\"token operator\">:</span> <span class=\"token string\">\"line\"</span><span class=\"token punctuation\">;</span>\n layout<span class=\"token operator\">:</span> LineLayout<span class=\"token punctuation\">;</span>\n paint<span class=\"token operator\">:</span> LinePaint<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">PointLayer</span> <span class=\"token punctuation\">{</span>\n type<span class=\"token operator\">:</span> <span class=\"token string\">\"point\"</span><span class=\"token punctuation\">;</span>\n layout<span class=\"token operator\">:</span> PointLayout<span class=\"token punctuation\">;</span>\n paint<span class=\"token operator\">:</span> PointPaint<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Layer</span> <span class=\"token operator\">=</span> FillLayer <span class=\"token operator\">|</span> LineLayer <span class=\"token operator\">|</span> PointLayer<span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>태그드 유니온 사용(TS는 태그를 참고하여 범위를 좁힐 수 있음)</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">drawLayer</span><span class=\"token punctuation\">(</span>layer<span class=\"token operator\">:</span> Layer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>layer<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'fill'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> paint <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> layer<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 타입이 FillPaint</span>\n   <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> layout <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> layer<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 타입이 FillLayout</span>\n <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token comment\">// ...</span></code></pre></div>\n</li>\n<li>\n<p>여러 개의 선택적 필드가 동시에 값이 있거나 동시에 undefined인 경우, 두 개의 속성을 하나의 객체로 모음</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n <span class=\"token comment\">// birthPlace와 birthDate를 하나로 모음</span>\n birth<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n   place<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n   date<span class=\"token operator\">:</span> Date<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ol>\n<br>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<ul>\n<li><a href=\"https://github.com/pagers-org/Effective-TypeScript\">이펙티브 타입스크립트 Study</a></li>\n<li><a href=\"http://www.yes24.com/Product/Goods/102124327\">이펙티브 타입스크립트 책</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EF%B8%8F-%EC%95%84%EC%9D%B4%ED%85%9C-28-%EC%9C%A0%ED%9A%A8%ED%95%9C-%EC%83%81%ED%83%9C%EB%A7%8C-%ED%91%9C%ED%98%84%ED%95%98%EB%8A%94-%ED%83%80%EC%9E%85%EC%9D%84-%EC%A7%80%ED%96%A5%ED%95%98%EA%B8%B0\">✏️ 아이템 28: 유효한 상태만 표현하는 타입을 지향하기</a></li>\n<li><a href=\"#%EF%B8%8F-%EC%95%84%EC%9D%B4%ED%85%9C-29-%EC%82%AC%EC%9A%A9%ED%95%A0-%EB%95%8C%EB%8A%94-%EB%84%88%EA%B7%B8%EB%9F%BD%EA%B2%8C-%EC%83%9D%EC%84%B1%ED%95%A0-%EB%95%8C%EB%8A%94-%EC%97%84%EA%B2%A9%ED%95%98%EA%B2%8C\">✏️ 아이템 29: 사용할 때는 너그럽게, 생성할 때는 엄격하게</a></li>\n<li><a href=\"#%EF%B8%8F-%EC%95%84%EC%9D%B4%ED%85%9C-30-%EB%AC%B8%EC%84%9C%EC%97%90-%ED%83%80%EC%9E%85-%EC%A0%95%EB%B3%B4%EB%A5%BC-%EC%93%B0%EC%A7%80-%EC%95%8A%EA%B8%B0\">✏️ 아이템 30: 문서에 타입 정보를 쓰지 않기</a></li>\n<li><a href=\"#%EF%B8%8F-%EC%95%84%EC%9D%B4%ED%85%9C-31-%ED%83%80%EC%9E%85-%EC%A3%BC%EB%B3%80%EC%97%90-null-%EA%B0%92-%EB%B0%B0%EC%B9%98%ED%95%98%EA%B8%B0\">✏️ 아이템 31: 타입 주변에 null 값 배치하기</a></li>\n<li><a href=\"#%EF%B8%8F-%EC%95%84%EC%9D%B4%ED%85%9C-32-%EC%9C%A0%EB%8B%88%EC%98%A8%EC%9D%98-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EB%B3%B4%EB%8B%A4%EB%8A%94-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EC%9D%98-%EC%9C%A0%EB%8B%88%EC%98%A8%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\">✏️ 아이템 32: 유니온의 인터페이스보다는 인터페이스의 유니온을 사용하기</a></li>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>\n</div>","frontmatter":{"date":"April 23, 2023","title":"Effective TypeScript 4장","categories":"Study","author":"Kay","emoji":"👋"},"fields":{"slug":"/effective-typescript-4/"}},"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":"zoomkoding/zoomkoding-gatsby-blog"}}}}},"pageContext":{"slug":"/write-log-230422/","nextSlug":"/effective-typescript-3/","prevSlug":"/effective-typescript-4/"}},"staticQueryHashes":["1073350324","2938748437"]}