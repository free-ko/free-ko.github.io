{"componentChunkName":"component---src-templates-blog-template-js","path":"/study-js-es6-arrowFunction-1/","result":{"data":{"cur":{"id":"1b3c3166-a194-546a-af61-3e2976282185","html":"<br>\n<h1 align=\"center\">\n  👋 Arrow Function, 함수 블록 사용, 파라미터 사용\n</h1>\n<br>\n<h2 id=\"1-arrow-function\" style=\"position:relative;\"><a href=\"#1-arrow-function\" aria-label=\"1 arrow function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1) Arrow Function</h2>\n<ul>\n<li><code class=\"language-text\">Arrow</code>의 사전적 의미 : 화살, 화살표</li>\n<li>\n<p>코드 형태</p>\n<ul>\n<li><code class=\"language-text\">(param) => {함수 코드}</code></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">one<span class=\"token punctuation\">,</span> two</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> one <span class=\"token operator\">+</span> two<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">total</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">one<span class=\"token punctuation\">,</span> two</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> one <span class=\"token operator\">+</span> two<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">total</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span></code></pre></div>\n<ol>\n<li><code class=\"language-text\">function</code> 키워드 대신에 화살표 <code class=\"language-text\">=></code> 사용</li>\n<li><code class=\"language-text\">=></code>표 양쪽에 공백 작성 가능</li>\n</ol>\n</li>\n<li><code class=\"language-text\">function() {}</code>의 축약 형태이지만, 고려할 사항도 있음(<code class=\"language-text\">this</code> 참조가 다름)</li>\n</ul>\n<br>\n<h2 id=\"2-함수-블록-사용\" style=\"position:relative;\"><a href=\"#2-%ED%95%A8%EC%88%98-%EB%B8%94%EB%A1%9D-%EC%82%AC%EC%9A%A9\" aria-label=\"2 함수 블록 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2) 함수 블록 사용</h2>\n<ul>\n<li>\n<p>함수 블록과 <code class=\"language-text\">return</code> 작성생략</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">total</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">one<span class=\"token punctuation\">,</span> two</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> one <span class=\"token operator\">+</span> two<span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">total</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span></code></pre></div>\n<ol>\n<li>함수 블록<code class=\"language-text\">{}</code>과 <code class=\"language-text\">return</code>을 생략한 형태로 <code class=\"language-text\">{ return one + two }</code>와 같음</li>\n<li><code class=\"language-text\">=></code> 앞에서 줄을 분리하면 <code class=\"language-text\">SyntaxError</code></li>\n<li><code class=\"language-text\">=></code> 뒤에서는 개행 가능</li>\n</ol>\n</li>\n<li>\n<p>함수 블록 <code class=\"language-text\">{}</code>만 작성한 형태</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">total</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">one</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">total</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span></code></pre></div>\n<ol>\n<li>함수 블록<code class=\"language-text\">{}</code>만 작성하면 <code class=\"language-text\">undefined</code> 반환</li>\n<li>함수 블록에 <code class=\"language-text\">return</code>을 작성하지 않은 것과 같음</li>\n<li><code class=\"language-text\">return</code>을 작성하지 않으면 <code class=\"language-text\">default</code>로 <code class=\"language-text\">undefined</code>를 반환 함</li>\n<li>화살표가 함수이기 때문이 아니라 <code class=\"language-text\">JS</code> 문법임</li>\n</ol>\n</li>\n<li>\n<p><code class=\"language-text\">{key: value}</code>를 반환하는 형태</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">point</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">param</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> book<span class=\"token operator\">:</span> param <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">point</span><span class=\"token punctuation\">(</span><span class=\"token string\">'책'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> key <span class=\"token keyword\">in</span> result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>key <span class=\"token operator\">+</span> <span class=\"token string\">': '</span> <span class=\"token operator\">+</span> result<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// book: 책</span></code></pre></div>\n<ol>\n<li><code class=\"language-text\">{key: value}</code>를 소괄호()로 감싸면 <code class=\"language-text\">{key: value}</code>를 반환함</li>\n<li>소괄호()을 작성하지 않으면 <code class=\"language-text\">undefined</code>를 반환함</li>\n</ol>\n</li>\n</ul>\n<br>\n<h2 id=\"3-파라미터-사용\" style=\"position:relative;\"><a href=\"#3-%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0-%EC%82%AC%EC%9A%A9\" aria-label=\"3 파라미터 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3) 파라미터 사용</h2>\n<ul>\n<li>\n<p>파라미터가 하나 일 때</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">get</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">param</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> param <span class=\"token operator\">+</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 30</span></code></pre></div>\n<ol>\n<li>파라미터가 하나이면 <code class=\"language-text\">(param)</code>에서 소괄호를 생략할 수 있음</li>\n<li><code class=\"language-text\">get(10)</code>에서 <code class=\"language-text\">10</code>이 <code class=\"language-text\">param</code>에 설정됨</li>\n</ol>\n</li>\n<li>\n<p>파라미터가 없으면 소괄호만 작성</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">get</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token number\">10</span> <span class=\"token operator\">+</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 30</span></code></pre></div>\n<ul>\n<li>파라미터가 없으면 소괄호만 작성할 수 있음</li>\n</ul>\n<br>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1-arrow-function\">1) Arrow Function</a></li>\n<li><a href=\"#2-%ED%95%A8%EC%88%98-%EB%B8%94%EB%A1%9D-%EC%82%AC%EC%9A%A9\">2) 함수 블록 사용</a></li>\n<li><a href=\"#3-%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0-%EC%82%AC%EC%9A%A9\">3) 파라미터 사용</a></li>\n</ul>\n</div>","excerpt":"1) Arrow Function 의 사전적 의미 : 화살, 화살표 코드 형태   키워드 대신에 화살표  사용 표 양쪽에 공백 작성 가능 의 축약 형태이지만, 고려할 사항도 있음( 참조가 다름) 2) 함수 블록 사용 함수 블록과  작성생략 함수 블록과 을 생략한 형태로 와 같음  앞에서 줄을 분리하면   뒤에서는 개행 가능 함수 블록 만 작성한 형태 함수 블록만 작성하면  반환 함수 블록에 을 작성하지 않은 것과 같음 을 작성하지 않으면 로 를 반환 함 화살표가 함수이기 때문이 아니라  문법임 를 반환하는 형태 를 소괄호()로 감싸면 를 반환함 소괄호()을 작성하지 않으면 를 반환함 3) 파라미터 사용 파라미터가 하나 일 때 파라미터가 하나이면 에서 소괄호를 생략할 수 있음 에서 이 에 설정됨 파라미터가 없으면 소괄호만 작성 파라미터가 없으면 소괄호만 작성할 수 있음 1) Arrow Function 2) 함수 블록 사용 3) 파라미터 사용","frontmatter":{"date":"September 02, 2021","title":"Arrow Function 사용","categories":"JS","author":"Kay","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-arrowFunction-1/"}},"next":{"id":"b12a0c34-0375-5f88-b720-ebb9f7314183","html":"<br>\n<h1 align=\"center\">\n  👋 호이스팅\n</h1>\n<br>\n<h2 id=\"1-es5의-실행-콘텍스트-처리-순서\" style=\"position:relative;\"><a href=\"#1-es5%EC%9D%98-%EC%8B%A4%ED%96%89-%EC%BD%98%ED%85%8D%EC%8A%A4%ED%8A%B8-%EC%B2%98%EB%A6%AC-%EC%88%9C%EC%84%9C\" aria-label=\"1 es5의 실행 콘텍스트 처리 순서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1) ES5의 실행 콘텍스트 처리 순서</h2>\n<ol>\n<li>함수 선언문 설정(함수부터 찾음)</li>\n<li>변수 이름을 바인딩, 변숫 값은 <code class=\"language-text\">undefined</code>(변수 이름 찾고 값은 <code class=\"language-text\">undefined</code>라고 넣음)</li>\n<li>소스 코드 실행</li>\n</ol>\n<br>\n<h2 id=\"2-var-변수-호이스팅\" style=\"position:relative;\"><a href=\"#2-var-%EB%B3%80%EC%88%98-%ED%98%B8%EC%9D%B4%EC%8A%A4%ED%8C%85\" aria-label=\"2 var 변수 호이스팅 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2) var 변수 호이스팅</h2>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'music 변수:'</span><span class=\"token punctuation\">,</span> music<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> music <span class=\"token operator\">=</span> <span class=\"token string\">'음악'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">console.log(\"music 변수:\", music);</code> 코드 아래 <code class=\"language-text\">var music = \"음악\";</code> 이 존재</li>\n<li>변수가 아래에 있지만 식별자 해결을 할 수 있음 단, 이 위에서 <code class=\"language-text\">music</code> 값은 <code class=\"language-text\">undefined</code></li>\n<li>이것을 <code class=\"language-text\">호이스팅</code>이라고 함</li>\n<li>식별자 해결을 하지 못하면 에러가 발생</li>\n</ul>\n<br>\n<h2 id=\"3-let-변수-호이스팅-사용-불가\" style=\"position:relative;\"><a href=\"#3-let-%EB%B3%80%EC%88%98-%ED%98%B8%EC%9D%B4%EC%8A%A4%ED%8C%85-%EC%82%AC%EC%9A%A9-%EB%B6%88%EA%B0%80\" aria-label=\"3 let 변수 호이스팅 사용 불가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3) let 변수 호이스팅 사용 불가</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">let</code> 변수는 호이스팅되지 않음, 즉 <code class=\"language-text\">let</code> 변수 앞에서 변수 사용 불가</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sports<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'호이스팅 불가'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> sports <span class=\"token operator\">=</span> <span class=\"token string\">'축구'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 호이스팅 불가</span></code></pre></div>\n</li>\n<li><code class=\"language-text\">let</code> 변수를 인식하는 시점</li>\n<li><code class=\"language-text\">block</code> 안에 <code class=\"language-text\">let</code> 변수 작성</li>\n</ul>\n<br>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1-es5%EC%9D%98-%EC%8B%A4%ED%96%89-%EC%BD%98%ED%85%8D%EC%8A%A4%ED%8A%B8-%EC%B2%98%EB%A6%AC-%EC%88%9C%EC%84%9C\">1) ES5의 실행 콘텍스트 처리 순서</a></li>\n<li><a href=\"#2-var-%EB%B3%80%EC%88%98-%ED%98%B8%EC%9D%B4%EC%8A%A4%ED%8C%85\">2) var 변수 호이스팅</a></li>\n<li><a href=\"#3-let-%EB%B3%80%EC%88%98-%ED%98%B8%EC%9D%B4%EC%8A%A4%ED%8C%85-%EC%82%AC%EC%9A%A9-%EB%B6%88%EA%B0%80\">3) let 변수 호이스팅 사용 불가</a></li>\n</ul>\n</div>","frontmatter":{"date":"September 01, 2021","title":"호이스팅","categories":"JS","author":"Kay","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-hoisting/"}},"prev":{"id":"0e176341-8ce6-5b9b-89fe-924ada30c2e1","html":"<br>\n<h1 align=\"center\">\n  👋 화살표 함수와 this, this가 정적 스코프 참조\n</h1>\n<br>\n<h2 id=\"1-화살표-함수와-this\" style=\"position:relative;\"><a href=\"#1-%ED%99%94%EC%82%B4%ED%91%9C-%ED%95%A8%EC%88%98%EC%99%80-this\" aria-label=\"1 화살표 함수와 this permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 화살표 함수와 this</h2>\n<h3 id=\"1-code-classlanguage-textstrictcode-모드에서-함수를-호출할-때\" style=\"position:relative;\"><a href=\"#1-code-classlanguage-textstrictcode-%EB%AA%A8%EB%93%9C%EC%97%90%EC%84%9C-%ED%95%A8%EC%88%98%EB%A5%BC-%ED%98%B8%EC%B6%9C%ED%95%A0-%EB%95%8C\" aria-label=\"1 code classlanguage textstrictcode 모드에서 함수를 호출할 때 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1). <code class=\"language-text\">Strict</code> 모드에서 함수를 호출할 때</h3>\n<ul>\n<li>함수 앞에 오브젝트 작성은 필수</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// 오브젝트 작성은 필수</span>\n\n<span class=\"token string\">'use strict'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">book</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">getPoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getPoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// window.getPoint();</span>\n<span class=\"token punctuation\">}</span>\n\nwindow<span class=\"token punctuation\">.</span><span class=\"token function\">book</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span></code></pre></div>\n<ol>\n<li><code class=\"language-text\">strict</code> 모드에서는 <code class=\"language-text\">window.book()</code> 처럼 호출하는 함수 앞에 오브젝트를 작성해야 함, 이렇게 하지 않으면 <code class=\"language-text\">book()</code> 함수 안에서 <code class=\"language-text\">this</code> 값이 <code class=\"language-text\">undefined</code></li>\n<li>또한, <code class=\"language-text\">getPoint()</code> 처럼 <code class=\"language-text\">window</code>를 앞에 작성하지 않으면 <code class=\"language-text\">getPoint()</code> 안에서 <code class=\"language-text\">this</code> 값이 <code class=\"language-text\">undefined</code> 임</li>\n<li>이를 피하기 위해 <code class=\"language-text\">window.getPoint()</code>로 호출하면 <code class=\"language-text\">window</code> 오브젝트에 <code class=\"language-text\">getPoint()</code>가 없으므로 에러가 남(현재 <code class=\"language-text\">book</code> 함수 블록 안에 <code class=\"language-text\">getPoint()</code>가 있음)</li>\n<li><code class=\"language-text\">strict</code> 모드의 함수에서 <code class=\"language-text\">this</code>를 참조하기 위해서는 <code class=\"language-text\">this</code>를 별도로 저장한 후 사용해야 하는 번거로움이 있음</li>\n</ol>\n<p>—> 화살표 함수로 해결 가능</p>\n<br>\n<h3 id=\"2-화살표-함수에서-code-classlanguage-textthiscode가-글로벌-오브젝트-참조\" style=\"position:relative;\"><a href=\"#2-%ED%99%94%EC%82%B4%ED%91%9C-%ED%95%A8%EC%88%98%EC%97%90%EC%84%9C-code-classlanguage-textthiscode%EA%B0%80-%EA%B8%80%EB%A1%9C%EB%B2%8C-%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8-%EC%B0%B8%EC%A1%B0\" aria-label=\"2 화살표 함수에서 code classlanguage textthiscode가 글로벌 오브젝트 참조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2). 화살표 함수에서 <code class=\"language-text\">this</code>가 글로벌 오브젝트 참조</h3>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// 화살표 함수 사용</span>\n\n<span class=\"token string\">'use strict'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> point <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">sports</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getPoint</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">getPoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nwindow<span class=\"token punctuation\">.</span><span class=\"token function\">sports</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol>\n<li>화살표 함수로 작성하면 <code class=\"language-text\">getPoint()</code>로 호출할 수 있음</li>\n<li>또한, <code class=\"language-text\">getPoint()</code> 화살표 함수 안에서 <code class=\"language-text\">this</code>가 <code class=\"language-text\">undefined</code>가 아니라 글로벌(<code class=\"language-text\">window</code>) 오브젝트를 참조 함</li>\n<li><code class=\"language-text\">var point = 100</code>을 작성했으므로 100이 출력됨</li>\n</ol>\n<br>\n<h3 id=\"3-code-classlanguage-textthiscode값이-code-classlanguage-textundefinedcode\" style=\"position:relative;\"><a href=\"#3-code-classlanguage-textthiscode%EA%B0%92%EC%9D%B4-code-classlanguage-textundefinedcode\" aria-label=\"3 code classlanguage textthiscode값이 code classlanguage textundefinedcode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3). <code class=\"language-text\">this</code>값이 <code class=\"language-text\">undefined</code></h3>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token string\">'use strict'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> book <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  point<span class=\"token operator\">:</span> <span class=\"token number\">500</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">getPoint</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nbook<span class=\"token punctuation\">.</span><span class=\"token function\">getPoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n1. 일반 함수인 book.getPoint()를 호출하면\n- 함수 안에서 this가 book 오브젝트를 참조 함\n- 따라서 console.log에 500이 출력됨\n*/</span>\n\n<span class=\"token keyword\">var</span> point <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> sports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">getPoint</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'this.point'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nsports<span class=\"token punctuation\">.</span><span class=\"token function\">getPoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 100이 출력됨</span>\n\n<span class=\"token comment\">/*\n1. 화살표 함수인 sports.getPoint()를 호출하면\n- 오른쪽 Local에 this:undefined가 표시됨\n\n2. 이것은, 화살표 함수는 함수에 this를 갖고 있지 않기 때문\n\n3. 이때, this가 window 오브젝트를 참조 함\n*/</span>\n\n<span class=\"token comment\">// 정리</span>\n<span class=\"token comment\">/*\n1. console.log(\"this.point\", this.point);\n- var point = 100;에서 var 키워드를 사용했으므\n- poinrt 변수가 window 오브젝트에 설정됨\n- 따라서 console.log에 100이 출력됨\n\n2. 지금부터 this가 window 오브젝트를 참조하는 논리를 살펴봄\n- 어떻게 화살표 함수는 this가 undefined인데 window를 참조하여 this에 값을 할당 할 수 있는지 파악\n*/</span></code></pre></div>\n<br>\n<h2 id=\"2-code-classlanguage-textthiscode가-정적-스코프-참조\" style=\"position:relative;\"><a href=\"#2-code-classlanguage-textthiscode%EA%B0%80-%EC%A0%95%EC%A0%81-%EC%8A%A4%EC%BD%94%ED%94%84-%EC%B0%B8%EC%A1%B0\" aria-label=\"2 code classlanguage textthiscode가 정적 스코프 참조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. <code class=\"language-text\">this</code>가 정적 스코프 참조</h2>\n<ul>\n<li>화살표 함수에서 정적 스코프의 <code class=\"language-text\">this</code>를 사용</li>\n<li>\n<p>정적(Lexical)스코프란</p>\n<ul>\n<li>엔진이 해석할 때, 화살표 함수를 만나면</li>\n<li><code class=\"language-text\">function object</code>를 생성하고</li>\n<li>화살표 함수가 속한 스코프를 생성한 함수 오브젝트 스코프에 바인딩</li>\n</ul>\n</li>\n<li>\n<p>오브젝트에 바인딩된 스코프의 <code class=\"language-text\">this</code>를 화살표 함수에서 <code class=\"language-text\">this</code>로 사용</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">var</span> title <span class=\"token operator\">=</span> <span class=\"token string\">\"책\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> book <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function-variable function\">show</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nbook<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 책</span></code></pre></div>\n<ol>\n<li><code class=\"language-text\">show()</code> 화살표 함수에서 <code class=\"language-text\">this</code>가 <code class=\"language-text\">window</code> 오브젝트를 참조하는 것은</li>\n<li>함수 밖 스코프의 변수를 사용하듯이 <code class=\"language-text\">show()</code>의 스코프인 <code class=\"language-text\">book</code> 함수 오브젝트에 설정된 스코프(글로벌 스코프)의 <code class=\"language-text\">this</code>를 화살표 함수에서 <code class=\"language-text\">this</code>로 사용하기 때문</li>\n<li><code class=\"language-text\">book</code> 오브젝트가 글로벌 오브젝트에 설정되므로 <code class=\"language-text\">this</code>가 <code class=\"language-text\">window</code> 오브젝트를 참조 함</li>\n</ol>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#1-%ED%99%94%EC%82%B4%ED%91%9C-%ED%95%A8%EC%88%98%EC%99%80-this\">1. 화살표 함수와 this</a></p>\n<ul>\n<li><a href=\"#1-strict-%EB%AA%A8%EB%93%9C%EC%97%90%EC%84%9C-%ED%95%A8%EC%88%98%EB%A5%BC-%ED%98%B8%EC%B6%9C%ED%95%A0-%EB%95%8C\">1). <code class=\"language-text\">Strict</code> 모드에서 함수를 호출할 때</a></li>\n<li><a href=\"#2-%ED%99%94%EC%82%B4%ED%91%9C-%ED%95%A8%EC%88%98%EC%97%90%EC%84%9C-this%EA%B0%80-%EA%B8%80%EB%A1%9C%EB%B2%8C-%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8-%EC%B0%B8%EC%A1%B0\">2). 화살표 함수에서 <code class=\"language-text\">this</code>가 글로벌 오브젝트 참조</a></li>\n<li><a href=\"#3-this%EA%B0%92%EC%9D%B4-undefined\">3). <code class=\"language-text\">this</code>값이 <code class=\"language-text\">undefined</code></a></li>\n</ul>\n</li>\n<li><a href=\"#2-this%EA%B0%80-%EC%A0%95%EC%A0%81-%EC%8A%A4%EC%BD%94%ED%94%84-%EC%B0%B8%EC%A1%B0\">2. <code class=\"language-text\">this</code>가 정적 스코프 참조</a></li>\n</ul>\n</div>","frontmatter":{"date":"September 02, 2021","title":"Arrow Function와 this","categories":"JS","author":"Kay","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-arrowFunction-3/"}},"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":"zoomkoding/zoomkoding-gatsby-blog"}}}}},"pageContext":{"slug":"/study-js-es6-arrowFunction-1/","nextSlug":"/study-js-es6-hoisting/","prevSlug":"/study-js-es6-arrowFunction-3/"}},"staticQueryHashes":["1073350324","2938748437"]}