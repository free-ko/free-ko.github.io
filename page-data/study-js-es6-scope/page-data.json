{"componentChunkName":"component---src-templates-blog-template-js","path":"/study-js-es6-scope/","result":{"data":{"cur":{"id":"eeaba52d-251a-5d14-b617-1315a6f5d494","html":"<br>\n<h1 align=\"center\">\n  👋 블록 스코프 유형\n</h1>\n<br>\n<h2 id=\"1-function-블록\" style=\"position:relative;\"><a href=\"#1-function-%EB%B8%94%EB%A1%9D\" aria-label=\"1 function 블록 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1) function 블록</h2>\n<ul>\n<li><code class=\"language-text\">function name() {}</code>도 블록 스코프</li>\n<li>\n<p><code class=\"language-text\">function</code> 안과 밖에</p>\n<ul>\n<li>같은 이름의 <code class=\"language-text\">let</code> 변수 선언 가능</li>\n<li>스코프가 다르기 때문</li>\n<li>그래서 밖의 <code class=\"language-text\">sports</code>와 안의 <code class=\"language-text\">sports</code>는 다르게 저장되어 있음</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">let</span> sports <span class=\"token operator\">=</span> <span class=\"token string\">'축구'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">let</span> sports <span class=\"token operator\">=</span> <span class=\"token string\">'농구'</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'안:'</span><span class=\"token punctuation\">,</span> sports<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'밖:'</span><span class=\"token punctuation\">,</span> sports<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 안 : 농구</span>\n<span class=\"token comment\">// 밖 : 축구</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">function</code> 밖의 <code class=\"language-text\">let</code> 변수를</p>\n<ul>\n<li><code class=\"language-text\">function</code> 안에서 사용 가능(<code class=\"language-text\">클로저</code>)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">let</span> sports <span class=\"token operator\">=</span> <span class=\"token string\">'축구'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sports<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 축구</span></code></pre></div>\n</li>\n</ul>\n<br>\n<h2 id=\"2-try-catch\" style=\"position:relative;\"><a href=\"#2-try-catch\" aria-label=\"2 try catch permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2) try-catch</h2>\n<ul>\n<li><code class=\"language-text\">try-catch</code> 문도 블록 스코프</li>\n<li>\n<p><code class=\"language-text\">try</code> 블록 <code class=\"language-text\">{}</code> 기준으로</p>\n<ul>\n<li>안과 밖에 같은 이름의 <code class=\"language-text\">let</code> 변수 선언 가능</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">let</span> sports <span class=\"token operator\">=</span> <span class=\"token string\">'축구'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">let</span> sports <span class=\"token operator\">=</span> <span class=\"token string\">'농구'</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'안:'</span><span class=\"token punctuation\">,</span> sports<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'밖:'</span><span class=\"token punctuation\">,</span> sports<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 안 : 농구</span>\n<span class=\"token comment\">// 밖 : 축구</span></code></pre></div>\n<ol>\n<li><code class=\"language-text\">try</code> 블록의 안과 밖에 <code class=\"language-text\">let sports</code>를 선언했으며</li>\n<li>안과 밖이 스코프가 다르므로 변숫값이 각각 설정됨</li>\n</ol>\n</li>\n<li>\n<p><code class=\"language-text\">catch()</code>에서 <code class=\"language-text\">try</code> 밖의 변수 사용</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">let</span> sports <span class=\"token operator\">=</span> <span class=\"token string\">'축구'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">let</span> sports <span class=\"token operator\">=</span> <span class=\"token string\">'농구'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'안:'</span><span class=\"token punctuation\">,</span> sports<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nabc <span class=\"token operator\">=</span> error<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'catch:'</span><span class=\"token punctuation\">,</span> sports<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'밖:'</span><span class=\"token punctuation\">,</span> sports<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 안: 농구</span>\n<span class=\"token comment\">// catch: 축구</span>\n<span class=\"token comment\">// 밖: 축구</span></code></pre></div>\n<ol>\n<li><code class=\"language-text\">let sports = \"농구\";</code> <code class=\"language-text\">try</code> 블록에서 값을 할당</li>\n<li><code class=\"language-text\">abc = error;</code> <code class=\"language-text\">error</code> 변수가 없으므로 에러가 발생</li>\n<li><code class=\"language-text\">console.log(\"catch:\", sports)</code> <code class=\"language-text\">try</code> 블록 안에서 선언한 <code class=\"language-text\">sports</code> 값을 출력하지 않고 <code class=\"language-text\">try</code> 밖의 <code class=\"language-text\">sports</code> 값을 출력 함</li>\n</ol>\n</li>\n</ul>\n<br>\n<h2 id=\"3-switch-case\" style=\"position:relative;\"><a href=\"#3-switch-case\" aria-label=\"3 switch case permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3) switch-case</h2>\n<ul>\n<li><code class=\"language-text\">switch</code>문도 블록 스코프</li>\n<li>\n<p><code class=\"language-text\">switch</code> 블록 기준으로</p>\n<ul>\n<li>같은 이름의 <code class=\"language-text\">let</code> 변수 작성 불가</li>\n<li><code class=\"language-text\">case</code>, <code class=\"language-text\">default</code>는 블록 스코프가 아님</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">let</span> item <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">let</span> sports<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span>\n  <span class=\"token comment\">// let sports;</span>\n  <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sports<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol>\n<li><code class=\"language-text\">// let sports</code></li>\n<li><code class=\"language-text\">switch</code> 블록 안에서 <code class=\"language-text\">let</code>을 사용하여 선언한 변수가 있는데 다시 <code class=\"language-text\">let</code>을 사용하여 변수를 선언하므로 에러가 발생</li>\n<li>그래서 주석으로 처리</li>\n<li>에러는 실행할 때 생기지 않고 컴파일 할 때 에러가 발생함</li>\n</ol>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1-function-%EB%B8%94%EB%A1%9D\">1) function 블록</a></li>\n<li><a href=\"#2-try-catch\">2) try-catch</a></li>\n<li><a href=\"#3-switch-case\">3) switch-case</a></li>\n</ul>\n</div>","excerpt":"1) function 블록 도 블록 스코프  안과 밖에 같은 이름의  변수 선언 가능 스코프가 다르기 때문 그래서 밖의 와 안의 는 다르게 저장되어 있음  밖의  변수를  안에서 사용 가능() 2) try-catch  문도 블록 스코프  블록  기준으로 안과 밖에 같은 이름의  변수 선언 가능  블록의 안과 밖에 를 선언했으며 안과 밖이 스코프가 다르므로 변숫값이 각각 설정됨 에서  밖의 변수 사용   블록에서 값을 할당   변수가 없으므로 에러가 발생   블록 안에서 선언한  값을 출력하지 않고  밖의  값을 출력 함 3) switch-case 문도 블록 스코프  블록 기준으로 같은 이름의  변수 작성 불가 , 는 블록 스코프가 아님   블록 안에서 을 사용하여 선언한 변수가 있는데 다시 을 사용하여 변수를 선언하므로 에러가 발생 그래서 주석으로 처리 에러는 실행할 때 생기지 않고 컴파일 할 때 에러가 발생함 1) function 블록 2) try-catch 3) switch-c…","frontmatter":{"date":"August 31, 2021","title":"function 블록, try-catch, switch-case","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-scope/"}},"next":{"id":"4183a7d4-57bf-5a35-9edc-682f612b03ef","html":"<br>\n<h1 align=\"center\">\n  👋 변수 구분, 글로벌 변수 오해, use strict 사용\n</h1>\n<br>\n<h2 id=\"1-변수-구분\" style=\"position:relative;\"><a href=\"#1-%EB%B3%80%EC%88%98-%EA%B5%AC%EB%B6%84\" aria-label=\"1 변수 구분 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1) 변수 구분</h2>\n<ul>\n<li>로컬(지역) 변수, 글로벌(전역) 변수</li>\n<li>\n<p>변수를 구분하는 이유는?</p>\n<ul>\n<li>기능과 목적이 다르기 때문</li>\n</ul>\n</li>\n<li>\n<p>글로벌 변수의 기능, 목적</p>\n<ul>\n<li>다른 JS 파일에서 변숫값 공유</li>\n<li>파일에서 공통 변수 개념으로 사용</li>\n<li>의도는 좋으나 처리 속도가 떨어짐</li>\n</ul>\n</li>\n<li>\n<p>로컬 변수의 기능, 목적</p>\n<ul>\n<li>빠르게 식별자를 해결하기 위해 가까운 스코프(예를 들어 함수 스코프)의 변수를 사용하려는 것</li>\n</ul>\n</li>\n<li><code class=\"language-text\">var</code> 키워드 문제</li>\n</ul>\n<br>\n<h2 id=\"2-글로벌-변수-오해\" style=\"position:relative;\"><a href=\"#2-%EA%B8%80%EB%A1%9C%EB%B2%8C-%EB%B3%80%EC%88%98-%EC%98%A4%ED%95%B4\" aria-label=\"2 글로벌 변수 오해 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2) 글로벌 변수 오해</h2>\n<ul>\n<li>\n<p>글로벌 변수는</p>\n<ul>\n<li>글로벌 오브젝트의 로컬 변수</li>\n<li><code class=\"language-text\">var value = 100</code>처럼</li>\n<li>var 키워드 사용이 정상</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">var</code> 키워드를 작성하지 않으면</p>\n<ul>\n<li>글로벌 변수로 간주하는데 이것이 문제</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// 글로벌 변수 문제</span>\n\nvalue <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">point</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\nvalue <span class=\"token operator\">=</span> <span class=\"token number\">300</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'함수:'</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">point</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 함수 : 300</span></code></pre></div>\n<ol>\n<li><code class=\"language-text\">var</code> 키워드를 사용하지 않고 <code class=\"language-text\">value</code>를 글로벌 변수로 선언하고 100에 할당</li>\n<li><code class=\"language-text\">point()</code> 함수 안에서 <code class=\"language-text\">value</code> 변수(글로벌 변수)에 300 할당, <code class=\"language-text\">value</code> 변수가 로컬 변수가 아님, 즉 글로벌 오브젝트의 <code class=\"language-text\">value</code> 변수에 300 할당</li>\n<li>함수 안에서 글로벌 변수에 값을 설정하는 것은 좋은 것이 아님</li>\n<li>로컬 변수와 글로벌 변수를 구분한 목적을 생각해야 함</li>\n<li>예를 들어 함수 안에서 지역 변수를 선언해 사용하면 빠르게 식별 할 수 있어서 로컬, 글로벌 변수를 나눈 것</li>\n</ol>\n</li>\n</ul>\n<br>\n<h2 id=\"3-use-strict-사용\" style=\"position:relative;\"><a href=\"#3-use-strict-%EC%82%AC%EC%9A%A9\" aria-label=\"3 use strict 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3) Use Strict 사용</h2>\n<ul>\n<li>\n<p>함수 안에서</p>\n<ul>\n<li>var 키워드를 사용하지 않으면 에러 발생</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token string\">'use strict'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">point</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  value <span class=\"token operator\">=</span> <span class=\"token number\">300</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">'글로벌 변수에 접근하여 값 할당 할 수 없음, 왜냐하면 함수 안에서는 글로벌 접근은 가능하나 할당은 안됨 왜냐하면 맨 위에 use strict가 있어서'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>ES5에 도입했으나 근본적인 접근은 아님</li>\n</ul>\n</li>\n<li>\n<p>ES6+</p>\n<ul>\n<li><code class=\"language-text\">\"use strict\"</code> 가 디폴트 환경</li>\n<li>전체는 아님</li>\n</ul>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1-%EB%B3%80%EC%88%98-%EA%B5%AC%EB%B6%84\">1) 변수 구분</a></li>\n<li><a href=\"#2-%EA%B8%80%EB%A1%9C%EB%B2%8C-%EB%B3%80%EC%88%98-%EC%98%A4%ED%95%B4\">2) 글로벌 변수 오해</a></li>\n<li><a href=\"#3-use-strict-%EC%82%AC%EC%9A%A9\">3) Use Strict 사용</a></li>\n</ul>\n</div>","frontmatter":{"date":"August 30, 2021","title":"let, const 변수","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-variable/"}},"prev":{"id":"3543b16e-98f2-520c-a9b4-d7812bd5abd0","html":"<br>\n<h1 align=\"center\">\n  👋 Arrow Function, 함수 블록 사용, 파라미터 사용\n</h1>\n<br>\n<h2 id=\"1-arrow-function\" style=\"position:relative;\"><a href=\"#1-arrow-function\" aria-label=\"1 arrow function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1) Arrow Function</h2>\n<ul>\n<li><code class=\"language-text\">Arrow</code>의 사전적 의미 : 화살, 화살표</li>\n<li>\n<p>코드 형태</p>\n<ul>\n<li><code class=\"language-text\">(param) => {함수 코드}</code></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">one<span class=\"token punctuation\">,</span> two</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> one <span class=\"token operator\">+</span> two<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">total</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">one<span class=\"token punctuation\">,</span> two</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> one <span class=\"token operator\">+</span> two<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">total</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span></code></pre></div>\n<ol>\n<li><code class=\"language-text\">function</code> 키워드 대신에 화살표 <code class=\"language-text\">=></code> 사용</li>\n<li><code class=\"language-text\">=></code>표 양쪽에 공백 작성 가능</li>\n</ol>\n</li>\n<li><code class=\"language-text\">function() {}</code>의 축약 형태이지만, 고려할 사항도 있음(<code class=\"language-text\">this</code> 참조가 다름)</li>\n</ul>\n<br>\n<h2 id=\"2-함수-블록-사용\" style=\"position:relative;\"><a href=\"#2-%ED%95%A8%EC%88%98-%EB%B8%94%EB%A1%9D-%EC%82%AC%EC%9A%A9\" aria-label=\"2 함수 블록 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2) 함수 블록 사용</h2>\n<ul>\n<li>\n<p>함수 블록과 <code class=\"language-text\">return</code> 작성생략</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">total</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">one<span class=\"token punctuation\">,</span> two</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> one <span class=\"token operator\">+</span> two<span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">total</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span></code></pre></div>\n<ol>\n<li>함수 블록<code class=\"language-text\">{}</code>과 <code class=\"language-text\">return</code>을 생략한 형태로 <code class=\"language-text\">{ return one + two }</code>와 같음</li>\n<li><code class=\"language-text\">=></code> 앞에서 줄을 분리하면 <code class=\"language-text\">SyntaxError</code></li>\n<li><code class=\"language-text\">=></code> 뒤에서는 개행 가능</li>\n</ol>\n</li>\n<li>\n<p>함수 블록 <code class=\"language-text\">{}</code>만 작성한 형태</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">total</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">one</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">total</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span></code></pre></div>\n<ol>\n<li>함수 블록<code class=\"language-text\">{}</code>만 작성하면 <code class=\"language-text\">undefined</code> 반환</li>\n<li>함수 블록에 <code class=\"language-text\">return</code>을 작성하지 않은 것과 같음</li>\n<li><code class=\"language-text\">return</code>을 작성하지 않으면 <code class=\"language-text\">default</code>로 <code class=\"language-text\">undefined</code>를 반환 함</li>\n<li>화살표가 함수이기 때문이 아니라 <code class=\"language-text\">JS</code> 문법임</li>\n</ol>\n</li>\n<li>\n<p><code class=\"language-text\">{key: value}</code>를 반환하는 형태</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">point</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">param</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> book<span class=\"token operator\">:</span> param <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">point</span><span class=\"token punctuation\">(</span><span class=\"token string\">'책'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> key <span class=\"token keyword\">in</span> result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>key <span class=\"token operator\">+</span> <span class=\"token string\">': '</span> <span class=\"token operator\">+</span> result<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// book: 책</span></code></pre></div>\n<ol>\n<li><code class=\"language-text\">{key: value}</code>를 소괄호()로 감싸면 <code class=\"language-text\">{key: value}</code>를 반환함</li>\n<li>소괄호()을 작성하지 않으면 <code class=\"language-text\">undefined</code>를 반환함</li>\n</ol>\n</li>\n</ul>\n<br>\n<h2 id=\"3-파라미터-사용\" style=\"position:relative;\"><a href=\"#3-%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0-%EC%82%AC%EC%9A%A9\" aria-label=\"3 파라미터 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3) 파라미터 사용</h2>\n<ul>\n<li>\n<p>파라미터가 하나 일 때</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">get</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">param</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> param <span class=\"token operator\">+</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 30</span></code></pre></div>\n<ol>\n<li>파라미터가 하나이면 <code class=\"language-text\">(param)</code>에서 소괄호를 생략할 수 있음</li>\n<li><code class=\"language-text\">get(10)</code>에서 <code class=\"language-text\">10</code>이 <code class=\"language-text\">param</code>에 설정됨</li>\n</ol>\n</li>\n<li>\n<p>파라미터가 없으면 소괄호만 작성</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">get</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token number\">10</span> <span class=\"token operator\">+</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 30</span></code></pre></div>\n<ul>\n<li>파라미터가 없으면 소괄호만 작성할 수 있음</li>\n</ul>\n<br>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1-arrow-function\">1) Arrow Function</a></li>\n<li><a href=\"#2-%ED%95%A8%EC%88%98-%EB%B8%94%EB%A1%9D-%EC%82%AC%EC%9A%A9\">2) 함수 블록 사용</a></li>\n<li><a href=\"#3-%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0-%EC%82%AC%EC%9A%A9\">3) 파라미터 사용</a></li>\n</ul>\n</div>","frontmatter":{"date":"September 01, 2021","title":"Arrow Function 사용","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-arrowFunction/"}},"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":"zoomkoding/zoomkoding-gatsby-blog"}}}}},"pageContext":{"slug":"/study-js-es6-scope/","nextSlug":"/study-js-es6-variable/","prevSlug":"/study-js-es6-arrowFunction/"}},"staticQueryHashes":["1073350324","2938748437"]}