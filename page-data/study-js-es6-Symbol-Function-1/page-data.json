{"componentChunkName":"component---src-templates-blog-template-js","path":"/study-js-es6-Symbol-Function-1/","result":{"data":{"cur":{"id":"075b5dcc-5666-585c-b8e0-cfc8dd66b2fa","html":"<br>\n<h1 align=\"center\">\n  👋 Symbol 함수: for(), keyFor()\n</h1>\n<h2 id=\"1-for\" style=\"position:relative;\"><a href=\"#1-for\" aria-label=\"1 for permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. for()</h2>\n<ul>\n<li>\n<p>글로벌 <code class=\"language-text\">Symbol</code> 레지스트리에</p>\n<ul>\n<li><code class=\"language-text\">{key: value}</code> 형태로 <code class=\"language-text\">Symbol</code> 을 저장</li>\n<li><code class=\"language-text\">파라미터()</code>의 문자열이 <code class=\"language-text\">Key</code>가 되고 <code class=\"language-text\">Symbol()</code>로 생성한 값이 <code class=\"language-text\">value</code>가 됨</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const one = Symbol.for(&#39;sports&#39;);\n\nconsole.log(one); // Symbol(sports)\n\n// 1. {key: value} 형태로 one에 설정함, one이 글로벌 Symbol 레지스트리에 저장됨\n// 2. 파라미터인 &#39;sports&#39;가 key가 되고 Symbol()로 생성한 값이 value가 됨\n// 3. Symbol(&quot;sports&quot;) 함수에서 파라미터가 주석이었던 것과는 차이가 있음</code>\n        </deckgo-highlight-code>\n<ul>\n<li><code class=\"language-text\">registry</code> : 등록, 기록</li>\n</ul>\n</li>\n<li>\n<p>글로벌 <code class=\"language-text\">Symbol</code> 레지스트리는 공유 영역</p>\n<ul>\n<li>다른 오브젝트에서도 사용 가능</li>\n<li>같은 <code class=\"language-text\">key</code>가 존재하면 등록된 값을 사용</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const one = Symbol.for(&quot;sports&quot;);\nconst two = Symbol.for(&quot;sports&quot;);\n\nconsole.log(one === two);  // true\n\nconsole.log(Symbol.for(true); // Symbol(true)\n\n// 1. one의 key 값과 two의 key값이 같으므로 Symbol 값을 생성하지 않고 one에 설정된 값을 사용\n// 2. one === two 그래서 비교 결과가 true가 나옴\n// 3. Symbol.for(true) true를 문자열로 반환하여 key 값으로 사용</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<h2 id=\"2-keyfor\" style=\"position:relative;\"><a href=\"#2-keyfor\" aria-label=\"2 keyfor permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. keyFor()</h2>\n<ul>\n<li>글로벌 <code class=\"language-text\">Symbol</code> 레지스트리에서 <code class=\"language-text\">Symbol</code>의 <code class=\"language-text\">key</code> 값을 구함</li>\n<li>\n<p>파라미터에 <code class=\"language-text\">Symbol.for()</code> 로 등록한 <code class=\"language-text\">Symbol</code> 작성</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const one = Symbol.for(&#39;book&#39;);\nconst six = Symbol.keyFor(one);\n\nconsole.log(six); // book\n\n// 1. const six = Symbol.keyFor(one); 파라미터에 글로벌 Symbol 레지스트리에 등록한 Symbol을 작성함\n// 2. one의 key 값인 &quot;book&quot;을 반환</code>\n        </deckgo-highlight-code>\n</li>\n<li><code class=\"language-text\">Symbol key</code> 값이 존재하면 <code class=\"language-text\">key</code> 값을 반환하고 존재하지 않으면 <code class=\"language-text\">Undefined</code> 반환</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","excerpt":"1. for() 글로벌  레지스트리에  형태로  을 저장 의 문자열이 가 되고 로 생성한 값이 가 됨  : 등록, 기록 글로벌  레지스트리는 공유 영역 다른 오브젝트에서도 사용 가능 같은 가 존재하면 등록된 값을 사용 2. keyFor() 글로벌  레지스트리에서 의  값을 구함 파라미터에  로 등록한  작성  값이 존재하면  값을 반환하고 존재하지 않으면  반환","frontmatter":{"date":"October 30, 2021","title":"Symbol 함수 - for(), keyFor()","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-Symbol-Function-1/"}},"next":{"id":"98ba081f-3e86-5025-9c10-ec1d6ac09961","html":"<br>\n<h1 align=\"center\">\n  👋 Symbol.match\n</h1>\n<br>\n<h2 id=\"1-well-known-symbol\" style=\"position:relative;\"><a href=\"#1-well-known-symbol\" aria-label=\"1 well known symbol permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Well-Known Symbol</h2>\n<ul>\n<li>\n<p>Well-Known Symbol을 지원하는 String 메소드</p>\n<ul>\n<li><code class=\"language-text\">match()</code></li>\n<li><code class=\"language-text\">replace()</code></li>\n<li><code class=\"language-text\">search()</code></li>\n<li><code class=\"language-text\">split()</code></li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">String.prototype.match()</code></p>\n<ul>\n<li>문자열에 패턴을 매치하고</li>\n<li>매치된 결과를 배열로 반환</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const result = &#39;Sports&#39;.match(/s/);\n\nconsole.log(result); // [s]\n\n// 1. 문자열 &quot;Sports&quot;에 패턴 /s/를 매치합니다. 처음 S는 대문자이므로 매치가 되지 않지만 끝 s는 소문자이므로 매치가 됨\n// 2. 매치된 결과를 배열로 반환</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<h2 id=\"2-symbolmatch\" style=\"position:relative;\"><a href=\"#2-symbolmatch\" aria-label=\"2 symbolmatch permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Symbol.match()</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">Symbol.match()</code></p>\n<ul>\n<li>개발자 코드를 함수 블록에 작성</li>\n<li><code class=\"language-text\">String.prototype.match()</code> 대신에 <code class=\"language-text\">Symbol.match()</code> 대신에 <code class=\"language-text\">Symbol.match()</code>가 실행됨</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const sports = {\n  base: &#39;ball&#39;,\n  [Symbol.match](value) {\n    return this.base.indexOf(value) &lt; 0 ? &#39;없음&#39; : &#39;있음&#39;;\n  },\n};\n\nconsole.log(&#39;al&#39;.match(sports)); // 있음\n\n// 1. &#39;ball&#39;에 &#39;al&#39;이 있으면 &#39;있음&#39;을 반환하고 없으면 &#39;없음&#39;을 반환함\n// 2. &#39;al&#39;.match(sports)\n// 3. sports 오브젝트에서 Symbol.match 작성 체크 없으면 String.prototype.match()를 호출하고 있으면 Symbol.match()를 호출 함\n// 4. Symbol.match(value)를 호출하면서 &#39;al&#39;를 파라미터 값으로 넘겨 줌</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p><code class=\"language-text\">Symbol.match = false</code></p>\n<ul>\n<li><code class=\"language-text\">//</code>를 패턴으로 인식하지 않고 문자열로 인식</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">try {\n  &#39;/book/&#39;.startsWith(/book/);\n} catch {\n  console.log(&#39;정규 표현식으로 처리&#39;);\n}\n\nlet check = /book/;\ncheck[Symbol.match] = false;\n\nconsole.log(&#39;/book/&#39;.startsWith(check));\n\n// 1. 파라미터 /book/을 패턴으로 처리 함, 정규 표현식을 사용할 수 없으므로 에러 발생\n// 2. check[Symbol.match] = false; 정규 표현식으로 인식하지 않도록 설정\n// 3. &quot;/book/&quot;.startWith(check) 파라미터 check 값을 문자열로 인식 함\n// 4. endsWith()도 값음\n\n// 실행 결과\n// 정규 표현식으로 처리\n// true</code>\n        </deckgo-highlight-code>\n</li>\n<li>메소드를 오버라이드 하는 것이므로 메소드의 시맨틱은 유지해야 함</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","frontmatter":{"date":"October 29, 2021","title":"Symbol.match","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-Symbol-Property-9/"}},"prev":{"id":"34ccad72-518f-5016-9e6a-3cefd71057ed","html":"<br>\n<h1 align=\"center\">\n  👋 toString(), description, valueOf(), getOwnPropertySymbols()\n</h1>\n<h2 id=\"1-tostring\" style=\"position:relative;\"><a href=\"#1-tostring\" aria-label=\"1 tostring permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. toString()</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">Symbol</code> 을 생성했던 형태를 문자열로 변환하여 반환</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">console.log(Symbo(&#39;100&#39;).toString());\n\nconst sym = Symbol.for(&#39;book&#39;);\nconsole.log(sym.toString());\n\ntry {\nconsole.log(Symbol() + &#39;ABC&#39;);\n} catch {\nconsole.log(&#39;+로 연결 불가&#39;);\n}\n\n// 실행 결과\n// Symbol(100)\n// Symbol(book)\n// +로 연결 불가</code>\n        </deckgo-highlight-code>\n<ul>\n<li><code class=\"language-text\">Symbol</code> 값은 반환되지 않음</li>\n<li><code class=\"language-text\">+</code> 로 문자열을 연결하면 <code class=\"language-text\">TypeError</code></li>\n<li><code class=\"language-text\">toString()</code>으로 변환하면 연결은 되지만 <code class=\"language-text\">Symbol</code> 값은 연결되지 않음</li>\n</ul>\n<br>\n<h2 id=\"2-description\" style=\"position:relative;\"><a href=\"#2-description\" aria-label=\"2 description permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. description</h2>\n<ul>\n<li><code class=\"language-text\">Symbol.prototype.descripon</code></li>\n<li>Syntax, ES2019</li>\n<li><code class=\"language-text\">Symbol(\"설명\").description;</code></li>\n<li><code class=\"language-text\">Symbol.for(\"키\").description;</code></li>\n<li><code class=\"language-text\">Symbol.iterator.description;</code></li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">Symbol</code> 오브젝트의 주석, 설명을 반환</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">console.log(Symbol(&#39;sports&#39;).description); // sports\nconsole.log(Symbol.for(&#39;book&#39;).description); // book\nconsole.log(Symbol.iterator.description); // Symbol.iterator</code>\n        </deckgo-highlight-code>\n<ul>\n<li><code class=\"language-text\">Symbol()</code> 함수의 파라미터를 반환</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">toString()</code>과 차이</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">console.log(Symbol(&#39;book&#39;).toString()); // Symbol(book)\nconsole.log(Symbol(&#39;&#39;).toString()); // Symbol()\nconsole.log(Symbol().toString()); // Symbol()\n\nconsole.log(Symbol.for(&#39;book&#39;).description); // book\nconsole.log(Symbol(&#39;book&#39;).description); // book\nconsole.log(Symbol(&#39;&#39;).description); // &quot;&quot;\nconsole.log(Symbol().description); // undefined</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<h2 id=\"3-valueof\" style=\"position:relative;\"><a href=\"#3-valueof\" aria-label=\"3 valueof permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. valueOf()</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">valueOf()</code> 가 프리미티브 값을 반환하지만 <code class=\"language-text\">Symbol</code> 은 값을 반환하지 않고 <code class=\"language-text\">Symbol</code> 을 생성한 형태를 반환</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">console.log(Symbol(&#39;100&#39;).valueOf()); // Symbol(100)\nconsole.log(Symbol.for(&#39;200&#39;).valueOf()); // Symbol(200)</code>\n        </deckgo-highlight-code>\n</li>\n<li><code class=\"language-text\">Symbol.for()</code> 는 <code class=\"language-text\">for</code> 를 제외하고 반환</li>\n</ul>\n<br>\n<h2 id=\"4-getwonpropertysymbols\" style=\"position:relative;\"><a href=\"#4-getwonpropertysymbols\" aria-label=\"4 getwonpropertysymbols permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. getWonPropertySymbols()</h2>\n<ul>\n<li><code class=\"language-text\">Object</code>의 함수이지만 <code class=\"language-text\">Symbol</code>이 대상이므로 여기서 다룸</li>\n<li>\n<p>파라미터의 <code class=\"language-text\">Object</code>에서 <code class=\"language-text\">Symbol</code>만 배열로 반환, 다른 프로퍼티는 반환하지 않음</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const obj = { point: 100 };\nobj[Symbol(&#39;one&#39;)] = 200;\nobj[Symbol.for(&#39;two&#39;)] = 300;\n\nconsole.log(Object.getWonPropertyName(obj));\n\nconst list = Object.getWonPropertySymbols(obj);\nfor (const sym of list) {\nconsole.log(`${sym.description}: ${obj[sym]}`);\n}\n\n// 1. Object.getWonPropertyName(obj), obj에서 프로퍼티 이름을 배열로 반환함, Symbol은 반환하지 않음\n// 2. Object.getOwnPropertySymbols(obj) obj에서 Symbol만 배열로 반환 함\n// 3. for-of 문으로 전개 됨\n\n// 실행 결과\n// [point]\n// one: 200\n// two: 300</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","frontmatter":{"date":"October 31, 2021","title":"toString(), description, valueOf(), getOwnPropertySymbols()","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-Symbol-Function-2/"}},"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":"zoomkoding/zoomkoding-gatsby-blog"}}}}},"pageContext":{"slug":"/study-js-es6-Symbol-Function-1/","nextSlug":"/study-js-es6-Symbol-Property-9/","prevSlug":"/study-js-es6-Symbol-Function-2/"}},"staticQueryHashes":["1073350324","2938748437"]}