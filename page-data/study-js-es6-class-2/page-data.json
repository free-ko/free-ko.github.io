{"componentChunkName":"component---src-templates-blog-template-js","path":"/study-js-es6-class-2/","result":{"data":{"cur":{"id":"b5156d98-4069-5964-ab95-d6e1f35137e4","html":"<br>\n<h1 align=\"center\">\n  👋  Class 선언, Class 구조: Class 선언문, Class 표현식\n</h1>\n<br>\n<h2 id=\"1-class-선언\" style=\"position:relative;\"><a href=\"#1-class-%EC%84%A0%EC%96%B8\" aria-label=\"1 class 선언 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Class 선언</h2>\n<ul>\n<li>Syntax : <code class=\"language-text\">class Name { body }</code></li>\n<li>대문자 Class는 개념적인 클래스를 뜻하고 소문자 class는 키워드 임</li>\n<li>\n<p>클래스 작성 방법</p>\n<ul>\n<li><code class=\"language-text\">class</code> 키워드에 이어 클래스 이름 작성함</li>\n<li>이름의 첫 문자는 대문자를 사용 함(개발자들 사이의 관례)</li>\n<li>블록 <code class=\"language-text\">{ }</code> 을 작성하고 블록 안에 메소드를 작성함</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">class Point {\n  getPoint() {\n    return 100;\n  }\n}\n\nconst obj = new Point();\n\nconsole.log(obj.getPoint()); // 100\n\n// 1. 엔진이 class 키워드를 만나면 클래스 오브젝트를 생성함\n// 2. const obj = new Point();\n//   - new 연산자를 사용하여 인스턴스를 생성함\n// 3. new 연산자를 사용하지 않고 Point()를 호출하면 에러가 발생함\n// 4. obj.getPoint() 인스턴스의 getPoint() 메소드를 호출 함</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<h2 id=\"2-class-표현식\" style=\"position:relative;\"><a href=\"#2-class-%ED%91%9C%ED%98%84%EC%8B%9D\" aria-label=\"2 class 표현식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Class 표현식</h2>\n<ul>\n<li>Syntax : <code class=\"language-text\">const/let Name = class { body }</code></li>\n<li>\n<p>클래스 작성 방법</p>\n<ul>\n<li>변수 이름 <code class=\"language-text\">Name</code>이 클래스 이름이 됨</li>\n<li>변수에 <code class=\"language-text\">Class</code> 오브젝트를 할당하는 형태 임</li>\n<li>다른 것은 클래스 선언문과 같음</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const Point = class {\n  getPoint() {\n    return 100;\n  }\n};\n\nconst obj = new Point();\n\nconsole.log(obj.getPoint()); // 100\n\n// 1. 엔진이 class 키워드를 만나면 클래스 오브젝트를 생성하여 Point 변수에 할당함\n// 2. Point가 클래스 이름이 됨</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>Class 형태</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const Point = class {\ngetPoint() {\n  return 100;\n}\n};\n\n/*\n\t1. Point를 펼치면\n\t\t- 프로퍼티, prototype, __proto__가 있음\n\n\t2. prototype을 펼치면\n\t\t- constructor가 있으며, getPoint()가 있음\n\n\t3. constructor는 Point 클래스 전체를 참조 함\n\n\t4. 클래스에 메소드를 작성하면 prototype에 연결됨\n\t\t- Point.prototype.getPoint = function(){} 형태로 작성한 것과 같음\n\n\t5. __proto__ 에서 빌트인 Function 오브젝트의 prototype에 연결된 메소드를 참조함\n*/\n\nconst obj = new Point();\n\n/*\n\t1. Point 클래스로 인스턴스를 생성함\n\t\n\t2. obj를 펼치면 __proto__가 있으며 construtor와 getPoint()가 있음\n\n\t3. Point.prototype에 연결된 메소드로\n\t\t- 인스턴스를 생성하고\n\t\t- __proto__에서 참조할 수 있도록 만듬\n*/\n\nconsole.log(ojb.getPoint());\n\n/*\n\t1. obj 인스턴스의 getPoint() 메소드를 호출함\n\t\t- obj.__proto__에 연결된 getPoint()가 호출 됨\n*/</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<h3 id=\"-const-let-사용-기준\" style=\"position:relative;\"><a href=\"#-const-let-%EC%82%AC%EC%9A%A9-%EA%B8%B0%EC%A4%80\" aria-label=\" const let 사용 기준 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✅ const, let 사용 기준</h3>\n<ol>\n<li>\n<p><code class=\"language-text\">const</code> 사용 : 값이 대체되지 않을 경우(오브젝트의 <code class=\"language-text\">프로퍼티가</code> 변경되더라도 오브젝트 <code class=\"language-text\">자체가</code> 대체되지 않는 것도 포함)</p>\n<p>ex) <code class=\"language-text\">Class</code>, <code class=\"language-text\">Array</code>, <code class=\"language-text\">인스턴스</code></p>\n</li>\n<li><code class=\"language-text\">let</code> 사용 : 값이 대체되는 경우</li>\n</ol>\n<br>\n<h3 id=\"-함수-메소드-기준\" style=\"position:relative;\"><a href=\"#-%ED%95%A8%EC%88%98-%EB%A9%94%EC%86%8C%EB%93%9C-%EA%B8%B0%EC%A4%80\" aria-label=\" 함수 메소드 기준 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✅ 함수, 메소드 기준</h3>\n<ol>\n<li>\n<p>함수</p>\n<ul>\n<li>인스턴스를 생성하지 않고 직접 호출</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">console.log(Array.isArray([])); // true\n\nconst point = {\n  getPoint() {\n    return 100;\n  },\n};\n\nconsole.log(point.getPoint()); // 100</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>메소드</p>\n<ul>\n<li>인스턴스를 사용하여 호출하는 함수로 <code class=\"language-text\">prototype</code>에 연결되어 있음</li>\n<li>클래스에 작성한 함수</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">class Point {\n  getPoint() {\n    return 100;\n  }\n}\n\nconst obj = new Point();\nconsole.log(obj.getPoint()); // 100\n\n// 1. getPoint는 직접 호출 할 수 없고, 인스턴스를 사용하여 호출해야 함</code>\n        </deckgo-highlight-code>\n<ul>\n<li><code class=\"language-text\">prototype</code>에 연결된 <code class=\"language-text\">function</code></li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const Point = function () {};\n\nPoint.prototype.getPoint = function () {\n  return 100;\n};\n\nconst obj = new Point();\nconsole.log(obj.getPoint()); // 100\n\n// 1. Point.prototype.getPoint, prototype에 연결된 함수는 메소드 임\n// 2. getPoint를 직접 호출 할 수도 있지만 일반적으로 인스턴스를 생성하여 호출 함</code>\n        </deckgo-highlight-code>\n<ul>\n<li>빌트인 오브젝트의 <code class=\"language-text\">prototype</code>에 연결된 함수</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const list = [];\n\nlist.push(&#39;책&#39;);\n\nconsole.log(list); // [&quot;책&quot;]\n\n// 1. push() 메소드는 Array.prototype에 연결되어 있음</code>\n        </deckgo-highlight-code>\n</li>\n</ol>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","excerpt":"1. Class 선언 Syntax :  대문자 Class는 개념적인 클래스를 뜻하고 소문자 class는 키워드 임 클래스 작성 방법  키워드에 이어 클래스 이름 작성함 이름의 첫 문자는 대문자를 사용 함(개발자들 사이의 관례) 블록  을 작성하고 블록 안에 메소드를 작성함 2. Class 표현식 Syntax :  클래스 작성 방법 변수 이름 이 클래스 이름이 됨 변수에  오브젝트를 할당하는 형태 임 다른 것은 클래스 선언문과 같음 Class 형태 ✅ const, let 사용 기준  사용 : 값이 대체되지 않을 경우(오브젝트의  변경되더라도 오브젝트  대체되지 않는 것도 포함) ex) , ,   사용 : 값이 대체되는 경우 ✅ 함수, 메소드 기준 함수 인스턴스를 생성하지 않고 직접 호출 메소드 인스턴스를 사용하여 호출하는 함수로 에 연결되어 있음 클래스에 작성한 함수 에 연결된  빌트인 오브젝트의 에 연결된 함수","frontmatter":{"date":"November 16, 2021","title":"Class 선언, Class 구조 - Class 선언문, Class 표현식","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-class-2/"}},"next":{"id":"abb4e680-93e2-53a7-96cd-ec5c2044569b","html":"<br>\n<h1 align=\"center\">\n  👋  객체 지향 프로그래밍: 객체 구성 요소, 객체의 구체화, 자바스크립트로 OOP 구현\n</h1>\n<br>\n<h2 id=\"1-js\" style=\"position:relative;\"><a href=\"#1-js\" aria-label=\"1 js permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. JS</h2>\n<ul>\n<li>\n<p>객체 지향 프로그래밍 언어</p>\n<ul>\n<li><code class=\"language-text\">OOP</code> : Object Oriented Programming</li>\n</ul>\n</li>\n<li>\n<p>ECMASciprt 스펙에 OOP라고 작성되어 있음</p>\n<ul>\n<li>ECMAScripte is an object-oriented programming language</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"2-객체-구성-요소\" style=\"position:relative;\"><a href=\"#2-%EA%B0%9D%EC%B2%B4-%EA%B5%AC%EC%84%B1-%EC%9A%94%EC%86%8C\" aria-label=\"2 객체 구성 요소 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 객체 구성 요소</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">OOP</code>에서 Object(객체)는 JS Object가 아님</p>\n<ul>\n<li>개념적, 사상적 접근</li>\n<li>형체, 실체가 없음</li>\n</ul>\n</li>\n<li>\n<p>행위와 속성으로 객체의 특성을 표현 함</p>\n<ul>\n<li>행위 : 먹다, 마시다와 같은 동적인 모습</li>\n<li>속성 : 밥을 먹다, 물을 마시다와 같은 행위의 대상이 속성</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"3-객체의-구체화\" style=\"position:relative;\"><a href=\"#3-%EA%B0%9D%EC%B2%B4%EC%9D%98-%EA%B5%AC%EC%B2%B4%ED%99%94\" aria-label=\"3 객체의 구체화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 객체의 구체화</h2>\n<ul>\n<li>\n<p>객체를 코드로 구체화하면 객체는 <code class=\"language-text\">Class</code>가 됨</p>\n<ul>\n<li>행위는 <code class=\"language-text\">Method</code>가 됨</li>\n<li>속성은 <code class=\"language-text\">Property</code>가 됨</li>\n</ul>\n</li>\n<li>\n<p>클래스에서</p>\n<ul>\n<li>메소드와 프로퍼티를 작성함</li>\n<li>클래스 자체로는 사용할 수 없으며</li>\n<li>인스턴스로 생성해야 사용 할 수 있음</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">class Point {\n  constructor(point) {\n    this.point = point;\n  }\n\n  getPoint() {\n    return this.point;\n  }\n}\n\nconst obj = new Point(100);\n\nconsole.log(obj.getPoint()); // 100\nconsole.log(obj.point); // 100</code>\n        </deckgo-highlight-code>\n<ol>\n<li>\n<p><code class=\"language-text\">class Point {...}</code></p>\n<ul>\n<li><code class=\"language-text\">class</code> 키워드로 클래스를 선언 함, 이 시점에서 <code class=\"language-text\">class</code>를 사용할 수 없음</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">const obj = new Point(100);</code></p>\n<ul>\n<li><code class=\"language-text\">constructor</code> 가 호출되며 파라미터 값을 넘겨 줌</li>\n<li>인스턴스를 생성하여 반환하며 <code class=\"language-text\">obj</code> 에 할당함</li>\n<li>이제 인스턴스로 클래스를 사용할 수 있음</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">obj.getPoint()</code></p>\n<ul>\n<li>인스턴스의 <code class=\"language-text\">getPoint()</code> 메소드를 호출 함</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">return this.point</code></p>\n<ul>\n<li><code class=\"language-text\">point</code> 프로퍼티 임</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">obj.point</code></p>\n<ul>\n<li><code class=\"language-text\">obj</code> 인스턴스의 <code class=\"language-text\">point</code> 프로퍼티 값을 구함</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n<br>\n<h2 id=\"4-js로-oop-구현\" style=\"position:relative;\"><a href=\"#4-js%EB%A1%9C-oop-%EA%B5%AC%ED%98%84\" aria-label=\"4 js로 oop 구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. JS로 OOP 구현</h2>\n<ul>\n<li>\n<p>다른 언어와 <code class=\"language-text\">OOP</code> 개념은 같지만 클래스 구조와 구현 방법이 다름</p>\n<ul>\n<li><code class=\"language-text\">prototype</code> 에 메소드를 연결하는 구조</li>\n<li>연결된 메소드로 인스턴스 생성</li>\n</ul>\n</li>\n<li>따라서 비교하는 것은 의미가 없음</li>\n<li><code class=\"language-text\">JS</code>에 적합한 방법과 <code class=\"language-text\">JS</code> 특징을 활용하여 <code class=\"language-text\">OOP</code>를 구현해야 함</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","frontmatter":{"date":"November 15, 2021","title":"객체 지향 프로그래밍 - 객체 구성 요소, 객체의 구체화, 자바스크립트로 OOP 구현","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-class-1/"}},"prev":{"id":"d971d645-1e68-5ade-b2cb-b0fcbb268a9c","html":"<br>\n<h1 align=\"center\">\n  👋  Class 작성 기준, computed name\n</h1>\n<br>\n<h2 id=\"1-class-작성-기준\" style=\"position:relative;\"><a href=\"#1-class-%EC%9E%91%EC%84%B1-%EA%B8%B0%EC%A4%80\" aria-label=\"1 class 작성 기준 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Class 작성 기준</h2>\n<ul>\n<li>클래스는 <code class=\"language-text\">strict</code> 모드에서 실해오디므로 이에 맞추어 코드를 작성해야 함</li>\n<li>\n<p>클래스에 메소드 작성 방법</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">class Point {\nsetPoint(point) {\n  this.point = point;\n}\n\ngetPoint() {\n  return this.point;\n}\n}\n\nconsole.log(typeof Point); // function</code>\n        </deckgo-highlight-code>\n<ul>\n<li><code class=\"language-text\">function</code> 키워드를 작성하지 않음</li>\n<li>메소드와 메소드 사이에 콤마<code class=\"language-text\">(,)</code>를 작성하지 않음</li>\n<li>단 세미콜론<code class=\"language-text\">(;)</code> 은 작성은 선택임</li>\n</ul>\n</li>\n<li>\n<p>클래스의 <code class=\"language-text\">typeof</code>는 <code class=\"language-text\">function</code> 임</p>\n<ul>\n<li><code class=\"language-text\">Class</code> 타입은 별로도 있지 않음</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"2-computed-name\" style=\"position:relative;\"><a href=\"#2-computed-name\" aria-label=\"2 computed name permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Computed Name</h2>\n<ul>\n<li>\n<p>메소드 이름을 조합하여 사용</p>\n<ul>\n<li>대괄호 <code class=\"language-text\">[]</code> 안에 조합할 이름을 작성</li>\n<li>조합한 결과가 메소드 이름이 됨</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const name = &#39;Point&#39;;\n\nclass Point {\n  static [&#39;get&#39; + name](add) {\n    return add ? 100 : 50;\n  }\n}\n\nconsole.log(Point[&#39;get&#39; + name](true)); // 100\n\n// static [&quot;get&quot; + name](add) {}\n// &quot;get과 name 변숫값인 &quot;Point&quot;를 연결하여 메소드 이름으로 사용 함\n// 엔진이 class 키워드를 만나면 클래스를 오브젝트로 만들게 되며 []의 조합 결과를 메소드 이름으로 사용 함\n// 따라서 class 키워드 앞에 name 변숫값을 정의해야 함\n// Point[&quot;get&quot; + name](true)\n// 메소드 이름을 조합하여 호출 할 수 있음</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<h2 id=\"3-class-작성-기준\" style=\"position:relative;\"><a href=\"#3-class-%EC%9E%91%EC%84%B1-%EA%B8%B0%EC%A4%80\" aria-label=\"3 class 작성 기준 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Class 작성 기준</h2>\n<ul>\n<li>메소드를 <code class=\"language-text\">prototype</code>에 연결하여 작성하지 않음</li>\n<li>클래스 밖에서 메소드를 <code class=\"language-text\">prototype</code>에 연결할 수 있음</li>\n<li>클래스는 열거할 수 없음</li>\n<li>\n<p><code class=\"language-text\">prototype</code>에 메소드 추가</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const Point = calss {\n\tsetPoint(point) {\n\t\tthis.point = point;\n\t}\n};\n\nconsole.log(Point.prototype.setPoint());  // setPoint(point) {this.point = point;)\n\n// 1. setPoint(){...} 형태로 작성하면 엔진이 prototype에 연결된 구조로 변환함\n// 2. console.log(Point.prototype.setPoint) prototype에 연결된 구조로 변환하므로 메소드 코드가 줄력 됨</code>\n        </deckgo-highlight-code>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const Point = class {};\nconst obj = new Point();\n\nPoint.prototype.getPoint = function () {\nreturn 100;\n};\n\nconsole.log(obj.getPoint()); // 100\n\n// 1. Point.prototype.getPoint = function() {...} 클래스 밖에서 prototype에 메소드를 연결할 수 있음\n// 2. obj.getPoint() prototype에 추가로 연결한 메소드를 인스턴스에서 호출할 수 있음</code>\n        </deckgo-highlight-code>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const Book = class {\nsetTitle(title) {\n  this.title = title;\n}\n};\n\n/*\n\t1. Book을 펼치면, 프로퍼티와 prototype가 있음\n\n\t2. prototype을 펼치면, setTitle()이 있음\n*/\n\nconst obj = new Book();\nobj.setTitle(&#39;JS&#39;);\n\n/*\n\t1. obj를 펼치면, title 프로퍼티가 있으며\n\t\t- 이것은 setTitle()에서 설정한 것\n\n\t2. title처럼 인스턴스에 바로 연결된 프로퍼티를\n\t\t- 인스턴스 프로퍼티라고 부름\n\n\t3. obj.__proto__를 펼치면, setTitle()이 있음\n\n\t4. 인스턴스 프로퍼티는 __proto__ 위에 표시되며\n\t\t- 메소드는 __proto__ 안에 표시됨\n*/\n\nBook.prototype.getTitle = function () {\nreturn this.title;\n};\n\n/*\n\t1. Book.prototype에 getTitle()이 추가됨\n\n\t2. obj.__proto__에 getTitle()이 표시됨\n\n\t3. prototype에 메소드를 추가로 연결하면\n\t\t- 생성된 모든 인스턴스에서 메소드를 사용할 수 있음\n\n\t4. 이것을 prototype sharing(공유)라고 부름\n*/\n\nconsole.log(obj.getTitle());\n/*\n\t1. obj 인스턴스의 getTitle() 메소드가 호출되며 &quot;JS&quot;를 반환 함\n*/</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","frontmatter":{"date":"November 17, 2021","title":"Class 작성 기준, computed name","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-class-3/"}},"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":"zoomkoding/zoomkoding-gatsby-blog"}}}}},"pageContext":{"slug":"/study-js-es6-class-2/","nextSlug":"/study-js-es6-class-1/","prevSlug":"/study-js-es6-class-3/"}},"staticQueryHashes":["1073350324","2938748437"]}