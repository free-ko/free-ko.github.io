{"componentChunkName":"component---src-templates-blog-template-js","path":"/effective-typescript-8/","result":{"data":{"cur":{"id":"4017e440-6bf7-5cd2-97d8-ea43c4256872","html":"<h2 id=\"아이템-58-모던-자바스크립트로-작성하기\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-58-%EB%AA%A8%EB%8D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%A1%9C-%EC%9E%91%EC%84%B1%ED%95%98%EA%B8%B0\" aria-label=\"아이템 58 모던 자바스크립트로 작성하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이템 58: 모던 자바스크립트로 작성하기</h2>\n<ol>\n<li>\n<p>타입스크립트의 컴파일러를 자바스크립트의 ‘트랜스파일러’로 사용</p>\n<ul>\n<li>타입스크립트는 자바스크립트의 상위집합이므로 타입스크립트를 자바스크립트로 컴파일할 수 있음</li>\n</ul>\n</li>\n<li>\n<p>ECMAScript 모듈 사용</p>\n<ul>\n<li>ES2015에 등장한 import와 export 를 사용하는 모듈이 표준이 되었음</li>\n</ul>\n</li>\n<li>\n<p>프로토타입 대신 클래스 사용</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n first<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n last<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>first<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> last<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>first <span class=\"token operator\">=</span> first<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>last <span class=\"token operator\">=</span> last<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n\n <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>first <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>last<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> marie <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Marie'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Curie'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> personName <span class=\"token operator\">=</span> marie<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">var</code> 대신 <code class=\"language-text\">let / const</code> 사용</p>\n<ul>\n<li>스코프 문제 피하기</li>\n<li>함수 선언문 대신 함수 표현식을 사용하여 호이스팅 문제 피하기</li>\n</ul>\n</li>\n</ol>\n<br>\n<h3 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h3>\n<ul>\n<li><a href=\"https://github.com/pagers-org/Effective-TypeScript\">이펙티브 타입스크립트 Study</a></li>\n<li><a href=\"http://www.yes24.com/Product/Goods/102124327\">이펙티브 타입스크립트 책</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-58-%EB%AA%A8%EB%8D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%A1%9C-%EC%9E%91%EC%84%B1%ED%95%98%EA%B8%B0\">아이템 58: 모던 자바스크립트로 작성하기</a></p>\n<ul>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"아이템 58: 모던 자바스크립트로 작성하기 타입스크립트의 컴파일러를 자바스크립트의 ‘트랜스파일러’로 사용 타입스크립트는 자바스크립트의 상위집합이므로 타입스크립트를 자바스크립트로 컴파일할 수 있음 ECMAScript 모듈 사용 ES2015에 등장한 import와 export 를 사용하는 모듈이 표준이 되었음 프로토타입 대신 클래스 사용  대신  사용 스코프 문제 피하기 함수 선언문 대신 함수 표현식을 사용하여 호이스팅 문제 피하기 참고 이펙티브 타입스크립트 Study 이펙티브 타입스크립트 책 아이템 58: 모던 자바스크립트로 작성하기 참고","frontmatter":{"date":"June 30, 2023","title":"Effective TypeScript 8장","categories":"Study","author":"Kay","emoji":"👋"},"fields":{"slug":"/effective-typescript-8/"}},"next":{"id":"94da810f-2c09-5bef-b483-5c9c12b03a4c","html":"<h2 id=\"아이템-53-ts-기능보다는-ecmascript-기능을-사용하기\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-53-ts-%EA%B8%B0%EB%8A%A5%EB%B3%B4%EB%8B%A4%EB%8A%94-ecmascript-%EA%B8%B0%EB%8A%A5%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"아이템 53 ts 기능보다는 ecmascript 기능을 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이템 53: TS 기능보다는 ECMAScript 기능을 사용하기</h2>\n<ol>\n<li>\n<p>JS에 새로 추가된 기능은 TS의 초기 기능과 호환성 문제를 발생</p>\n<ul>\n<li>JS의 신규 기능을 그대로 채택하고 TS 초기 버전과 호환성을 포기 그러나 이미 사용되고 있던 몇 가지 기능(호환성 문제로 지양하는 방식) 있음</li>\n</ul>\n</li>\n<li>\n<p>열거형(enum)</p>\n<ul>\n<li>몇몇 값의 모음을 나타내는 방식</li>\n<li>문제점</li>\n<li>숫자 열거형에 0, 1, 2 외의 다른 숫자가 할당되면 매우 위험</li>\n<li>상수 열거형(const enum)은 런타임에 완전히 제거되어, 문자열 열거형에서 문제를 일으킴</li>\n<li>preserveConstEnums 플래그를 설정한 상수 열거형은 런타임 코드에 정보를 유지함</li>\n<li>문자열 열거형은 구조적 타이핑이 아닌 명목적 타이핑을 사용함</li>\n<li>문자열 열거형의 명목적 타이핑은 JS와 동작이 다르다는 문제가 있음</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">enum</span> Flavor <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">VANILLA</span> <span class=\"token operator\">=</span> <span class=\"token string\">'vanilla'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">CHOCOLATE</span> <span class=\"token operator\">=</span> <span class=\"token string\">'chocolate'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">STRAWBERRY</span> <span class=\"token operator\">=</span> <span class=\"token string\">'strawberry'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> flavor <span class=\"token operator\">=</span> Flavor<span class=\"token punctuation\">.</span><span class=\"token constant\">CHOCOLATE</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 타입이 Flavor</span>\nflavor <span class=\"token operator\">=</span> <span class=\"token string\">'strawberry'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 🚨 'strawberry' 형식은 'Flavor' 형식에 할당할 수 없습니다</span>\n\n<span class=\"token comment\">// 열거형 대신 리터럴 타입의 유니온 사용을 권장</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Flavor</span> <span class=\"token operator\">=</span> <span class=\"token string\">'vanilla'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'chocolate'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'strawberry'</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>매개변수 속성</p>\n<ul>\n<li>생성자의 매개변수를 사용하여 클래스 초기화 시 TS는 간결한 문법을 제공</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">public</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>\n<p>문제점</p>\n<ul>\n<li>실제로는 코드가 늘어남</li>\n<li>매개변수 속성은 런타임에는 실제로 사용되지만, TS에서는 사용되지 않는 것처럼 보임</li>\n<li>매개변수 속성과 일반 속성을 섞어서 사용하면 클래스의 설계가 혼란스러워 짐</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>네임스페이스와 트리플 슬래시 임포트</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// ES2015 스타일의 모듈(import와 export) 사용을 권장</span>\n\n<span class=\"token keyword\">namespace</span> foo <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/// &lt;reference path=\"other.ts\" /></span>\nfoo<span class=\"token punctuation\">.</span><span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol start=\"5\">\n<li>\n<p>데코레이터</p>\n<ul>\n<li>클래스, 메서드, 속성에 annotation을 붙이거나 기능을 추가하는 것</li>\n<li>문제점</li>\n<li>표준화가 완료되지 않았기 때문에 비표준으로 바뀌거나 호환성이 깨질 가능성이 있음</li>\n</ul>\n</li>\n</ol>\n<br>\n<h2 id=\"아이템-54-객체를-순회하는-노하우\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-54-%EA%B0%9D%EC%B2%B4%EB%A5%BC-%EC%88%9C%ED%9A%8C%ED%95%98%EB%8A%94-%EB%85%B8%ED%95%98%EC%9A%B0\" aria-label=\"아이템 54 객체를 순회하는 노하우 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이템 54: 객체를 순회하는 노하우</h2>\n<ol>\n<li>\n<p>편집기에서 오류가 발생하는 경우</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n one<span class=\"token operator\">:</span> <span class=\"token string\">'uno'</span><span class=\"token punctuation\">,</span>\n two<span class=\"token operator\">:</span> <span class=\"token string\">'dos'</span><span class=\"token punctuation\">,</span>\n three<span class=\"token operator\">:</span> <span class=\"token string\">'tres'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> k <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">const</span> v <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n <span class=\"token comment\">// 🚨 obj에 인덱스 시그니처가 없기 때문에 엘리먼트는 암시적으로 'any' 타입</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// k가 string 으로 인식되기 때문</span>\n<span class=\"token comment\">// k의 타입을 더욱 구체적으로 명시해서 해결가능</span>\n<span class=\"token keyword\">let</span> k<span class=\"token operator\">:</span> <span class=\"token keyword\">keyof</span> <span class=\"token keyword\">typeof</span> obj<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>k <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">const</span> v <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 정상</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">k</code>가 <code class=\"language-text\">string</code>으로 추론된 이유</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// a, b, c 외에 다른 속성이 존재하는 객체도 foo 함수의 매개변수 abc에 할당 가능하기 때문</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token constant\">ABC</span></span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  b<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  c<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>abc<span class=\"token operator\">:</span> <span class=\"token constant\">ABC</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> k <span class=\"token keyword\">in</span> abc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> v <span class=\"token operator\">=</span> abc<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 🚨</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">keyof</code>을 사용하는 것의 문제</p>\n<ul>\n<li><code class=\"language-text\">v</code>도 <code class=\"language-text\">string | number</code>로 한정되어 범위가 너무 좁아짐</li>\n</ul>\n</li>\n<li>\n<p>단지 객체의 키와 값을 순회하고 싶다면 <code class=\"language-text\">Object.entries</code>를 사용</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>abc<span class=\"token operator\">:</span> <span class=\"token constant\">ABC</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>abc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   k<span class=\"token punctuation\">;</span> <span class=\"token comment\">// string 타입</span>\n   v<span class=\"token punctuation\">;</span> <span class=\"token comment\">// any 타입</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ol>\n<br>\n<h2 id=\"아이템-55-dom-계층-구조-이해하기\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-55-dom-%EA%B3%84%EC%B8%B5-%EA%B5%AC%EC%A1%B0-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0\" aria-label=\"아이템 55 dom 계층 구조 이해하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이템 55: DOM 계층 구조 이해하기</h2>\n<ol>\n<li>\n<p>DOM 엘리먼트를 사용할 때 TS 에러</p>\n<ul>\n<li>\n<p>EventTarget : DOM 타입 중 가장 추상화된 타입으로, 이벤트리스너의 추가/제거, 이벤트 보내기만 가능</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// 'EventTarget' 형식에 'classList' 속성이 없음</span>\n<span class=\"token comment\">// Event의 currentTarget 속성의 타입은 EventTarget | null</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">handleDrag</span><span class=\"token punctuation\">(</span>eDown<span class=\"token operator\">:</span> Event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> targetEl <span class=\"token operator\">=</span> eDown<span class=\"token punctuation\">.</span>currentTarget<span class=\"token punctuation\">;</span>\n  targetEl<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dragging'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>Node : Element가 아닌 Node, 텍스트 조각과 주석</li>\n<li>Element와 HTMLElement : HTML이 아닌 엘리먼트, SVGSvgElement</li>\n<li>\n<p>HTMLxxxElement</p>\n<ul>\n<li>HTMLxxxElement 형태의 특정 엘리먼트들은 자신만의 고유한 속성을 가지고 있음 ex) HTMLImageElement(src), HTMLInputElement(value)</li>\n<li>항상 정확한 타입을 얻을 수 있는 것은 아님</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// 정확한 타입</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// HTMLButtonElement</span>\n\n<span class=\"token comment\">// 정확한 타입이 아닌 경우</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'my-div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// HTMLElement</span></code></pre></div>\n<ul>\n<li>타입 단언문 사용</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'my-div'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> HTMLDivElement<span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>strictNullChecks 설정 시, 엘리먼트가 null인 경우를 체크함</li>\n<li>\n<p>Event 는 가장 추상화된 이벤트로, 별도의 계층구조를 가짐</p>\n<ul>\n<li>ex) UIEvent, MouseEvent, TouchEvent, WheelEvent, KeyboardEvent</li>\n<li>더 많은 문맥 정보를 제공하여 DOM에 대한 타입 추론을 가능하게 해야 함</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<br>\n<h2 id=\"아이템-56-정보를-감추는-목적으로-private-사용하지-않기\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-56-%EC%A0%95%EB%B3%B4%EB%A5%BC-%EA%B0%90%EC%B6%94%EB%8A%94-%EB%AA%A9%EC%A0%81%EC%9C%BC%EB%A1%9C-private-%EC%82%AC%EC%9A%A9%ED%95%98%EC%A7%80-%EC%95%8A%EA%B8%B0\" aria-label=\"아이템 56 정보를 감추는 목적으로 private 사용하지 않기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이템 56: 정보를 감추는 목적으로 private 사용하지 않기</h2>\n<ol>\n<li>\n<p>public, protected, private 같은 접근 제어자</p>\n<ul>\n<li>TS 키워드기 때문에 컴파일 후에 제거 됨</li>\n</ul>\n</li>\n<li>\n<p>심지어 단언문을 사용하면 TS 상태에서도 private 속성에 접근 가능</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// 정보를 감추기 위해 private 을 사용하면 안 됨</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Diary</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">private</span> secret <span class=\"token operator\">=</span> <span class=\"token string\">'test'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> diary <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Diary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">(</span>diary <span class=\"token keyword\">as</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>secret<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 정상</span></code></pre></div>\n</li>\n<li>\n<p>정보를 감추기 위해 클로저 사용</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// PasswordChecker 의 생성자 외부에서 passwordHash 변수에 접근할 수 없기 때문에 정보가 숨겨 짐</span>\n<span class=\"token comment\">// 이때 passwordHash에 접근하는 메서드 역시 생성자 내부에 정의되어야 함</span>\n<span class=\"token comment\">// 메서드 정의가 생성자 내부에 있으면, 인스턴스 메서드로 생성된다는 점을 기억(메모리 낭비)</span>\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> <span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>text<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PasswordChecker</span> <span class=\"token punctuation\">{</span>\n <span class=\"token function-variable function\">checkPassword</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>password<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>passwordHash<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">checkPassword</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>password<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">return</span> <span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> passwordHash<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> checker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PasswordChecker</span><span class=\"token punctuation\">(</span><span class=\"token function\">hash</span><span class=\"token punctuation\">(</span><span class=\"token string\">'s3cret'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nchecker<span class=\"token punctuation\">.</span><span class=\"token function\">checkPassword</span><span class=\"token punctuation\">(</span><span class=\"token string\">'s3cret'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n</li>\n<li>\n<p>비공개 필드 (현재 표준화 진행중) 사용</p>\n<ul>\n<li>접두사 #</li>\n<li>타입 체크와 런타임 모두에서 비공개</li>\n<li>클래스 외부에서는 접근할 수 없지만, 클래스 메서드나 동일 클래스의 개별 인스턴스끼리는 접근이 가능</li>\n</ul>\n</li>\n</ol>\n<br>\n<h2 id=\"아이템-57-소스맵을-사용하여-ts-디버깅하기\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-57-%EC%86%8C%EC%8A%A4%EB%A7%B5%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-ts-%EB%94%94%EB%B2%84%EA%B9%85%ED%95%98%EA%B8%B0\" aria-label=\"아이템 57 소스맵을 사용하여 ts 디버깅하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이템 57: 소스맵을 사용하여 TS 디버깅하기</h2>\n<ol>\n<li>디버거는 런타임에 동작하며, 현재 동작하는 코드가 어떤 과정을 거쳤는지 모름</li>\n<li>\n<p>디버깅 문제를 해결하기 위해 브라우저는 소스맵(source map) 기능을 제공</p>\n<ul>\n<li>변환된 코드의 위치와 심벌들을 원본 코드의 원래 위치와 심벌들로 매핑함</li>\n</ul>\n</li>\n<li>\n<p>TS의 소스맵 활성화</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">   <span class=\"token comment\">// tsconfig.json</span>\n   <span class=\"token comment\">// 각 .ts 파일에 대해서 .js와 .js.map 두 개의 파일을 생성</span>\n   <span class=\"token punctuation\">{</span>\n     <span class=\"token string\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token string\">\"sourceMap\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n     <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>소스맵에 대해 알아야 할 사항들</p>\n<ul>\n<li>TS와 함께 번들러나 압축기를 사용하고 있다면, 번들러나 압축기가 각자의 소스맵을 생성. 이상적인 디버깅을 위해서는 생성된 JS가 아닌 원본 TS 소스로 매핑되도록 해야 함</li>\n<li>상용 환경에 소스맵이 유출되고 있는지 확인해야 함. 소스맵에 원본 코드의 인라인 복사본이 포함되어 있다면 공개해서는 안될 내용이 들어있을 수 있음</li>\n</ul>\n</li>\n</ol>\n<br>\n<h3 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h3>\n<ul>\n<li><a href=\"https://github.com/pagers-org/Effective-TypeScript\">이펙티브 타입스크립트 Study</a></li>\n<li><a href=\"http://www.yes24.com/Product/Goods/102124327\">이펙티브 타입스크립트 책</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-53-ts-%EA%B8%B0%EB%8A%A5%EB%B3%B4%EB%8B%A4%EB%8A%94-ecmascript-%EA%B8%B0%EB%8A%A5%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\">아이템 53: TS 기능보다는 ECMAScript 기능을 사용하기</a></li>\n<li><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-54-%EA%B0%9D%EC%B2%B4%EB%A5%BC-%EC%88%9C%ED%9A%8C%ED%95%98%EB%8A%94-%EB%85%B8%ED%95%98%EC%9A%B0\">아이템 54: 객체를 순회하는 노하우</a></li>\n<li><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-55-dom-%EA%B3%84%EC%B8%B5-%EA%B5%AC%EC%A1%B0-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0\">아이템 55: DOM 계층 구조 이해하기</a></li>\n<li><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-56-%EC%A0%95%EB%B3%B4%EB%A5%BC-%EA%B0%90%EC%B6%94%EB%8A%94-%EB%AA%A9%EC%A0%81%EC%9C%BC%EB%A1%9C-private-%EC%82%AC%EC%9A%A9%ED%95%98%EC%A7%80-%EC%95%8A%EA%B8%B0\">아이템 56: 정보를 감추는 목적으로 private 사용하지 않기</a></li>\n<li>\n<p><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-57-%EC%86%8C%EC%8A%A4%EB%A7%B5%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-ts-%EB%94%94%EB%B2%84%EA%B9%85%ED%95%98%EA%B8%B0\">아이템 57: 소스맵을 사용하여 TS 디버깅하기</a></p>\n<ul>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"June 25, 2023","title":"Effective TypeScript 7장","categories":"Study","author":"Kay","emoji":"👋"},"fields":{"slug":"/effective-typescript-7/"}},"prev":{"id":"d0b10aa6-4977-57e9-891f-dade6097cd40","html":"<h2 id=\"한-주-회고\" style=\"position:relative;\"><a href=\"#%ED%95%9C-%EC%A3%BC-%ED%9A%8C%EA%B3%A0\" aria-label=\"한 주 회고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>한 주 회고</h2>\n<p>새로운 직장에서 한 달이 지났습니다. 그 동안 온보딩과 스프린트 한 사이클을 경험하게 되었습니다.</p>\n<p>새로운 사람들과 협업하는 과정 새로운 업무 프로세스 그리고 새로운 도메인 등 낯설지만 그래도 한 걸음씩 나아가고 있다고 생각이 듭니다.</p>\n<p>이 과정에서 모르는 것에 대해 친절히 답변해주신 팀원분들에게 감사했습니다.</p>\n<p>그리고 스프린트를 하면서 ‘확장성’에 대한 피드백을 많이 받았습니다. 하나를 개발을 하더라도 다른 요구사항에도 잘 대응 할 수 있는 비즈니스 로직을 만드는 것이 중요하다는 이야기를 많이 들었고 이 과정에서 또는 앞으로 개발하면 ‘확장성’과 ‘유연함’에 대한 비즈니스 로직을 개발하는 실력을 키울 수 있다는 확신이 들어 설렜습니다.</p>\n<p>물론 이 과정 속에서 많은 고민과 힘듬이 있겠지만, 어쨌든 이 과정을 거치면 반드시 성장한다는 확신은 저에게 큰 동기부여가 되는 것 같습니다.</p>\n<p>아직 한 달 밖에 되지 않았지만, 확실히 성장할 수 있다는 동기를 느끼게 해준 팀 속에서 일을 한다는 것이 얼마나 중요한지 알게 되었고 또한 함께 일하는 사람들의 바이브 및 배려 그리고 커뮤니케이션이 저에게 있어서 일하는데 중요한 요소로 다가왔다는 것도 알게 되었습니다.</p>\n<p>마지막으로 2023년도 반 절이 지난 이 때에 스스로 가고자 하는 방향은 잘 가고 있는지, 나는 잘 안녕한지 되돌아 보는 시간을 틈틈히 가져야겠다는 필요성을 느낍니다.</p>\n<p>단순히 일에 매몰되는 삶이 아닌, 삶의 주체로서 삶을 만들어 가는 그러한 삶을 살아가고 싶습니다.</p>\n<p>이번 한 주도 수고 했습니다.</p>\n<br>\n<h3 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h3>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%ED%95%9C-%EC%A3%BC-%ED%9A%8C%EA%B3%A0\">한 주 회고</a></p>\n<ul>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"July 01, 2023","title":"7월 1주 회고","categories":"Log","author":"Kay","emoji":"👋"},"fields":{"slug":"/write-log-230701/"}},"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/effective-typescript-8/","nextSlug":"/effective-typescript-7/","prevSlug":"/write-log-230701/"}},"staticQueryHashes":["1073350324","2938748437"]}