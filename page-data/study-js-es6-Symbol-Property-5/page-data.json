{"componentChunkName":"component---src-templates-blog-template-js","path":"/study-js-es6-Symbol-Property-5/","result":{"data":{"cur":{"id":"ecf404fb-0ac7-559a-80e0-625bf8b9e84f","html":"<br>\n<h1 align=\"center\">\n  👋  Symbol.species 오버라이드\n</h1>\n<br>\n<h2 id=\"species-오버라이드\" style=\"position:relative;\"><a href=\"#species-%EC%98%A4%EB%B2%84%EB%9D%BC%EC%9D%B4%EB%93%9C\" aria-label=\"species 오버라이드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Species 오버라이드</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">Symbol.species</code> 는 <code class=\"language-text\">static</code> 약세서 프로퍼티 이며 <code class=\"language-text\">getter</code> 만 있고 <code class=\"language-text\">setter</code> 는 없음</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Sports</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token builtin\">Array</span></span> <span class=\"token punctuation\">{</span>\n\tstatice <span class=\"token keyword\">get</span> <span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>species<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token builtin\">Array</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Sports</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">Symbol.species</code> 를 사용할 수 있는 빌트인 오브젝트</p>\n<ul>\n<li>Array, Map, Set, RegExp</li>\n<li>Promise, ArrayBuffer, TypedArray</li>\n</ul>\n</li>\n<li>빌트인 오브젝트를 상속받은 <code class=\"language-text\">class</code>에 <code class=\"language-text\">Symbol.species</code> 를 작성하면 빌트인 오브젝트의 <code class=\"language-text\">@@species</code>가 오라이드 됨</li>\n<li>\n<p>인스턴스 바꾸기</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Sports</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token builtin\">Array</span></span> <span class=\"token punctuation\">{</span>\n\tstatice <span class=\"token keyword\">get</span> <span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>species<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token builtin\">Array</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> one <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Sports</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>one <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Sports</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// true</span>\n\n<span class=\"token keyword\">const</span> two <span class=\"token operator\">=</span> one<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>two <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\"><span class=\"token builtin\">Array</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// true</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>two <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Sports</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// false</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">class Sports extends Array{}</code></li>\n<li>빌트인 <code class=\"language-text\">Array</code> 오브젝트를 상속 받음</li>\n<li><code class=\"language-text\">statice get [Symbol.species](){ return Array; }</code></li>\n<li>빌트인<code class=\"language-text\">Array</code> 오브젝트의 <code class=\"language-text\">@@species</code>를 오버라이드 함</li>\n<li><code class=\"language-text\">const one = new Sports(10, 20, 30);</code></li>\n<li>인스턴스를 생성함</li>\n<li>파라미터 값이 인스턴스에 설정 됨</li>\n<li><code class=\"language-text\">one instanceof Sports</code></li>\n<li><code class=\"language-text\">Sports</code> 로 <code class=\"language-text\">one</code> 을 만들었으므로 <code class=\"language-text\">true</code> 출력</li>\n<li><code class=\"language-text\">const two = one.slice(1,2);</code></li>\n<li><code class=\"language-text\">Array</code> 오브젝트를 상속 받았으므로 <code class=\"language-text\">one</code> 인스턴스로 <code class=\"language-text\">slice()</code>를 호출 할 수 있음</li>\n<li><code class=\"language-text\">slice()</code> 대상은 인스턴스에 설정된 [10, 20, 30]</li>\n<li>인스턴스를 반환하며 반환되는 인스턴스에 <code class=\"language-text\">slice()</code> 결과를 설정함</li>\n<li><code class=\"language-text\">Symbol.species()</code> 로 오버라이드 했으므로</li>\n<li><code class=\"language-text\">static get [Symbol.species](){}</code> 가 호출 됨</li>\n<li>호출에 사용한 <code class=\"language-text\">one</code> 인스턴스 형태를 반환하지 않고 <code class=\"language-text\">Array</code> 인스턴스를 반환함</li>\n<li>이처럼 <code class=\"language-text\">Symbol.species()</code>로 반환할 인스턴스를 변경할 수 있음</li>\n<li><code class=\"language-text\">two instanceof Array</code></li>\n<li><code class=\"language-text\">two</code> 인스턴스에는 <code class=\"language-text\">Array</code> 인스턴스가 할당되어 있으며</li>\n<li><code class=\"language-text\">Array</code> 오브젝트로 만들었으므로 <code class=\"language-text\">true</code> 출력</li>\n<li><code class=\"language-text\">two instacne of Sports</code></li>\n<li><code class=\"language-text\">Sports</code> 가 아니라 <code class=\"language-text\">Array</code> 오브젝트로 <code class=\"language-text\">two</code> 인스턴스를 만들었으므로 <code class=\"language-text\">false</code> 출력</li>\n</ul>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#species-%EC%98%A4%EB%B2%84%EB%9D%BC%EC%9D%B4%EB%93%9C\">Species 오버라이드</a></li>\n</ul>\n</div>","excerpt":"Species 오버라이드  는  약세서 프로퍼티 이며  만 있고  는 없음  를 사용할 수 있는 빌트인 오브젝트 Array, Map, Set, RegExp Promise, ArrayBuffer, TypedArray 빌트인 오브젝트를 상속받은 에  를 작성하면 빌트인 오브젝트의 가 오라이드 됨 인스턴스 바꾸기  빌트인  오브젝트를 상속 받음  빌트인 오브젝트의 를 오버라이드 함  인스턴스를 생성함 파라미터 값이 인스턴스에 설정 됨   로  을 만들었으므로  출력   오브젝트를 상속 받았으므로  인스턴스로 를 호출 할 수 있음  대상은 인스턴스에 설정된 10, 20, 30 인스턴스를 반환하며 반환되는 인스턴스에  결과를 설정함  로 오버라이드 했으므로  가 호출 됨 호출에 사용한  인스턴스 형태를 반환하지 않고  인스턴스를 반환함 이처럼 로 반환할 인스턴스를 변경할 수 있음   인스턴스에는  인스턴스가 할당되어 있으며  오브젝트로 만들었으므로  출력   가 아니라  오브젝트로  인스턴…","frontmatter":{"date":"October 25, 2021","title":"Symbol.species 오버라이드","categories":"JS","author":"Kay","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-Symbol-Property-5/"}},"next":{"id":"c21ac4f2-b73a-5556-883c-f98f327f8d7f","html":"<br>\n<h1 align=\"center\">\n  👋  Symbol.species\n</h1>\n<br>\n<h2 id=\"symbolspecies\" style=\"position:relative;\"><a href=\"#symbolspecies\" aria-label=\"symbolspecies permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Symbol.species</h2>\n<ul>\n<li>species의 사전적 의미 : (공통 특성을 지닌) 종류, 인류, 종</li>\n<li>\n<p><code class=\"language-text\">Symbol.species</code> 는 <code class=\"language-text\">constructor</code>를 반환</p>\n<ul>\n<li><code class=\"language-text\">constructor</code> 를 실행하면 인스턴스를 생성하여 반환하므로 결국, 인스턴스를 반환하게 됨</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">Symbol.species</code> 를 오버라이드 하면 다른 인스턴스를 반환할 수 있다는 의미</p>\n<ul>\n<li>메소드를 실행한 후의 결과 형태</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n\t1. [1, 2, 3]으로 Array 오브젝트를 생성하여 obj에 할달\n\n\t2. 오른쪽의 obj를 펼쳐서 obj 구조를 보면\n\t\t- prototype은 없고 __proto__만 있으므로\n\t\n\t3. obj는 빌트인 Array 오브젝트가 아니라\n\t\t- Array.prototype에 연결된 메소드로 생성한 인스턴스임\n\n\t4. 다만, new 연산자를 사용하지 않았으므로 강좌에서 인스턴스라고 하지 않고 오브젝트라고 한 것\n*/</span>\n\n<span class=\"token keyword\">const</span> one <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n\t1. 위 코드를 실행한 후의 one과 obj의 구조는 차이가 없으며\n\t\t- 값 [2,3]만 다름\n\n\t2. 이것이 인스턴스에 있는 메소드를 호출하면\n\t\t- 메소드 실행 결괏값을 반환하지 않고\n\n\t3. 결괏값이 설정된 인스턴스를 반환하기 때문\n*/</span>\n\n<span class=\"token keyword\">const</span> two <span class=\"token operator\">=</span> one<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n\t1. 바로 앞에서 반환된 one으로\n\t\t- 메소드를 호출할 수 있다는 것은\n\t\t- one이 인스턴스이기 때문\n\n\t2. 또한 slice(1, 2)를 실행하면\n\t\t- 결과 값이 설정된 인스턴스를 반환 함\t\n*/</span>\n\n<span class=\"token comment\">// 정리 //</span>\n<span class=\"token comment\">/*\n\t1. Array 인스턴스의 메소드를 호출하면\n\t\t- 값을 반환하는 것이 아니라\n\t\t\n\t2. 반환할 Array 인스턴스를 생성하고\n\t\t- 메소드에서 구한 값을 반환할 Array 인스턴스에 설정하여\n\t\t- Array 인스턴스를 반환함\n*/</span></code></pre></div>\n</li>\n</ul>\n<br>\n<ul>\n<li>\n<p><code class=\"language-text\">Symbol.speies</code> 기능</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Sports</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token builtin\">Array</span></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Sports</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> one <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>one<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [20]</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">class Sports extends Array{}</code></li>\n<li>빌트인 Array 오브젝트를 상속(확장, 연결) 받음</li>\n<li><code class=\"language-text\">const obj = new Sports(10,20,30);</code></li>\n<li>인스턴스를 생성함</li>\n<li><code class=\"language-text\">const one = obj.slice(1,2);</code></li>\n<li><code class=\"language-text\">obj</code> 인스턴스의 <code class=\"language-text\">slice()</code>를 호출하면</li>\n<li><code class=\"language-text\">slice()</code> 처리 결과를 인스턴스에 설정하여 인스턴스를 반환함</li>\n<li>이렇게 인스턴스의 메소드를 호출 했을 때</li>\n<li>인스턴스를 반환하도록 하는 것이</li>\n<li><code class=\"language-text\">Symbol.species</code> 기능임</li>\n</ul>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#symbolspecies\">Symbol.species</a></li>\n</ul>\n</div>","frontmatter":{"date":"October 24, 2021","title":"Symbol.species","categories":"JS","author":"Kay","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-Symbol-Property-4/"}},"prev":{"id":"1d68c41d-9d72-5d55-bfb5-9819bb49bb96","html":"<br>\n<h1 align=\"center\">\n  👋  Symbol.toPrimitive\n</h1>\n<br>\n<h2 id=\"toprimitive\" style=\"position:relative;\"><a href=\"#toprimitive\" aria-label=\"toprimitive permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>toPrimitive</h2>\n<ul>\n<li>오브젝트를 대응하는 <code class=\"language-text\">Primitive</code> 값으로 변환</li>\n<li>\n<p>대응, 기대하는 타입</p>\n<ul>\n<li>number, string, default</li>\n<li>ToPrimitive 스펙</li>\n</ul>\n</li>\n<li>\n<p>오브젝트를 문자열에 대응</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> point <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> bonus<span class=\"token operator\">:</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>point<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [object Object]</span>\n\n<span class=\"token keyword\">const</span> book <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">'책'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>book<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 책</span>\n\n<span class=\"token comment\">// 1. 문자열 대응은 toString()을 사용함</span>\n<span class=\"token comment\">// 2. point.toString() Object.prototype.toString()가 호출 됨</span>\n<span class=\"token comment\">// 3. `${book}` book 오브젝트의 toString()이 호출 됨</span></code></pre></div>\n</li>\n<li>\n<p>오브젝트를 숫자에 대응</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> point <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>bonus<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>point<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// {bonus: 100}</span>\n\n<span class=\"token keyword\">const</span> book <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token number\">70</span> <span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token number\">30</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>book <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 600</span>\n\n<span class=\"token comment\">// 1. 숫자 대응은 valueOf()를 사용함</span>\n<span class=\"token comment\">// 2. point.valueOf() Object.prototype.valueOf()가 호출 됨</span>\n<span class=\"token comment\">// 3. book * 20 book 오브젝트의 valueOf()가 호출되며 toString()이 호출되지 않음</span>\n<span class=\"token comment\">// 4. valueOf()를 작성하지 않으면 toString()이 호출됨</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">Symbol.toPrimitive()</code> 사용</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>toPrimitive<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">hint</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> hint <span class=\"token operator\">===</span> <span class=\"token string\">'number'</span> <span class=\"token operator\">?</span> <span class=\"token number\">30</span> <span class=\"token operator\">:</span> hint <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span> <span class=\"token operator\">?</span> <span class=\"token string\">'책'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'default'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span> <span class=\"token operator\">*</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 600</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>obj<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">+</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 책100</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj <span class=\"token operator\">+</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// default50</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'default'</span> <span class=\"token operator\">===</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true;</span></code></pre></div>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#toprimitive\">toPrimitive</a></li>\n</ul>\n</div>","frontmatter":{"date":"October 26, 2021","title":"Symbol.toPrimitive","categories":"JS","author":"Kay","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-Symbol-Property-6/"}},"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":"zoomkoding/zoomkoding-gatsby-blog"}}}}},"pageContext":{"slug":"/study-js-es6-Symbol-Property-5/","nextSlug":"/study-js-es6-Symbol-Property-4/","prevSlug":"/study-js-es6-Symbol-Property-6/"}},"staticQueryHashes":["1073350324","2938748437"]}