{"componentChunkName":"component---src-pages-index-js","path":"/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"76a4fda7-c89d-59f3-8392-a76e85a4dcab","excerpt":"Facts 개발을 하는 과정에서 와 를 사용하는 데, 상황에 따라 어떤 것을 써야 하는지 의문이 들었음.  Fellings 그래서 개발하면서 아무 생각없이 개발하고 있는 내 자신을 보면서, 올 해에는 이렇게 개발하면 안되겠다는 생각을 하게 됨. 즉, 의식적 노력을 동반한 개발을 해야겠다고 생각함. Findings export 한 파일 내에서 여러 변수들을 export하는 것이 가능 import할 때에는 export할때 사용된 변수명을 동일하게 설정해야한다. 다른 이름으로 할때에는 를 사용한다 export default  하는 곳에서 자유자재로 이름을 붙여 줄 수 있기 때문에, 위험 밑에 처럼 거대한 객체를 내보낼 때, 웹팩에서 이 안됨 즉, 웹팩 입장에서는 다 사용하는 줄 알고 다 번들링 진행(메모리 낭비) 도 웹팩의  옵션을 통해, 을 해줄 수 있다. :사용하지는 않지만 번들에 포함되는 코드들 직접적으로 사용하진 않지만, 다른 코드에 영향을 끼칠 수 있다고 판단되면 고 한다.\n이…","frontmatter":{"categories":"TIL","title":"TIL - 230104","date":"January 04, 2023"},"fields":{"slug":"/til-230104/"}}},{"node":{"id":"83e28ebf-a285-52d3-b4b9-4b2fd7281997","excerpt":"회고 2022년 서울로 올라와 개발하면서 배우고 느꼈던 것들을 작성해본다. 외부 개발자분들과 스터디 진행. 코딩 컨벤션을 기반으로 개발 진행. Fit이 맞는 개발자 채용 간접 경험. UI와 비즈니스 로직을 분리하면서 개발 진행. 기획자, 디자이너, 프론트 & 백엔드 개발자 분들과 협업. 같이 개발하는 팀원분들을 생각하며 가독성 있는 코드 작성. 자신이 개발한 것에 대해 누구에게나 확실하게 설명할 수 있는 책임감 경험. 6개월 동안 스스로 개발적으로 부족하다는 사실을 알게 될 때마다, 솔직히 많이 힘들었다. 개발을 계속 해도 되는지, 아니면 다른 일을 찾아봐야 하는지 많은 고민이 있었다. 그럴 때마다 팀원분들께서  등 많은 격려와 조언을 아낌없이 주셨다. 또한 개발하면서 많은 배려와 좋은 피드백으로 아낌없이 도움을 주셨다. 사실 전 직장에서는 혼자 개발하는 느낌이 있었는데, 현재 함께 고생하고 개발하는 느낌을 많이 받아 심적으로 위안을 얻어서, 팀원분들에게 좋은 영향을 주고 싶은 생…","frontmatter":{"categories":"Log","title":"2022년 회고","date":"December 29, 2022"},"fields":{"slug":"/write-log-221218/"}}},{"node":{"id":"4c3acb84-47a3-5c0b-bdb1-b5c228b5d810","excerpt":"업무 회고 3개월이라는 시간이 지났다. 3개월 전과 지금의 나를 비교 했을 때, 과연 얼마나 많은 성장을 했는지 궁금해서 글을 적어본다. 먼저는 서울이라는 타지역에서 다양한 사람들과 함께 일한다는 것 자체만으로도 좋은 경험이라고 생각한다.\n왜나하면 동료들이 업무를 대하는 자세와 책임과 그리고 태도 측면에서 많이 배웠다. \n특히 자신의 일에 대한 책임감과 성장하고 싶은 열정은 나를 반성하고 돌아보는 시간을 많이 갖게 만들었다. 그리고 3개월 동안 일을 하면서 느꼈던 감정들을 팀원 분들과 대화를 통해 공유하고 해결해 나아가는 시도를 했다.\n여기서 가장 놀랐던 부분은 내가 느꼈던 감정 중 대부분 이 대부분이었는데, 다른 팀원분들도 나와 같은 고민과 감정을 느끼고 있었다.\n나에게 큰 위로와 도움이 되었다. 마지막으로 주어진 업무에 대한 가치는 어떠한 태도를 가지고 업무에 임하는지에 따라 달라진다는 사실을 몸소 깨달았다.\n처음 팀이 배정되고 업무를 받았을 때, 이 업무를 통해 내가 얼마나 …","frontmatter":{"categories":"Log","title":"10월 2주 회고","date":"October 08, 2022"},"fields":{"slug":"/write-log-221008/"}}},{"node":{"id":"b19ce1e4-ecfe-5a7d-8722-b8a98a63e165","excerpt":"추석. 추석에 전주에 내려왔다. 비가 많이 내려서 그런지 아니면 가을이여서 하늘이 맑고 높았다. 변함없는 거리 속에서 자연스럽게 추억들이 떠오른다. 과거에 느꼈던 감정들, 생활들, 그리고 사람들을 기억했다. 문득, ‘지금 겪고 있는 것들도 지나고 나면 이렇게 추억으로 다가올텐데 왜 이렇게 불안과 걱정에 휩싸여 아둥바둥 하고 있는지` 라고 생각을 했다. 그냥 주어진 일에 집중하면서 하나씩 하나씩 채워가자고 스스로 다짐을 해본다.\n 참고 참고","frontmatter":{"categories":"Log","title":"9월 2주 회고","date":"September 10, 2022"},"fields":{"slug":"/write-log-220910/"}}},{"node":{"id":"570a252b-cd19-5b4b-b270-9a67bcce7e55","excerpt":"일 속에서 나. 요즘 일하면서 나와 대화를 많이 하게 된다. ‘할 수 있다’, ‘왜 나는 이것밖에 못 하지’, ‘그래도 하나씩 하자’ 등 많은 생각들이 표정과 행동으로 나타난다. 그때마다 남들에게 차분히 생각하면서 처리하는 모습을 보여주고 싶은데, 잘 안된다. 전문가로서 일을 처리해 나아가는 동료들을 볼 때면, 부럽고 그들에게 배울 점이 없는지 생각해보고 기록한다. 단순하게 생각하고, 단순하게 하나씩 처리해가고 싶은 요즘이다. 새로운 일. 어디서 어떻게 시작해야 할지 모를 때, 주변 동료들에게 질문을 한다. 그리고 막상 자리로 돌아와 일을 시작할 때, 또다시 막막하다. 이 막막함을 이겨내기 위한 몸부림치는 한 주였다. 그리고 아마 계속될 것 같다. p.s\n팀원분들이 공통으로 사용하는 코드(사용자 분석)를 패키지화하는 작업을 하고 있다. 참고 참고","frontmatter":{"categories":"Log","title":"9월 1주 회고","date":"September 03, 2022"},"fields":{"slug":"/write-log-220903/"}}},{"node":{"id":"c2cba81c-393e-5327-93ca-12407c32053e","excerpt":"컨디션 조절. 이번 주는 컨디션 조절을 위해, 취침하기 3시간 전에 음식을 최대한 먹지 않으려고 노력했다.\n확실히 몸이 가벼워졌다. 그리고 업무에 대한 압박감을 줄이기 위해, 바로 해결할 수 있는 것들 먼저 처리 하기 위해 리스트업을 작성했다. 무엇보다 스스로에게 개발 실력이 부족하다고 비하하기보다는 지금 당장 해야 할일이 무엇인지에 집중했다. 앞으로도 더욱 컨디션 관리를 위해 먼저 음식 조절과 운동에 더욱 집중하고, 숙면 시간을 최대한 확보해야 겠다. 개발. Zustand 상태관리 라이브러리를 학습하며, 현 프로젝트에 적용하고 있음 TS Study를 통해, TS 학습 및 실무 적용하는 코드를 숙지하고 있음 반성 및 개선. 업무를 할 때, 주변 팀원들에게  정리가 되지 않은 상황에서 질문을 했다. 그러다 보니, 팀원분들께서 질문의 의도를 모르겠다 혹은 제가 이해한 게 맞나요? 라는 말을 자주 들었다.\n이 부분은 비효율적인 업무라고 생각한다. 그래서 밑에 작성한 대로 행동해 개선을 …","frontmatter":{"categories":"Log","title":"8월 3주 회고","date":"August 20, 2022"},"fields":{"slug":"/write-log-220820/"}}},{"node":{"id":"d7057ef2-aed5-5f37-8291-72a2e688e810","excerpt":"발표. 팀원들 앞에서 학습한 에 대해 발표를 했다. 준비하면서 많은 부담과 걱정이 앞서 있었지만, 그래도 좋은 경험이었던 것 같다. 발표 후에 내가 학습한 방법들을 돌이켜 보았을 때, 단순히 ‘이건 이렇게 되는구나’에서 끝나는 것이 아니라, ‘이게 이렇게 되면 어떻게 되지?‘라는 생각을 하면서 학습을 진행했다면 조금 더 자신감과 재미가 있었을 것 같았다.  그리고 우리 팀에서 원하는 바가 무엇인지 목표를 계속 상기하지 못 한 채, 개념에 집착한 점이 아쉬웠다.  마지막으로 스스로 시간적 압박감에 눌려 차분히 학습하지 못한 부분에 대해서는 을 명확하게 세우는 연습을 꾸준히 해야겠다. 본질적인 생각. 이번 한 주는 스스로 본질적인 질문을 많이 했다. 라는 질문에 대답하지 못해 괴로웠다. 한동안 컨디션이 많이 안 좋아서 스스로에 대한 질문을 잘하지 못한 것 같아, 자기 전 휴대폰 하지 않기, 자투리 시간에 독서하기, 아침저녁 명상하기, 감사 일기 쓰기 등 컨디션을 회복시키는 습관들을 만…","frontmatter":{"categories":"Log","title":"8월 2주 회고","date":"August 14, 2022"},"fields":{"slug":"/write-log-220814/"}}},{"node":{"id":"fbb8944e-30f5-5bdf-8115-239de74c9b15","excerpt":"솔직함. 이번 주도 쉽지 않은 한 주였다. 그래도 한 주를 돌이켜 보았을 때 깨달음이 있어 글로 적고자 한다. 결론부터 말하자면, 는 사실을 알게 되었다. 또한 타인에게 부담와 힘듦을 솔직하게 말하지 못했을 때, 더 자기 비하와 자책을 한다는 것도 알게 되었다. 정말 솔직함은 용기가 필요한 것 같다. 곰곰이 지난 과거를 돌이켜 보면, 어떻게든 나와 주변 사람에게 부족한 부분을 숨기고자 애썼던 것 같다. 지금이라도 이 부분을 인지해, 나뿐만 아니라 주변 사람들에게 부족한 부분에 대해 도움을 요청하고 힘든 점을 솔직하게 말하는 용기가 필요 한 것 같다. 하루하루 조급함에 눈치 보며 살다 보니, 정작 나를 제대로 보지 못했다. 이제라도 솔직하게 나를 돌아보며 당당하게 살아가고 싶다. p.s\n이렇게 생각의 틀을 깰 수 있도록 도와준 지금의 팀원분들(NU)에게 진심으로 감사합니다. 배움. 회사에서 카카오 개발자분을 초청(태오님)해, 다양한 이야기를 들을 수 있는 시간을 갖게 되었다. 인상 …","frontmatter":{"categories":"Log","title":"8월 1주 회고","date":"August 06, 2022"},"fields":{"slug":"/write-log-220806/"}}},{"node":{"id":"ef68be34-7a5e-5aeb-8ba7-af560b5a4257","excerpt":"빡독x서울 후기 7.30(토)일에 열리는 을 참여하기 위해 성균관 대학교를 다녀왔다. 문득, 2년 전 1월에 열렸던 신박사님 강연을 듣기 위해 전주에서 서울로 왔던 기억이 떠올랐다. 그 당시 나는 취준생이었고, 정말 앞이 보이지 않았었다. 그러나 지금은 서울에 올라와 좋은 팀원들과 함께 개발자로서 살아가고 있다. 아직도 이 글을 쓰면서 믿기지 않는다. 홀 안에 들어왔을 때 이미 많은 사람이 독서 하고 있었다. 나 또한 빡독때 읽을 ‘하트 오브 비즈니스’를 꺼내 읽기 시작하였다. 솔직히 요즘 독서를 많이 못 했다. 그리고 내가 1시간 반 동안 과연 ‘몰입’하면서 독서를 할 수 있을까? 라는 의문이 들었지만, 막상 독서하니 그런 의문은 쉽게 해결되었다. 무엇보다 함께 독서하는 환경에 있어서 그런지 더욱더 몰입할 수 있었던 것 같다. 빡독후 신박사님의 강연이 시작되었다. 많은 조언과 이야기를 들려주셨다. 그 중에서 기억 남는 것들과 느낀 점을 적어보자면 ‘어떤 목표를 이루기 위해서는 내…","frontmatter":{"categories":"Log","title":"7월 마지막 주 회고","date":"July 31, 2022"},"fields":{"slug":"/write-log-220710/"}}},{"node":{"id":"8fe6f147-aa7d-5dfe-a617-fa352647a79b","excerpt":"온보딩 회고. 2주 동안 팀원분과 함께 회사 시이트를 구현하는 프로젝트를 진행했다.\n새로운 언어, 라이브러리, 프레임워크 등 때문에 많이 힘들었지만, 그중에서 가장 힘든 부분은 하는 것이었다.\n‘나는 왜 이렇게 개발 속도가 느린 것일까?, 나는 지금까지 무엇을 개발해왔었나…, 나는 개발로 살아남을 수 있을까? 등’ 많은 자책하는 생각들을 가지면서 프로젝트에 임했다. 그래도 프로젝트에 피해를 주지 않기 위해 열심히 했다고 생각하지만, 돌이켜보면 그냥 막 코딩 한것 같다.(다음 주 화요일 코드 리뷰가 두렵다…)\n누군가가 ‘이 코드 왜 이렇게 작성했어요?‘라고 하면 정말 대답을 잘하지 못할 것 같다.\n어쩌면 이 부분이 내가 부족한 부분이고 채우게 된다면 반드시 성장하는 것도 아는데 두려움이 먼저 앞선다. 그런데도 개발을 하면서 모르는 부분을 그냥 일단 키워드 중심으로 적어놓았다.\n(팀 리더분께서 온보딩 프로젝트 하면서 결과에 집중하지 말고 과정에 몰입하는 경험에 초점을 두라고 했으며 그…","frontmatter":{"categories":"Log","title":"온보딩 회고","date":"July 21, 2022"},"fields":{"slug":"/write-log-220721/"}}},{"node":{"id":"e4eae5ba-188b-522e-8807-40bab82f8e3b","excerpt":"온보딩 프로젝트. 현재 1주일 먼저 입사하신 분과 함께 온보딩 프로젝트를 진행하고 있다.\n오랜만에 웹 개발을 하니 낯설고 개발 속도가 나지 않아 답답하다. 당연하게 알고 있다고 생각했던 조차도 배울 것이 많음을 알게 되었다.\n정말 배움에는 마침표는 없는 것 같다. 그리고 함께 프로젝트 하시는 분이 너무 잘하셔서 배울 점이 많다. 특히 자신이 작성한 코드에 대해서 확실한 근거 있는 모습이 너무나 멋있어 보였다. 사실 나는 그렇게 하지 못하고 있어 부끄러웠다…  또한 어떻게 하면 더 좋은 설계를 통해, 팀원들이 사용할 때 편리한 코드를 제공할지 고민하는 모습이 인상적이였다. (정말 너무나 배울게 많으신 분이다.) 마지막으로 돌아오는 주에는 온보딩 프로젝트를 마무리하고 팀원들 앞에서 발표 해야 하는데, 솔직히 같이 작업하신 분에 비해 많이 부족해서 걱정된다.\n코드도 엉망인데… 갈 길이 너무나 멀게 느껴진다. 그래도 조급하게 생각하지 말고 정말 내가 잘하는게 무엇인지 다시 한 번 생각해봐…","frontmatter":{"categories":"Log","title":"7월 3주차","date":"July 17, 2022"},"fields":{"slug":"/write-log-220717/"}}},{"node":{"id":"7d466a80-ec24-5086-8ac5-2e2c8d0111ac","excerpt":"성장 할 수 밖에 없는 환경. 벌써 한 주가 지났다. 시간이 어떻게 지나간줄 모르겠다. 타지인 서울에서 혼자 사는 것도, 너무나 좋은 문화를 가진 새로운 직장도 많이 낯설다. 그래도 확실한 것은 여기서는 무조건 성장할 수밖에 없다는 생각이 든다. 또한 성장하지 않으면 정말 안 된다는 절실함도 온 몸으로 느끼고 있다. 감사하게도 이번에 새롭게 일하는 직장에서 어느 정도 해결할 수 있을 것 같다. 물론 나도 많이 노력해야겠지만, 정말 누군가에게 매번 배울 수 있다는 사실이 너무나 좋다. ‘언제든지 물어봐라, 모든 팀원이 적극적으로 알려줄 것이다.‘라는 말이 정말 많이 위로가 많이 되었다.  그리고 일주일 밖에 지나지 않았는데, 팀원들에게 피해주지 않기위해 더 노력해야겠다는 생각도 정말 많이 든다. 컨디션 조절 잘하면서 하나씩 제대로 학습하면서 성장해야겠다. 이번 주도 수고했고, 돌아오는 주도 화이팅이다. 참고 참고","frontmatter":{"categories":"Log","title":"성장","date":"July 10, 2022"},"fields":{"slug":"/write-log-220731/"}}},{"node":{"id":"3a5f24fb-e11f-52b6-b089-a0f28fe6c203","excerpt":"도전 중 새로운 회사 에 근무한 지 3일이 되었다. 결론부터 말하자면 진짜 이 조직 속에서 성장의 기회를 놓치고 싶지 않다. 입사 후, 팀에서 제공한 온보딩을 진행하고 있다. 3일밖에 되지 않았지만, 스스로 얼마나 우물 안 개구리였는지 알게 되었고 실력이 얼마나 부족한지 알게 되었다. 컴포넌트 사고, 모듈화, 프로젝트 폴더 구조, SVG 컴포넌트 사용 등 처음 접하는 개념들도 있었고 개념만 알고 실무에서 잘 적용하지 못한 것들도 많았다. 특히 스스로 쉽다고 생각했던 개발들이 알고 보면 막 코딩을 하고 있었다는 사실이 너무나도 괴로웠다. 그리고 함께 개발하고 있는 입사 동기 팀원분과의 실력 차이를 비교하면서 스스로가 너무나 조급하고 부족하다고 팀원들에게 공유했더니 ‘비교하지 말고 과거의 나와 비교하면서 개발하라고 그리고 언제든지 팀원들에게 궁금한 사항들 물어보라고 누구라도 발 벗고 도와 줄 것이라고’ 말씀해주셨을 때 너무나 큰 위로가 되었다. 과거에는 어떻게든 빠르게 개발을 하는 것…","frontmatter":{"categories":"Log","title":"새로운 장소에서 도전 중","date":"July 06, 2022"},"fields":{"slug":"/write-log-220706/"}}},{"node":{"id":"493d57ab-5687-519c-b6ce-d672631d66a5","excerpt":"그냥 기록 다음 주면(7월) 이제 전주가 아닌 서울에서 일상생활을 해야 한다. 사실 많이 어색하고, 불안하고, 설렌다. 집에서 가져가야 할 물건들을 하나씩 정리하는데, 끝이 없다. 그만큼 전주에서 많은 시간을 보냈다는 것을 느꼈다. 앞으로 산 날만큼 전주가 아닌 타지역에서 살아보고 싶다는 막연한 생각이, 이제 현실이 되었다. 아직도 실감이 나지는 않는다. 그래도 이왕 서울 가는 거 누군가에게 도움이 되는 프로가 되고 싶다. 지금보다 힘들고 어려움이 더 많겠지만, 훗날 이 글을 보면서 초심 잃지 않고 이겨냈으면 좋겠다. 참고 참고","frontmatter":{"categories":"Log","title":"그냥 기록","date":"June 28, 2022"},"fields":{"slug":"/write-log-220628/"}}},{"node":{"id":"85ac3012-8034-5b56-a341-553150194831","excerpt":"눈 수술 최근에 스마일 라섹을 했다. 사실 지금도 눈이 피곤하다. 그래도 한 주 회고를 위해 잠깐 노트북을 켜고 글을 쓴다. 사실 이번 한 주는 눈 수술 때문에 거의 아무것도 하지 못하고 눈만 감고 있었다. 정말 눈만 감고 있으니 너무 삶이 지루하고 답답했다. 그러다 보니 다시 한번 건강에 대해 많은 생각을 하게 되었다. 앞으로는 신체 건강 뿐만아니라, 정신 건강 또한 잘 다스리면서 앞으로 오랫동안 개발을 하고 싶다. 참고 스터디언 : https://www.youtube.com/watch?v=xZYiDJXWGj0 참고","frontmatter":{"categories":"Log","title":"6월 4주 회고","date":"June 26, 2022"},"fields":{"slug":"/write-log-220626/"}}},{"node":{"id":"708a868e-242f-58bc-b3de-542208c4fcf2","excerpt":"하나씩 집을 구하고 집에 필요한 인테리어 물품을 적다 보니 너무나 많았다.\n이렇게 해서는 끝도 없다고 생각해 먼저 ‘집에서 가져갈 것’과 ‘사야 할 것’을 나누었다.\n그리고 각 사용 용도에 맞게 분류했다. 이렇게 분류하고 적는 과정에서 막연하게 불안했던 감정들이 조금은 사라졌다는 사실을 알게 되었다.\n보이지 않는 불안 속에서 조금이나마 도움을 주는 방법이 ‘명확하게 적는 것’이라는 것도 다시 한번 느끼게 되었다. 앞으로 일하면서 경험했던 문제와 해결 과정을 적으면서 스스로 실력을 객관화해 부족한 부분을 채우도록 해야겠고\n또한 미래에 준비해야 할 것들을 적으면서 미래에 대한 불안에 어쩔 줄 모르는 것이 아니라, 마주하여 하나씩 이뤄나가야겠다. 이렇게 글을 쓰면서 반성하는 것이, 집을 구하고 인테리어에 신경을 쓰다 보니 독서와 글쓰기에 집중하지 못한 것 같다.\n그리고 헬스도 끝나서 근력 운동을 며칠 동안 하지 못했는데, 지금이라도 다시 시작해야 하겠다. 독립한다는 사실이 나에게 큰 도…","frontmatter":{"categories":"Log","title":"6월 3주 회고","date":"June 19, 2022"},"fields":{"slug":"/write-log-220619/"}}},{"node":{"id":"92563af0-12a8-532a-a106-8531910839dc","excerpt":"원룸 구하기. 이직을 위해 원룸을 구하고 있다. 그런데 이렇게 어려운 일이라 생각지도 못했다. 솔직히 말하면 지금 다른 것에 집중이 안 된다. 타지역에 있는 나는 집 보러 가는 것도 쉽지 않다는 사실을 알게 되었다. 그래도 언젠가는 익숙해지고 해야 할 일이기에 꾹 참고 정보를 알아보고 있다. 그러다가 문득 집을 처음 구하는 사람들에게 좋은 UX/UI를 제공해주는 서비스가 있으면 참좋겠다는 생각했다. 사실 타지역에 방을 구하는 과정에서 너무나 많은 정보를 알아야 한다는 사실에 버거움을 느꼈다. 그래서 Toss처럼 손쉬운 UI/UX를 제공하는 집을 구하는 서비스가 있으면 좋겠다는 생각을 했다. p.s\n사이드 프로젝트로 한 번 도전해 봐야겠다. 참고 참고","frontmatter":{"categories":"Log","title":"6월 2주 회고","date":"June 12, 2022"},"fields":{"slug":"/write-log-220612/"}}},{"node":{"id":"c2c3584a-fb7f-51d8-b420-6a076622581b","excerpt":"결과. 드디어 서울로 이직하게 되었다.\n정말 이게 현실인지 아직도 어안이 벙벙하지만, 결국 나는 서울에서 일을 할 수 있게 되었다. 이직을 준비하기 위해 퇴근 이후 또는 주말에 따로 시간을 내어 공부했던 나 자신이 조금은 뿌듯했다.\n그때 당시에는 스스로 확신이 없어, 집에 가는 길에 라는 생각을 했다. 그런데도, 부족한 부분을 채우기 위해 끊임없이 공부했다. 그래서 좋은 결과가 있지 않았나 싶다. 독립. 서울에 자취방을 구하고 독립을 준비하는 과정 또한 나에게 새로운 도전으로 다가왔다.\n모르는 정보도 너무나 많았고, 이러한 과정을 이미 친구들과 다른 사람들은 겪었다는 생각에 대단하게 느껴졌다. 그래도 하나씩 체크해야 할 것들을 적어 놓고, 하나씩 하나씩 알아가는 과정이 재밌게 다가왔다. 이 과정에서 느낀 거지만, 조급할 때는 차분히 적으면서 일을 진행하면 잘 처리할 수 있다는 자신감이 느껴졌다. 정말 매번 새로운 경험을 하면서 아직도 갈 길이 멀구나라는 생각을 하지만, 그래도 이렇…","frontmatter":{"categories":"Log","title":"6월 1주 회고","date":"June 04, 2022"},"fields":{"slug":"/write-log-220604/"}}},{"node":{"id":"9097903b-8bbd-5f83-898f-943660a2c6cc","excerpt":"도전. 이번 주는 개인적으로 큰 도전을 하고 왔다.\n스스로 많이 부족하다고 생각하였지만, 조금씩 자투리 시간에 준비해 결국 도전하여 좋은 결과를 얻게 되었다.\n이번에 도전을 통해, 개인적으로 정말 많은 걸 얻은 것 같다. 그중에서 가장 큰 것은 세상은 너무나 크다는 사실을 다시 한번 느꼈다.\n구체적으로 이야기 할수는 없지만, 미디어에서 보고 들었던 것들을 내 옆자리 누군가가 당연하게 대화하는 모습들을 보면서\n처음에는 라는 생각을 하다가,  라는 생각하였다.(스타트업 관련 대화였다.) 이번 경험을 통해서, 앞으로도 꾸준히 스스로 안주하지 않도록 노력해야겠다.\n세상은 넓고 아직 내가 경험해보지 못한 것들이 많다는 걸 다시 한번 상기하는 이번 주였다. 차분히. 사실 도전을 하면서, 내가 과연 가능할까? 라는 의심을 많이 했다.\n스스로 부족하다는 생각 때문에 그랬던 것 같다.\n하지만 계속 부족하다고 아무것도 안 하면 정말 내가 원하는 변화를 할 수 없다는 생각이 들었다. 그래서 차분히 정…","frontmatter":{"categories":"Log","title":"5월 4주 회고","date":"May 29, 2022"},"fields":{"slug":"/write-log-220529/"}}},{"node":{"id":"aee35816-3e0c-5bc0-8311-1c829e44618b","excerpt":"보람. 최근에 번아웃이와 블로그에 글을 쓰지 않은 동안, 많은 생각을 했다.  등 철학적인 질문을 했던 것 같다. 쉽게 대답하지 못했지만, 그래도 생각해보니 개발을 통해 누군가의 삶에 도움을 주고 싶다는 생각이 들었다. 이런 생각을 했던 이유는 최근에 회사 프로젝트를 통해, 지자체 및 기업 지원금 혜택 검색 서비스를 만들고 있었다. 문득 ‘누군가는 이 서비스를 통해 생각지도 못한 지원금을 받아 생계에 도움이 될 수도 있겠네’라는 생각이 들었기 때문이다. 이 생각 덕분에 개발을 더 잘하고 싶어졌고, 좋은 서비스로 더 많은 사람에게 영향을 주고 싶어졌다. 학습 방법 회고. 위 생각하고 나니, 스스로 개발 실력과 개발 실력을 높이기 위해 학습하는 방법을 돌아보게 되었다. 부끄럽게도 나는 지금까지 개발 실력을 높이기 위해 학습하는 척(?)했던 것 같다. 스스로 질문과 생각을 하지 않고, 그저 받아 적고 정리만 했다. 그리고 이해했다고 착각했던 것 같다. 블로그를 통해서 스스로 이해했는지 …","frontmatter":{"categories":"Log","title":"5월 3주 회고","date":"May 22, 2022"},"fields":{"slug":"/write-log-220522/"}}},{"node":{"id":"039e87fe-a60d-54cd-892a-fc4ca045ce2f","excerpt":"번아웃 몸이 회복이 되지 않는다. 열심히 하고는 있지만, 힘이 든다. 운동과 산책을 통해 회복하고자 애쓰고 있다. 아무것도 하지 않으면 안되니깐… 참고 참고","frontmatter":{"categories":"Log","title":"5월 1주 회고","date":"May 08, 2022"},"fields":{"slug":"/write-log-220508/"}}},{"node":{"id":"c6fa499a-5af2-5675-b902-b4c228e1a419","excerpt":"✅ Facts(사실, 객관) 강의 영상이 길어 과제를 진행하지 못했다.(금요일에 강의를 다 보았다.) 🙋‍♂️ Feelings(느낌, 주관) 강의를 다 듣고 과제를 진행하는 게 아니라, 강의를 본 내용까지라도 과제를 진행했어야 했는데 그렇게 하지 못해 아쉽다. 😋 Findings(발견, 배운점) 앞으로는 학습을 하면 바로 실행(과제 진행 등)하도록 해야겠다. 👨‍💻 Affirmation(자기 선언) 효율적인 학습방법을 찾아보고 실천해 보자. 시간, 체력관리를 잘 하자. 📕 참고 ✅ Facts(사실, 객관) 🙋‍♂️ Feelings(느낌, 주관) 😋 Findings(발견, 배운점) 👨‍💻 Affirmation(자기 선언) 📕 참고","frontmatter":{"categories":"React","title":"코드숨 React 7기 - 7주차 회고","date":"May 08, 2022"},"fields":{"slug":"/write-log-codeSoom220508/"}}},{"node":{"id":"bce6439b-84f8-5e66-a535-d807153342e4","excerpt":"책을 구매한 이유 개발자로써 블로그에 글을 잘 쓰는 방법을 알고자 이 책을 구매해 읽게 되었다. 하지만 이 책에서는 단순히 블로그에서 글을 잘 쓰는 방법 말고 변수 네이밍, 릴리스 노트, 장애 보고서 등의 다양한 글쓰기 방법을 알려주고 있었다. 그중에서 가 인상깊었다. 네이밍은 모두에게 어렵다. 이 부분을 읽으면서 나뿐만이 아니라, 전 세계 사람들이 이름 짓기가 가장 어렵다는 사실에 조금 위로가 되었다. 좋은 변수 이름의 특징 책에는 좋은 이름이 가지는 5가지 특징에 대해 소개를 했다.\n특이 이 내용이 현재 나에게 필요한 내용이라고 생각했고, 당장 체화해야 할 부분이라고 생각했다. 마무리 생각보다 많은 내용이 담긴 책이었다. 그리고 꼭 숙지해야 할 내용들도 많았다. 그래서 한 번 읽는 것으로 끝나는 것이 아니라, 생각나고 필요할 때마다 꺼내서 봐야겠다고 생각했다. 그리고 사내 기술 블로그를 운영하거나 글쓰기에 대해 고민을 하고 있는 개발자분이 있다면 이 책을 추천해 주고 싶다. 그…","frontmatter":{"categories":"Book","title":"📕 「개발자의 글쓰기」을 읽고","date":"May 01, 2022"},"fields":{"slug":"/read-book-9/"}}},{"node":{"id":"7dce7d55-5b85-52da-909a-9a7384dbc8a0","excerpt":"✅ Facts(사실, 객관) 라우팅 기능 구현과 더불어 라우팅 관련 테스트 코드를 처음 접하게 되었다. 🙋‍♂️ Feelings(느낌, 주관) 라우팅 관련 에러와 과제를 하면서 발생한 에러를 해결할 때마다 스스로 학습하고 있다는 느낌을 강하게 받고 있다. 😋 Findings(발견, 배운점) 최근에 함수를 통해 React Component 내의 오브젝트의 값들을 랜더링 하는 과정에서 에러를 접했는데, React는 Component를 랜더링할 때, 화면에 표시할 데이터 타입과 실제로 주입하는 데이터 타입이 같아야 한다는 사실을 알게 되었다. React Component 랜더링에 대해 알게된 계기였던 것 같다. ✅ Facts(사실, 객관) 테스트 내부에서 사용하는 함수를 외부로 빼지 않고, 해당 테스트 내부에서 선언하고 사용하면 어디서 사용하는지에 대한 의도를 알 수 있다는 피드백을 받았습니다. 🙋‍♂️ Feelings(느낌, 주관) 코드의 의도를 생각하면서 코딩을 하지 않았다는 사실을 알게 되었…","frontmatter":{"categories":"React","title":"코드숨 React 7기 - 6주차 회고","date":"May 01, 2022"},"fields":{"slug":"/write-log-codeSoom220501/"}}},{"node":{"id":"64286ec8-a5e0-5d6b-ab9f-b5bb3921fefd","excerpt":"2022년 1/3이 지나갔다. 시간 참 빠른 것 같다. 4개월 동안 많은 시도를 했다. 그 중 코드숨을 통해 처음 JS 스터디를 참여해 보았고, 또 실제 기술 면접을 보면서 스스로가 얼마나 실력이 부족한지 절실히 알게 되었다. 특히 기술 면접 준비하면서 타인에게 설명할 수 없으면 내 지식이 아니라는 사실을 뼈저리게 느꼈다. 그래서 요즘 학습할 때, 가상에 인물을 두고 설명하는 식으로 개념을 학습하니깐 확실히 자신감도 생기고 더 깊게 학습을 하는 것 같다. 그리고 사실 하나하나 시도하고 도전할 때마다 속으로 ‘몸도 요즘 피곤 한데 할 수 있을까?‘라는 걱정이 많이 있었지만, 지금 생각해 보면 잘한 선택과 시도였던 것 같다. 남은 2022년 많은 시도를 통해, 내 삶을 변화시키고 싶다. 더 기본기를 견고하게 만들어서 실력 있는 개발자가 되고 싶다. 조급함보다는 차분히 하나씩 채워가자. 남은 8개월 화이팅이다.💪 참고 참고","frontmatter":{"categories":"Log","title":"4월 5주 회고","date":"May 01, 2022"},"fields":{"slug":"/write-log-220501/"}}},{"node":{"id":"2353427d-368e-55b7-9d5b-b04b0cabff96","excerpt":"돌아보며 이번 주도 역시나 힘들었다. 업무적으로 퍼포먼스가 나오지 않는다는 말을 팀장님에게 들었다. 스스로 고민해 보았을 때, 최근들어 몸과 정신이 많이 피곤해서 그런 것 같다.\n체력관리도 프로로써 가져야 할 하나의 덕목인데, 잘 못하는 것 같다. 최근에 더 성장하기 위해 다양한 워크샵과 스터디를 참여했다. 참여할 때는 많이 배우고 기분도 좋은데, 막상 혼자서 무언가를 하려고 하면 힘이 나지 않는다. 당장 내일부터는 몸과 정신을 회복하면서 해야 할 것들을 하나씩 해야겠다.\n정말 가장 중요한 건강을 먼저 생각하면서 임해야겠다. 참고 참고","frontmatter":{"categories":"Log","title":"4월 4주 회고","date":"April 24, 2022"},"fields":{"slug":"/write-log-2204024/"}}},{"node":{"id":"f9053611-5e8a-51f8-b91c-1194874f45e8","excerpt":"✅ Facts(사실, 객관) 저번 주와 이번 주 코드숨 과제를 완료하지 못 했다. 🙋‍♂️ Feelings(느낌, 주관) 개인적으로 이번 달에 몸이 많이 피곤한 것 같다. 회복할려고 해도 잘 되지 않는다.\n그래서 해야 할 것들에 대해 집중을 잘 하지 못 하는 것 같다. 😋 Findings(발견, 배운점) 이번 달은 먹는 음식, 수면시간, 운동시간 등을 통해 컨디션 조절을 잘 해서 과제를 완료할 수 있도록 노력해야 겠다. 👨‍💻 Affirmation(자기 선언) 몸 관리를 잘하자 시간 관리를 잘하자 📕 참고 ✅ Facts(사실, 객관) 🙋‍♂️ Feelings(느낌, 주관) 😋 Findings(발견, 배운점) 👨‍💻 Affirmation(자기 선언) 📕 참고","frontmatter":{"categories":"React","title":"코드숨 React 7기 - 5주차 회고","date":"April 24, 2022"},"fields":{"slug":"/write-log-codeSoom2204024/"}}},{"node":{"id":"d643811d-81a5-5e5e-a0e2-53b24b603933","excerpt":"Facts 코드숨 과제를 진행하면서  에 가 제대로 할당되지 않는 문제가 발생했다. Fellings 원인은 파악했지만, 1시간 이상 해결하지 못하고 있어 너무나 답답하다. 그리고 일단 이 테스트를 무시하고 과제를 진행해야 해야 할지 고민이 되기도 했다. Findings 이런 경우 어떻게 해야 할지 먼저 트레이너 분에게 물어보고, 더 고민을 할지 아니면, 과제를 진행해야 할지 판단해야겠다.\n그리고 구조 분해 할당에 대해 정확한 개념을 집고 사용해야겠다. 막연하게 스스로 알고 있다고 생각했던 부분에서 막혀버리니 더욱 당황하고 마음만 조급해지는 것 같다.","frontmatter":{"categories":"TIL","title":"TIL - 220421","date":"April 21, 2022"},"fields":{"slug":"/til-2204021/"}}},{"node":{"id":"8b6625cd-4990-5afa-a270-cbcf1ce2b3f0","excerpt":"Facts 코드숨 과제를 진행하다가  함수 테스트 코드가 통과되지 않았다. 계속 원인을 찾아보아도 발견을 못해 스스로 초조하고 답답했다. Fellings 잠시 과제를 중단하고, 조금 쉰 다음에 차분히 원인을 하나씩 분석해 보았다. 결국 원인을 발견했다. 의 리턴 값이 빈 배열이다 보니 계속 테스트가 통과되지 않았다. 임시로 의 리턴 값으로 변경하니 테스트 코드가 정상적으로 통과되었다. Findings 앞으로는 어떤 문제에 직면했을 때, 잠시 숨을 고르거나 혹은 잠깐 쉬었다가 다시 문제를 바라보는 것도 좋은 것 같다.","frontmatter":{"categories":"TIL","title":"TIL - 220420","date":"April 20, 2022"},"fields":{"slug":"/til-2204020/"}}},{"node":{"id":"98482961-5fe7-551f-85b0-81109dee0b8c","excerpt":"Facts 오늘 회사에서 디자이너 분과 자사 서비스 새로운 디자인에 대해 회의를 진행했다. Fellings 개선해야할 것들에 대해 서로 의견을 내다보니, 신기하게 좋은 아이디어가 나와 뿌듯했다. Findings 평소 앱, 웹 UI/UX에 대해 관심이 있어 관련된 글도 읽고 영상을 보았던 것들이 오늘 많이 도움이 되었던 것 같다.\n개발뿐만아니라, 다른 사람들에게 도움을 줄 수 있도록 나의 생각을 적극적으로 공유해야겠다.","frontmatter":{"categories":"TIL","title":"TIL - 220419","date":"April 19, 2022"},"fields":{"slug":"/til-2204019/"}}},{"node":{"id":"ae065cb2-1c60-5879-8017-c8496166d91b","excerpt":"Facts 회사에서 하단 모달 필터 기능을 구현했다. 기존 탭에 하단 모달 필터 기능을 구현을 처음 하다 보니, 어떻게 를 공유하고 업데이트하는지 잘 몰라 많이 당황했다. Fellings 그리고 당장 내일 새로운 기능을 배포해야 하니 마음도 조급했다. Findings 팀장님께서 일단, 하나의 탭 안에 를 다루는 로직부터 작성해 보라고 말씀하셔서 구현은 했지만, 무언가 찜찜한 기분이 남아있었다. 문득 밥먹다가 코드숨에서 배운  상태 관리를 통해, 리팩토링할 수 있겠다는 생각이 들었다. 주말에 리팩토링을 해봐야겠다. Facts 코드숨 TIL 쓰는 법 강의를 들었다. Fellings TIL 쓰는 법을 알게 되서 기분이 좋았다. 또한 다른 사람들이 작성한 TIL를 통해, 각자의 시간 속에 느끼는 감정이나 생각들을 들을 수 있어 귀감이 되는 시간이었다. Findings 매일 TIL를 작성하는 것이 좋을 것 같아, 앞으로 TIL를 작성해 공유 해야겠다.","frontmatter":{"categories":"TIL","title":"TIL - 220418","date":"April 18, 2022"},"fields":{"slug":"/til-2204018/"}}},{"node":{"id":"65223aa9-702b-5ea9-893b-81b01c20f236","excerpt":"✅ Facts(사실, 객관) 1. Redux Flux Architecture의 개념 Redux 상태관리하는 이유와 장점 Recat 프로젝트에서 Redux 사용 방법 2. 추가 공부 JS 기본기가 많이 부족한 것 같아, 엘리님의 JS 기본 개념 강의를 수강하기 시작했다. 🙋‍♂️ Feelings(느낌, 주관) 이번 주는 개인적으로 몸 컨디션이 좋지 않았다. 또한 업무적으로 새로운 기능 배포 때문에 야근도 많았다. 그럼에도 코드숨 과제를 할려고 노력은 했으나, 조급한 마음때문에 과제의 의도를 잘 파악하지 못하고 답을 내기 급급했다. 또한 TDD에대한 학습 시간이 부족해 다른 수강생들이 작성한 코드를 많이 참고했지만, 과제를 진행하는데 많은 어려움이 있었다. 그래도 매일 퇴근 후, 짬을 내서 과제를 진행했다. 남들보다 많이 부족하지만 이번 과제 풀이 영상을 보면서 조금은 라는 감각이 생긴 것 같아 뿌듯하다. TDD를 하는 과정에서 사고력이 늘어나는 느낌이 든다. 😋 Findings(배운점) …","frontmatter":{"categories":"React","title":"코드숨 React 7기 - 4주차 회고","date":"April 17, 2022"},"fields":{"slug":"/write-log-codeSoom2204017/"}}},{"node":{"id":"24e30f3a-bae0-56d8-9ba1-c96c19978d11","excerpt":"돌아보며 최근에 몸과 마음 상태가 많이 안 좋았다. 그럼에도 불구하고 아무런 대책 없이 그저 하루하루 살아가고 있었다.\n하지만 이렇게 몸과 마음을 내버려 두면 안될 것 같아, 회고를 작성하면서 나의 몸과 마음을 돌아보고자 한다. 제일 먼저 심적으로 많이 조급한 것 같다. 어쩌면 조급함이 모든 것에 원인이지 않을까 생각을 해본다. 왜 나는 조급한 걸까???  스스로에 대해 많이 부족하다고 생각해서, 왜 많이 부족하다고 생각하는 걸까??? 나도 모르게 남들과 나를 비교하기 때문에… 그래서 나는 가만히 있지를 못 하는 것 같다.  남들과 비교해 나의 부족함을 채우고자, 많은 인터넷 강의와 개발 관련 학습 프로그램을 하고 있다.\n물론 배울 때는 새로운 것을 배운다는 사실에 너무 기쁘지만, 허무함을 느낄 때가 있다. (사실 돌이켜 보면 조급함 때문에 강의를 보는 것에 집중했 던 것 같다.) 그리고 출퇴근 시간에 원티드 개발 관련 콘텐츠를 들으면서 내가 모르는 정보를 얻어 뿌듯하지만, 막상 …","frontmatter":{"categories":"Log","title":"4월 3주 회고","date":"April 16, 2022"},"fields":{"slug":"/write-log-2204016/"}}},{"node":{"id":"ad34ffd9-b840-5d4d-bf14-10ac05ad0e0c","excerpt":"그럼에도 불구하고 이번 주는 몸이 너무나 피곤했다. 그럼에도 불구하고 해야 할 일들을 하나씩 해 나아갔다.\n스스로 생각했던 것이, 힘들다고 가만히 있으면 나이 지지도, 변하지 못한다. 그러니깐 이때, 조금이라도 해야 한다 그래야 나아질 수 있다. 일을 하면서도 많이 허탈하고 어이없는 일도 많이 있었지만, 더 나아지기 위해 퇴근 이후에도 꾸준히 학습했다. 코드숨을 통해 테스트 코드 학습도 했고, 원티드에서 제공하는 개발자 관련 콘텐츠를 보기 위해 인생 처음으로 구독 결제를 하였다. 출퇴근 길에 들으니 너무나 좋다. 내가 몰랐던 내용을 알아서 너무 좋고 그중에 블랙커피 커뮤니티를 통해 이력서 관련 워크샵도 신청하였다. 또한 학습 방법에서 무엇보다 피드백을 받는 환경이 너무나 중요하다는 사실을 다시 한번 느끼게 되어 코드숨 프로그램을 신청한 부분에 있어서 너무나 잘 했다고 스스로를 칭찬하였다. 그러다가 문득 코드 리뷰를 해주는 사이트나 관련 서비스를 만들면 너무나 좋을 것 같은 아이디어…","frontmatter":{"categories":"Log","title":"4월 2주 회고","date":"April 10, 2022"},"fields":{"slug":"/write-log-2204010/"}}},{"node":{"id":"9bd4f3ba-9083-5a53-abcd-ce509a47bddc","excerpt":"✅ Facts(사실, 객관) 1. Jest Jest 개념 및 사용 방법 학습 2. TDD TDD 개념과 TDD를 해야 하는 이유 학습 과제를 통해 React로 TDD 하는 방법 숙지 3. 추가 공부 JS 기본기가 많이 부족한 것 같아, 엘리님의 JS 기본 개념 강의를 수강하기 시작했다. TDD 익숙하지 않아, 엘리님의 React TDD 강의를 수강하기 시작하였다. 🙋‍♂️ Feelings(느낌, 주관) 테스트 코드가 익숙하지 않아, 코드숨 참여하는 사람들의 코드와 리뷰어님이 피드백 주신 내용과 관련 자료들을 찾아보았다. 커밋을 할 때, 의미있는 커밋 내용과 작은 단위의 코드 진행 사항을 작성하지 못 했다. 😋 Findings(배운점) , ,  을 통해 테스트 코드의 범주화를 할 수 있다.  을 통해, 테스트 맥락을 구분할 수 있다.  다음 테스트 구문에는 3인칭 복수인 를 붙여야 한다. 컴포넌트 테스트를 명시할 때, 굳이 component를 붙일 필요가 없다. 엘리먼트 랜더링 테스트 구…","frontmatter":{"categories":"React","title":"코드숨 React 7기 - 3주차 회고","date":"April 10, 2022"},"fields":{"slug":"/write-log-codeSoom2204010/"}}},{"node":{"id":"3d0f908f-b0d8-548c-87fa-c8a26b67e206","excerpt":"태도와 커뮤니케이션의 중요성 이 책을 읽으면서 다른 개발자들은 어떤 사고와 어떤 경험을 가지면서 개발자로써 살아왔는지 알게 된 시간이었다.\n특히, 나처럼 주니어 개발자에게 이 책을 통해 앞으로 갖추어야 할 것들이 무엇인지 확실히 알게 되었다. 그리고 한 줄의 코드를 작성하더라도 의 깊게 파고드는 태도는 너무나 중요하다는 사실을 어렴 풋이 알고 있었는데, 왜 중요한지 알게 되었고\n어떤 식으로 사고해야 하는지도 밑에 글을 통해 알게 되었다. 개발자 보다 먼저 성숙한 사람이 되자 개발하기 앞서 우리는 모두 사람이다. 그렇기 때문에 사람과 사람의 관계에서 발생하는 문제가 따라온다.\n관계에서 발생하는 문제를 해결하는 방법 중 하나가 서로의 상황과 마음을 해주는 것이다.\n하지만 만약 이 없는 사람과 함께 일하게 된다면??? 상상만 해도 끔찍하다.\n그렇기 때문에 이 책에서는 개발 실력도 중요하지만,  즉 이 잘 되는 사람이 먼저 되자고 강력하게 말하고 있다. 그러면 어떻게  능력을 키울 수 있…","frontmatter":{"categories":"Book","title":"📕 「나는 프로그래머다2」을 읽고","date":"April 01, 2022"},"fields":{"slug":"/read-book-8/"}}},{"node":{"id":"1254f449-5988-5574-9321-2e0669c4bede","excerpt":"🏃반성 코드숨 과제와 업무를 함께 하니 몸과 마음이 많이 지쳐있다. 그리고 최근에 지원한 회사에 운 좋게 서류가 통과되었지만, 과제 전형에서 탈락하였다. 과제 전형을 하면서 확실하게 내 실력이 너무 부족하다는 사실을 알게 되었다. 특히 CS, JS, React, 알고리즘 등 학습의 깊이가 얕음을 알게 되었다. 이번 달은 정말 개념을 튼튼히 하는 시간을 가져야겠다. 그래야 원하는 목표도 이루고 몸도 정신도 회복될 것 같다. 스스로 조급한 마음을 갖기 보다는, 꾸준히 차분히 쌓아 가자. 참고 참고","frontmatter":{"categories":"Log","title":"3월 5주 회고","date":"April 01, 2022"},"fields":{"slug":"/write-log-220401/"}}},{"node":{"id":"cbfafddc-8ade-5a6b-a537-79f1e4bf41dc","excerpt":"✅ Facts(사실, 객관) 1. React React 개념 학습 React DOM 개념 학습 2. Components & Props Components & Props 개념 학습 3. React Hook React Hook 개념 학습 useState 개념 학습 4. 선언형 프로그래밍 선언형 프로그래밍 개념 5. 관심사의 분리 관심사의 분리 개념 학습 🙋‍♂️ Feelings(느낌, 주관) 이번 주는 야근 때문에 몸도 마음도 지쳐있는 상태였다. 그래도 과제를 조금이라도 해서 PR 피드백을 받고자 노력을 했다. 그러나 많이 지쳐있던 탓이었을까, 빨리 과제를 마무리 하고 싶은 마음에 PR  대해 깊게 생각하지 않고, 과제의 정답에 집중을 했다. 다행히 코드 리뷰 해주시는 분께서 정확한 피드백을 해주셔서, 정답이 아닌 에 초점을 둬야 한다는 사실을 깨닫고 차분히 에 깊게 생각하는 시간을 가지게 되었다. 돌이켜보니 사실 일을 할 때에도, 보다는 에 집중을 하며 일하고 있었다. 앞으로 아무리 몸과…","frontmatter":{"categories":"React","title":"코드숨 React 7기 - 2주차 회고","date":"April 01, 2022"},"fields":{"slug":"/write-log-codeSoom220401/"}}},{"node":{"id":"40f9a55b-a98f-5b92-954f-e56dfabcd326","excerpt":"✅ Facts(사실, 객관) 1. 개발 환경 구축 Node.js 개념 학습 및 설치 NPM 개념 학습 및 프로젝트 만들기 Webpack Dev Server 개념학습 및 설치, 실행 방법 학습 ESLint 개념학습 및 설치, 설정 방법 학습 2. 웹 개발 DOM 개념 및 조작 방법 학습 JS 문법 학습(forEach, map, filter, Rest parameters, Spread syntax) 3. JSX Babel 개념 및 설치, 설정 방법 학습 Webpack config 설정 방법 학습 JSX 개념 학습 JS 문법 학습(구조분해 할당, Object관련 함수, 연산자 활용법) 🙋‍♂️ Feelings(느낌, 주관) 개념 학습하면서 당연하게 알고 있던 것이 아님을 알게 되는 시간이었다. 특히 과제를 진행하면서 얼마나 부족한지 강하게 깨닫게 되었다. 사실 코드숨을 신청한 계기도  생각에서 신청을 했는데, 정말 잘 신청한 것 같다.👍 특히,코드리뷰를 받으면서 내가 놓치고 있는 부분을 알게…","frontmatter":{"categories":"React","title":"코드숨 React 7기 - 1주차 회고","date":"March 26, 2022"},"fields":{"slug":"/write-log-codeSoom220326/"}}},{"node":{"id":"26533b2a-0e21-5731-a68b-247af14502c4","excerpt":"💪 자신감 이번 주부터 코드숨 과제 풀이를 진행했다. 그 가운데 지원했던 곳에서 서류 합격아 2곳이나 되어, 코드숨과 과제를 함께 진행하게 되었다. 결론부터 말하자면, 정말 역대급으로 빡쎘다… 사실 이 글을 다 작성하고 지원한 회사의 과제를 마무리 해야 한다…😭\n그래도 이번에 회사를 지원하면서, 라는 사실을 명확하게 알게 되었다. 매번 개발 관련 글과 개발자 관련 영상이나 커뮤니티를 보면서 스스로 많이 부족하다고 생각을 했었는데,\n일단 행동을 먼저 하고 꾸준히 제대로 학습만 한다면, 정말 가고 싶은 회사의 개발자가 될 수 있다는 자신감을 가지게 되었다. 마지막으로 코드숨 참여하면서 다양한 사람들과 서로 의견도 구하고, 질문하면서 당연하게 생각했던 것들에 대해 조금 더 깊게 생각해보는 시간도 가졌다. 요즘 들어 매일매일 성장하고 변화하고 있음을 살짝 느끼기 시작하였다. 그렇기에 더욱 몸관리, 정신관리를 잘 해야겠다. 이번 한 주도 고생했다!!! 참고 참고","frontmatter":{"categories":"Log","title":"3월 4주 회고","date":"March 26, 2022"},"fields":{"slug":"/write-log-220326/"}}},{"node":{"id":"8a4eb8fc-1abf-54c0-9801-9f4dc7446158","excerpt":"😁 오랜만에 느끼는 즐거움 오늘은 코드숨 OT에 참여하게 되었다. 사실 이때 몸 컨디션이 너무 좋지 않았다.\n그래도 다양한 사람들과 만나 새로운 경험을 하고 싶어 몸을 일으켜 컴퓨터 앞에 앉았다.\n처음에는 많이 어색하고 낯설었지만, 점점 사람들과 이야기하며 다양한 주제로 각자의 의견을 듣고 말하는 시간을 갖게 되니 컨디션이 좋아졌다. OT 하면서 되게 인상 깊었던 점은,\n내가 가지고 있었던 생각을 누군가가 이미 해결하기 위해 일하고 있다는 사실이었다.(홀로 스탠딩)\n너무 신기했고 정말 대단한 개발자들이 이렇게나 많구나라고 다시 한번 느끼게 되었다. 마지막으로 OT를 주관해 주신 분께서  말씀해 주셨다. 정말 12주 동안 설레기도 하고 걱정되기도 하지만, 최선을 다해 즐겁게 학습하고 싶다. 😄 참고 참고","frontmatter":{"categories":"React","title":"코드숨 React 7기 OT","date":"March 21, 2022"},"fields":{"slug":"/write-log-codeSoom220320/"}}},{"node":{"id":"d56f6372-d97f-5bae-bef2-56ee59240177","excerpt":"✅ 목표 사용자 정의 객체를 이터러블 프로그래밍 하는 것이 무언인지 알아보자! 👋 Map함수를 통해 이터러블 프로그래밍 내장 된 Map 함수 미리 내장된 Map함수를 통해 이터러블 프로그래밍 가능  ,  사용 가능 이터러블 프로그래밍 👋 Set함수를 통해 이터러블 프로그래밍 👋 클래스를 통해 이터러블 프로그래밍 Model, Collection 사용 Collection 제너레이터 사용 전 Collection 제너레이터 적용 Class에 이터러블로 순회할 수 있도록 적용함 👋 Product, Products - 메서드를 함수형으로 구현하기 👍 느낀점 사용자 정의로 객체를 만들어서 이터러블 즉, 함수형 프로그래밍을 하는 방법을 학습하게 되었습니다.\n이번 기회에 학습한 내용을 업무에 적용해 봐야겠습니다. 참고 👋 Map함수를 통해 이터러블 프로그래밍 내장 된 Map 함수 이터러블 프로그래밍 👋 Set함수를 통해 이터러블 프로그래밍 👋 클래스를 통해 이터러블 프로그래밍 Model, Coll…","frontmatter":{"categories":"JS","title":"함수형 프로그래밍 - 사용자 정의 객체를 이터러블 프로그래밍으로","date":"March 19, 2022"},"fields":{"slug":"/study-js-functional-23/"}}},{"node":{"id":"b39ac8dd-c8fc-5388-b0f7-a208fc8ce9e2","excerpt":"✅ 목표 객체를 이터러블 프로그래밍으로 작업한다는 것은 어떤 의미 일까? 👋 L.values() 구현 기존 values() 는 즉시 배열로 만들어 놓고 시작함 L.values() 필요한 만큼만 배열로 만들어서, 추출해 사용(코드 평가를 지연) 즉, 밑에 에서 2개만 꺼내기 때문에 에서 2개만 배열로 만들어서 사용 또한, 객체 값이 많아 지거나, 로직이 복잡할 경우에는 밑에 코드가 위의 코드보다 유리함 👋 L.entries() 구현 지연적인 함수를 구현하게 되면, 어떤 값이 들어오던지 간에 이터러블 프로그래밍 가능 👋 L.keys() 구현 👋 어떠한 값이든 이터러블 프로그래밍으로 다루기 이터러블로 이터러블 프로그래밍 가능 객체를 제너레이터를 이용해, 이터레이터로 만들어서 이터러블 프로그래밍 가능 어떤 제너레이터든 이터레이터로 만들어서 이터러블 프로그래밍 가능 👋 object 함수 만들기 다형성이 넓음 reduce하나로 Object 함수 만들기 참고  을 통해 m을 만든후,  하게되면…","frontmatter":{"categories":"JS","title":"함수형 프로그래밍 - 객체를 이터러블 프로그래밍으로 다루기","date":"March 19, 2022"},"fields":{"slug":"/study-js-functional-22/"}}},{"node":{"id":"202c82a4-6a58-56c5-9106-150970ecd9eb","excerpt":"✅ 목표 안전한 코드 합성이란 무엇인지 알아보자! 👋 map으로 안전하게 합성하기 안전하지 않은 합성 함수 정의한 함수를 합성하여 사용할 때, 밑에 코드에서 인자는 무조건 숫자가 들어와야 함 숫자가 아닌 값이 들어오면, 값이 안나옴 즉, 안전하지 않음 안전한 합성 함수 그러나 에 합성한 함수를 넣어주면, 합성 함수 인자에 숫자가 아닌 값이 들어와도 이 나오지 않음 👋 find 대신 L.filter 써보기 find사용 문장식으로 복잡하게 표현 만약에 안에 이 가 없다면 밑에 코드 결과는 를 던지게 됨 L.filter 사용 한 표현식으로 간단하게 표현 가능 안전한 코드 작성 가능 함수 합성 순서 변경 가능 시간 복잡도 더 빠름 👍 느낀점 나도 업무를 하면서 특정 함수를 작성할 때, 하나의 상황만 고려해 함수를 작성하는 경우가 많았다. 이번 학습을 통해, 내가 지금까지 작업한 것들이 얼마나 위험한지 알게 되었으며, 추상화 즉 코드의 안정성에 대해 깊게 생각해 보는 시간이였다. 참고 👋 …","frontmatter":{"categories":"JS","title":"함수형 프로그래밍 - 안전한 합성","date":"March 19, 2022"},"fields":{"slug":"/study-js-functional-21/"}}},{"node":{"id":"92e415e0-e7f4-5347-8ffe-4df82b72470b","excerpt":"변화 커리어 성장에 갈증이 너무나 심한 한 주였다. 그래서 이력서를 정리해 매일 관심 있었던 회사에 지원을 시작했다. 어차피 더 큰 회사로 가기 위해서는 채용 절차를 준비하고 극복해야 하기 때문에, 미리 면접, 과제 등 다양한 경험을 쌓는 마음으로 회사 지원을 적극적으로 하게 되었다. 사실 어제 야근도 해서 많이 피곤했는데, 감사하게 서류 접수 통과되었다는 소식을 듣자 속으로 ‘나도 이제, 더 큰 세상으로 나아가 성장할 수 있겠다’라는 생각아 들게 되었다. 이번 일로 무언가 삶에 변화를 주기 위해서는 행동이 당연하고 너무나도 중요함을 알게 되었다. 더 일찍 준비하고 행동할 수 있었는데, 막연한 두려움과 행동하지 않아 조금 늦게 행동했던 것 같다. 그래도 지금부터라도 미루지 말고, 바로 행동하는 연습을 해야겠다. 도움 되었던 자료 도움 되었던 자료","frontmatter":{"categories":"Log","title":"3월 3주 회고","date":"March 19, 2022"},"fields":{"slug":"/write-log-220319/"}}},{"node":{"id":"dcbc344d-75f5-5e3e-9c6a-35ccfd94bdb9","excerpt":"반성 처음으로 과제 테스트를 프로그래머스를 통해 진행했다. 결과는 처참했다.\n일단 업무에서 React-Native로 작업을 하고 있는데, 필요한 기능을 개발할 때 React-Native에서 제공하는 플러그인을 추가하는 방향으로 개발을 하다 보니, 플러그인 내부 코드를 보지 않고 개발을 진행하고 있었다. 물론, 웹 개발을 일 시작하면서 거의 하지 못해서 많이 낯선 것도 있었지만, 이번 과제를 풀면서 정적인 HTML에 특정 이벤트를 등록하여 기능을 구현하는 부분에서 많은 생각이 들었다. 지금까지 내가 개발한 것은 개발이 아니었구나… 정말 원리도 모르고 동작이 된다고 자뻑(?)에 빠져서 개발을 하고 있었구나…라는 생각을 하면서 되돌아보는 시간을 갖게 되었다. 만약 이렇게 반성하지 않고, 아무 생각 없이 개발을 진행했다면 정말 알맹이가 없는 개발자가 되었을 것이다.(정말 아찔하다) 앞으로 학습을 하면서 동시에 나의 실력을 파악할수 있도록 노력해야겠다. 도움 되었던 자료 도움 되었던 자료","frontmatter":{"categories":"Log","title":"3월 2주 회고","date":"March 13, 2022"},"fields":{"slug":"/write-log-220313/"}}},{"node":{"id":"65a88d1b-5cbf-5f94-b10f-adc85fbf5d31","excerpt":"Reduce함수 제대로 사용하기 목표 명령형 코드에서 함수가 만능이라고 생각하고 작성하는 습관을 지우자! Map 함수로 Reduce 제대로 사용하기 명령화 reduce 콜백함수로 들어오는 는 너무 구체적인 값들이 들어옴 그래서 함수명을 짓기도 애매하고, 재사용 되기 어려움 추상화  을 통해 배열로 결과를 만들어서  의 인자에 들어오는 값들의 타입을 동일하게 만듬 즉, 에 복잡한 함수를 쓰는 것보다 을 사용해서 하나의 타입 코드를 사용해서 간결하고 재사용되기 쉬운 코드를 사용하는것이 함수형 프로그래밍에 적합함 또한, 함수 조합성 측면에서도 유리함 Map, Filter 함수로 Reduce 제대로 사용하기 1 Reduce에서 모든 로직 사용 코드가 깔끔해 보이는 거지, 사실 로직 측면에서는 조심스러움 또한, 로직을 추가 할 때, 복잡함 Map, Filter 함수 이용 간결한 함수를 통해 조합해 나아가는 성격 특정 로직이 추가되어도 복잡하지 않음 Map, Filter 함수로 Reduce …","frontmatter":{"categories":"JS","title":"함수형 프로그래밍 - 명령형 코드 습관 지우기","date":"March 12, 2022"},"fields":{"slug":"/study-js-functional-20/"}}},{"node":{"id":"6181f459-d62f-5ad5-b4ee-84afa11d8cfd","excerpt":"이터러블 프로그래밍 학습 목표 이터러블 프로그래밍 혹은 리스트 프로세싱에 익숙해지자 🧐홀수 N개 꺼내서 더하기 명령형 코드 함수형, 이터러블 프로그래밍(List Processing)으로 코드 변경 를 함수를 통해 변경 값 변화 후, 변수 할당을 함수를 통해 변경 를  함수를 통해 변경 축약 및 합산을  함수를 통해 변경 참고 - while문을 range함수로 변경 🧐 추억의 별 그리기 🧐 추억의 구구단 느낀점 기존에 당연하게 작성하고 있던 명령령 코드를 함수형 코드로 변경하는 학습을 통해, 더욱더 가독성과, 성능 적인 측면에서 좋은 코드를 작성해 보는 학습을 하였습니다.\n조금 더 연습을 통해, 실무 또는 프로젝트에서 막연하게 사용했던 명령형 코드를 함수형 코드로 변경하여 유지보수 좋은 코드를 작성하는 연습을 해야 겠습니다.\n 참고 목표 🧐홀수 N개 꺼내서 더하기 명령형 코드 함수형, 이터러블 프로그래밍(List Processing)으로 코드 변경 참고 - while문을 range함…","frontmatter":{"categories":"JS","title":"함수형 프로그래밍 - 이터러블 프로그래밍","date":"March 12, 2022"},"fields":{"slug":"/study-js-functional-19/"}}},{"node":{"id":"2ddb5fbb-7f29-549a-aa88-d1d0f641228c","excerpt":"도전 TDD 개발 방법이 이미 서울 쪽 지방 괜찮은 회사들은 TDD를 실천하고 있다는 사실과 내가 너무나 좋아하는 이 TDD 온라인 개발 프로그램을 참여했다는 후기를 듣고 바로 해당 온라인 TDD 강의 신청 알람을 했다. 하지만 금액이 부담이 되었지만, 이 금액을 투자해 나의 연봉을 200% 이상 올릴 수 있다는 확신이 들어서 바로 결제를 하게 되었다. 사실 내가 일하면서 이 프로그램을 제대로 완주할 수 있을까라는 의문이 들었지만, 그래도 이러한 노력을 하지 않는다면 영원히 나아가지 못할 것 같았다. 내가 한 선택을 제대로 결실하기 위해, 미리미리 React 학습과 TDD 관련 학습을 해야겠다. 건강 꾸준히 운동을 하고 있는데, 운동을 하다가 갑자기 허리가 아프다. 정말 억울하면서도, 속상하다.\n열심히 나아지기 위해 운동을 하는데 허리가 아프다니… 그래도 낙담하지 말고 과 을 분리 한 다음에 차분히 회복하자 도움 되었던 자료 도움 되었던 자료","frontmatter":{"categories":"Log","title":"3월 1주 회고","date":"March 06, 2022"},"fields":{"slug":"/write-log-220306/"}}},{"node":{"id":"413f3d0f-08a1-5cce-a166-eb62a3f4cbff","excerpt":"자가격리 내가 확진이 될 줄은 꿈에 몰랐다. 자가격리를 하면서 몸은 너무 안 좋은데, 무언가 해야 한다는 마음때문에 제대로 쉬지도 못하고 있는 것 같다.\n나만 좁은 공간 속에서 멈춰 있는 느낌이다. 그래도 쉬어야 한다. 나를 나무라하지 말고 인생 멀리 보면서 지금은 잠깐 쉬고 다음을 위해 준비해야 한다. 언젠간 이런 시간이 나에게는 큰 도약이 될 것이라는 희망을 가지며 쉴 땐, 제대로 쉬어야 한다. 이게 지금 가장 중요 한 것 같다. 가장 중요한 것 다시 한번 몸과 마음과 지금 관계를 맺고 있는 나의 소중한 사람들이 가장 중요하다는 사실을 잊지 않고, 한 걸음 나아지기 위해 휴식을 취해야 한다. 스스로에게 조급하게 밀어붙이지 말자. 나는 나만의 속도로 멀리 가자 도움 되었던 자료 도움 되었던 자료","frontmatter":{"categories":"Log","title":"2월 4주 회고","date":"February 26, 2022"},"fields":{"slug":"/write-log-220226/"}}},{"node":{"id":"9e08ad50-73c9-5313-8a87-f1f8a770eeb1","excerpt":"집중 이 책을 읽으면서 스스로에게 ‘나는 무언가에 전념 또는 집중하는 삶을 살고 있나?‘라는 질문을 해보게 되었다.\n하지만 대답은 쉽게 하지 못했다. 무언가를 열심히 하고는 있지만 돌이켜보면 남아있지 않은 느낌을 받을 때가 많았다.\n무엇이 잘 못되었는가 생각하고 이 책을 읽다보니 그 이유를 하나씩 알게 되었다. 나는 하고 있었다. 즉 하나에 집중하지 않고 여러개를 조금씩 많이 하고 있었다.\n그리고 이 책에서 말하는 의 의미는 사뭇 일반적으로 달랐다. 하나씩 조급하지 않고 그저 하나씩 임하다보니 전념하는 삶을 살게되었고, 원하는 목표에 다다를 수 있었다는 일화들이 많이 등장했다.\n그 중에서 인장 깊은 구절을 소개 한다. 다짐 나 또한 전념해야 할 시기라는 사실을 알고 있다.\n그러나 요즘 생각과 마음이 조급해 손에 잘 잡히지 않을 때가 많다.\n이번에 이 책을 통해 마음을 다잡고 하나씩 차분히 전념하기를 통해 원하는 목표에 도달하고 싶다.","frontmatter":{"categories":"Book","title":"📕 「전념」을 읽고","date":"February 24, 2022"},"fields":{"slug":"/read-book-7/"}}},{"node":{"id":"bfdb0574-652e-5011-acdd-5e45ec32e412","excerpt":"‘지연적인 함수’에 Proimse 사용할 수 있도록 코드 추가 목표 지연적인 함수에서  상황에도 사용할 수 있도록 코드 수정 상황에 따라 지연적이지 않을 때를 대비하는 함수 작성 L.map, map, take 함수를 Promise에서도 사용하도록 밑에 코드에서는  값을 받게되면 정상적으로 동작하지 않음 L.map 함수에서 Promise 값 사용할 수 있도록 변경 Take 함수에서 Promise 값을 꺼낼 수 있도록 변경 다양한 경우에도 동작 함 L.filter, Take에 Kleisli Composition 적용 Filter함수에서 지연성과 Promise를 함께 지원할려면, Kleisli Composition을 활용해야 함 밑에 코드 처럼 Filter함수에 들어오는 값이 Promise이기 때문에 아직은 동작하지 않음 L.filter 지연성과 Promise를 만족하기 위한 수정 Take 함수에서 Promise를 만족하기 위한 수정 사용 Promise에서 값이 reject을 반환했을 …","frontmatter":{"categories":"JS","title":"함수형 프로그래밍 - 지연적인 함수 + Promise","date":"February 22, 2022"},"fields":{"slug":"/study-js-functional-17/"}}},{"node":{"id":"23eebd9a-5856-5b65-8bf8-f3e82a559028","excerpt":"‘지연적인 함수’를 병렬 적으로 목표 상황에 따라 지연적이지 않을 때를 대비하는 함수 작성 지연된 함수열을 병렬적으로 평가하기 JS가 동작하는 환경인 브라우저, NodeJS에서는 비동기 I/O로 동작함 비동기 I/O는 싱글 스레드로 동작함으로, CPU 점유를 효율적으로 할 수 있음(최신 트렌드) JS가 싱글 스레드로 동작하고 있기 때문에 JS가 병렬적인 일들을 할 일이 없다고 생각하는 경향이 있음 그러나, JS가 로직을 제어 할 때 비동기적으로 싱글 스레드를 제어 할 뿐인지 얼마든지 병렬적인 처리는 필요함 예를 들어 NodeJS에서 데이터를 요청하는 쿼리를 병렬적으로 실행해, 한 번에 결과 값을 얻는 경우도 있고 NoSQL DB를 사용할 때, 여러개 Key를 가지고 많은 결과를 한 번에 처리 하는 경우도 있음 또는 NodeJS에서 이미지 처리를 할 때, 실제로 NodeJS가 직접 처리하는 것이 아닌, 네트워크나 기타 I/O로 작업을 보내…","frontmatter":{"categories":"JS","title":"함수형 프로그래밍 - 지연적인 함수 + 병렬","date":"February 22, 2022"},"fields":{"slug":"/study-js-functional-18/"}}},{"node":{"id":"f50ca2ff-30bd-56ee-8480-5794a2bb6d93","excerpt":"의식적 노력 이번 한 주도 해야 할 것들을 하나씩 했지만, 그러나 의식적으로 차분히 임하지 못한 것 같다.\n하나를 배우고, 일을 할 때에 스스로에게 내가 정말 이해했는지, 모르는게 무엇인지 스스로 생각하고 임하지 못 한 것 같다.\n그저 시간에 쫓겨 라는 사실에 안주 했던 것 같다. 누군가에게 설명하지 못 한 다면 내 것이 아닌데 말이다.\n다시 한번, 스스로 다짐하며 이제는 시간을 내 편으로 만드는 노력을 해야 겠다. 가장 중요한 것 건강의 소중함을 다시 한번 느꼈다. 아무리 공부를 하고 운동을 해도, 몸이 아프니 정신도 많이 약해진다는 것을 다시 한번 깨닫게 되었다.\n인생에서 우선순위를 확실히 잡아 다시 회복하며 앞으로 나아가야 겠다. 도움 되었던 자료 도움 되었던 자료","frontmatter":{"categories":"Log","title":"2월 3주 회고","date":"February 21, 2022"},"fields":{"slug":"/write-log-220221/"}}},{"node":{"id":"e14b81ac-7949-58e1-b7b1-939780980ae1","excerpt":"🤫 ‘값’으로써 Promise 목표 값으로써 Promise의 의미를 알아보자 함수 합성 관점에서 Promise의 의미를 알아보자 Kleisli Composition 규칙 관점에서의 Promise의 의미를 알아보자 위의 개념을 학습한 뒤에, reduce함수를 리팩토링 해보자 값으로서의 Promise 활용  함수가 제대로 작동될려면, 인자 와 가 동기적으로 값을 확인할 수 있어야 함 즉, 비동기 상황이 일어나지 않는(일급 값이 아닌) 값이 들어와야 함 = 가 아닌 값이 들어와야 함 만약  인자  자리에 시간이 지난 후, 값이 들어오면 어떻게 될까? 정상적인 연산 불가 그러면 어떻게 하면 위의 코드를 정상적으로 동작하게 할 수 있을까? go1함수를 일반 코드 평가와 Promise를 값으로 코드 평가 하는 함수를 동일한 상황에서 사용할 수 있도록 코드 수정 함수 합성 관점에서 Promise Promise는 비동기 상황에서 함수 합성을 안전하게 해주는 도구 비…","frontmatter":{"categories":"JS","title":"함수형 프로그래밍 - 값으로써 Promise","date":"February 12, 2022"},"fields":{"slug":"/study-js-functional-16/"}}},{"node":{"id":"7d934ff9-96f1-52a8-befc-85e2bfbcb828","excerpt":"몸부림 요즘 들어 스스로 ‘많이 힘들다’라는 생각을 한다. 그러다 보니 자연스럽게 불평불만을 많이 한 이번 주인 것 같다.\n원래 이런 사람이 아니었는데 스스로를 돌이켜 보아도 어느새 특정 사람과 상황에 대해 불평불만을 하고 있는 나를 보게 되었다. 특히 이런 이야기를 들어주는 친구들에게 미안했다.\n그래도 괜찮다고 언제든지 전화해서 이야기하라는 그 한 마디가 많이 힘이 되었다. 이 힘으로 하루하루 묵묵히 해야 할 일들을 할 수 있었다.\n스스로 혼자라고 느낄 때도 있지만, 과거를 돌이켜 보면 나에게는 매번 좋은 사람들이 옆에 많이 있었다. 그리고 그 사람들이 떠나간 이후에, 이제야 그들이 소중한 사람이라는 사실을 알게 되었다.\n그러니 지금 내 주변에 있는 사람들에게 감사하며 소중히 여기고 내 삶에 불평불만은 그만해야겠다. 이번 한 주도 많이 애썼고, 고생했고, 감사했다. 노력 최근에 자신이 한 업무를 누군가와 함께 공유하고, 개발해 나아가는 일을 할 때 타인에 대한 가 너무나 중요함을…","frontmatter":{"categories":"Log","title":"2월 2주 회고","date":"February 12, 2022"},"fields":{"slug":"/write-log-220212/"}}},{"node":{"id":"ec311c2b-1c8d-5da8-96dc-e0bedbbac920","excerpt":"🤫 callback과 Promise 목표  방식을 살펴봄 는  어떤점이 다른 것인지 살펴봄 함수형 프로그래밍과 연관되어서, 가 어떤 가치를 가지고 어떻게 다른지, 어떻게 활용해야 하는지 살펴봄 JS에서 비동기 동시정 프로그래밍을 하는 방법 2가지 오랫동안 사용했던  패턴 를 기반으로 한 을 통해 함수를 합성하는 방법과 와 함께 사용하는 방법 CallBack Promise 적용 Promise를 만들어서 return함 한다는 의미가 중요함 CallBack과 Promise의 가독성 차이 함수를 연속적으로 실행시켰을 때 발생 특히, CallBack함수의 깊이가 계속 깊어지기도 하고, 코드 가독성면에서도 떨어짐 비동기를 값으로 만드는 Promise 일반적으로 CallBack함수와 Promise 함수의 차이가 코드 가독성 부분도 있지만, Promise가 CallBack과 다른 점은 일급으로 비동기 상황을 일급 값으로 다룬 다는 점이 가장 중요하게 다름 Promis…","frontmatter":{"categories":"JS","title":"함수형 프로그래밍 - CallBack과 Promise 차이","date":"February 10, 2022"},"fields":{"slug":"/study-js-functional-15/"}}},{"node":{"id":"e19b5c47-80a0-5968-9a60-6b7b206b6cc8","excerpt":"flatten함수  함수 : 1차원 배열로 만들어주는 함수 L.flatten 함수 구현 배열의 깊이와 상관없이 특정 배열 안에 있는 값을 iterator로 리턴하는 함수 yield * 을 통해 L.flatten 함수 구현  은 과 같음 L.flatten 함수 사용 L.flatten을 통해 즉시 코드 평가하는 flatten함수 구현 L.deepFlat 깊은 Iterable을 모두 펼침 flatMap Map과 Flatten함수를 동시에 하는 함수 최신 JS 문법에 추가됨 기본적으로 JS가 지연적으로 동작하지 않기 때문에, 함수가 등장함 기본 JS에서 제공하는 flatMap사용 이 함수도 마찬가지로, 배열을 다 만들어 놓고 그 다음 함수 실행 L.flatMap 함수 구현 즉시평가, flatMap구현 2차원 배열 다루기 이터러블 중심 프로그래밍 실무적인 코드 느낀점 다양 함수형 프로그래밍을 구현해보고, 또 실무적으로 사용하는 연습을 하였습…","frontmatter":{"categories":"JS","title":"함수형 프로그래밍 - 지연성(flatten, flatMap)","date":"February 07, 2022"},"fields":{"slug":"/study-js-functional-14/"}}},{"node":{"id":"356d1bce-6a20-5809-afda-8734b419602f","excerpt":"queryStr 함수 만들기 객체를 Query String으로 만드는 함수 pipe함수 적용 지연성 함수 적용  보다 이 높은  함수 밑에  함수는 배열이 아닌 곳에서도 사용 가능 지연성 함수 적용 find  함수를 통해 결과를 만들어 내는 함수 특정 조건을 만족하는 값 중 첫 번째 값만 꺼내는 함수 find함수 아쉬운점 filter함수 코드 실행시 users에 있는 값들을 다 순회하게 됨 그래서 를 호출하여,  내부 조건에 만족하는  값을 함수를 통해 추출하도록 변경 L.map을 통해 기존의 map함수 간결하게 만들기 이 때,  함수 사용 pipe함수 적용 L.filter을 통해 기존의 filter함수 간결하게 만들기 이 때,  함수 사용 L.map, L.filter에 For문 적용 느낀점 기존에 사용하던 함수들을 지연적으로 구현하는 학습을 통해, 함수의 확장을 경험하는 시간을 가졌습니다.\n또한 원하는 값을 추출하기위해 지연적으로 구현한 함수를 사…","frontmatter":{"categories":"JS","title":"함수형 프로그래밍 - 지연성(take,find)","date":"February 06, 2022"},"fields":{"slug":"/study-js-functional-13/"}}},{"node":{"id":"7ef0fe68-e1e3-55e1-93c0-05bce3df0c28","excerpt":"꾸준함 이번 한 주는 설 연휴가 있어서 많이 쉴 수 있을 거라 생각하지만, 나의 착각이었다.\n몸은 쉬어야 하는데, 머리는 계속 무언가를 해야만 한다고 이럴 때일수록 무언가를 해야 한다고\n나 스스로를 압박을 하였다. 그런데 돌이켜보면 그렇게 무언가를 제대로 하지 못했던 것 같다.\n그러면서도 몸은 더 피곤해졌다. 정말 하루하루 제대로 살고 싶은데, 지금까지 해왔던 것(운동, 독서, 개발 공부 등)을 그냥 계속하는 기분이 들었다. 이러한 것이 잘 못된 줄 알았는데, 곰곰이 생각해 보니깐 이렇게 꾸준히 무언가를 계속하는 게 나의 장점이라는 생각이 들었다. 다만 이제는 몸을 생각하면서 막연하게 강의를 많이 들었다면, 이제는 적은 시간이라도 집중해서 배운 것을 남기는 것에 집중해서 강의를 들어야겠다. 마지막으로 오늘 운동을 하다가 문득 울컥했다. ‘이렇게 힘들어도 꾸준히 하는데, 나 스스로에게 보상을 안 주면 너무 힘들 것 같다’라는 생각이 들었다. 그래서 더 이 악물고 2022년에 세운 목…","frontmatter":{"categories":"Log","title":"2월 1주 회고","date":"February 05, 2022"},"fields":{"slug":"/write-log-220205/"}}},{"node":{"id":"7f1f4f39-8c84-5387-80a9-ce725824846b","excerpt":"이터러블 중심 프로그래밍에서의 지연 평가 Lazy Evaluation 코드가 필요하기 전까지 미루었다가, 정말 코드 평가가 필요할 때 실행 제때 계산법 느긋한 계산법 제너레이터/이터레이터 프로토콜을 기반으로 구현 나중에 코드 평가하고 진행 L.map 지연성을 가진 함수 구현 제너레이터/이터레이터 프로토콜기반으로 구현 코드 평가를 미루는 성질을 가지고, 평가를 순서를 조작 가능함 L.filter 지연성을 가진  함수 구현 제너레이터/이터레이터 프로토콜 기반으로 구현 range, map, filter, take, reduce 중첩 사용 이터레이터를 이용해서 코드 평가를 하고 코드를 실행시켜서 훨씬 더 빠른 코드를 만듬 단순히  문을 사용했는데  문의 내부 구조인 를 이용해 코드의 효율을 높일 수 있음 문을 대체하는 코드로 변경함 큰 차이는 아니지만, 조금 더 빠르게 동작함 즉시 코드 평가하는 함수로 문제 해결 range함수를 통해 0,…9 배열을…","frontmatter":{"categories":"JS","title":"함수형 프로그래밍 - 지연성(map,filter)","date":"February 02, 2022"},"fields":{"slug":"/study-js-functional-12/"}}},{"node":{"id":"73b75680-6ee6-5941-ab3e-1195011701ee","excerpt":"책임 새해가 된지 어느덧 한 달이 지났다. 그런데 스스로 나를 되돌아보면 아직도 많이 부족한 것 같다.\n그중에 말과 행동에 무게를 많이 두고 싶은데, 잘 그렇지 못하는 것 같다.\n어떻게 하면 나의 말과 행동의 무게를 둘 수 있을까? 개인적으로는  인 것 같다.\n무언가를 할 때에 을 생각한다면 조금은 말과 행동에 무게를 높일 수 있지 않을까 생각을 해보았다.\n나이가 한 살 한 살 먹으면서 자연스럽게 어른이 될 줄 알았는데…\n매 순간순간 을 생각하며 노력해야 어른이 되지 않을까 생각해 본다. 소중한 사람들, 그리고 내가 해야 하는 업무에 을 조금 더 지며, 성장하는 한 해가 되었으면 좋겠다. 의식적 노력 최근  프로젝트를 시작하면서 다양한 경험을 하고 있다. 스스로 놀랐던 점이, 단순히 기능 구현을 넘어 Doc에 제공한 대로 API를 사용하지 않았을 때, 발생하지 않은 문제들을 곰곰히 생각해보고, console창에 발생한 경고나 에러를 보면서, 어떻게 하면 성능 좋은 개발을 할 수 있…","frontmatter":{"categories":"Log","title":"1월 5주 회고","date":"January 30, 2022"},"fields":{"slug":"/write-log-220130/"}}},{"node":{"id":"1a6bc696-a608-56ff-8aa0-938bb53156d1","excerpt":"Take 특정 범위까지 배열로 리턴하는 함수 take함수 안에서 range, L.range 함수 효율성 마찬가지로 L.range와 range 효율성 차이발생 일반 range함수는 특정 범위까지 배열을 만들고 나서 take 함수 진행 하지만 L.range는 배열을 만들지 않고 take의 첫 번째 인자인 5개의 값만 가진 배열을 만듬 take함수에 curry 적용 느낀점 다시 한번 함수형 프로그래밍에 대한 장점을 알게되었다. 정말 효율성이 너무 좋은 것 같다. 제대로 학습해서 실무에서 무조건 적용해야 겠다. 참고 take함수 안에서 range, L.range 함수 효율성 take함수에 curry 적용 느낀점 참고","frontmatter":{"categories":"JS","title":"함수형 프로그래밍 - 지연성(take함수)","date":"January 28, 2022"},"fields":{"slug":"/study-js-functional-11/"}}},{"node":{"id":"c7352bbc-8250-5a5c-a2d7-e5a79b50e77a","excerpt":"Range 함수 Range 함수 실행 후, 모든 값을 더하는 함수  함수로 를 전달하기 전에, 이미 에서 코드가 평가되어 로 리턴됨 사실 가 작동하기 전까지는 로 리턴된 배열은 필요한 상태가 아님 가 순회를 시작하고 하나의 값으로 데이터를 축약 할 때, 그 때 가 필요한 것 느긋한 L.Range  코드 평가시  내부 문은 실행하지 않음  가 실행 했을 때, 문이 실행됨 즉, 밑에 는 배열상태로 있지 않음() 에서 해당 값들이 필요할 때, 문이 작동하면서 하나씩 코드가 평가됨 에서는 Array을 만들지 않고 reduce가 돌면서 하나씩 값을 꺼내는 방식임 ex) 문이 돌면서  으로 값을 꺼냄 Reduce 내부 함수를 통해 Range와 L.Range 비교 위 는 reduce를 실행했을 때, 를 만들고 → 를 만들고 그리고 순회하면서 로 값을 얻어서 축약 함 그런데  같은 경우 reduce를 실행 했을 때, 를 만들고 → iterator가 자기 자신을 리턴하는 Iterable이고 해당하…","frontmatter":{"categories":"JS","title":"함수형 프로그래밍 - 지연성(Range함수)","date":"January 27, 2022"},"fields":{"slug":"/study-js-functional-10/"}}},{"node":{"id":"c60821c2-4ff9-513f-9a36-109aed42a56f","excerpt":"지금까지 학습한 함수들 총 수량 구하기 총 금액 구하기 리팩토링 해보기 ,  내부에 map 함수 인자에 전달하는 부분을 제외하고는 동일한 코드 현재,  함수 실행 후  실행하는 과정이 특정 도메인(products)에 의존하고 있음 결국 ,  은 특정 도메인(products)을 위한 코드 임 추상화 레벨을 높여, 많은 곳에 사용할 수 있도록 리팩토링 진행 커링을 이용해 더 리팩토링 해보기 다른 도메인에서도 사용 함수형 프로그래밍으로 HTML로 출력하기 를 통해서 HTML 랜더링 템플릿 리터럴을 통해서 동적으로 표현 이라는 함수를 통해 다양한 곳에서 사용 가능 를 통해 HTML을 하나의 문자열로 합침 느낀점 이번 학습을 통해 함수형 프로그래밍으로 HTML을 출력하는 내용을 학습하면서 추상화가 높다는 의미가 어떤 것인지 다시 한번 알게 되었다. 결국 코드를 재 사용할 수 있는 범위가 높을 수록 효율적이고 생산적으로 일 할 수 있다는 것도 깨닫게 되었다. 더 제대로 학습해서 실무…","frontmatter":{"categories":"JS","title":"함수형 프로그래밍 - 예시를 통해 복습","date":"January 26, 2022"},"fields":{"slug":"/study-js-functional-9/"}}},{"node":{"id":"56260880-5814-55d2-8a72-7d9f2f9da428","excerpt":"함수형 프로그래밍에서는 코드를 값으로 많이 사용함 어떠한 함수가 코드인 함수를 받아서, 평가하는 시점을 원하는 대로 다룰 수 있기 때문에 코드의 표현력을 높일 수 있음 중첩된 코드를 가독성 높일 수 있음 즉시 함수들과 인자를 전달해서 값을 바로 평가해서 사용 Go 라는 함수를 만들어서 실제로 코드의 표현력과 가독성을 높여보자 라는 함수를 만들어 사용하게 되면 에서 로 코드가 평가됨 즉, 인자를 받아서 하나의 값으로 축약해 나아가는 개념 Go를 사용하여 읽기 좋은 코드로 만들기 기존 코드 함수 사용 위에서 아래로 가독성 있게 코드를 변경할 수 있음 여러번 호출되는 함수를 하나의 함수로 만들어보자(Pipe) 함수를 리턴하는 함수 여러번 호출되는 함수를 하나의 함수로 만듬 밑에 3개의 함수를 축약하는 하나의 함수를 만들어주는 함수가  함수의 역할 Pipe 함수 설계 함수를 리턴하는 함수 내부에서 함수를 사용함 인자를 받아서 함수를 통해 내부 함수를…","frontmatter":{"categories":"JS","title":"함수형 프로그래밍 - 코드를 값으로 다루어 표현력 높이기","date":"January 24, 2022"},"fields":{"slug":"/study-js-functional-8/"}}},{"node":{"id":"9043deb9-d85e-5dc5-9cff-1e49c7810365","excerpt":"Map, filter, Reduce 정리 함수형 프로그래밍 사고 products에서 가격이 20,000만원 미만인 가격을 합치고 싶다고 치면 함수의 첫번 째 인자로 들어오는 라는 함수를 통해, 두 번째 인자에 배열 안의 값들이 합산됨 즉, 밑에 코드를 보면, 두 번째 인자에 20,000원 미만의 값들이 배열로 들어와야 한다고 생각해야 함 filter함수를 통해 20,000원 미만의 상품을 배열로 하는 코드를 작성하면 됨 정리 머리 속으로 미리 어떠한 결과가 올지 생각을 하고, 그 결과 값이 배열이라면 배열을 리턴하는 함수를 적절하게 사용해야 함 밑에서 위로 올라오면서 코드가 동작되기 때문에, 밑에서 위로 코드를 읽어야 함 느낀점 함수형 프로그래밍적인 사고를 조금이나마 알게 되었다. 또한 이렇게 코드를 중첩으로 사용하면서도 가독성 좋게 코드를 짤 수 있음에 놀라웠다.\n또한 API를 통해 얻어지는 특정 데이터를 모델링 하기 쉬울거라는 생각도 들었다. 참고 Map, filter, Red…","frontmatter":{"categories":"JS","title":"함수형 프로그래밍 - Map, Filter, Reduce 중첩 사용","date":"January 22, 2022"},"fields":{"slug":"/study-js-functional-7/"}}},{"node":{"id":"d1f97ce7-b21e-54cf-9077-4a65ecb4bd6e","excerpt":"💪 반성 또 반성 무언가 확실하게 행동하고 싶은데, 잘 못하는 것 같다. 해야 할 일들이 분명히 존재하는데 스스로 그 일들을 미루기도 하고, 친구들과 약속을 잡았는데 그 약속을 번복하기도 하고… 과거의 안 좋은 습관들을 아직도 가지고 있다. 벗어 버리고 싶지만, 무슨 애벌레가 나비 되는 것처럼 사람은 바로 변화할 수 없는 건 알고 있다. 그래서 매 순간순간 의식적으로 내가 하는 말, 행동을 인지하는 게 너무나도 중요함을 다시 한번 되새기게 되었다. 그리고 또 한 번 다짐을 하게 되었다. 2022년에는 해야 할 일들을 미루지 말고 그냥 하자고, 스스로 타협하지 말고 아주 작더라도 행동하자고 어차피 한 번 사는 인생, 누구도 책임져 주지 않고 내가 내 발로 걸어가야 하는 거니깐… 힘들어도 정신만큼은 제대로 차리자 이번 한 주도 고생했다. 😱 예외 처리 이번 한 주는 개인적으로 너무나도 빡센 한 주였다.\n그랬던 가장 큰 이유는, 사용자들이 가장 많이 접하는 ,  관련된 로직 내부에 에러…","frontmatter":{"categories":"Log","title":"1월 4주 회고","date":"January 21, 2022"},"fields":{"slug":"/write-log-220122/"}}},{"node":{"id":"99ab7741-8fc0-52f2-9d3a-b79c2fc6b37e","excerpt":"하나의 값으로 누적 하는 예시 기본 Reduce 사용 예시 는 재귀적으로 인자로 들어온 함수를, 계속 실행하면서 하나의 값으로 만들어야 함 Reduce 함수 내부 구조 누적 값을 인자로 받지 않았을 경우 JS에서는 위의 인자중  값이 들어오지 않아도 값이 축적되도록 구현되어 있음 누적하는 값이  함수 인자로 들어오지 않았을 경우 내부에서 를 만들어서 배열의 첫 번째 값을 셋팅 단순히 으로 접근하지 않고, 내부 원리로 초기값을 셋팅 Reduce 사용 예시 느낀점 Reduce함수 내부 구조 코드를 직접 구현하면서 Reduce 함수의 작동원리를 알게 되었음, 또한 Reduce함수를 통해 다양한 값을 추출할 수 있다고 생각함 참고 하나의 값으로 누적 하는 예시 기본 Reduce 사용 예시 Reduce 함수 내부 구조 누적 값을 인자로 받지 않았을 경우 Reduce 사용 예시 느낀점 참고","frontmatter":{"categories":"JS","title":"함수형 프로그래밍 - Reduce 함수","date":"January 21, 2022"},"fields":{"slug":"/study-js-functional-6/"}}},{"node":{"id":"1cc3d453-7b34-5c42-9944-12e94ee8b672","excerpt":"명령형 코드의 Filter 함수 filter 함수 이터러블을 받아서(순회를 하면서) 특정 함수를 인자로 받아, 함수 조건에 맞는 대상만 filter처리 후 return 진행 filter 함수 사용 내부(밑에 배열)에 있는 다형성은 인자로 들어오는 보조함수로 지원을 받고 외부의 경우 이터러블 프로토콜을 따르는 것으로 다형성을 지원 받을 수 있음 그래서 filter역시도, 많은 다형성을 갖을 수 있음 느낀점 Filter 함수 내부 구조를 알게 되었고 이터러블 프로토콜을 따르는 함수를 순회를 통해, Filter함수 적용해서 다양한 로직을 만들 수 있을 거라는 생각이 들었다. 참고 명령형 코드의 Filter 함수 filter 함수 filter 함수 사용 느낀점 참고","frontmatter":{"categories":"JS","title":"함수형 프로그래밍 - Filter함수","date":"January 20, 2022"},"fields":{"slug":"/study-js-functional-5/"}}},{"node":{"id":"1b069387-2eba-5f0f-8793-65678937db03","excerpt":"Map함수의 구조 함수형 프로그래밍에서는 와 값으로 소통하는 것을 권장 는 보조 함수를 넣어서 사용  값을 통해 다른 곳에서 사용 이름만 추출 Map 함수 사용X Map함수 사용O 가격만 추출 Map 함수 사용X Map함수 사용O 이터러블 프로토콜을 따른 map의 다형성 1 일반 Map함수는 Array만 순회 가능 은 를 상속받은 객체가 아니기 때문에 map함수를 사용할 수 없음 하지만 밑에서 만든 Map함수는 이터러블도 사용 가능 이 이터러블 프로토콜을 따르기 때문에 밑에 사용 가능 즉, 밑에 작성한 함수는 배열 뿐만아니라 이터러블 프로토콜을 따르는 것들도 순회가 가능함 또한 제너레이터에서도 사용 가능 제너레이터 안에 코드 문장도 사용 가능 중요 웹 API도 ECMAScript의 이터러블 프로토콜을 따르고 있기 때문에, 다양한 조합성을 갖을 수 있음 클래스, 프로토타입의 뿌리로 가진 카테고리 안에 있는 값만 사용할 수 있는 것보다, 위의 방법이…","frontmatter":{"categories":"JS","title":"함수형 프로그래밍 - Map함수","date":"January 17, 2022"},"fields":{"slug":"/study-js-functional-4/"}}},{"node":{"id":"bea0f957-d0a5-59ce-8924-36506de2882e","excerpt":"한 걸음씩 RN(React-Native) 프로젝트를 시작하면서 기존에 작업했던 Ionic 프로젝트와 너무나 달랐다. 특히 CSS를 수정하기 위해 단순히 클래스 이름에 스타일을 주는 것도 필요하지만 RN에서 제공하는 컴포넌트를 이용해 스타일을 적용해야 하며, RN의 규칙에 맞게 컴포넌트를 사용해야지 스타일이 적용된다는 것을 알게 되었다. 그리고 무엇보다 Android에서 스타일을 수정했다고 해도 iOS에서는 스타일이 적용되지 않는 문제가 발생하기도 했다. 이 간격을 줄이기 위한 노력도 많이 했다.\n또한 UseEffect, UseState에 대한 개념을 알게 되어서 적용도 해보았다. 특히 UseEffect가 매력적으로 다가왔다. UseState에 세팅한 변수에 (특정 값이 아닌)가 변할 때마다 내부 코드를 실행시켜주는 것이, 앞으로 개발해야 할 기능에 좋은 영향을 줄 것 같다 그리고 기존에 작업했던 프로젝트에서 사용자 정보 세팅에 관한 로직에 버그가 발생하였다. 그래서 다시 관련 로직…","frontmatter":{"categories":"Log","title":"1월 2주 회고","date":"January 15, 2022"},"fields":{"slug":"/write-log-220115/"}}},{"node":{"id":"c57a1568-fb27-51e0-a73b-ef92cd55d002","excerpt":"제너레이터 Iterator이자 Iterable을 생성하는 함수 Iterator를 return하는 함수 또한 Well-Formed-Iterator임(Iterator를 리턴하는데 그 것이 자기 자신과 동일) 그래서 순회 가능 순회를 할 때 문장으로 표현 가능 —> 이렇게되면 JS에서 제너레이터 내부 문장을 통해 순회할 수 있도록 만들 수 있음 —> 즉, 다양한 값들을 제너레이터를 통해서 순회할 수 있도록 할 수 있음 주의 사항 제너레이터에 return값을 명시할 수 있지만 순회할 때에는 나오지 않음 제너레이터를 통해 홀수만 순회하는 코드 작성 for…of, 전개 연산자, 구조 분해, 나머지 연산자 Iterable, Iterator 프로토콜을 지키고 있는 것들을 통해 사용자 정의 이터레이터 활용 느낀점 제너레이터를 통해 순회할 수 있도록 코드를 작성할 수 있더나느 사실과 일반적인 순회가 아닌 특정 조건을 부여해 순회가 가능하다는 사실이 재밋게 다가왔…","frontmatter":{"categories":"JS","title":"함수형 프로그래밍 - 제너레이터","date":"January 14, 2022"},"fields":{"slug":"/study-js-functional-3/"}}},{"node":{"id":"0bb09e5f-d78d-58ce-b5b1-5ce183579cd8","excerpt":"Iterable 구현, Iterable/Iterator 프로토콜 정의 적용 Well-Formed Iterator 잘 구현된 는 메서드를 실행한 이후에 문을 들어가면 그 이후에 값이 순회되어짐 그러나 위에서 구현한 는 그렇지 못함 Iterator가 자기 자신을 반환하는  메서드를 가지고 있을 때 이라고 할 수 있음 기존에 사용자 정의로 만든 Iterable에 코드 추가 어디에서든 를 만들었을 때 이전까지 진행되었던 자신의 상태에서 메서드를 호출 했을 때 다음 값이 나올 수 있도록 가능함 즉 이것이  다른 곳에서도 Iterator, Iterable 프로토콜을 따르고 있음 전개 연산자 전개 연산자도 Iterable, Iterator 프로토콜을 따르고 있음 느낀점 이터러블이 무엇인지, 이터레이터가 왜 있어야 하는지 그리고 문이 작동되는 원인 등 모르는 것 을 알게 되었다.\n처음에는 익숙하지 어렵다고 느껴졌지만 천천히 공부를 하니 조금씩 이해가 가기 시작하였다.\nJS 함수형 프로그래밍관련 …","frontmatter":{"categories":"JS","title":"함수형 프로그래밍 - Iterable 구현, Iterable/Iterator 프로토콜 정의","date":"January 13, 2022"},"fields":{"slug":"/study-js-functional-2/"}}},{"node":{"id":"e55c903e-c232-5f82-aa23-a32fcba9ea68","excerpt":"1. 평가와 일급 평가 가 계산 되어 을 만드는 것 일급 으로 다룰 수 있다 에 담을 수 있다. 로 사용 될 수 있다. 로 사용 될 수 있다. 2. 일급 함수 를 으로 다룰 수 있다. 조합성과 추상화의 도구 (원하는 시점에 코드를 평가해서 다른 변수에 사용할 수 있음) 3. 고차 함수 으로 다루는  함수를 인자로 받아서 실행하는 함수 함수를 만들어서 리턴하는 함수 를 만들어 리턴하는 함수 4. 느낀점 그냥 코드를 작성하는 행위가 코드 평가라는 사실을 알게되었다. 사실 맨처음에 평가라는 단어에 익숙하지 않았지만 학습하면서 평가라는 단어에 익숙해졌다. 그리고 일급함수의 특징을 고려해 다양한 코드를 작성할 수 있겠다라는 생각이 들었다. 또한 클로저를 하기위해 일급함수를 통해 할 수 있다는 사실을 알게되었다. 아직 많이 생소하지만 그래도 기본을 확실히 다져지는 느낌이다. 참고 1. 평가와 일급 평가 일급 2. 일급 함수 3. 고차 함수 함수를 인자로 받아서 실행하는 함수 함수를 만들어서 …","frontmatter":{"categories":"JS","title":"함수형 프로그래밍 - 평가와 일급함수 그리고 고차함수","date":"January 11, 2022"},"fields":{"slug":"/study-js-functional-1/"}}},{"node":{"id":"7a0a0e64-de8f-5046-a743-d0b36028bfd5","excerpt":"1. 새로운 프로젝트 시작 React-Native 프로젝트에 투입되어서 코드 분석과 리팩토링을 진행하고 있다.\n기존에 팀장님이 작업하신 코드들을 분석하면서 React-Native의 컴포넌트 사용하는 방법 그리고\n스타일 수정하는 방법, React-Native 빌드 세팅 그리고 디바이스 런치 하는 환경 설정을 세팅하는 일들을 하였다. React에 대한 실력이 많이 부족해 퇴근 이후에 추가로 온라인 강의를 통해 부족한 부분을 채우고 있다.\n개인적으로 이번 프로젝트를 통해 React와 React-Native를 제대로 잡고 싶다. 2. 회복을 위해 요즘 들어 몸이 많이 피곤한 것 같다.\n이럴 때일수록 의식적으로 쉬는 연습이 필요하다는 걸 알지만, 마음처럼 잘되지 않는다.\n막상 쉬어도 맘 편히 쉬지 못하고 무언가를 하게 된다.\n조금은 내려놓는 연습을 해야 할 것 같아, 명상하는 시간을 조금 더 늘려야 할 것 같다. 3. 마음 가짐 새해 시작 1주일이 지났지만, 솔직히 매일매일이 똑같다는 생각…","frontmatter":{"categories":"Log","title":"1월 1주 회고","date":"January 09, 2022"},"fields":{"slug":"/write-log-220109/"}}},{"node":{"id":"7888d8b6-8e99-572d-ae93-67a6b2538f55","excerpt":"먼 옛날 사람들 오랜만에 ‘알라딘’ 중고서점을 방문해 책을 둘러보고 있었는데, 고구려 7권 을 보았을 때 반가웠다.\n1권부터 6권까지 읽고 잊고 있었는데 이렇게 발견하게 되어서 너무나 기분이 좋았다.\n그날 구매해 읽기 시작하였고, 평상시에 문학이 아닌 다른 장르를 읽고 있었는데 문학이 너무나 재밌게 다가왔다. 사실 앞 내용이 잘 기억이 나지 않았지만, 김진명 작가의 담대하고 솔직한 그 문장이 너무 좋았다.\n문장을 한 줄 한 줄 읽을 때마다 책 내용을 시간 가는 줄 모르고 읽기 시작하였다. 책에서 고구부(소수림왕)와 고이련(고국양왕)이 등장해 다양한 이야기가 나온다. 나는 이 책을 읽으면서 고이련이 대신들에게 외면당하고 너무나도 큰 업적을 달성한 형(고구부)의 품 안에서 만족하는 것이 아니라, 스스로 무엇가를 해보려고 노력하는 모습이 너무나 인상 깊었다. 현재를 살아가고 있는 나 나는 현재 2022년을 살아가고 있다.\n고구려 7권 책을 통해 그 시대에 가지고 있던 정신들을 배우게 되…","frontmatter":{"categories":"Book","title":"📕 「고구려 7권」을 읽고","date":"January 09, 2022"},"fields":{"slug":"/read-book-6/"}}},{"node":{"id":"e4877faa-b8e0-56a1-88ce-e04b106cf893","excerpt":"에러가 나를 조급하게 한걸까? 개발을 하면서 를 만나면 무언가 마음이 조급해진다.\n에러 때문에 업무 진행이 더뎌진다는 느낌을 받아서 그런 것 같다. 그래서 그런 걸까?\n요즘 들어 일을 하는데, 이유도 모르게 진이 빠진다는 느낌을 받는다. 오늘 아침에 React-Native 프로젝트 Screen 컴포넌트 확장자를 js에서 jsx로 바꾸니, Metro Bundler에서 에러가 발생했다.\n빨간색 배경에 흰색 글자만 봐도 머리가 아프기 시작하였다. 심지어 영어…\n마음이 조급해지고, 진이 빠지기 시작하였다… 물론 해결은 했지만… 그리고 나서 운동하다가 문득, ‘에러가 발생하는 것은 당연한거 아닌가? 아직 개발자로써 1년밖에 일 안 했고 더군나 React-Native 프로젝트 투입된 지 얼마 안됬는데’라는 생각이 들었다. 사실 생각해 보면 에러가 발생하면  창에 문제를 해결할 수 있는 단서가 분명히 있는데, 내가 마음이 조급해져 에러 핑계 대고 어린아이처럼 내 마음처럼 안되니깐 짜증만 내고 …","frontmatter":{"categories":"Log","title":"에러에 대한 마음가짐","date":"January 08, 2022"},"fields":{"slug":"/write-log-220108/"}}},{"node":{"id":"e22357e0-97bc-500d-b5bf-31c1dc79c352","excerpt":"1. 이 책을 읽은 이유💡 요즘 무언가 꾸준히 하는 것 같은데, 공허함을 느낄 때가 많이 있었다.\n그러다가 체인지 그라운드 영상을 통해, 현재 나는  없이 행동하고 있다는 사실을 알게 되었다.\n이 책은 정확히 내가 원하는 것을 알려 주었다. 비전이 왜 중요한지, 비전을 어떻게 세우는지 방법과\n리더가 되기 위해 비전이 꼭 필요하다는 사실 또한 알게 되었다.\n책에서도 좋은 리더가 되기 위해, 을 가져야 한다고 써져 있었다.\n그래서 더욱 이 책을 통해, 미리 비전을 세우고 좋은 리더가 되고 싶어 이 책을 읽게 되었다. 2. 나의 비전은 무엇일까?🧐 이 책에서 이라는 단어가 많이 나온다. 문득 누군가가 비전은 이라는 말을 들었던 것 같다.\n이 책은 한 발 더 나아가, 보이지 않는 것을 보이도록 명확하게 만드는 방법과, 다른 사람들에게 비전을 공유해, 이루는 방법들을 하나씩 알려준다. 그리고 리더가 비전이 없을 경우 어떤 문제에 직면하는지도 이 책에서는 자세히 알려주고 있다. 솔직히 이 문…","frontmatter":{"categories":"Book","title":"📕 「모두를 움직이는 힘」을 읽고","date":"January 04, 2022"},"fields":{"slug":"/read-book-5/"}}},{"node":{"id":"c42face8-a5a2-55ce-8cb4-58b1664a6348","excerpt":"이미 JS에서는 변수 선언 시 를 사용하고 있었는데, 왜 굳이  또는  변수를 사용해야 할까?\n이를 정확하게 알기 위해, 변수의 선언 및 할당 과정, 호이스팅, 스코프를 알아 한다. 🧐 변수란? JS에서 는 하나의 값을 저장하기 위해 확보한  또는 하기 위해 붙인 이름을 말한다.  JS는 매니지드 언어(Maaged Language)이기 때문에 개발자가 직접 메모리를 제어하지 못한다. 따라서 개발자가 직접 메모리 주소를 통해 값을 저장하고, 참조할 필요가 없기 때문에 변수를 통해 안전하게 값에 접근이 가능하다. 변수명(식별자)인 는 변수 값이 아닌 메모리 주소를 기억하고 있다. 변수명을 사용하면, JS 엔진이 변수명과 Mapping된 메모리 주소를 통해 거기에 저장된 값()를 반환한다. 이처럼 변수에 값을 저장하는 것을 할당(assignment, 대입, 저장)이라 하며, 변수에 저장된 값을 읽어 들이는 것을 참조(reference)라 한다. 그리고 변수명을 JS 엔진에게 알리는 것을…","frontmatter":{"categories":"JS","title":"var, let, const의 차이","date":"January 03, 2022"},"fields":{"slug":"/study-js-es6-variable/"}}},{"node":{"id":"e89f8220-8894-5707-b414-0dfa525fe293","excerpt":"🧹 정리 기쁜 일, 슬픈 일, 그리고 후회 되는 일도 많았다. 그래서 요즘 몸과 마음이 많이 지쳐있는 것 같다.\n그래서 올 해는 주어진 시간 속에서 몸과 마음을 회복하는 시간을 갖아야 겠다.\n명상도 좀 하고, 쉴 때에는 걱정과 불안을 내려 놓고 쉬어야 겠다. 🧑‍💻실력 남들보다 늦게 일을 시작한 만큼 오히려 조급하지 말고, 기본에 집중해 흔들리지 않는 개발자가 될 수 있도록 노력해야 겠다.\n그러기 위해 일단 공부하는 환경을 만들고 더 나아가 습관을 만들어야 겠다. 🧘‍♂️ 회복 열심히 애쓴 것 같은데, 제대로 휴식을 취하지 못한 것 같다.\n어떻게 해야 제대로 쉬는 건지, 지난 1년 동안 많은 고민을 했다.\n적어도 잠을 자거나, 명상, 운동을 하면 몸과 마음이 회복되는 느낌을 받았다.\n올 해에는 조금 의식적으로 몸과 마음을 회복하는 시간을 갖어야 겠다.\n그래야 꾸준히 성장할 수 있으니깐","frontmatter":{"categories":"Log","title":"2022년을 시작하며","date":"January 01, 2022"},"fields":{"slug":"/write-log-220101/"}}},{"node":{"id":"ab836bb6-dc1b-533a-8320-b2820bf1d4fd","excerpt":"1. 처음 겪는 사기 난생처음으로 휴대폰를 겪었다. 지인의 지인을 통해 휴대폰 거래를 진행했다.\n생각만해도 스스로가 너무 부끄럽다…\n이번 사건을 통해 확실히 깨달은 것은 \n내가 확인하고 확신이 들기 전까지 심지어 확신을 해도 한 번쯤은 의심을 해보고 다시 생각을 해보자\n스스로를 너무 쉽게 믿지 말자.\n돌이켜보면 빨리 휴대폰을 교체하고 싶은 마음과 단돈 몇십만원 저렴하게 구입하고자 조급하게 행동했다\n다시한번 반성하고 다시는 이런일이 일어나지 않도록 스스로 다짐을 하고\n이번 일을 교훈삼아 앞으로 더 큰 일들이 있을 때 반면교사 삼자. 2. YES맨이 되지 말자 일을 진행하면서 상사가 나에게 업무 지시와 무언가를 설명할 때 을 해서,\n로직을 잘못 개발하였다.\n다시 생각해도 너무나 어리석었다.\nDB에 대한 전반적인 지식도 없는데 지금까지 알고 있다고 생각했다. 그렇다 나는 DB와 스프레드 시트의 차이점을 정확히 몰랐다. 팀장님이 나중에 사용자 정보 중 특정 정보를 외래키로 사용할 수 있으…","frontmatter":{"categories":"Log","title":"12월 마지막 주 회고","date":"December 26, 2021"},"fields":{"slug":"/write-log-211226/"}}},{"node":{"id":"08dc6d81-524c-5e75-a36e-fe44d68674d2","excerpt":"1. 바이너리 비트 연산자  개요 왼쪽과 오른쪽에 피 연산자가 있는 2항 연산자 왼쪽과 오른쪽 피연산자 값을 비트로 변환하여 연산함 비트로 연산하므로 처리 속도가 빠름 2. 비트 OR연산자 연산자 기호 :  피연산자 한쪽이라도 1이면 1로 처리 3. 비트 AND 연산자 연산자 기호 :  피연산자 한 쪽이라도 0이면 0이 되고 양쪽이 모두 1이면 1이 됨 4. 비트 XOR 연산자 연산자 기호 :  피연산자 양쪽 값이 같으면 0이 되고 하나만 1이면 1이 됨 1. 바이너리 비트 연산자 2. 비트 OR연산자 3. 비트 AND 연산자 4. 비트 XOR 연산자","frontmatter":{"categories":"JS","title":"Bit 연산자 - OR 연산자, AND 연산자, XOR 연산자","date":"December 26, 2021"},"fields":{"slug":"/study-js-es6-bit-2/"}}},{"node":{"id":"584563a4-54ac-5bc5-8bd3-f963c8df2b56","excerpt":"1.표현 Content-Type : 표현 데이터의 형식 Content-Encoding : 표현 데이터의 압축 방식 Content-Language : 표현 데이터의 자연 언어 Content-Length : 표현 데이터의 길이 표현 헤더는 전송, 응답 둘다 사용 2. Content-Type : 표현 데이터의 형식 설명 미디어 타입, 문자 인코딩 ex) text/html; charset=utf-8 ex) application/json ex) image/png 3.Content-Encoding : 표현 데이터 인코딩 표현 데이터를 압축하기 위해 사용 데이터를 전달하는 곳에서 압축 후 인코딩 헤더 추가 데이터를 읽는 쪽에서 인코딩 헤더의 정보로 압축 해제 ex) gzip, deflate, identity(압축안함) 4. Content-Language : 표현 데이터의 자연 언어 표현 데이터의 자연 언어를 표현 ex) ko, en, en-US 5. Content-Length : 표현 데이터의…","frontmatter":{"categories":"CS","title":"HTTP - 7.HTTP 일반 헤더(2)","date":"December 26, 2021"},"fields":{"slug":"/study-cs-HTTP-15/"}}},{"node":{"id":"ff29e22f-12c3-5c04-885b-b4ac9f573059","excerpt":"1. 개요 바이너리(Binary) 데이터 처리를 다룸 4개 섹션 비트 연산자 ArrayBufer TypedArray DataView 2. 비트, 바이트 값 표현의 기본 단위는 바이트(Byte) 1바이트는 8비트(Bit)이며 1비트 값은 0 아니면 1 비트 연산은 연산 속도가 빠름 정수 연산만 가능, 소수 연산 불가 JS의 비트 연산 범위 4바이트, 32비트 -2의 32승 ~ 2의 32승 -1 3. 2진수 연산 아래는 사인 부호가 없는 형태임 비트 값은 비트가 1일 때의 값, 2^n승 누적 값은 9번 미트에서 해당 비트까지 전부 1일 때의 값 4. 사인 비트 양수, 음수 부호를 나타내는 비트임 7번 비트가 0이면 양수이고, 1이면 음수 4바이트는 31번 비트가 사인 비트 MSB: Most Significatn Bit 양수 표현 형태와 값 7번(MSB) 비트가 0이며, 최댓값은 127 5. 음수 표현 MSB인 7번 비트 값이 1임 누적값은 6번 비트의 누적 값 -127에 -1을 더함 …","frontmatter":{"categories":"JS","title":"Bit 연산자 - 비트, 바이트, 2진수 연산, 사인 비트, 음수 표현","date":"December 25, 2021"},"fields":{"slug":"/study-js-es6-bit-1/"}}},{"node":{"id":"6874cd12-89df-5ab0-a998-dd7ce7960e7e","excerpt":"1. HTTP 헤더 header-field = field-name ”:” OWS field-value OWS (OWS:띄어쓰기 허용) field-name은 대소문자 구문 없음 2. HTTP 헤더 용도 HTTP 전송에 필요한 모든 부가정보 ex) 메시지 마디의 내용, 메시지 바다의 크기, 압축, 인증, 요청 클라이언트, 서버 정보, 캐시 관리 정보 등 표준 헤더가 너무 많음 필요시 임의의 헤더 추가 기능 ex) helloworld: hihi 3.HTTP 헤더 분류 - 과거 General 헤더 : 메시지 전체에 적용되는 정보 ex) Connection: close Request 헤더 : 요청 정보 ex) User-Agent: Mozilla/5.0 Response 헤더 : 응답 정보 ex) Server: Apache Entity 헤더 : 엔티티 바디 정보 ex) Content-Type: text/html, Content-Length: 3423 4.HTTP Body - 과거 메시지 본문은…","frontmatter":{"categories":"CS","title":"HTTP - 7.HTTP 일반 헤더(1)","date":"December 25, 2021"},"fields":{"slug":"/study-cs-HTTP-14/"}}},{"node":{"id":"bfe4a802-eba8-563d-9855-512dd61bff8a","excerpt":"1. Symbol.asyncIterator  는 에 대응하는 이면 비동기로 반복을 실행 함  은 12개임  와 차이  를 호출하면  인스턴스를 생성하여 반환함 생성한 인스턴스의 를 호출하면  형태로 반환하며 이 값을  의 파라미터 값으로 사용함  로 반복함  와 제너레이터 함수  반복 1. Symbol.asyncIterator","frontmatter":{"categories":"JS","title":"async/await - Symbol.asyncIterator,  Symbol.iterator와 차이","date":"December 24, 2021"},"fields":{"slug":"/study-js-es6-async-await-3/"}}},{"node":{"id":"71a91466-91bc-5928-b1ff-cfe50979e879","excerpt":"1. 2XX = Successful 1) 클라이언트의 요청을 성공적으로 처리 200 OK 201 Created 요청 성공해서 새로운 리소스가 생성됨 Location이 Header에 있을 수 있음 202 Accepted —>  요청이 접수되었으나 처리가 완료되지 않았음 배치 처리 같은 곳에서 사용 ex) 요청 접수 후 1시간 뒤에 배치 프로세스가 요청을 처리함 204 No Content 서버가 요청을 성공적으로 수행했지만, 응답 페이로드 본문에 보낼 데이터가 없음\nex) 웹 문서 편집기에서  버튼\n—>  버튼의 결과로 아무 내용이 없어도 된다.\n—>  버튼을 눌러도 같은 화면을 유지해야 한다.\n—> 결과 내용이 없어도 204 메시지(2XX)만으로 성공을 인식할 수 있다. 2. 3XX - 리다이렉션 1) 요청을 완료하기 위해 유저 에이전트의 추가 조치 필요 300 Multiple Choices 301 Moved Permanently 302 Found 303 See Other 304 N…","frontmatter":{"categories":"CS","title":"HTTP - 6.상태코드(2)","date":"December 24, 2021"},"fields":{"slug":"/study-cs-HTTP-13/"}}},{"node":{"id":"18b5fc12-d7e8-5b47-b057-a4ff25d08ccb","excerpt":"1. await Syntax  표현식  함수 안에 작성함  는 선택임 표현식이  오브젝트 이면 의 파라미터 값을 반환함 표현식이  오브젝트가 아니면 표현식의 평가 결과를 반환함  에서  가 발생했을 때 에러에 대처하는 형태임  를 사용한 형태  를 사용한 형태  가 아닌 값을 반환하는 형태 2. for-await-of Syntax   함수에서 사용할 수 있음 동기 반복에서 사용할 수 있지만 일반적으로 비동기 반복에서 사용 1. await 2. for-await-of","frontmatter":{"categories":"JS","title":"async/await - 반환, 형태, for-await-of","date":"December 23, 2021"},"fields":{"slug":"/study-js-es6-async-await-2/"}}},{"node":{"id":"b4ecf84f-07d3-52a4-af67-c5a6d80a8f87","excerpt":"1.상태 코드 : 클라이언트가 보낸 요청의 처리 상태를 응답에서 알려주는 기능 1XX : 요청이 수신되어 처리 중(Informational) —>  2XX : 요청 정상 처리(Successful) 3XX : 요청을 완료하려면 추가 행동이 필요(Redirection) 4XX : 클라이언트 오류, 잘못된 문법 등으로 서버가 요청을 수행할 수 없음 5XX : 서버 오류, 서버가 정상 요청을 처리하지 못함(Server Error) 2.만약 모르는 상태 코드가 나타나면? 클라이언트가 인식할 수 없는 상태코드를 서버가 반환하면? 클라이언트는 상위 상태코드로 해석해서 처리 미래에서 새로운 상태 코드가 추가되어도 클라리언트를 변경하지 않아도 됨 ex) 299 ??? —> 2XX :  ex) 451 ??? —> 4XX :  ex) 599 ??? —> 5XX :  1.상태 코드 : 클라이언트가 보낸 요청의 처리 상태를 응답에서 알려주는 기능 2.만약 모르는 상태 코드가 나타나면?","frontmatter":{"categories":"CS","title":"HTTP - 6.상태코드","date":"December 23, 2021"},"fields":{"slug":"/study-cs-HTTP-12/"}}},{"node":{"id":"1292527d-1676-5d44-91c1-5500a23faff3","excerpt":"1. async/await 개요 비동기 환경에서 실행하지만 실행이 끝나야 다음을 실행함 즉, 실행은 비동기이고 실행 순서는 동기 임  키워드가 아니며  이 키워드 개념이며  함수라고 부름  는 키워드(키워드 나름대로 기능을 가지고 있음) 2. async 함수 비동기 함수를 뜻하며  오브젝트를 생성하여 반환함  함수가 호출되며  인스턴스를 반환함  함수의  값을 처리하려면  을 함수 호출에 연결하여 작성  함수에서  가 발생하면  로 처리 됨 1. async/await 개요 2. async 함수","frontmatter":{"categories":"JS","title":"async/await - 개요, 함수","date":"December 22, 2021"},"fields":{"slug":"/study-js-es6-async-await-1/"}}},{"node":{"id":"9e233de4-05f0-5ca5-96aa-9c3e25d7a0fa","excerpt":"1.API 설계 HTTP API - 컬렉션 POST 기반 등록 ex) 회원 관리 API 제공 HTTP API - 스토어 PUT 기반 등록 ex) 정적 컨텐츠 관리, 원격 파일 관리 HTML FORM 사용 웹 페이지 회원 관리 GET, POST만 지원 2.회원 관리 시스템 : API 설계 - POST 기반 등록 회원 목록 —> GET 회원 등록  —> POST 회원 조회  —> GET 회원 수정 —> PATCH, PUT, POST 회원 삭제 —> DELETE 3.회원 관리 시스템 : POST - 신규 자원 등록(실무에서 사용) 클라이언트는 등록될 리소스의 URI를 모른다. 회원 등록  —> POST POST  서버가 새로 등록된 리소스 URI를 생성해준다. HTTP/1.1 201 Create Location:  컬렉션 서버가 관리하는 리소스 디렉토리 서버가 리소스의 URI를 생성하고 관리 여리서 컬렉션은  4. 파일 관리 시스템 : API 설계 - PUT 기반 등록 파일 목록  —>…","frontmatter":{"categories":"CS","title":"HTTP - 5.메서드 활용(2)","date":"December 22, 2021"},"fields":{"slug":"/study-cs-HTTP-11/"}}},{"node":{"id":"067704c8-c9f1-5d3e-8922-3c7f192a9933","excerpt":"1.  형태 2.실행자의 파라미터에 함수 이름 작성 3.파라미터 위치로 성공/실패 처리 4.실행자에 ,  순서로 작성 5.  의 핸들러 함수에서 사용할 값을 인스턴스에 저장 6. 인스턴스 반환 1.  형태 2.실행자의 파라미터에 함수 이름 작성 3.파라미터 위치로 성공/실패 처리 4.실행자에 ,  순서로 작성 5.  의 핸들러 함수에서 사용할 값을 인스턴스에 저장 6. 인스턴스 반환","frontmatter":{"categories":"JS","title":"Promise - 메커니즘 분석","date":"December 21, 2021"},"fields":{"slug":"/study-js-es6-promise-6/"}}},{"node":{"id":"1ff9fb59-eddb-51f9-a91b-191b2dde78a9","excerpt":"1. 데이터 전달 방식은 크게 2가지 쿼리 파라미터를 통한 데이터 전송 GET ex) 주로 정렬 필터(검색어) 메시지 바디를 통한 데이터 전송 POST, PUT, PATCH ex) 회원가입, 상품주문, 리소스 등록, 리소스 변경 2. 4가지 상황 정적 데이터 조회 이미지, 정적 테스트 문서 쿼리 파라미터 미사용(리소스 경로로 단순하게 조회 가능) 조회는 GET 사용 동적 데이터 조회 주로 검색, 게시판 목록에서 정렬 필터(검색어) 조회는 GET 사용 GET은 쿼리 파라미터 사용해서 데이터를 전달 HTML Form을 통한 데이터 전송 HTML Form Submit시 POST 전송 ex) 회원 가입, 상품 주문, 데이터 변경 Content-Type : application/x-www.form-urlencode 사용 form의 내용을 메시지 바디를 통해서 전송(key-value, 쿼리 파라미터 형식) 전송 데이터를 Url encoding 처리 ex) abc김 —> abc%EA%B9%80…","frontmatter":{"categories":"CS","title":"HTTP - 5.메서드 활용(1)","date":"December 21, 2021"},"fields":{"slug":"/study-cs-HTTP-10/"}}},{"node":{"id":"8ac04b93-7b85-5918-bed0-243374492682","excerpt":"1. all() 파라미터의 모든  처리를 완료했을 때  의 핸들러 함수를 실행함  형태로 작성 파라미터를 이터러블로 작성함 작성한 순서로  인스턴스 생성  가 발생한 시점에 을 실행 2. race()  에 관계없이 처음 한 번만  을 실행하고 더 이상 실행하지 않음 1. all() 2. race()","frontmatter":{"categories":"JS","title":"Promise - all(), race()","date":"December 20, 2021"},"fields":{"slug":"/study-js-es6-promise-5/"}}},{"node":{"id":"abda392b-da5e-5494-a6e3-bafa1a715f9b","excerpt":"1.안전 호출해도 리소스를 변경하지 않는다. Q) 그래도 계속 호출해서, 로그 같은게 쌓여서 장애가 발생하면요?\n—> 안전은 해당 리소스만 고려한다. 그런 부분까지 고려하지 않는다. 2.멱등 한 번 호출하든, 두 번 호출하든 100번 호출하든 결과가 똑같다. 멱등 메서드 GET : 한 번 조회하든, 두 번 조회하든 같은 결과가 조회된다. PUT : 결과를 대체한다. 따라가 같은 요청을 여러번 해도 최종 결과는 같다. DELETE : 결과를 삭제한다. 같은 요청을 여러번 해도 삭제된 결과는 똑같다. POST : 멱등이 아니다!!! 두 번 호출하면 같은 결제가 중복해서 발생할 수 있다. 활용 자동 복구 메커니즘 서버가 TIMEOUT 등으로 정상 응답을 못주었을 때, 클라이언트가 같은 요청을 다시 해도 되는가에 대한 판단 근거가 됨 재 요청 중간에 다른 곳에서 리소스를 변경해버리면? 사용자1 : GET —> userName: A, age: 20 사용자2 :PUT —> userName: …","frontmatter":{"categories":"CS","title":"HTTP - 4.HTTP 메서드(4)","date":"December 20, 2021"},"fields":{"slug":"/study-cs-HTTP-9/"}}},{"node":{"id":"a5ad2f84-23f7-5a0c-b4f5-63946a4a9135","excerpt":"1. 새로운 도전💡 2020년 12월 중순  개발자로 취업을 했다.\n모든 것이 낯설고, 두렵고, 조급했다.\n늦은 나이에 개발자로 커리어를 시작한다는 생각에 사로 잡혀있었다.\n다행히 회사에 좋은 사람들을 만나 좋은 경험을 할 수 있었다. 2. 실력을 쌓기 위해👍 그래도 더 성장하고, 나아지고 싶은 생각에 주말에도 회사에 나와 개인 공부를 하였다.\n특히 를 취득하기 위해 많이 노력을 하였다. 왠지 이 자격증이 개발자로써 갖추어야 할 기본 소양을 증명하는 것으로 여겨\n이것 조차도 못 취득하면 나는 개발자로써 커리어를 쌓을 수 없을 것 같은 압박감이 있었다.(물론 개인적인 생각이다)\n감사하게 올 해 4회차 시험에서 턱걸이로 자격증을 취득하게 되었다.(진짜 2022년에 다시 공부할 생각이였는데 너무 감사하게 붙었다.)\n그리고 취업 준비를 하면서 공부한 HTML, CSS, JS, React 학습했지만 실무에서 턱없이 능력이 부족하다는 사실을 인지하게 되었다.\n그래서 업무에 필요한 능력을 쌓기…","frontmatter":{"categories":"Log","title":"2021년을 되돌아보며","date":"December 19, 2021"},"fields":{"slug":"/write-log-2021/"}}},{"node":{"id":"470bfe44-4ef3-5c53-bb58-d9dfb5044be6","excerpt":"1. 이 책을 읽은 이유💡 우연히 개발관련 유튜브를 보다가 이 책을 소개하는 영상을 보게 되었다. 워낙 유명한 개발자 분이 추천해주신 책이라 안 읽어 볼 수 없었다. 무엇보다도 주니어 개발자에게 추천하는 책이라는 말씀에 더욱 내 마음을 사로잡아 이 책을 구매해 읽기 시작하였다. 2. 경력은 무엇일까?🧐 이 책을 읽기 전까지 가 될 줄 알았다.\n그러나 이 책에서는 경력보다는 의 중요성을 강조한 부분이 나에게는 새롭게 다가왔다. 나도 종종 일하면서 느끼는 거지만 확실히 실력이 있는 개발자 분들이 문제에 직면했을 때 빠르게 이해하고 처리하는 것을 본 적이 있었다. 이와 반대로 경력이 많지만 문제를 이해하지 못하고 문제와 상관없는 것들을 물어보는 안타까운 모습들을 보게 되었다.(물론 다시 한번 문제를 제대로 이해 시켜주기 위해 같이 이야기를 했지만, 안타깝게 자신의 주장을 고집하는 모습을 종종 보게되었다.) 3. 그러면 어떻게 실력을 키울 수 있을까?💪 이 책의 저자는 일이 끝나면 라는 …","frontmatter":{"categories":"Book","title":"📕 「함께 자라기, 에자일로 가는길」 을 읽고","date":"December 19, 2021"},"fields":{"slug":"/read-book-4/"}}},{"node":{"id":"22378877-00c9-5ed9-873b-16826486ee15","excerpt":"1. resolve() 성공(fullfilled) 상태의  인스턴스를 생성하여 반환  형태로 작성함 파라미터 값에 따라 생성 방법이 다름 파라미터에 값을 작성하면 파라미터 값으로  인스턴스를 생성하여 반환 파라미터에  인스턴스를 작성하면 파라미터의  인스턴스의 값을 사용하여  인스턴스를 생성하여 반환 2. thenable  파라미터에 을 작성한 형태 3.reject() 실패(reject) 상태의 Promise 인스턴스를 생성하여 반환함  형태로 작성함 파라미터에  사유를 작성함  을 연결한 형태  를 연결한 형태 1. resolve() 2. thenable 3.reject()","frontmatter":{"categories":"JS","title":"Promise - resolve(), thenable, reject()","date":"December 18, 2021"},"fields":{"slug":"/study-js-es6-promise-4/"}}},{"node":{"id":"fb390b5f-e58e-59ff-971f-5360bbef5ef9","excerpt":"1. PUT 리소스를 대체 리소스가 있으면 대체(기존거 삭제됨) 리소스가 없으면 생성 쉽게 이야기해서 덮어버림 중요! 클라이언트가 리소스를 식별 클라이언트가 리소스 를 알고 URI 지정 POST와 차이점 2. PATCH 리소스 부분 변경 클라이언트에서 요청 서버() 3. DELETE 리소스 제거 1. PUT 2. PATCH 3. DELETE","frontmatter":{"categories":"CS","title":"HTTP - 4.HTTP 메서드(3)","date":"December 18, 2021"},"fields":{"slug":"/study-cs-HTTP-8/"}}},{"node":{"id":"23142ccc-ce93-50fd-9fcf-0d086c0b6221","excerpt":"1. then() 성공과 실패 핸들러 함수를 작성함  인스턴스를 반환함 파라미터 첫 번째: 성공일 때 실행될 핸들러 함수 두 번째: 실패일 때 실행될 핸들러 함수 실행자의  에 파라미터 값을 다수 작성하더라도 핸들러 함수는 처음 하나만 사용 함 2. then()의 return  에서  인스턴스를 반환함  값을 반환하지 않음 에서 를  하는 것과 같은 개념임 따라서  형태 처럼 을 연속해서 호출 할 수 있음  값을 에 설정하고  값을 다음  의 파라미터 값으로 넘겨 줌 3. catch() 실패(reject)의 핸들러 함수를 작성함 의 두 번째 파라미터를 작성하지 않고 대신에 를 작성함  문의 표현식 평가 결과를 에 설정함  인스턴스를 반환하므로  처럼 이어서  을 호출할 수 있음  값을  의 파라미터 값으로 넘겨줌 4. finally() 성공, 실패에 관계 없이 파라미터의 핸들러 함수가 실행됨 핸들러 함수에 파라미터가 없음 ES2018부터 지원함 활용 측면이지만 의 같은 코드를 에 …","frontmatter":{"categories":"JS","title":"Promise - then(), then()의 return, catch(), finally()","date":"December 17, 2021"},"fields":{"slug":"/study-js-es6-promise-3/"}}},{"node":{"id":"f7906c89-5c4f-546a-8ce2-b0d6731163ef","excerpt":"1.HTTP 메서드 종류 : 주요 메서드 : 리소스 조회 : 요청 데이터 처리, 주로 등록에 사용 : 리소스를 대체, 해당 리소스가 없으면 생성 : 리소스 부분 변경 : 리소스 삭제 2.HTTP 메서드 종류 : 기타 메서드 : GET과 동일하지만 메시지 부분을 제외하고, 상태 줄과 헤더만 반환 : 대상 리소스에 대한 통신 가능 옵션(메서드)를 설명(주로  에서 사용) : 대상 자원으로 식별되는 서버에 대한 터널을 설정 —> 거의 사용 X : 대상 리소스에 대한 경로를 따라 메시지 루프백 테스트를 수행 —> 거의 사용 X 3.GET 리소스 조회 서버에 전달하고 싶은 데이터는 Query(쿼리 파라미터, 쿼리 스트링)를 통해서 전달 메시지 바디를 사용해서 데이터를 전달할 수 있지만, 지원하지 않는 곳이 많아서 권장하지 않음 4.POST 요청 데이터 처리 메시지 바디를 통해 서버로 요청 데이터 전달 서버는 요청 데이터를 처리 메시지 바디를 통해 들어온 데이터를 처리하는 모든 기능을 수행한…","frontmatter":{"categories":"CS","title":"HTTP - 4.HTTP 메서드(2)","date":"December 17, 2021"},"fields":{"slug":"/study-cs-HTTP-7/"}}},{"node":{"id":"67ec411a-e26a-5699-b1f5-47c6641cc8e7","excerpt":"1. new Promise()  인스턴스를 생성하여 반환함 파라미터 실행자 함수를 작성함 성공, 실패 처리 함수 이름 실행자 코드 스펙 :  MDN: Promise chain  Promise 오브젝트 형태 1. new Promise()","frontmatter":{"categories":"JS","title":"Promise - 인스턴스 생성","date":"December 16, 2021"},"fields":{"slug":"/study-js-es6-promise-2/"}}},{"node":{"id":"32d90138-8f26-521e-97c9-9b2642ad6d45","excerpt":"1.HTTP API를 만들어보자 HTTP API를 만들어보자 HTTP 메서드 - GET, POST HTTP 메서드 - PUT, PATCH, DELETE HTTP 메서드의 속성 2.요구사항 ex) 회원 정보 관리 API를 만들어라 회원 목록 조회 회원 조회 회원 등록 회원 수정 회원 삭제 3.API URL 설정 : 초보 개발자 회원 목록 조회 :  회원 조회 :  회원 등록 :  회원 수정 :  회원 삭제 :  —> 이것은 좋은 URI 설계일까? —> 가장 중요한 것은 리소스 식별 4.API URI 고민 리소스의 의미는 뭘까? 회원을 등록하고 수정하고 조회하는게 리소스가 아니다!\nex) 미네랄을 캐라 —> 미네랄이 리소스 회원이라는 개념 자체가 바로 리소스이다. 리소스를 어떻게 식별하는게 좋을까? 회원을 등록하고 수정하고 조회하는 것을 모두 배제 회원이라는 리소스만 식별하면 된다. —> 회원 리소스를 URI에 매핑 5.API URL 설정 : 위 상황 고려  목록 조회 :   조회  …","frontmatter":{"categories":"CS","title":"HTTP - 4.HTTP 메서드(1)","date":"December 16, 2021"},"fields":{"slug":"/study-cs-HTTP-6/"}}},{"node":{"id":"02e7a2cd-9f1f-5204-9ee9-951bd97e4fff","excerpt":"1. Promise 개요 JS는 기본적으로 로실행 실행이 끝나야 다음 코드를 실행함  는 비동기로 처리(실행)함 코드를 연속으로 처리(실행)하지 않고, 중간에 흐름이 끊어졌다가 연결된 코드를 처리 할 수 있는 환경이 되었을 때 실행함 이를 위한 메커니즘을 갖고 있음  스펙에서  스펙으로 전환 2. Promise 처리 흐름  처리(실행) 흐름 개요  를 실행함 파라미터의 함수를 실행함  를 호출 하지 않음  를 실행  변수에  인스턴스 할당 을 실행하지 않음 마지막 줄의  실행함  실행  의 첫 번째 파라미터 함수 실행  실행 3. Promise 상태 상태는 3가지이며, 하나만 발생함   상태  로 인스턴스 생성  상태 이 종료된 상태를 나타내며 와  상태로 구분 바인딩한 핸들러 함수가 호출됨  :  의 첫 번째 함수 호출  :  의 두 번째 함수 호출 1. Promise 개요 2. Promise 처리 흐름 3. Promise 상태","frontmatter":{"categories":"JS","title":"Promise - 개요, 처리 흐름, 상태","date":"December 15, 2021"},"fields":{"slug":"/study-js-es6-promise-1/"}}},{"node":{"id":"656f9aa9-a23f-520e-96f6-9e93771d9277","excerpt":"1.시작 라인 : 요청 메시지 start-line = request-line / status-line request-line = method SP(공백) request-target SP HTTP-version CRLF(엔터) HTTP 메서드 (GET: 조회) 종류 : GET, POST, PUT, DELETE 서버가 수행해야 할 동작 지정 : GET(리소스 조회), POST(요청 내역 처리) 요청 대상() HTTP Version 2.시작 라인 : 요청 메시지(요청대상)  절대경로 = 로 시작하는 경로 3. 시작 라인 : 응답 메시지 HTTP 상태 코드 : 요청 성공, 실패를 나타냄 200 : 성공 400 : 클라리언트 요청 오류 500 : 서버 내부 오류 이유 문구 : 사람이 이해할 수 있는 짧은 상태 코드 글 4.HTTP 헤더 : 용도 HTTP 전송에 필요한 모든 부가 정보 ex) 메시지 바디의 내용, 메시지 바다의 크기, 압축, 인증, 요청 클라이언트(브라우저) 정보, 서버 애플…","frontmatter":{"categories":"CS","title":"HTTP - 3.HTTP 기본(3)","date":"December 15, 2021"},"fields":{"slug":"/study-cs-HTTP-5/"}}},{"node":{"id":"2037e61b-816f-57b6-bbf8-9444ca4981fa","excerpt":"1. export, import 형태  대상에  키워드 작성  중괄호  에  이름 작성  한 번에  선언   이름 변경    default   전체   2. 변수, 함수, Class 변수, 함수    리스트 형태로 작성 3. as, * 로  이름 변경  로  전체를  4. default 모듈에  가 하나만 있는 것을 명시적으로 나타낼 때 사용  를 리스트 형태로 작성 함수 이름을 작성하지 않은 형태  로  를  1. export, import 형태 2. 변수, 함수, Class 3. as, * 4. default","frontmatter":{"categories":"JS","title":"Module - export/import 형태, 변수/함수/Class, as, *, default","date":"December 14, 2021"},"fields":{"slug":"/study-js-es6-module-3/"}}},{"node":{"id":"8c5958cf-9337-568d-b468-5fad4fa6f2f5","excerpt":"1. 클라이언트 서버 구조  구조 클라이언트는 서버에 요청을 보내고, 응답을 대기 서버가 요청에 대한 결과를 만들어서 응답 각각 역할을 나뉘었다는 것이 포인트 클라이언트는 UI/UX에 집중하고, 서버는 비즈니스 로직이나, 데이터만 관리 이렇게 독립적으로 분리하면 각각 고도화 진행 가능 또한 문제가 발생하면 각각 독립적으로 처리만 하면 됨 2. 무상태 프로토콜 = Stateless 서버가 클라이언트의 상태를 보존 X 상태 유지 : ex) 중간에 다른 점원이 바뀌면 안됨(만약에 바뀌면 상태 정보를 다른 점원에게 미리 알려줘야 함) 상태 유지 X : ex) 점원이 바뀌어도 정확하게 결과를 얻을 수 있음, 갑자기 클라이언트 요청이 증가해도 서버를 대거 투입 가능, 응답 서버를 쉽게 바뀔 수 있음(무한 서버 증설 가능) 장점 : 서버 확장성 높음 단점 : 클라이언트가 추가 데이터 전송 실무의 한계 모든 것을 무상태로 설계할 수 있는 경우도 있고, 없는 경우도 있음 무상태 : ex) 로그인이…","frontmatter":{"categories":"CS","title":"HTTP - 3.HTTP 기본(2)","date":"December 14, 2021"},"fields":{"slug":"/study-cs-HTTP-4/"}}},{"node":{"id":"9d956af2-82dc-523d-aab7-ce6893c13158","excerpt":"1. module 스코프  코드는  에서 실행됨 다른 파일에서 모듈의 변수/함수 사용 불가 별도의 스코프를 갖기 때문  에  을 작성하면 별도의 스코프를 갖음  를 사용하여 공유할 수 있지만, 이름이 같으면 대체될 수 있음 상황에 따라 어쩔 수 없이 사용할 때는 이름이 중복되지 않도록 해야 함 2. export 값 유지  한  을 다시  하더라도 값이 대체되지 않고 이전에 한 값이 유지 됨 브라우저에서 실행되는 형태 3. this 참조 글로벌 오브젝트에서  는  오브젝트를 참조 함  로 작성된 파일에서  값은  임 과 에서  1. module 스코프 2. export 값 유지 3. this 참조","frontmatter":{"categories":"JS","title":"Module - 스코프, export 값 유지, this 참조","date":"December 13, 2021"},"fields":{"slug":"/study-js-es6-module-2/"}}},{"node":{"id":"49ed6847-97c6-5804-b72d-cb232f588065","excerpt":"1. 모든 것이 HTTP : HTTP 메시지에 모든 것을 전송 HTML, TEXT Image, 음성, 영상, 파일 JSON, XML(API) 거의 모든 형태의 데이터 전송 가능 서버간에 데이터를 주고 받을 때도 대부분 HTTP 사용 2. HTTP 역사 HTTp/0.9 1991년 : GET 메서드만 지원, HTTP 헤더 X HTTP/1.0 1995년 : 메서드, 헤더 추가 HTTP/1.1 1997년 : 가장 많이 사용, 우리에게 가장 중요한 버전 HTTP/2 2015년 : 성능 개선 HTTP/3 진행중 : TCP 대신 UDP 사용, 성능 개선 3. 기반 프로토콜 TCP: HTTP/1.1, HTTP UDP: HTTP/3 점점 HTTP/2, HTTP/3도 점점 증가 4. HTTP 특징 클라이언트 서버 구조 무상태 프로토콜, 비연결성 HTTP 메시지 단순함, 확장 가능 1. 모든 것이 HTTP : HTTP 메시지에 모든 것을 전송 2. HTTP 역사 3. 기반 프로토콜 4. HTTP 특징","frontmatter":{"categories":"CS","title":"HTTP - 3.HTTP 기본(1)","date":"December 13, 2021"},"fields":{"slug":"/study-cs-HTTP-3/"}}},{"node":{"id":"51198923-7e4c-5d35-810a-1027e658f51c","excerpt":"1. 접근 및 바탕 일반 적으로 하나의  파일에 다수의 함수, 오브젝트를 작성함 한편, 하나의 파일에 작성하면 사용하지 않는 것도 해야 하며 메모리를 차지하므로 비효율적 ex) 회원 가입(클릭 할 때만 필요한 것)  은 파일을 분리하여 필요한 시점에 필요한 것을 가볍게 사용하려는 목적으로 사용  을 파일이라고 할 수는 없지만 구조 측면에서보면 하나의 파일이  임 파일 확장자로  도 있음 ex) JavaScript modules  파일 기본 함수, 오브젝트를 분리하는 것이 바탕이므로  파일은 되도록  함 2. Module 코드 형태  코드 형태  키워드 외부로 보내 줄 함수, 오브젝트를 선언함  에  파일을 작성하여 랜더링 하지 않음  키워드  로 선언된  파일을 가져와서 오브젝트, 함수를 사용 함 3. html 파일 작성법  파일에  파일을 작성하는 방법  상대 경로, 절대 경로로 작성함 상대 경로는 로 시작해야 함  처럼 경로 없이 작성 불가, 추후 가능할 것으로 생각함  가 디…","frontmatter":{"categories":"JS","title":"Module - 접근 및 바탕, 코드 형태, html 파일 작성 방법","date":"December 12, 2021"},"fields":{"slug":"/study-js-es6-module-1/"}}},{"node":{"id":"b2a82d12-d0e1-5477-87b7-21a56a294543","excerpt":"1. URI 단어의 뜻 (리소스 식별하는 통일된 방식) (자원, URI로 식별할 수 있는 모든 것, 제한 없음) (다른 항목과 구분하는데 필요요한 정보 2. URL, URN 단어 뜻 URL - Locator: 리소스가 있는 위치를 지정 URN - Name: 리소스에 이름을 부여 위치는 변할 수 있지만, 이름은 변하지 않음 ex) urn:isbn:8969777331(어떤 책의 isbn URN) 3. URL 전체 문법 프로토콜 : https 호스트명 : www.google.com 포트 번호 : 443 패스 : /search 쿼리 파라미터 : q=hello&hi=ko 4. URL Scheme 주로 프로토콜 사용 프로토콜 : 어떤 방식으로 자원에 접근할 것인가 하는 약속 규칙 ex) http, https, ftp 등 http는 80포트, https는 443 포트를 주로 사용, 포트는 생략 가능 https는 http에 보안 추가(HTTP Secure) 5. URL userinfo URL에 …","frontmatter":{"categories":"CS","title":"HTTP - 2.URL와 웹 브라우저 요청 흐름","date":"December 12, 2021"},"fields":{"slug":"/study-cs-HTTP-2/"}}},{"node":{"id":"e3195cd9-d124-5589-8a8e-a38abeefd144","excerpt":"1. constructo() 인스턴스를 생성하여 반환함  형태 세 번째 파라미터는 선택임 생성자 함수를 작성함 작성한 함수로 인스턴스를 생성함  트랩 호출 2. apply()  에 작성한 함수를 호출함  형태  통합 핸들러의  트랩 호출 1. constructo() 2. apply()","frontmatter":{"categories":"JS","title":"Reflect - construct(), apply()","date":"December 11, 2021"},"fields":{"slug":"/study-js-es6-reflect-7/"}}},{"node":{"id":"58b70561-e130-53f0-9c06-ab0b251202fd","excerpt":"1. 인터넷 통신 클라이언트에서 특정 요청을 하면 서버에서 요청을 확인하고 다시 클라이언트에서 보내주는 방식. 클라이언트와 서버를 연결해주는 무수한 연결망을 인터넷이라고 함. 2. IP(Internet Protocol) 1). IP 역할 클라이언트 IP와 서버 IP를 명시해서 정확한 위치에 원하는 요청을 함 지정한 IP(IP Address)에 데이터 전달 패킷(Packet)이라는 통신 단위로 데이터 전달\n—> 패킷은 약간 편지 같은거? 보내는사람, 받는 사람 적어서 보내는 것처럼 데이터를 전달 할 때 이 존재 2). 서버 패킷 전달 인터넷을 통해 서버(주소)에게 데이터를 전달하는데, 다시 서버에서 클라이언트에게 전달 될 때에는 같은 경로로 오지 않을 수 있음 3). IP 프로토콜의 한계 —> TCP, UDP로 해결 가능  : 패킷을 받을 대상이 없거나 서비스 불능 상태여도 패킷 전송  : 중간에 패킷이 사라지면? 패킷이 순서대로 안오면?  : 같은 IP를 사용하는 서버에서 통신하는…","frontmatter":{"categories":"CS","title":"HTTP - 1.인터넷 네트워크","date":"December 11, 2021"},"fields":{"slug":"/study-cs-HTTP-1/"}}},{"node":{"id":"a453474f-42b0-5b30-943a-5fac2ee9fcfd","excerpt":"1. getPrototypeOf() 를 반환 함  이 확장 불가라도 반환함  형태로 작성  의  를 반환 2. setPrototypeof() 에 에 연결된 메소드를 설정함  형태로 작성 3. ownKeys()  의 모든 프로퍼티 키를 배열로 반환함  이거나 오브젝트가 확장 불가라도 반환함 상속 받은 프로퍼티는 제외 함  형태로 작성 4. getOwnPropertyDescriptor()  에서 프로퍼티 디스크립터를 반환함 상속 받은 프로퍼티는 제외 함  형태로 작성 1. getPrototypeOf() 2. setPrototypeof() 3. ownKeys() 4. getOwnPropertyDescriptor()","frontmatter":{"categories":"JS","title":"Reflect - getPrototypeof(), setPrototypeof(), ownKeys(), getOwnPropertyDescriptor()","date":"December 10, 2021"},"fields":{"slug":"/study-js-es6-reflect-6/"}}},{"node":{"id":"a1886cb1-c7d4-51b5-96ac-cdaf7a18c205","excerpt":"1. defineProperty()  에 프로퍼티를 추가, 변경함  형태  와 차이 를 반환 2.preventExtensions()  에 프로퍼티 추가 금지를 설정함  형태 3. isExtensible()  에 프로퍼티 추가 가능 여부를 반환함  형태 아래 함수를 실행한 상태이면 false를 반환함    1. defineProperty() 2.preventExtensions() 3. isExtensible()","frontmatter":{"categories":"JS","title":"Reflect - defineProperty(), preventExtensions(), isExtensible()","date":"December 09, 2021"},"fields":{"slug":"/study-js-es6-reflect-5/"}}},{"node":{"id":"c5992a6c-611a-57d5-b421-a59b72d7f400","excerpt":"1. has()  에  이 존재 여부를 반환함  형태로 작성 상속받은 도 검색 핸들러의  트랩 호출 2. deleteProperty()  에서 를 삭제 함  형태  반환 인덱스로 배열 엘리먼트 삭제 1. has() 2. deleteProperty()","frontmatter":{"categories":"JS","title":"has(), deleteProperty()","date":"December 08, 2021"},"fields":{"slug":"/study-js-es6-reflect-4/"}}},{"node":{"id":"c2199ea4-c9b5-551c-947a-004002ab9699","excerpt":"1.set()  에 프로퍼티 키와 값을 설정함  를 반환함  로 참조할 오브젝트 작성  핸들러의  트랩 호출  트랩에서  참조 변경 1.set()","frontmatter":{"categories":"JS","title":"this 참조 오브젝트, Proxy 핸들러의 set() 트랩","date":"December 07, 2021"},"fields":{"slug":"/study-js-es6-reflect-3/"}}},{"node":{"id":"94932cea-3e0c-5563-bbbf-03cd698ef962","excerpt":"1. get()  의 프로퍼티 값을 반환함  의  와 차이 임  에  로 참조할 오브젝트 작성  핸들러의  트랩에서  로 값을 구하는 형태  트랩에서  을 사용한 형태 1. get()","frontmatter":{"categories":"JS","title":"this 참조 오브젝트, Proxy 핸들러의 get() 트랩","date":"December 06, 2021"},"fields":{"slug":"/study-js-es6-reflect-2/"}}},{"node":{"id":"6e33225a-c729-51da-8928-50ae8edb9bff","excerpt":"1. Reflect 빌트인 오브젝트  가 없으므로 인스턴스를 생성 할 수 없음  형태로 호출 에러 대응 형태  로 에러 대응 , 를 반환 2. Proy 사용  오브젝트의 함수는  트랩에 1:1로 대응하며 트랩 이름과 함수 이름이 같음 트랩 파라미터와  함수의 파라미터가 같음  오브젝트 형태 1. Reflect 2. Proy 사용","frontmatter":{"categories":"JS","title":"Reflect 오브젝트, Proxy 사용","date":"December 05, 2021"},"fields":{"slug":"/study-js-es6-reflect-1/"}}},{"node":{"id":"fadd6bda-75af-574c-b6db-b70a71e788b8","excerpt":"1. construct()  연산자의 트랩임 인스턴스를 생성하여 반환함  트랩이 호출되는 형태  를 실행할 때 호출  2. apply() 함수 호출 트랩임  인스턴스 호출로 트랩이 실행된 형태 임 3. apply() 트랩 호출  트랩이 호출되는 형태    인스턴스  4. ownKeys()  의 트랩임 의 모든 를 배열로 반환함  이거나 오브젝트가 확장 불가라도 반환함  트랩이 호출되는 형태     5. getOwnPropertyDescriptor()  트랩임 프로퍼티 디스크립터를 반환함  트랩이 호출되는 형태   1. construct() 2. apply() 3. apply() 트랩 호출 4. ownKeys() 5. getOwnPropertyDescriptor()","frontmatter":{"categories":"JS","title":"construct(), apply(), ownKeys(), getOwnPropertyDescriptor() 트랩","date":"December 04, 2021"},"fields":{"slug":"/study-js-es6-proxyTrap-7/"}}},{"node":{"id":"ec0742c7-a2b2-5381-a833-e1327259b233","excerpt":"1. getPrototypeof()  의 트랩임  의 을 반환  이 확장 불가라도 을 반환 함 ,  처럼 값을 반환하면  트랩 준수 사항  이 확장 불가일 때  와 같은 값을 반환해야 함 2. getPrototypeOf() 트랩 호출  트랩이 호출되는 형태      3. setPrototypeOf()  특징 의  에 두 번째 파라미터를 설정함  의 트랩임 트랩 준수 사항  이 확장 불가 일 때 두 번째 파라미터의 과 로 구한 것과 같아야 함 4. setPrototypeOf() 트랩 호출  트랩이 호출되는 형태   1. getPrototypeof() 2. getPrototypeOf() 트랩 호출 3. setPrototypeOf() 4. setPrototypeOf() 트랩 호출","frontmatter":{"categories":"JS","title":"getPrototypeof(), setPrototypeof() 트랩","date":"December 03, 2021"},"fields":{"slug":"/study-js-es6-proxyTrap-6/"}}},{"node":{"id":"2c4d52c1-4d5c-58dc-81be-1ff55a1273e9","excerpt":"1. defineProperty()  의 트랩임  에 프로퍼티를 추가하거나 속성값을 변경함 2. defineProperty() 트랩 호출  트랩이 호출되는 형태   3. defineProperty() 트랩 준수사항  일 때 트랩에서  를 반환하여   오브젝트가 확장 불가이면 프로퍼티를 추가 할 수 없음   오브젝트의 프로퍼티가  또는  이면 프로퍼티 값을 변경할 수 없음 4. preventExtensions()  트랩임  오브젝트에 오브젝트의 확장 금지를 설정함 5. preventExtensions() 트랩 호출  트랩이 호출되는 형태   6. preventExtensions() 트랩 준수 사항  오브젝트가 확장 불가 일 때 즉,  결과가 일 때  를 반환하면 ,  만 반환할 수 있음 7. isExtensible()  트랩임 의 확장 가능 여부를 반환 함  를 반환하는 오브젝트 상태     8. isExtensible() 트랩 호출  트랩이 호출되는 형태   9.isExtensib…","frontmatter":{"categories":"JS","title":"defineProperty(), preventExtensions() , isExtensible() 트랩","date":"December 02, 2021"},"fields":{"slug":"/study-js-es6-proxyTrap-5/"}}},{"node":{"id":"6b105838-347c-5c70-ac15-6e63e8186339","excerpt":"1. has()  연산자의 트랩임  에  의 존재 여부를 반환함 프로퍼티 값을 로 변환하여 반환함 두 번째 파라미터에  작성 가능 2. has() 트랩 호출  트랩이 호출되는 형태    3. has() 트랩 준수사항 오브젝트에 프로퍼티가 있으면서 오브젝트가 프로퍼티 추가 금지이거나  이면  를 지정하여 반환할 수 없지만  는 지정하여 반환 할 수 있음 강제로  를 반환하지 않고  트랩에서 구한 값을  로 변환하여 반환 함 4. deleteProperty()  연산자의 트랩임 오브젝트의 프로퍼티를 삭제함  연산자는 프로퍼티가 없어도 를 반환하므로 코드처럼 조건을 체크하여 를 반환하면 완전하게 처리할 수 있음 4. deleteProperty() 트랩 호출  트랩이 호출되는 형태   5. deleteProperty() 트랩 준수사항  오브젝트의 프로퍼티가  이면 프로퍼티를 삭제할 수 없으며 에러가 발생함 1. has() 2. has() 트랩 호출 3. has() 트랩 준수사항 4. de…","frontmatter":{"categories":"JS","title":"has() 트랩, deleteProperty() 트랩","date":"December 01, 2021"},"fields":{"slug":"/study-js-es6-proxyTrap-4/"}}},{"node":{"id":"bb15faf4-5099-51d7-8036-3fb30dc40552","excerpt":"1. get() 값을 구하는 트랩 : 에서 값을 구함  트랩이 호출되면 엔진이 실행 환경을 분석하여 파라미터 값을 설정  트랩 활용 형태 : 조건 체크  트랩 활용 형태 : 데이터 변경 2. get() 트랩 호출  트랩이 호출되는 형태    3. get() 트랩 준수사항  의 프로퍼티가  디스크립터일 때  또는  이면 반환 값을 변경하여  불가  의 프로퍼티가 악세서 디스크립터일 때  이면 반환 값을 변경하여  불가 1. get() 2. get() 트랩 호출 3. get() 트랩 준수사항","frontmatter":{"categories":"JS","title":"get(), get() 트랩 호출, get() 트랩 준수사항","date":"November 30, 2021"},"fields":{"slug":"/study-js-es6-proxyTrap-3/"}}},{"node":{"id":"f27c6921-fd92-5cc9-adab-74a34f966223","excerpt":"1. set()의 4번째 파라미터  트랩의 4번째 파라미터에  인스턴스가 설정됨  4번째 파라미터에 로 생성한 인스턴스가 설정됨 와 인스턴스 구조 2. set()과 this  트랩에서  는  오브젝트를 참조 함 1. set()의 4번째 파라미터 2. set()과 this","frontmatter":{"categories":"JS","title":"set()의 4번째 파라미터, set()과 this","date":"November 29, 2021"},"fields":{"slug":"/study-js-es6-proxyTrap-2/"}}},{"node":{"id":"a4a86e58-5654-5495-b80c-99f6319482bc","excerpt":"1. set() 프로퍼티를 설정하는 트랩으로  또는  에 프로퍼티(key, value)를 설정 함  트랩을 작성하지 않은 형태  트랩이 호출되면 엔진이 실행 환경을 분석하여 파라밑터 값을 설정 함 2. set() 트랩 호출 아래처럼 값을 할당하면  트랩이 호출 됨 프로퍼티에 값을 할당할 때   인스턴스에 없는 프로퍼티를 설정할 때 인스턴스에 있는 프로퍼티를 설정 할 때   트랩에서  값을 설정해야 함 3. set() 트랩 준수사항 트랩 준수 사항(invariant) 트랩에서 준수 사항을 지키지 않으면 에러가 발생하거나 처리되지 않음 모든 트랩에 준수 사항이 있음  의 프로퍼티가  디스크립터 일 때  또는  이면 프로퍼티 값을 설정할 수 없음  의 프로퍼티가 악세서 디스크립터 일 때  이면 프로퍼티 값을 설정 할 수 없음 1. set() 2. set() 트랩 호출 3. set() 트랩 준수사항","frontmatter":{"categories":"JS","title":"set(), set() 트랩 호출, set() 트랩 준수사항","date":"November 28, 2021"},"fields":{"slug":"/study-js-es6-proxyTrap-1/"}}},{"node":{"id":"cfa3bd26-de46-5557-89fa-0858a463a7f7","excerpt":"1. new Proxy()  인스턴스를 생성하여 반환 함 첫 번째 파라미터  대상  오브젝트를 작성 Object, Array, Function 등 두 번째 파라미터 핸들러를 작성함 Proxy 형태 Proxy 인스턴스 형태 2. Proxy.revocable()  를 사용할 수 없는 상태로 바꿀 수 있는 오브젝트를 생성, 반환 생성한 오브젝트 구조 1. new Proxy() 2. Proxy.revocable()","frontmatter":{"categories":"JS","title":"Proxy 인스턴스 생성 - new Proxy(), Proxy.revocable()","date":"November 27, 2021"},"fields":{"slug":"/study-js-es6-proxy-4/"}}},{"node":{"id":"56eb99af-f40d-5d4a-8892-c12a4b04138f","excerpt":"1. target  대상 오브젝트 임  등을 사용할 수 있음  형태에서 첫 번째 파라미터에 을 작성함 이렇게  인스턴스를 생성하므로  인스턴스와 이 연결됨 2. trap, handler  : 에서 사용하는 용어로 실행 중인 프로그램에 이상이 발생했을 때 실행을 중단하고 사전에 정의된 제어로 전환 가운데 사람이 밥을 받아 자신 앞에 있는 수저를 같이 건네 준다면 에 수저를 건네주는 코드가 필요함 이것이  를 사용하는 목적임  오브젝트에 이 있음 를 핸들러 오브젝트라고 하며 약칭으로 핸들러라고 부름 3. Proxy Trap   ES6에는 있었느나 ES7에서  1. target 2. trap, handler 3. Proxy Trap","frontmatter":{"categories":"JS","title":"handler, trap, target","date":"November 26, 2021"},"fields":{"slug":"/study-js-es6-proxy-3/"}}},{"node":{"id":"c2982d47-2d8b-5e4a-a8eb-e698b93b6a01","excerpt":"Proxy 논리 식당에서 3명이 식사 하고 있는 모습에서 왼쪽 사람이 오른쪽 사람 앞의 밥을 가져오려 함 왼쪽 사람이 가운데 사람에게 밥을 달라고 말하고 가운데 사람이 오른쪽 사람에게 말하면 오른쪽 → 가운데 → 왼쪽 순서로 밥을 받을 수 있음 이 모습에서 가운데 사람이  왼쪽 사람의 말을 받아 오른쪽 사람에게 말하고 오른쪽 사람에게 밥을 받아 왼쪽 사람에게 전달 함 이와 같이  는 중간에서 대리 역할을 함 왼쪽 사람이 오른쪽 사람에게 직접 말하고 밥을 받으면  가 필요하지 않음 가운데 사람을 거쳐서 받는 모습을 JS로 표현하면 가 실행되면 의 가 호출되며 에서 의 를 호출하면서 를 파라미터로 넘겨 줌  파라미터에  을 작성하므로 에서 을 알 수 있음 의  이  값을 구해 로 반환하고 로 반환된 값을 에 할당 함 이렇게  가 가운데에서 대리 역할을 함 Proxy 논리","frontmatter":{"categories":"JS","title":"Proxy 논리, Proxy 모습","date":"November 25, 2021"},"fields":{"slug":"/study-js-es6-proxy-2/"}}},{"node":{"id":"74afec8f-8cc5-53f2-9092-756bcbafd181","excerpt":"1.Proxy 의 사전적 의미 : 대리, 대신  : 기본 오퍼레이션을 중간에 가로채어 오퍼레이션을 대리, 대신하여 실행함 가로 채어 실행하더라도 전체 괘도를 벗어날 수 없으므로 오퍼레이션을 완전하게 바꿀 수는 없음 그럼 무엇을 대리하고 대신 할까? 2. 기본 오퍼레이션 커피를 주문하는 기본 오퍼레이션은 주문을 받는 카운터로 가서 커피를 주문함, 카운터가 커피를 내려 줌 이 모습을  코드로 표현하면 여기서 중요한 것은  가  가 되는 논리 임 를 호출하면  가 반환되는 근거는 무엇이냐는 것임 3. 기본 오퍼레이션 논리   를 실행하면 “커피”를 구하는 행위를 해야 함 즉, 값을 구하는 메소드가 필요함 이때, 엔진은  기능을 가진 내부 메소드  을 호출함 ES6에  처럼 기본 오퍼레이션을 제공하는 13개의 내부 메소드가 있음  스펙의 기본 오퍼레이션 1.Proxy 2. 기본 오퍼레이션 3. 기본 오퍼레이션 논리","frontmatter":{"categories":"JS","title":"Proxy, 기본 오퍼레이션 논리","date":"November 24, 2021"},"fields":{"slug":"/study-js-es6-proxy-1/"}}},{"node":{"id":"7ff655f3-0998-53fe-89ce-e833ea19cc74","excerpt":"1. this 참조  형태로 호출하면 메소드에서 가 인스턴스를 참조 함  메소드에서  는 메소드가 속한 클래스를 참조함  에서  는 생성하는 인스턴스가 아니라 클래스 오브젝트를 참조 함 2. Generator 클래스의 제너레이터 함수는 에 연결됨, 인스턴스로 호출해야 함 1. this 참조 2. Generator","frontmatter":{"categories":"JS","title":"this 참조, Generator","date":"November 23, 2021"},"fields":{"slug":"/study-js-es6-class-9/"}}},{"node":{"id":"bebea796-ba0f-568c-87ed-7583cab8bfe9","excerpt":"1. Built-in 오브젝트 상속 빌트인 오브젝트를 상속받을 수 있음 인스턴스가 빌트인 오브젝트의 특징을 갖게 되며  로 빌트인 오브젝트에 접근할 수 있음  키워드로 구현함 코드 프로세스       2. Object 상속 는 클래스가 아니므로 다른 를 상속 받을 수 없지만 상속 받으면  구조가 되는 것을 활용하여 상속을 구현 할 수 있음  상속 로  구조를 만듬 3. Image 오브젝트 상속  오브젝트 상속 코드   오브젝트의 를 호출 , ,   오브젝트를 로 참조  속성에 값을 할당 함 4. Audio 오브젝트 상속  오브젝트 상속   오브젝트의 를 호출 ,   오브젝트를 로 참조  속성에 값을 할당함 파라미터 값을 받아 속성값을 설정하면 범용 클래스로 사용할 수 있음 1. Built-in 오브젝트 상속 2. Object 상속 3. Image 오브젝트 상속 4. Audio 오브젝트 상속","frontmatter":{"categories":"JS","title":"Built-in 오브젝트 상속, Object 상속, Image 오브젝트 상속, Audio 오브젝트 상속","date":"November 22, 2021"},"fields":{"slug":"/study-js-es6-class-8/"}}},{"node":{"id":"224b8040-0ffe-5af8-9034-f0e454ef73f5","excerpt":"1. super 키워드 슈퍼 클래스와 서브 클래스에 같은 이름의 메소드가 있으면 서브 클래스의 메소드가 호출 됨  키워드를 사용하여 슈퍼 클래스의 메소드를 호출 할 수 있음  의 형태 2. constructor 호출 서브와 슈퍼에 를 모두 작성하지 않으면 디폴트 가 호출 됨 서브에 작성하지 않고 에만 작성하면 파라미터 값을 로 넘겨 줌 서브에는 작성하고 에 작성하지 않으면 에러가 발생함 서브와 슈퍼에 를 모두 작성하면 서브에서 로 호출해야 함 1. super 키워드 2. constructor 호출","frontmatter":{"categories":"JS","title":"super 키워드, constructor 호출","date":"November 21, 2021"},"fields":{"slug":"/study-js-es6-class-7/"}}},{"node":{"id":"d1c5a010-5c32-5e18-b290-c98544496f4a","excerpt":"1. 상속 상속은 OOP 기능 중 하나 임 클래스에 다른 클래스를 포함시키는 형태 따라서 포함시킨 클래스의 메소드와 프로퍼티를 내 것처럼 사용 할 수 있음 상속해주는 클래스, 상속 받을 클래스를 부모 클래스, 슈퍼 클래스라고 부름  키워드로 슈퍼 클래스를 참조 상속 받는 클래스를 자식 클래스, 서브() 클래스라고 부름 2. extends 키워드 Syntax :   키워드로 상속을 구현 함 상속 구조 메소드 오버라이딩(Overriding) 1. 상속 2. extends 키워드","frontmatter":{"categories":"JS","title":"상속, extends 키워드, 상속 구조, 메소드 오버라이딩","date":"November 20, 2021"},"fields":{"slug":"/study-js-es6-class-6/"}}},{"node":{"id":"1ef31c52-598a-5a3f-8faa-a4d48064c742","excerpt":"1. getter  는 메소드를 호출하여 값을 구함 메소드를 호출 할 때는  처럼 소괄호 를 작성하지만  는 소괄호 를 작성하지 않고 만 작성함 파라미터를 사용 할 수 없음 클래스에  작성하는 방법 2. setter  는 메소드를 호출하여 값을 설정 함 도  처럼 소괄호 를 작성하지 않고 이름만 작성함 클래스에  작성 방법 3. static 메소드 Syntax :   메소드 작성 방법  메소드의 구조적 특징  이 아닌 클래스에 연결되며 생성한 인스턴스에 할당되지 않음 4. 호이스팅 클래스는 호이스팅 되지 않음 ,  변수처럼  키워드가 작성된 위치에서 클래스 이름 선언과 오브젝트 생성을 동시에 하기 때문  코드 아래에  클래스가 있지만  를 참조하지 못하므로 에러 발생  코드 앞에서  클래스를 오브젝트로 생성하므로  를 호출할 수 있음 5. new.target  프로퍼티는 함수 또는 생성자가  연산자로 호출된 여부를 반환함  연산자로 를 호출하면  은 를 참조 함수로 호출하면  반환…","frontmatter":{"categories":"JS","title":"getter, setter, static 메소드, 호이스팅","date":"November 19, 2021"},"fields":{"slug":"/study-js-es6-class-5/"}}},{"node":{"id":"9f7a5e62-e0c5-5ded-9f71-53d55220becd","excerpt":"1. constructor 는 생성자로 인스턴스를 생성하고 초기화 함 ES5까지는  를 작성할 수 없었으나 ES6부터는 작성 할 수 있음 2. constructor 미작성  를 작성하지 않은 상태에서  연산자로 인스턴스를 생성하면 에 연결된 가 호출 됨 3. constructor 반환  에  을 작성하지 않으면 생성한 인스턴스를 반환 함  에서 , 을 반환 하면 이를 무시하고 인스턴스를 반환 함  에서 를 반환 하면 인스턴스를 반환하지 않고  반환 1. constructor 2. constructor 미작성 3. constructor 반환","frontmatter":{"categories":"JS","title":"constructor, constructor 반환","date":"November 18, 2021"},"fields":{"slug":"/study-js-es6-class-4/"}}},{"node":{"id":"7768d125-ee8d-5656-9e48-f59c12f97730","excerpt":"1. Class 작성 기준 클래스는  모드에서 실해오디므로 이에 맞추어 코드를 작성해야 함 클래스에 메소드 작성 방법  키워드를 작성하지 않음 메소드와 메소드 사이에 콤마를 작성하지 않음 단 세미콜론 은 작성은 선택임 클래스의 는  임  타입은 별로도 있지 않음 2. Computed Name 메소드 이름을 조합하여 사용 대괄호  안에 조합할 이름을 작성 조합한 결과가 메소드 이름이 됨 3. Class 작성 기준 메소드를 에 연결하여 작성하지 않음 클래스 밖에서 메소드를 에 연결할 수 있음 클래스는 열거할 수 없음 에 메소드 추가 1. Class 작성 기준 2. Computed Name 3. Class 작성 기준","frontmatter":{"categories":"JS","title":"Class 작성 기준, computed name","date":"November 17, 2021"},"fields":{"slug":"/study-js-es6-class-3/"}}},{"node":{"id":"0dc13497-c035-570e-99c3-ee9273419258","excerpt":"1. Class 선언 Syntax :  대문자 Class는 개념적인 클래스를 뜻하고 소문자 class는 키워드 임 클래스 작성 방법  키워드에 이어 클래스 이름 작성함 이름의 첫 문자는 대문자를 사용 함(개발자들 사이의 관례) 블록  을 작성하고 블록 안에 메소드를 작성함 2. Class 표현식 Syntax :  클래스 작성 방법 변수 이름 이 클래스 이름이 됨 변수에  오브젝트를 할당하는 형태 임 다른 것은 클래스 선언문과 같음 Class 형태 ✅ const, let 사용 기준  사용 : 값이 대체되지 않을 경우(오브젝트의  변경되더라도 오브젝트  대체되지 않는 것도 포함) ex) , ,   사용 : 값이 대체되는 경우 ✅ 함수, 메소드 기준 함수 인스턴스를 생성하지 않고 직접 호출 메소드 인스턴스를 사용하여 호출하는 함수로 에 연결되어 있음 클래스에 작성한 함수 에 연결된  빌트인 오브젝트의 에 연결된 함수 1. Class 선언 2. Class 표현식 ✅ const, let 사…","frontmatter":{"categories":"JS","title":"Class 선언, Class 구조 - Class 선언문, Class 표현식","date":"November 16, 2021"},"fields":{"slug":"/study-js-es6-class-2/"}}},{"node":{"id":"fd89bc18-50b8-5493-91e0-c777c6370a5e","excerpt":"1. JS 객체 지향 프로그래밍 언어  : Object Oriented Programming ECMASciprt 스펙에 OOP라고 작성되어 있음 ECMAScripte is an object-oriented programming language 2. 객체 구성 요소 에서 Object(객체)는 JS Object가 아님 개념적, 사상적 접근 형체, 실체가 없음 행위와 속성으로 객체의 특성을 표현 함 행위 : 먹다, 마시다와 같은 동적인 모습 속성 : 밥을 먹다, 물을 마시다와 같은 행위의 대상이 속성 3. 객체의 구체화 객체를 코드로 구체화하면 객체는 가 됨 행위는 가 됨 속성은 가 됨 클래스에서 메소드와 프로퍼티를 작성함 클래스 자체로는 사용할 수 없으며 인스턴스로 생성해야 사용 할 수 있음   키워드로 클래스를 선언 함, 이 시점에서 를 사용할 수 없음   가 호출되며 파라미터 값을 넘겨 줌 인스턴스를 생성하여 반환하며  에 할당함 이제 인스턴스로 클래스를 사용할 수 있음  인스턴스…","frontmatter":{"categories":"JS","title":"객체 지향 프로그래밍 - 객체 구성 요소, 객체의 구체화, 자바스크립트로 OOP 구현","date":"November 15, 2021"},"fields":{"slug":"/study-js-es6-class-1/"}}},{"node":{"id":"6bdea931-355c-58f0-a185-0e2921a708e8","excerpt":"1. WeakSet 오브젝트  오브젝트와 차이 오브젝트만  값으로 사용할 수 있음  등의 프리미티브 타입 사용 불가 개념은 과 같음 만 작성하는 것이 다름 의 참조가 바뀌면  대상 지원 메소드 , ,  2. new WeakSet()  인스턴스 생성, 반환 파라미터 대괄호  안에 오브젝트 작성 3. has()  인스턴스에서 의 존재 여부 반환 존재하면 , 아니면  반환 4. add()  인스턴스에  설정 파라미터에  로 설정될 오브젝트 작성 5. delete()  인스턴스에서 와 일치하는 엘리먼트 삭제 삭제 성공이면  반환 삭제를 실패하면  반환 1. WeakSet 오브젝트 2. new WeakSet() 3. has() 4. add() 5. delete()","frontmatter":{"categories":"JS","title":"WeakSet 오브젝트 개요, new WeakSet(), has(), add(), delete()","date":"November 14, 2021"},"fields":{"slug":"/study-js-es6-weakSetObject-1/"}}},{"node":{"id":"e935c525-a16b-5a84-acc0-63f875717da1","excerpt":"1. forEach()  인스턴스를 반복하면서  함수 호출 ,  등의  함수가 동반되는 메소드 사용 불가  함수에 넘겨주는 파라미터 , ,  인스턴스 콜백 함수에서  사용 2. delete()  인스턴스에서 파라미터 갑솨 같은 엘리먼트 삭제 같은  가 있어 삭제에 성공하면  반환 삭제에 실패하면  반환 3. clear()  인스턴스의 모든 엘리먼트를 지움  인스턴스를 삭제하는 것은 아님, 따라서 를 추가할 수 있음 1. forEach() 2. delete() 3. clear()","frontmatter":{"categories":"JS","title":"콜백 함수, 삭제, 지우기 - forEach(), delete(), clear()","date":"November 13, 2021"},"fields":{"slug":"/study-js-es6-setObject-4/"}}},{"node":{"id":"14a53f9a-2022-5932-87a0-74b792e38fb9","excerpt":"1. entries()  인스턴스로 이터레이터 오브젝트 생성, 반환  인스턴스에 설정된 순서로 반환 로  반환 2. keys()  가  가 되므로  는 의미가 없음  오브젝트와 맞추기 위한 것  인스턴스의  를 key로 사용하여 이터레이터 오브젝트 생성, 반환  인스턴스에 설정된 순서로 반환  로  반환 3.values()  인스턴스의  로 이터레이터 오브젝트 생성, 반환  인스턴스에 설정된 순서로 반환  로  반환 4. Symbol.iterator()  인스턴스로 이터레이터 오브제트 생성, 반환  와 같음  로  반환 1. entries() 2. keys() 3.values() 4. Symbol.iterator()","frontmatter":{"categories":"JS","title":"Set과 이터레이터 오브젝트 - entries(), keys(), values(), Symbol.iterator()","date":"November 12, 2021"},"fields":{"slug":"/study-js-es6-setObject-3/"}}},{"node":{"id":"86ea3230-328e-5592-9ca7-7d657527ae28","excerpt":"1. add()  인스턴스 끝에  추가 사용 형태 함수를 생성하여 로 사용 에 생성한 함수 이름 작성 를 로 사용 2. has()  인스턴스에서 값의 존재 여부를 반환 존재하면 , 아니면  반환  메소드가 없으므로  로 값의 존재 여부를 체크 한 후 존재하면 체크한 값을 값으로 사용 1. add() 2. has()","frontmatter":{"categories":"JS","title":"값  설정, 추출 메소드 - add(), has()","date":"November 11, 2021"},"fields":{"slug":"/study-js-es6-setObject-2/"}}},{"node":{"id":"b98e6379-01ff-5c6d-bdfa-6674a197dc8d","excerpt":"1.Set 오브젝트 Set 오브젝트는 (값)의 컬렉션  형태로 작성 Set은 대괄호 가 하나 작성한 순서로 전개됨 2. new Set() Set 인스턴스 생성, 반환 파라미터에 값을 작성 프리미티브, 오브젝트 타입 사용 가능  프로퍼티 Set 인스턴스의 엘리먼트 수를 반환 Set 오브젝트 구조 3. Set과 Map 비교 저장 형태  : key와 value 작성, Key를 key로 사용하여 로 저장  : 만 작성, 를 key로 사용하여 로 저장 값을 구하는 형태  :  형태로 를 구할 수 있음  :  메소드가 없음 값 하나를 구할 수 없음, 반복으로 값을 구하거나 이터레이터 사용 1.Set 오브젝트 2. new Set() 3. Set과 Map 비교","frontmatter":{"categories":"JS","title":"Set 오브젝트 개요, new Set(), Set과 Map 비교","date":"November 10, 2021"},"fields":{"slug":"/study-js-es6-setObject-1/"}}},{"node":{"id":"791070a9-a11e-5243-a63a-e3eaed8d578c","excerpt":"Map과 WeakMap 차이 참조하는 를 삭제하면 은 그대로 갖고 있지만 은 처리로 삭제됨 Map과 WeakMap 차이","frontmatter":{"categories":"JS","title":"Map과 WeakMap 차이","date":"November 09, 2021"},"fields":{"slug":"/study-js-es6-weakMap-4/"}}},{"node":{"id":"6b99ade0-8cd2-528e-b56e-c0ec7f2a04bd","excerpt":"가비지 컬렉션 참조하는 object가 바뀌면 참조했던 오브젝트가 가비지 컬렉션 처리 됨 가비지 컬렉션 처리 WeakMap 인스턴스의 GC상태 가비지 컬렉션","frontmatter":{"categories":"JS","title":"가비지 컬렉션 처리","date":"November 08, 2021"},"fields":{"slug":"/study-js-es6-weakMap-3/"}}},{"node":{"id":"c4b218f5-9b78-5616-8400-34c7a4c7dc1b","excerpt":"1. get()  인스턴스에서 key 값이 같은 value 반환 존재하지 않으면  반환 2. set()  인스턴스에 key, value 설정 첫 번째 파라미터에 key로 사용할 오브젝트 작성 string과 같은 프리미티브 값 사용 불가 두 번째 파라미터는 값 첫 번째 파라미터의 오브젝트에 대한 값? 오브젝트 구분 등의 용도, 오브젝트에 따라 연동하는 함수 등록 3. has()  인스턴스에서 key의 존재 여부 반환 존재하면 , 아니면  반환 4. delete()  인스턴스에서 key와 일치하는  삭제 삭제를 성공하면  반환 삭제를 실패하면  반환 1. get() 2. set() 3. has() 4. delete()","frontmatter":{"categories":"JS","title":"WeakMap 오브젝트 메소드 - get(), set(), has(), delete()","date":"November 07, 2021"},"fields":{"slug":"/study-js-es6-weakMap-2/"}}},{"node":{"id":"c7346997-fe46-51f8-8eff-99c4fd5af7fd","excerpt":"1. WeakMap 오브젝트 WeakMap: 약한 Map? WeakMap은 Object만 로 사용 가능 number 등의 프리미티브 타입 사용 불가 value는 제한 없음 Map에서 key로 참조한 Object를 삭제하면 object를 사용할 수 없게 되지만 Map에 object가 남음 메모리 릭 발생 WeakMap의 object를 GC가 지움 GC: Garbage Collection 그래서(약한, 부서지기 쉬운) WeakMap? WeakMap 오브젝트 메소드 , , ,  CRUD와 관련된 메소드만 있음 WeakMap entry의 열거 불가 이터레이션 불가 2. new WeakMap() WeakMap 인스턴스 생성, 반환 파라미터 작성 대괄호  안에 이터러블 오브젝트 작성 WeakMap 오브젝트 구조 1. WeakMap 오브젝트 2. new WeakMap()","frontmatter":{"categories":"JS","title":"WeakMap 오브젝트 개요, new WeakMap()","date":"November 06, 2021"},"fields":{"slug":"/study-js-es6-weakMap-1/"}}},{"node":{"id":"0fd72cd1-5721-5776-b45b-e9451ba8605e","excerpt":"1. forEach() Map 인스턴스를 반복하면서  함수 호출 ,  등의  함수가 동반되는 메소드 사용 불가 callback 함수에서 넘겨주는 파라미터 value, key, Map 인스턴스 key, value 순서가 아님 콜백 함수에서  사용 2. delete() Map 인스턴스에 파라미터 값과 같은 entry 삭제 같은 key가 있으면  반환 없으면  반환 3. clear() Map 인스턴스의 모든 entry를 지움 Map 인스턴스를 삭제하는 것은 아님 따라서 를 추가할 수 있음 Size 프로퍼티 Map 인스턴스의 entry 수를 반환 개발자 코드로 수정 할 수 없음 1. forEach() 2. delete() 3. clear()","frontmatter":{"categories":"JS","title":"콜백 함수, 삭제, 지우기 - forEach(), delete(), clear()","date":"November 05, 2021"},"fields":{"slug":"/study-js-es6-Map-Object-5/"}}},{"node":{"id":"21c6be97-a8f7-56d1-b0c3-782b6ff15516","excerpt":"1. entries() Map 인스턴스로 이터레이터 오브젝트 생성, 반환 Map 인스턴스에 설정된 순서로 반환  로  반환 2. keys() Map 인스턴스의 key로 이터레이터 오브젝트 생성, 반환 value는 포함하지 않음 Map 인스턴스에 설정된 순서로 반환  로 key 반환 3. values() Map 인스턴스의 value로 이터레이터 오브젝트 생성, 반환 key는 포함하지 않음 Map 인스턴스에 설정된 순서로 반환  로 value 반환 4. Symbol.iterator() Map 인스턴스로 이터레이터 오브젝트 생성, 반환  와 같음  로  반환 1. entries() 2. keys() 3. values() 4. Symbol.iterator()","frontmatter":{"categories":"JS","title":"Map과 이터레이터 오브젝트 - entries(), keys(), values(), Symbol.iterator()","date":"November 04, 2021"},"fields":{"slug":"/study-js-es6-Map-Object-4/"}}},{"node":{"id":"736cbb2e-a0f6-55e8-a903-79cd22112af5","excerpt":"1. set() Map 인스턴스에 key, value 설정 key, value 순서로 파라미터 작성 key, value를 설정한 인스턴스 반환 key 값이 같으면 value가 바뀜 2. get() Map에서 Key값이 같은  반환 key 값이 같지 않거나 타입이 다른  반환 오브젝트 설정과 추출 3. has() Map 인스턴스에서 key의 존재 여부를 반환 key가 있으면 , 아니면  1. set() 2. get() 3. has()","frontmatter":{"categories":"JS","title":"값 설정, 추출 메소드 - set(), get(), has()","date":"November 03, 2021"},"fields":{"slug":"/study-js-es6-Map-Object-3/"}}},{"node":{"id":"7e28c5f6-bc1b-515b-9416-fca4d55bb7f1","excerpt":"Map과 Object 비교 Map 오브젝트 구조 key Map: 타입 제약 없음 Object: ,   수 Map:  프로퍼티로 구함 Object: 전체를 읽어 구해야 함 처리 시간 : MDN 빈번하게 key, value를 추가/삭제 할 때는 Map이 Object보다 좋은 경우가 있다고 함 Map과 Object 비교","frontmatter":{"categories":"JS","title":"Map과 Object 비교","date":"November 02, 2021"},"fields":{"slug":"/study-js-es6-Map-Object-2/"}}},{"node":{"id":"1e025a52-b85e-504a-85be-6762ef86702b","excerpt":"1. Map 오브젝트 Map 오브젝트 와 의 컬렉션 Map 오브젝트 형태  형태처럼 대괄호 안에 와 를 작성 다양한 타입을 로 사용할 수 있음 Map의 key 처리  문에서 작성한 순서대로 읽혀짐 2. new Map() Map 인스턴스를 생성하여 반환 파라미터에 이터러블 오브젝트 작성 Same-Value-Zero 비교 알고리즘 key 값을 비교 key 값이 같으면 Value가 대체됨 잘못 작성한 형태 1. Map 오브젝트 2. new Map()","frontmatter":{"categories":"JS","title":"Map 오브젝트 형태, new Map()","date":"November 01, 2021"},"fields":{"slug":"/study-js-es6-Map-Object-1/"}}},{"node":{"id":"e8b90519-e7e7-56e2-a701-17d52c88bcac","excerpt":"1. toString()  을 생성했던 형태를 문자열로 변환하여 반환  값은 반환되지 않음  로 문자열을 연결하면  으로 변환하면 연결은 되지만  값은 연결되지 않음 2. description  Syntax, ES2019     오브젝트의 주석, 설명을 반환  함수의 파라미터를 반환 과 차이 3. valueOf()  가 프리미티브 값을 반환하지만  은 값을 반환하지 않고  을 생성한 형태를 반환  는  를 제외하고 반환 4. getWonPropertySymbols() 의 함수이지만 이 대상이므로 여기서 다룸 파라미터의 에서 만 배열로 반환, 다른 프로퍼티는 반환하지 않음 1. toString() 3. valueOf() 4. getWonPropertySymbols()","frontmatter":{"categories":"JS","title":"toString(), description, valueOf(), getOwnPropertySymbols()","date":"October 31, 2021"},"fields":{"slug":"/study-js-es6-Symbol-Function-2/"}}},{"node":{"id":"90c90dbe-39a8-551c-b0bd-228f5eac9785","excerpt":"1. for() 글로벌  레지스트리에  형태로  을 저장 의 문자열이 가 되고 로 생성한 값이 가 됨  : 등록, 기록 글로벌  레지스트리는 공유 영역 다른 오브젝트에서도 사용 가능 같은 가 존재하면 등록된 값을 사용 2. keyFor() 글로벌  레지스트리에서 의  값을 구함 파라미터에  로 등록한  작성  값이 존재하면  값을 반환하고 존재하지 않으면  반환 1. for() 2. keyFor()","frontmatter":{"categories":"JS","title":"Symbol 함수 - for(), keyFor()","date":"October 30, 2021"},"fields":{"slug":"/study-js-es6-Symbol-Function-1/"}}},{"node":{"id":"78c49048-270c-5470-9b44-91448226fade","excerpt":"1. Well-Known Symbol Well-Known Symbol을 지원하는 String 메소드      문자열에 패턴을 매치하고 매치된 결과를 배열로 반환 2. Symbol.match()  개발자 코드를 함수 블록에 작성  대신에  대신에 가 실행됨  를 패턴으로 인식하지 않고 문자열로 인식 메소드를 오버라이드 하는 것이므로 메소드의 시맨틱은 유지해야 함 1. Well-Known Symbol 2. Symbol.match()","frontmatter":{"categories":"JS","title":"Symbol.match","date":"October 29, 2021"},"fields":{"slug":"/study-js-es6-Symbol-Property-9/"}}},{"node":{"id":"ad9283ad-dc89-5e48-a4cb-83342a285d62","excerpt":"generator 함수 연결  에  를 작성하고  함수를 연결하면 반복 할 때마다 를 수행 연결 구조 의 에 제너레이터 오브젝트가 있는 구조 제너레이터 오브젝트에 이터레이터 오브젝트를 연결하여 값을  형태 제너레이터 오브젝트에 이터레이터 오브젝트가 포함된 구조 generator 함수 연결","frontmatter":{"categories":"JS","title":"Symbol.iterator에 제너레이터 함수 연결","date":"October 28, 2021"},"fields":{"slug":"/study-js-es6-Symbol-Property-8/"}}},{"node":{"id":"9f0652cd-5db8-5569-98e5-3b3b49c2e03e","excerpt":"1. iterator 가 있는 빌트인 오브젝트 String, Array, Map, Set, TypedArray 빌트인 Object에는 가 없지만 개발자 코드로 작성할 수 있음 2. Array.prototype@@iterator  오브젝트의 를 호출하면 이터레이터 오브젝트 반환  로 배열 엘리먼트 값을 하나씩 구할 수 있음 3. String.prototype@@iterator  오브젝트의 를 호출하면 이터레이터 오브젝트 반환  로 문자열에서 문자를 하나씩 구할 수 있음 4. Object 이터레이션 빌트인  에는  가 없음  가 반복을 처리하므로  를 작성하면 반복할 수 있음 엔진이  문을 시작하면 먼저 에서  검색, 이를 위해 obj에  작성  를 처음 실행할 때  의  가 호출되면  문을 수행  로 반복 횟수 정의 1. iterator 2. Array.prototype@@iterator 3. String.prototype@@iterator 4. Object 이터레이션","frontmatter":{"categories":"JS","title":"Symbol.iterator, Array.prototype[@@iterator], Object 이터레이션","date":"October 27, 2021"},"fields":{"slug":"/study-js-es6-Symbol-Property-7/"}}},{"node":{"id":"ca7a1ee1-5ee7-5d41-9e55-068ed2383ad3","excerpt":"toPrimitive 오브젝트를 대응하는  값으로 변환 대응, 기대하는 타입 number, string, default ToPrimitive 스펙 오브젝트를 문자열에 대응 오브젝트를 숫자에 대응  사용 toPrimitive","frontmatter":{"categories":"JS","title":"Symbol.toPrimitive","date":"October 26, 2021"},"fields":{"slug":"/study-js-es6-Symbol-Property-6/"}}},{"node":{"id":"bebe2bfe-8802-5949-a39e-05734a8b07bc","excerpt":"Species 오버라이드  는  약세서 프로퍼티 이며  만 있고  는 없음  를 사용할 수 있는 빌트인 오브젝트 Array, Map, Set, RegExp Promise, ArrayBuffer, TypedArray 빌트인 오브젝트를 상속받은 에  를 작성하면 빌트인 오브젝트의 가 오라이드 됨 인스턴스 바꾸기  빌트인  오브젝트를 상속 받음  빌트인 오브젝트의 를 오버라이드 함  인스턴스를 생성함 파라미터 값이 인스턴스에 설정 됨   로  을 만들었으므로  출력   오브젝트를 상속 받았으므로  인스턴스로 를 호출 할 수 있음  대상은 인스턴스에 설정된 10, 20, 30 인스턴스를 반환하며 반환되는 인스턴스에  결과를 설정함  로 오버라이드 했으므로  가 호출 됨 호출에 사용한  인스턴스 형태를 반환하지 않고  인스턴스를 반환함 이처럼 로 반환할 인스턴스를 변경할 수 있음   인스턴스에는  인스턴스가 할당되어 있으며  오브젝트로 만들었으므로  출력   가 아니라  오브젝트로  인스턴…","frontmatter":{"categories":"JS","title":"Symbol.species 오버라이드","date":"October 25, 2021"},"fields":{"slug":"/study-js-es6-Symbol-Property-5/"}}},{"node":{"id":"4df6574f-c694-5b33-8bc7-af419f41e4ef","excerpt":"Symbol.species species의 사전적 의미 : (공통 특성을 지닌) 종류, 인류, 종  는 를 반환  를 실행하면 인스턴스를 생성하여 반환하므로 결국, 인스턴스를 반환하게 됨  를 오버라이드 하면 다른 인스턴스를 반환할 수 있다는 의미 메소드를 실행한 후의 결과 형태  기능  빌트인 Array 오브젝트를 상속(확장, 연결) 받음  인스턴스를 생성함   인스턴스의 를 호출하면  처리 결과를 인스턴스에 설정하여 인스턴스를 반환함 이렇게 인스턴스의 메소드를 호출 했을 때 인스턴스를 반환하도록 하는 것이  기능임 Symbol.species","frontmatter":{"categories":"JS","title":"Symbol.species","date":"October 24, 2021"},"fields":{"slug":"/study-js-es6-Symbol-Property-4/"}}},{"node":{"id":"c25e683b-0d36-5a8f-af42-27a9a5645487","excerpt":"isConcatSpreadable 은 배열의 엘리먼트를 전개하여 반환  one 배열 끝에 two 배열의 엘리먼트를 하나씩 연결  전개하지 않고 two 배열 자체를 연결  전개 isConcatSpreadable","frontmatter":{"categories":"JS","title":"Symbol.isConcatSpreadable","date":"October 23, 2021"},"fields":{"slug":"/study-js-es6-Symbol-Property-3/"}}},{"node":{"id":"025f7558-76fc-59dd-9811-a2c0524dd297","excerpt":"toStringTag  의 확장  으로 인스턴스 타입을 구하면  형태로 반환 인스턴스 타입을 명확하게 구할 수 없음  로 구분 가능  에서 두 번째에 표시될 문자열을 작성 예: “ABC”지정, object “ABC”로 반환 에 연결하여 작성 toStringTag","frontmatter":{"categories":"JS","title":"Symbol.toStringTag","date":"October 22, 2021"},"fields":{"slug":"/study-js-es6-Symbol-Property-2/"}}},{"node":{"id":"7dcc5f11-d94f-5322-b7a7-5a30c760bd62","excerpt":"1. Well-Known Symbols 스펙에서  형태를 볼 수 있음 ES2019 스펙 :   을 나타내는 기호  와 가 같음 스펙에서는  형태를 사용하고 개발자는  형태를 사용 ES2019 기준 : 12개   이란 스펙에서 알고리즘에 이름을 부여하고 이름으로 참조하기 위한 빌트인  값 개발자 코드 우선 실행  를 실행하면 디폴트로  를 실행 소스 코드에  를 작성하면 가 실행 되지 않고  가 실행됨 개발자 코드로 디폴트 기능을 오버라이딩 할 수 있음 2. Well-Known Symbols 종류  1. Well-Known Symbols 2. Well-Known Symbols 종류","frontmatter":{"categories":"JS","title":"Well-Known Symbols","date":"October 21, 2021"},"fields":{"slug":"/study-js-es6-Symbol-Property-1/"}}},{"node":{"id":"6bec0671-9420-5e22-9edf-0db17ea9436f","excerpt":"Symbol 사용 형태  프로퍼티 키로 사용  값이 유일하므로 중복되지 않음  라고 부름 프로퍼티 값 추출 방법  에서 함수 이름으로 사용  문에서 사용 이 열거되지 않음  이기 때문 로 열거 가능  문에서 사용 배열 안에  작성  에서 사용  값이 문자열로 변환되지 않음 Symbol 사용 형태","frontmatter":{"categories":"JS","title":"Symbol 사용 형태","date":"October 20, 2021"},"fields":{"slug":"/study-js-es6-Symbol-3/"}}},{"node":{"id":"ea077c35-4a10-5268-bf0b-7e73abcb31c1","excerpt":"1. Symbol() 외부로 노출되는 것 허용 하지 않음  함수는 값을 생성하여 반환 반환된 값을 볼 수 없음  연산자를 사용할 수 없음 프로그램 전체를 통해 유일한 값 제공  값으로 연산 불가  타입 변경 불가 파라미터에 주석, 설명을 작성  값을 문자열로 바꿔서 연결  에 사용 1. Symbol()","frontmatter":{"categories":"JS","title":"Symbol() 함수","date":"October 19, 2021"},"fields":{"slug":"/study-js-es6-Symbol-2/"}}},{"node":{"id":"2061a1d9-e3fc-5700-858c-e3ac61f50b0c","excerpt":"1. Primitive 값 JS에서  값은 오브젝트가 아니라 값이며 함수를 갖고 있지 않음  을 할당하면  변수에 100만 할당되며 아무것도 첨부되지 않음 100이  값 ES5의  값 타입 , , , ,  ES6에서  타입추가 2. Wrapper 오브젝트  오브젝트는? 프리미티브 값이 포함된 오브젝트  오브젝트에는 메소드가 있음  오브젝트가 있는 프리미티브 값 타입 stiring : String, number : Number 오브젝트 boolean : Boolean, symbol : Symbol 오브젝트  obj 인스턴스의  에 100이 설정됨  형태 , 은  오브젝트 없음 1. Primitive 값 2. Wrapper 오브젝트","frontmatter":{"categories":"JS","title":"primitive 값, wrapper 오브젝트","date":"October 18, 2021"},"fields":{"slug":"/study-js-es6-Symbol-1/"}}},{"node":{"id":"eb7980c4-66af-5169-8036-59223c90dde6","excerpt":"표현식  의 표현식에 따라 처리하는 방법이 다름 의 표현식이 배열  로 호출할 때마다 배열의 엘리먼트를 하나씩 처리 의 표현식이 제너레이터 함수 함수의 를 먼저 처리  표현식에서 자신 호출 재귀 호출","frontmatter":{"categories":"JS","title":"yield* 표현식","date":"October 17, 2021"},"fields":{"slug":"/study-js-es6-Generator-8/"}}},{"node":{"id":"6381d856-d533-5093-a35d-d62058476f8f","excerpt":"1. return() 이터레이터를 종료 시킴  파라미터 값을   프로퍼티 값으로 설정 2. throw() 를 의도적으로 발생 시킴 제너레이터 함수의  문에서 에러를 받음 제너레이터 함수에  문을 작성 1. return() 2. throw()","frontmatter":{"categories":"JS","title":"제너레이터 오브젝트 메소드 - return(), throw()","date":"October 16, 2021"},"fields":{"slug":"/study-js-es6-Generator-7/"}}},{"node":{"id":"9a092105-aa48-5849-88fd-7f17b9e14320","excerpt":"1. yield 분할 할당 대괄호 안에 다수의  작성  ,  호출  를 연속해서 작성한 것과 같음  를 2개 모두 수행했으므로 더 이상 처리할  가 없음 세 번째  호출 파라미터 값 : 20 에서  형태로 반환 처럼  안에 파라미터 값 20을 넣어서 반환  에  형태로 표시되지만 가독성을 위해 편집 함 2. for-of 문으로 반복  문으로 제너레이터를 반복 호출 처음  문을 시작하면  으로 제너레이터 오브젝트를 생성함 제너레이터 오브젝트에 10이 설정됨 생성한 제너레이터 오브젝트를 저장할 변수가 없으며 엔진 내부에 저장함  과 같으며 이 엔진 내부의 이름으로 가정함 다시  를 호출 함  와 같지만 반환 값이 다름 를 실행 함  를 반환하지 않고  만  변수에 설정함  로 종료 처리를 할 수 없으므로  를 사용하여 종료시켜야 함  블록을 실행함 11을 출력 함  값이 11이므로 다시  문을 수행  를 수행 이렇게  를 만날 때 까지 반복하여  를 실행 함 1. yield 분할 할당…","frontmatter":{"categories":"JS","title":"yield 분할 할당, for-of 반복","date":"October 15, 2021"},"fields":{"slug":"/study-js-es6-Generator-6/"}}},{"node":{"id":"84514f40-8ada-52c1-bb3d-494d5f279149","excerpt":"1. yield 반복  를 반복하는 형태 임   문을 제어하기 위한 상태 값 첫 번 째  호출  을 실행하여  변수에 0을 설정 함 누적 값을 구하기 위한 것   가  이므로  를 수행 함  반환 두 번째  를 호출 함  가 이므로 를 수행 함 세 번째  를 호출 함 가 이므로  를 수행하지 않음  반환  이므로 이터레이터를 더 이상 사용 할 수 없음 2. 다수의 yield 처리 한 줄에 다수의 와  작성  첫 번째  호출 첫 번째 를 소행 함 에 반환 값이 없으므로  반환 두 번째  호출 파라미터 값 : 10 두 번째 를 수행 함 함수에 파라미터 값을 받을 변수가 없으면 파라미터 넘겨준 값을 반환  세 번째  호출 파라미터 값 : 20 세 번째  를 수행 함 함수에 파라미터 값을 받을 변수가 없으므로 파라미터로 넘겨 준 값을 반환  반환 네 번째  호출 파라미터 값: 30 처리할  가 없으므로  반환 문을 작성했으므로 파라미터로 넘겨 준 값을 반환  반환  문을 작성하지 않으면 …","frontmatter":{"categories":"JS","title":"yield 반복, 다수의 yield 처리","date":"October 14, 2021"},"fields":{"slug":"/study-js-es6-Generator-5/"}}},{"node":{"id":"531baf74-edff-5f63-b430-dd380d02d68b","excerpt":"next()  는  단위로 실행  수 만큼  를 작성해야  전체를 실행  를 호출하면 이전 의 다음부터 까지 실행  를 작성하지 않았을 때 제너레이터 함수에  문을 작성했을 때 함수는 호출 할 때마다 변수에 초깃값을 설정 제너레이터 함수는 제너레이터 오브젝트를 생성할 때 초깃값을 설정  로 실행할 때 마다 초깃값을 설정하지 않음 변숫값을 그래도 유지 next()","frontmatter":{"categories":"JS","title":"next()","date":"October 13, 2021"},"fields":{"slug":"/study-js-es6-Generator-4/"}}},{"node":{"id":"d1411196-e6f6-5485-a952-554d63272572","excerpt":"1. Yield   키워드 사용 형태 로 호출할 때 마다 하나씩 실행  키워드는 제너레이터 함수 실행을 멈추거나 다시 실행할 때 사용  오른쪽의 표현식을 평가하고 결과를 반환 표현식을 작성하지 않으면  반환  오른쪽의 평가 결과가 설정되지 않고 다음  에서 파라미터로 넘겨준 값이 설정됨  표현식을 평가하면 호출한 곳으로  반환  값  표현식의 평가 결과 설정 를 실행하지 못하면   값  를 실행하면   를 실행하지 못하면  2. Yield 정리  제너레이터 함수를 선언 3개의 를 작성함  제너레이터 오브젝트를 생성함 파라미터 값, 10이 에 설정됨 첫 번째의  를 호출 함 이 실행됨 의 값인 10을 반환함  변수에 10을 할당하지 않음 두 번째의 를 호출 함  에 파라미터 값을 작성하지 않았으므로  변수에 가 설정됨  를 실행  변수 값이 이므로 를 반환 세 번째의 를 호출 함 파라미터 값 20이 바로 앞의  변수에 설정됨  을 실행함 20 + 10을 반환 함 네 번째의  를 호출…","frontmatter":{"categories":"JS","title":"yield 키워드","date":"October 12, 2021"},"fields":{"slug":"/study-js-es6-Generator-3/"}}},{"node":{"id":"2548121d-bc5c-5bc2-811e-e7514bc6a583","excerpt":"GenratorFunction  를 사용하여 제너레이터 함수를 생성 파라미터를 문자열로 작성 마지막 파라미터가 함수 코드가 되고 앞은 파라미터 이름이 됨 예시 GenratorFunction","frontmatter":{"categories":"JS","title":"GeneratorFunction","date":"October 11, 2021"},"fields":{"slug":"/study-js-es6-Generator-2/"}}},{"node":{"id":"a9328b86-947b-51bb-b856-2668978ee560","excerpt":"1.  Generator function :  키워드를 사용한 함수 제너레이터 함수 형태 : , ,  작성 방법 : 다음에 소괄호() 작성이어서 작성해도 되고 하나 이상 띄워도 됨 2.  선언문  다음에 함수 이름 작성 제너레이터 함수를 호출하면 함수 블록을 실행하지 않고 오브젝트를 생성하여 반환  오브젝트는  오브젝트 함수 코드 실행  오브젝트의 메소드를 호출 할 때 3.  표현식  다음에 함수 이름 작성은 선택 일반적으로 함수 이름을 작성하지 않음  왼쪽에 변수를 선언하며 변수 이름이 함수 이름이 됨 함수를 선언하는 형태만 다를 뿐 다른 것은  선언문과 같음 1.  2.  선언문 3.  표현식","frontmatter":{"categories":"JS","title":"Generator 함수","date":"October 10, 2021"},"fields":{"slug":"/study-js-es6-Generator-1/"}}},{"node":{"id":"a32723e0-eaf2-5dea-afbb-9e6f65ba721b","excerpt":"1. u 플래그 정규 표현식의 패턴을 유니코드의 코드 포인트로 변환하여 매치 u 플래그를 사용하지 않으면 코드 포인트를 문자로 매치 2. s 플래그 정규 표현식에서 dot(점.)은 모든 문자를 매치하지만 줄바꿈 문자는 매치 하지 않음 S 플래그를 사용하면(ES2018) 줄 바꿈 문자를 매치 dotAll 플래그에 true 설정 줄 바꿈 문자 U+000A Line Feed(LF)(“\\n”) U+000D Carriage Return(CR)(“\\r”) U+2028 Line Separator U+2029 Paragraph Separator 1. u 플래그 2. s 플래그","frontmatter":{"categories":"JS","title":"u 플래그, s 플래그","date":"October 09, 2021"},"fields":{"slug":"/study-js-es6-RegExp-3/"}}},{"node":{"id":"d9f0f558-6474-52ab-805b-fe288dc11526","excerpt":"1. 이 책을 읽은 이유💡 단순하다 신박사님과 신사임당 님이 썼기 때문에 이 책이 나오자마자 구매를 했다. 특히 신박사님을 강연회에 가서 직접 뵈고 말씀을 듣고 신박사님과 고 작가님의 책들과 소개해준 책들을 읽으면서 스스로도 많이 성장함을 느꼈기에 특히, 이 책은 너무나 기대가 컸다. 역시나 읽으면서 아주 중요하지만 놓치면서 살고 있다는 것들을 많이 깨닫게 되었다. 요즘 특히 책을 읽으면서 시야가 넓어짐을 느낀다. 그래도 아직 부족하다. 책에 나온 내용들을 체화해서 더 나은 나를 만들고 싶다. 2. 더 나은 인생을 만들기 위해👋 책에서는 다양한 내용을 소개해준다. 정말 인생 실전에 필요한 무의식에 박혀야 할 내용들 말이다. 그 중에서 새롭게 다가왔던 챕터는 ‘젊어서 고생은 절대 하지 말아라’ 부분이다. 우리는 흔히 어른들로부터 ‘젋어서 고생은 사서 한다’는 이야기를 자주 듣곤 한다. 나도 물론 그렇다고 생각해 20대에 돈을 안 받고 하는 일들(서포터스, 자원봉사 등)을 많이 했다.…","frontmatter":{"categories":"Book","title":"📕 '인생은 실전이다'를 읽고","date":"October 09, 2021"},"fields":{"slug":"/read-book-3/"}}},{"node":{"id":"b056975d-0f75-5ab9-975b-5e5be713ca5e","excerpt":"y 플래그  위치에 매치  부터가 아니라  위치에 매치 매치되면  값이 1증가 ,   값을 지정할 수 있음  프로퍼티에  설정 y 플래그","frontmatter":{"categories":"JS","title":"y 플래그","date":"October 08, 2021"},"fields":{"slug":"/study-js-es6-RegExp-2/"}}},{"node":{"id":"0c105b8d-c23a-56d9-8f0b-b2f031f084d9","excerpt":"lastIndex 정규 표현식 사용 형태 매치 시작 위치를 lastIndex 프로퍼티에 설정 디폴트 값 : 0 g 플래그를 사용하면  프로퍼티 위치부터 매치 g 플래그를 사용하지 않으면  프로퍼티 값이 바뀌지 않음 lastIndex 값을 지정해도 적용되지 않고 0 번 인덱스부터 배치 lastIndex","frontmatter":{"categories":"JS","title":"lastIndex","date":"October 07, 2021"},"fields":{"slug":"/study-js-es6-RegExp-1/"}}},{"node":{"id":"fbe2241d-f99b-5d2f-b6f1-32e3505ac9c7","excerpt":"1. Math 오브젝트 ES5까지는 수학 계산 처리에 부족했으나 ES6에서 수학 계산용 함수가 많이 추가됨 특히, 머신러닝/딥러닝에 대응 할 수 있게 됨 일반적으로 수학 계산을 사용하지 않으므로 개요 중심으로 다룸 2. 정수, 제곱근, 사인  소수를 제외한 정수 반환  값의 보후에 해당하는 값  : 제곱근 각 파라미터 값을 제곱하여 합산하고 합한 값의 제곱근을 반환  : 세제곱근 3. Hyperbolic(쌍곡)  : 쌍곡 사인  : 쌍곡 아크사인  : 쌍곡 코사인  : 쌍곡 아크코사인  : 쌍곡 탄젠트  : 쌍곡 아크탄젠트 4. 로그  : 2를 밑으로 한 로그 값  : 10를 밑으로 한 로그 값  :   자연 로그 상수(e)의 x승 -1 x는 파라미터 값, 과 같음 5. 32비트 계산 Emscripten에 대처하기 위한 것 C, C++를 JS로 컴파일 하기 위한 방법  곱한 값을 32비트로 반환  32비트 값에서 비트 값이 0인 수  32 비트 유동 소수 값으로 변환, 반올림 1.…","frontmatter":{"categories":"JS","title":"Math 오브젝트","date":"October 06, 2021"},"fields":{"slug":"/study-js-es6-math-1/"}}},{"node":{"id":"3e53bf95-c21c-516c-9ec1-b935d7721275","excerpt":"1. keys()  오브젝트를  이터레이터 오브젝트로 생성, 반환 와 같으며  형태에서 는 반환하지 않고 만 반환 배열 인덱스가 가 됨 2. values()  오브젝트를  이터레이터 오브젝트로 생성, 반환  형태에서 는 반환하고  반환하지 않음 배열의 엘리먼트 값이 가 됨  사용 값이 연동 됨 1. keys() 2. values()","frontmatter":{"categories":"JS","title":"keys(), values()","date":"October 05, 2021"},"fields":{"slug":"/study-js-es6-array-7/"}}},{"node":{"id":"e01990b0-949f-5855-a3f2-aa6ed6fcb4c1","excerpt":"1. flat() 배열 차원을 변환하고 새로운 배열로 설정하여 반환 파라미터의 대상 깊이에 따라 변환이 다름 파라미터에 을 작성한 경우 파라미터에 을 작성 빈 엘리먼트를 삭제 2. flatMap()  와 기본 기능은 같음 배열을 반복하면서 콜백 함수 호출 파라미터 : 엘리먼트, 인덱스, 배열 전체 콜백 함수에서 반환한 값을 배열로 반환  과 차이 1. flat() 2. flatMap()","frontmatter":{"categories":"JS","title":"flat(), flatMap()","date":"October 04, 2021"},"fields":{"slug":"/study-js-es6-array-6/"}}},{"node":{"id":"74b7c69b-e096-5835-a260-692c937a04bc","excerpt":"1. fill() 범위 값을 지정한 값으로 설정, 반환 설정 방법 시작 인덱스부터 끝 인덱스 직전까지 첫 번째 파라미터 값으로 설정(대체) Generic 함수 2. includes() 대상 배열에 첫 번째 파라미터 값이 있으면 , 없으면 를 반환 두 번째 파라미터는 선택이며 비교 시작 인덱스 작성 제네릭 함수 1. fill() 2. includes()","frontmatter":{"categories":"JS","title":"fill(), includes()","date":"October 03, 2021"},"fields":{"slug":"/study-js-es6-array-5/"}}},{"node":{"id":"c5a95051-f6b2-5788-97fc-90ad9d809e57","excerpt":"1. find() 배열의 엘리먼트를 하나씩 읽어가면서 콜백 함수 호출 파라미터 : 엘리먼트, 인덱스, 배열 전체 콜백 함수에서 를 반환하면 를 종료하면서 현재 처리중인 엘리먼트 값을 반환 2. findIndex() 배열의 엘리먼트를 하나씩 읽어가면서 콜백 함수 호출 파라미터 : 엘리먼트, 인덱스, 배열 전체 콜백 함수에서  반환하면  종료하면서 현재 처리 중인 엘리먼트의 인덱스를 반환 1. find() 2. findIndex()","frontmatter":{"categories":"JS","title":"find(), findIndex()","date":"October 02, 2021"},"fields":{"slug":"/study-js-es6-array-4/"}}},{"node":{"id":"b0fad5f8-6672-5c9c-8152-8d1d478f8436","excerpt":"Generic 스펙에서 아래 문장을 볼 수 있음  ES7 스펙, 22.1.3.3    사용 형태 의 뜻하는 것은? 이  메소드이므로  오브젝트가 처리 대상이지만 은  오브젝트가 아닌 , 를 처리할 수 있다는 것을 뜻함 Generic","frontmatter":{"categories":"JS","title":"Generic","date":"October 02, 2021"},"fields":{"slug":"/study-js-es6-array-3/"}}},{"node":{"id":"a3ae08d1-e478-5137-b2db-cace850b83f7","excerpt":"1. 이 책을 읽은 이유💡 욕심이 생겼다. 개발자로서 끝까지 가보고 싶은 마음이 생겼다. 그러나 ‘어떻게’, ‘무엇을’ 해야 할지 막막했다.\n마치 바다 한가운데 혼자 있는 듯한 느낌이 많이 받았다. 구글링을 통해 어떻게 하면 개발자로서 성장할 수 있는지 많은 방법이 있었지만 그중에 ‘독서’는 모두가 추천하는 좋은 방법이었다. 그중에서 필독서로 ‘소프트웨어 장인’이라는 책이 눈에 띄어 주문해 읽기 시작하였다.\n저자 또한 초보 개발자때 겪었던 실수와 그 실수를 헤쳐나가며 지금의 개발자가 되기까지의 경험들을 감사하게도 이 책에 써주셨다. 물론 저자와 다른 문화와 지역에서 개발자로서 일을 하고 있지만, 그래도 일맥상통하는 부분은 어디에서나 존재하기 때문에 본질을 보려고 많이 노력했다. 이 글을 쓰고 있는 시점에 나는 많이 지쳐있다. 그래도 글을 쓰다 보니 다시 동기부여도 된다.\n다시 한번 개발자로서 잘하고 싶지만 ‘어떻게’, ‘무엇을’해야 할지 모르는 사람들에게 강력히 추천한다. 2. 구…","frontmatter":{"categories":"Book","title":"📕 소프트웨어 장인을 읽고","date":"October 02, 2021"},"fields":{"slug":"/read-book-2/"}}},{"node":{"id":"1e8e4e54-894d-5647-8dfd-731b0c525c16","excerpt":"1. copyWithin() 범위 값을 복사하여 같은 오브젝트에 설정 두 번째 파라미터의 인덱스부터 복사하여 첫 번째 파라미터 인덱스 부터 순서대로 설정(대체) 세 번째 파라미터의 인덱스 직전까지 복사 복사 시작 인덱스와 끝 인덱스를 작성하지 않으면 배열 전체 복사 2. copyWithin()  함수의 특징  같은 배열 안에서 이동하는 개념 배열의 엘리먼트 수가 변동되지 않음 배열 안에서 엘리먼트를 이동은 엘리먼트를 왼쪽, 오른쪽으로 이동하는 것(처리 속도가 빠름) 1. copyWithin() 2. copyWithin()","frontmatter":{"categories":"JS","title":"배열 엘리먼트 복사, copyWithin()","date":"October 01, 2021"},"fields":{"slug":"/study-js-es6-array-2/"}}},{"node":{"id":"09a2477f-a0ca-565c-a7a8-e7c4cd8af51d","excerpt":"1. from() 첫 번째 파라미터의 오브젝트를  오브젝트로 변환 두 번째 파라미터에 함수 작성 이터러블 오브젝트를 전개할 때마다 호출 세 번째 파라미터에 오브젝트 작성 호출된 함수에서 로 참조 2. of() 함수 파라미터 값을 로 변환, 반환 파라미터에 변환 대상 값을 작성 콤마로 구분하여 다수 작성 가능 1. from() 2. of() 함수","frontmatter":{"categories":"JS","title":"from(), of()","date":"September 30, 2021"},"fields":{"slug":"/study-js-es6-array-1/"}}},{"node":{"id":"72e3a860-5683-51d5-886e-a6aad28f06c6","excerpt":"1. String.raw  오브젝트에 속하지만 을 사용하므로 여기서 다룸 에 이어서  작성 줄 바꿈을 문자로 처리 유니코드의 코드 포인트 처리 2. String.raw() 의 문자열을 문자 하나씩 전개 하면서 두 번째 파라미터 부터 조합하고 연결 문자열 배열 첫 번째 파라미터는  형태 두 번째 파라미터 부터 조합할 값 작성  1. String.raw 2. String.raw()","frontmatter":{"categories":"JS","title":"String.raw, String.raw()","date":"September 29, 2021"},"fields":{"slug":"/study-js-es6-template-literal-3/"}}},{"node":{"id":"dd74f1d3-66f3-56b5-8971-04259d2bfa8b","excerpt":"tagged Template 템플릿에 함수 이름을 작성한 형태 호출되는 함수를 라고 부름  함수를 호출하면서 문자열을 배열로 파라미터로 넘기고 표현식 결과를 하나씩 파라미터로 넘김 호출하는 곳에서 표현식을 평가한 값을 다수 넘겨 줄 때 태그 함수에 대응하는 파라미터 이름을 작성한 형태 문자열을 분리하면  3개의 배열 엘리먼트가 됨 표현식을 분리하면 와  show 태그 함수를 호출 태그 함수에 Rest 파라미터 작성 문자열을 분리하면  3개의 배열 엘리먼트가 됨 표현식을 분리하면 와   show 태그 함수를 호출 tagged Template","frontmatter":{"categories":"JS","title":"tagged Template","date":"September 28, 2021"},"fields":{"slug":"/study-js-es6-template-literal-2/"}}},{"node":{"id":"6996df70-bd93-5f9e-9615-04f5dbc9d895","excerpt":"Template Literal Syntax   tag  Template Literal 문자열 처리를 위한 리터럴 표현식을 포함할 수 있음 강좌에서는 템플릿으로 표기  안에 표현식 작성 표현식을  형태로 작성 줄 바꿈 작성 차이 Template Literal","frontmatter":{"categories":"JS","title":"Template Literal","date":"September 27, 2021"},"fields":{"slug":"/study-js-es6-template-literal-1/"}}},{"node":{"id":"6f007cbd-fc30-5600-b995-316bdf0447e7","excerpt":"setPorotytpeOf() 첫 번째 파라미터에 을 작성 첫 번째 파라미터의 에 두 번째 파라미터의 에 연결된 프로퍼티를 설정  연결 후의 인스턴스 구조 상속을 위한 목적이라면  등의 상속 처리 키워드를 제공하는 를 사용하는 것이 좋음 setPorotytpeOf()","frontmatter":{"categories":"JS","title":"setPrototypeOf() - prototype 사용","date":"September 26, 2021"},"fields":{"slug":"/study-js-es6-object-9/"}}},{"node":{"id":"dd421b49-aa30-58f6-8493-78a8ee35f852","excerpt":"setPorotytpeOf() 첫 번째 파라미터의으로 두 번째 파라미터를 설정 첫 번째 파라미터에 인스턴스 작성  실행 후 인스턴스 구조 ES5에 가 있음 setPorotytpeOf()","frontmatter":{"categories":"JS","title":"setPrototypeOf() - 인스턴스 사용","date":"September 26, 2021"},"fields":{"slug":"/study-js-es6-object-8/"}}},{"node":{"id":"38af8011-7706-52d4-b4a4-0adf9dcd41cb","excerpt":"메소드 추가  에 을 추가하면 에 설정되며 메소드로 추가하는 것과 같음 에 추가한 후의  모습 추가한 메소드를 인스턴스에 공유 메소드 추가","frontmatter":{"categories":"JS","title":"__proto__에 메소드 추가","date":"September 26, 2021"},"fields":{"slug":"/study-js-es6-object-7/"}}},{"node":{"id":"0c6c2511-c01b-5085-a8f1-2f08ae535a96","excerpt":"함수로 추가  연산자로 인스턴스를 생성하고 인스턴스의 프로퍼티로 함수를 추가 다른 인스턴스와 공유하지 않음 인스턴스에 추가한 후의 인스턴스 구조 함수로 추가","frontmatter":{"categories":"JS","title":"인스턴스에 함수로 추가","date":"September 26, 2021"},"fields":{"slug":"/study-js-es6-object-6/"}}},{"node":{"id":"d938288a-24c2-5e24-a697-77b1b2eeb8df","excerpt":"메소드 호출 방법 과 에 연결된 메소드를 호출하는 방법이 다름 에 연결된 메소드 호출  처럼 을 작성하여 호출 에 연결된 메소드 호출 인스턴스를 생성하여 호출  연산자로 생성한 인스턴스 구조 메소드 호출 방법","frontmatter":{"categories":"JS","title":"prototype와 proto, 메소드 호출 방법","date":"September 26, 2021"},"fields":{"slug":"/study-js-es6-object-5/"}}},{"node":{"id":"2ca8672d-32b5-5bc4-a8ec-47091d428294","excerpt":"1. entries() 열거 가능한 오브젝트의 를  형태로 변환 작성한 순서가 바뀌는 경우 문자열은 문자 하나씩 분리 2. values() 열거 가능한 오브젝트의 를  형태로 변환 작성한 순서가 바뀌는 경우 문자열은 문자 하나씩 분리 3. fromEntires()  형태를  형태로 변환 프로퍼티 키 값이 같으면 값 대체 4. getOwnPropertyDescriptors() 의 프로퍼티 디스크립터를 반환 데이터 디스크립터 액세스 디스크립터 상속받은 오브젝트는 반환하지 않음 1. entries() 2. values() 3. fromEntires() 4. getOwnPropertyDescriptors()","frontmatter":{"categories":"JS","title":"Object 변환","date":"September 25, 2021"},"fields":{"slug":"/study-js-es6-object-4/"}}},{"node":{"id":"1d61fac6-444b-5617-a065-49c62a4f3902","excerpt":"Deep Copyt Object를 할당하면 프로퍼티 값이 연동됨 한 쪽 오브젝트의 프로퍼티 값을 바꾸면, 다른 오브젝트의 프로퍼티 값도 바뀜  함수로 복사 그래도 연동되는 형태 연동되지 않게 하려면 프로퍼티 단위로 복사 JSON 함수 활용 Deep Copyt","frontmatter":{"categories":"JS","title":"오브젝트 복사 - deep copy","date":"September 24, 2021"},"fields":{"slug":"/study-js-es6-object-3/"}}},{"node":{"id":"4b863bd8-b1d0-593e-8e12-38824e49bae7","excerpt":"1. assgin() 두 번째 파라미터의 오브젝트 프로터피를 첫 번째 파라미터의 오브젝트에 복사하고 첫 번째를 반환 만 복사 2. 첫 번째 파라미터 작성 첫 번째 파라미터를 작성하지 않거나 , 를 작성하면  , , ,  값 작성 첫 번째 파라미터에  를 작성하고 두 번째 파라미터를 작성하지 않음  인스턴스를 생성하여 파라미터 값 100을 에 설정 함 생성한 인스턴스를 반환함 , , 도 같은 방법으로 처리 3. 두 번째 파라미터 작성 열러 가능 오브젝트 작성 오브젝트 다수 작성 값을 작성 값과 오브젝트를 작성 값이 설정된 인스턴스 형태 1. assgin() 2. 첫 번째 파라미터 작성 3. 두 번째 파라미터 작성","frontmatter":{"categories":"JS","title":"오브젝트 복사 - assign()","date":"September 23, 2021"},"fields":{"slug":"/study-js-es6-object-2/"}}},{"node":{"id":"20abc668-2956-5c2d-8eeb-475ba661a17b","excerpt":"is() 두 개의 파라미터 값과 값 타입을 비교 같으면 , 아니면  오브젝트 비교 목적이 아님 와  비교, 와 비교는  JS 값 비교 방법 값과 타입까지 모두 비교:  타입은 비교하지 않고 값만 비교:  와  비교 차이 NaN 비교 +0과 -0 비교 활용한 형태 is()","frontmatter":{"categories":"JS","title":"is() - JS 값 비교","date":"September 22, 2021"},"fields":{"slug":"/study-js-es6-object-1/"}}},{"node":{"id":"84331263-44b8-514c-b084-4976d29738d8","excerpt":"1. padStart() 첫 번째 파라미터 값 만큼 길이를 늘리고 늘어난 끝에 대상 문자열을 설정한 후 앞의 남은 공간에 두 번째 파라미터를 채움 두 번째 파라미터에 채울 문자열 작성  10자리로 늘리고 8/9/10 번째에 “ABC”를 설정, 남은 7자리에 “123”을 왼쪽부터 반복하여 채움  6자리 끝에 ABC를 설정하면 3자리가 남음, 123456을 왼쪽부터 채우고 123이 채워짐  전체 길이가 대상 문자열보다 작으면 길이를 줄이지 않고 대상 문자열을 반환  두 번째 파라미터를 작성하지 않으면 남은 앞에 빈문자열을 채움 2. padEnd() 첫 번째 파라미터 값 만큼 길이를 늘리고 늘어난 끝에 대상 문자열을 설정한 후 뒤의 남은 공간에 두 번째 파라미터를 채움 두 번째 파라미터에 채울 문자열 작성  10자리로 늘리고 1/2/3 번째에 “ABC”를 설정, 남은 7자리에 “123”을 왼쪽부터 반복하여 채움  6자리 앞자리에 ABC를 설정하면 3자리가 남음, 123456을 왼쪽부터 …","frontmatter":{"categories":"JS","title":"길이 늘리기, 공백 삭제","date":"September 21, 2021"},"fields":{"slug":"/study-js-es6-string-4/"}}},{"node":{"id":"3a58ec50-693a-50be-aa78-1192f70e7b58","excerpt":"1. startsWith() 대상 문자열이 첫 번째 파라미터의 문자열로 시작하면 , 아니면  반환 정규 표현식 사용 불가 두 번째 파라미터 선택이며, 비교 시작 인덱스 작성 2. endsWith() 대상 문자열이 첫 번째 파라미터의 문자열로 끝면 , 아니면  반환 두 번째 파라미터 선택이며, 사용할 문자열 길이 지정 3.repeat() 대상 문자열을 파라미터에 작성한 수 만큼 복제, 연결하여 반환 4. includes() 대상 문자열에 첫 번째 파라미터의 문자열이 있으면  없으면  반환 두 번째 파라미터(선택) 비교 시작 인덱스 작성 1. startsWith() 2. endsWith() 3.repeat() 4. includes()","frontmatter":{"categories":"JS","title":"시작/끝 체크 복제","date":"September 20, 2021"},"fields":{"slug":"/study-js-es6-string-3/"}}},{"node":{"id":"85764418-7b64-5518-9d2c-9ac46b602e92","excerpt":"1. fromCodePoint() 유니코드의 코드 포인트에 해당하는 문자 반환 파라미터에 다수의 코드 포인트 작성 가능 문자를 연결하여 반환 ES5의 사용 로 작성 2. codePointAt() 대상 문자열에서 파라미터에 작성한 인덱스 번째 문자를 유니코드 코드 포인트로 변환하여 반환 코드 포인트는 UTF-16으로 인코딩된 값 3. normalize() 대상 문자열을 파라미터에 지정한 유니코드 정규화 형식으로 반환하여 반환 1. fromCodePoint() 2. codePointAt()","frontmatter":{"categories":"JS","title":"Unicode 함수","date":"September 19, 2021"},"fields":{"slug":"/study-js-es6-string-2/"}}},{"node":{"id":"7e8293a8-1ff0-5a26-92a3-536421181490","excerpt":"1. Unicode 유니코드는 U+0031 형태 코드 포인트 이 코드 포인트 문자 코드라고도 부름 코드 포인트로  등을 표현 4자리 이상의 UTF-16진수 형태 110만개 정도 표현 U+0000 ~ U+10FFFF Plane(평면) 코드 포인트 전체를 17개 plane으로 나눔 하나의 plane은 65535(U+FFFF)개 첫 번째 Plane BMP(Basic Multillingual Plane) 라고 부름 일반적인 문자(연문자, 숫자)가 여기에 속함 한글의 코드 포인트도 여기에 속함 첫 번째 Plane을 제외한 Plane Supplementary Plane, Astral Plane이라고 부름 5자리 이상의 코드 포인트를 표현할 수 있음 ES6+에서 지원 이스케이프 시퀀스(Escape Sequence) 역슬래시와 16진수로 값을 작성 이를 16진수 이스케이프 시퀀스라고 부름 유니코드 이스케이프 시퀀스 Unficode Escape Sequence 이스케이프 시퀀스를 유니코드로 작성한…","frontmatter":{"categories":"JS","title":"Unicode, ES5 호환성","date":"September 18, 2021"},"fields":{"slug":"/study-js-es6-string-1/"}}},{"node":{"id":"649b0195-459a-51a7-b6d2-cbffd4d3aa38","excerpt":"1. isNaN()  값의 여부를 체크  값이면 , 아니면  반환 글로벌 오브젝트의  값 타입이 가 아닌 것을 체크 함, 가  타입이므로  반환 와  은 값이 이므로 가 됨  값이 가 아니므로 가 됨 글로벌 오브젝트의  값을 숫자로 변환하고 그 결과로 비교 함, 변환한 값 이  이므로  반환 NaN 체크 방법  결과가 이므로 사용 불가 , 글로벌 오브젝트   :  2. isInteger() 파라미터 값이 이면 , 아니면  반환 정수로 인식 정수가 아닌 것으로 인식 값을 로 변환하여 체크하지 않음 r로 변환하면, 와 가 이므로 정수로 인식됨 3. isSafeInteger() 파라미터 값이 이면  아니면  반환  ~  :  아니면  4. isFinite() 파라미터 값이 유한 값이면  아니면  글로벌 오브젝트의 와 체크 결과가 다름 함수는 오브젝트에 속해야 하므로 와 관련된 것은  오브젝트의 함수 사용, 글로벌 오브젝트의 함수는 글로벌 사용이 목적 1. isNaN() 2. isInte…","frontmatter":{"categories":"JS","title":"Number 함수","date":"September 17, 2021"},"fields":{"slug":"/study-js-es6-number-Object-3/"}}},{"node":{"id":"c3ee70f8-ba07-5f6b-b472-c369884bc450","excerpt":"1. Number.EPSLON  아주 작은 값 2.220446049250313080847263361816E-16 또는 2^-52 사용 사례 미세한 값 차이 형태 JS가 부동소수점 처리를 하기 때문(IEEE 74) 이처럼 미세한 값 차이로 일치하지 않을 때 을 사용 미세한 값 차이를 같은 값으로 간주 값 차이가 보다 작으면 를 반환` 으로 가 되는 것을 방지  처럼 작은 값을 더해 나누면 이 됨 2. 진수 Binary(2진수) ,  형태로 작성 숫자  다음에  작성하고 이어서  또는 로 값을 작성 Octal(8진수)  형태로 작성 숫자  다음에 영문  작성하고 이어서 로 값을 작성 ES3는 첫 자리에 영문  작성 1. Number.EPSLON 2. 진수","frontmatter":{"categories":"JS","title":"진수, EPSILON","date":"September 16, 2021"},"fields":{"slug":"/study-js-es6-number-Object-2/"}}},{"node":{"id":"ff7fe2ef-9db3-5360-a4a6-e815103230ae","excerpt":"1. IEEE 754 IEEE (Institute of Electrical and Electronics Engineers) JS는 IEEE 754에 정의된 64비트 부동 소수점으로 수를 처리 double-precision floating-point format numbers 64비트로 최솟값과 최댓값을 처리 정수와 실수를 구분하지 않음 1을 1.0으로 처리 1과 1.2를 더할 수 있음 2. 64비트 구성 사인 비트 63: 1비트 값이 0이면 양수, 1이면 음수 지수 52 ~ 62 : 11비트 가수 0 ~51 : 52비트 + 1(사인 비트): 53비트 3. 값을 구하는 방법 비트 값은  아니면  2^x승 값을 더해 값을 구함 0비트 부터 1, 1, 1이면 1(2^0) + 2(2^1) + 4 = 7 4. Number 상수 란 지수(e)를 사용하지 않고 나타낼 수 있는 값 2의 64승이 아닌 2의 53승  : safe integer 최댓값  : safe integer 최솟값 1. IEE…","frontmatter":{"categories":"JS","title":"IEEE 754, 64비트 구성, 값을 구하는 방법, Number 상수","date":"September 15, 2021"},"fields":{"slug":"/study-js-es6-number-Object-1/"}}},{"node":{"id":"d80cf836-b581-5a5c-a581-252bef2709f3","excerpt":"1. Getter 로 선언된 함수를 자동으로 호출 값을 반환하는 시맨틱을 갖고 있으므로  함수에서 값을 반환해야 함 ES5 형태 을 실행하면  프로퍼티에서  속성의 존재를 체크 함 있으면,  함수를 호출하며 이 반환되어 출력 됨  처럼 함수로 호출하면 에러가 발생함 ES5의 를 참조하세요 ES6 형태  처럼  앞에 을 작성하면 로 선언됨  함수가 자동으로 호출 됨 ES6 장점 ES5처럼 프로퍼티의 속성 구조가 아님 작성 편리 다수의  사용 가능 2. Setter 프로퍼티에 값을 할당하면 로 선언된 함수 자동 호출 값을 설정하는 시맨틱을 갖고 있으므로  함수에서 값을 설정해야 함 ES5 형태 를 실행하면  프로퍼티에  속성의 존재 여부를 체크 있으면,  함수를 호출 를 파라미터 값으로 넘겨 줌 ES6 형태 ) 앞에 을 작성하면 로 선언됨  에 값을 할당하면 가 자동으로 호출 됨 파라미터 값으로 을 넘겨줌 변숫값을 함수 이름으로 사용  변숫값인 “setPoint”가 함수 이름으로 사용…","frontmatter":{"categories":"JS","title":"Getter, Setter","date":"September 14, 2021"},"fields":{"slug":"/study-js-es6-getter-setter/"}}},{"node":{"id":"2db00d0c-9b5e-5030-b3fa-f0a335d71c61","excerpt":"1. Trailing Commas 배열 끝에 콤바 사용 가능  앞에 콤마 사용 가능  끝에 콤바 사용  앞에 콤마 사용 가능 2. 거듭 제곱 좌결 합성 왼쪽에서 오른쪽으로 계산 은 으로 계산 우결 합성(거듭제곱 계산 할 때만) 오른쪽에서 왼쪽으로 계산 에서 로 계산 은 2의 3승의 2승이 아니라 먼저 3의 2승을 구하며(9) 2의 9승으로 512가 됨 2. Try-Catch 의 에서 처럼 (error)를 생략 가능 ES2019 에서 메시지를 받아 사용하지 않을 때 편리 함 타이핑 실수를 방지 할 수 있음 3. 함수 작성 형태 에 함수를 작성할 때  키워드를 작성하지 않아도됨 참고 : 에 함수를 작성하는 이유 함수에서 로  전체 참조  연산자로 인스턴스를 생성하지 않음, 메소드가 아닌 함수로 접근  전체가 하나의 묶음 접근성, 가독성이 좋음 에 시맨틱을 부여할 수 있으며 다른 오브젝트와 이름과 프로퍼티 이름이 충돌되지 않음 처럼  키워드를 사용하지 않음 1. Trailing Comm…","frontmatter":{"categories":"JS","title":"Operator","date":"September 13, 2021"},"fields":{"slug":"/study-js-es6-operator/"}}},{"node":{"id":"9c23e38a-b169-54f7-ad3b-ce41aee6df38","excerpt":"1. For-Of  이터러블 오브젝트를 반복 Iterable 이터러블 오브젝트를 작성 표현식을 작성하면 평가 결과를 사용 Variable 변수 이름 작성 이터러블 오브젝트를 반복할 때마다 Variable에 값이 할당됨 배열 배열을 반복하면서 엘리먼트를 하나씩 전개 String 문자열을 반복하면서 문자를 하나씩 전개 NodeList NodeList를 반복하면서 엘리먼트를 하나씩 전개 2. For-in, For-of의 차이 for-in 열거 가능한 프로퍼티가 대상  형태는 디폴트가  는 디폴트가  for-of 이터러블 오브젝트가 대상 Object는 전개되지 않음 Property의 프로퍼티도 전개되지 않음 3. for-of, Object Object는 이터러블 오브젝트가 아니므로 for-of 사용 불가 Object를 로 전개할 수 있는 방법 로 프로퍼티 이름을 배열로 만들고 만든 배열을 로 전개 1. For-Of 2. For-in, For-of의 차이 3. for-of, Object","frontmatter":{"categories":"JS","title":"for-of, for-in for-of 차이, for-of Object","date":"September 12, 2021"},"fields":{"slug":"/study-js-es6-for-in/"}}},{"node":{"id":"8cf60271-701a-584e-b51c-d0601fd6c3db","excerpt":"Default Value 값을 할당하지 않으면 사전에 정의된 값을 할당 default value : 사전에 정의된 값 할당할 값이 없으면 디폴트 값을 할당 에 10을, 에 20을 분할 할당 함 에 할당할 값이 없으며, 이 때 에서 을 에 할당함 이것을 라고 함 의 왼쪽에 이름을 작성하고 오른쪽에 값을 작성 할당할 값이 있으면 디폴트 값을 무시 왼쪽과 오른쪽 모두 값이 3개 임 값(70)이 있으므로 에 을 할당함 에서 을 할당하지 않음 Object는 프로퍼티 이름으로 체크 오른쪽에 의 값인 을 왼쪽의  프로퍼티 값으로 분할 할당함 에 할당할 값이 없으며 에서 을 에 할당 함 디폴트 값 적용 순서 왼쪽에서 오른쪽으로 적용 오른쪽 one의 값인 10을 왼쪽의 one 프로퍼티 값으로 분할 할당함 오른쪽에 값이 없으므로 디폴트 값을 할당, 왼쪽에서 오른쪽으로 할당 , one의 값이 10이므로 30이 two에 설정됨 , two의 값이 30이므로 80이 five에 설정됨 함수의 파라미터에 디폴…","frontmatter":{"categories":"JS","title":"Default Value","date":"September 11, 2021"},"fields":{"slug":"/study-js-es6-default-value/"}}},{"node":{"id":"9b4eaffe-4fb6-54d9-8f0c-2a229d188ccb","excerpt":"1. Object 오퍼레이션 같은 프로퍼티 이름 사용 에서 프로퍼티 이름인 이 같음  모드에서 프로퍼티 이름이 같으면 에러 뜸 에서는  모드에 관계없이 에러가 발생하지 않음, 뒤에 작성한 프로퍼티 값으로 대체됨 Shorhand property names 과  변수에 값을 작성하였으며  형태로 에 할당함 이 프로퍼티 이름이 되고 이 프로퍼티 값으로 할당됨 은 MDN에 작성된 것으로 스펙에 정의된 것은 아님 2. 프로퍼티 이름 조합 문자열을 프로퍼티 이름으로 사용 과 를 연결하여 를 프로퍼티 이름으로 사용 함 변숫값을 프로퍼티 이름으로 사용 변숫값을 프로퍼티 이름으로 사용 함 변숫값과 문자열을 연결할 수 있음 프로퍼티 이름에 공백이 있는 것이 어색하지만 공백을 넣을 수 있음 함수로 호출 할 수 있음, 변숫값에 따라 함수 이름을 정의 할 수 있음 분할 할당을 조합한 형태 변숫값을 프로퍼티 이름으로 사용하고 분할 할당한 형태 이  형태가 됨 이 에 “책”이 할당됨 1. Object 오퍼레…","frontmatter":{"categories":"JS","title":"Object 오퍼레이션, 프로퍼티 이름 조합","date":"September 10, 2021"},"fields":{"slug":"/study-js-es6-destructuring-3/"}}},{"node":{"id":"55c8ee59-7145-59ed-8e58-8aed9a6aa4d3","excerpt":"1. Object 분할 할당 의 프로퍼티를 분할하여 할당 프로퍼티 이름이 같은 프로퍼티에 값을 할당 왼쪽의 가  형태가 아니라 프로퍼티 이름만 작성함 프로퍼티 이름이 같은 오른쪽 프로퍼티 값을 왼쪽의 프로퍼티 값으로 할당 에 , 에 을 할당,  형태가 됨 프로퍼티 이름을 별도로 작성  프로퍼티 이름을 앞에 별도로 작성함  전체를 소괄호() 안에 작성해야 함 프로퍼티 값 위치에 변수 이름 작성 이름을 별도로 선언하였으므로 소괄호() 안에 작성했음 오른쪽  프로퍼티 값 5를 five에 할당 오른쪽  프로퍼티 값 6을 six에 할당  을 실행하면  프로퍼티 이름으로 값을 구할 수 없음 와  변숫값을 구하는 것이 목적 Object 구조에 맞추어 값 할당  plus는 구조(경로)를 만들기 위한 것 왼쪽에 가 있고 가 있으면  프로퍼티 값에 을 할당함 구조가 같지 않으면 실행할 때 에러 발생  는 구조(경로)를 만들기 위한 것으로 실제로 존재하지 않음 가 없으므로  발생 할당한 후, 이름으로…","frontmatter":{"categories":"JS","title":"Object 분할 할당, 파라미터 분할 할당","date":"September 09, 2021"},"fields":{"slug":"/study-js-es6-destructuring-2/"}}},{"node":{"id":"9e68eb90-c5dc-5f39-8bad-1cd24d69bf4b","excerpt":"1. Destructuring Destructuring Assignment 사전적 의미 ~구조를 파괴하다. 파괴, 해체는 있는 것이 없어지는 뉘앙스 원 데이터는 변경되지 않음 이 관점에서 보면 분할/분리가 더 까움 2. Array 분할 할당 배열의 엘리먼트를 분할하여 할당(인덱스에 해당하는 변수에 할당) 할당 받을 변수 수가 적은 경우 왼쪽에 할당 받을 변수가 2개이고, 오른쪽에 분할 할당할 값이 3개 임 왼쪽의 변수 인덱스에 맞추어 값을 할당하므로 3은 할당되지 않음 할당 받을 변수 수가 많을 경우 왼쪽의 할당 받을 변수가 4개이고 오른쪽에 분할 할당할 값이 3개 임 왼쪽에 값을 할당할 수 없는 변수에 가 설정됨 배열 차원에 맞추어 분할 할당 매치되는 인덱스에 변수가 없으면 값을 할당하지 않음 Spread와 같이 사용 나머지를 전부 할당 에 1을 할당하고 나머지 2, 3, 4를 에 할당 함, 처럼 배열로 할당함  파라미터를 호출 받는 함수의 파라미터에 작성하지만, 나머지라는 시맨…","frontmatter":{"categories":"JS","title":"Destructuring, Array 분할 할당","date":"September 08, 2021"},"fields":{"slug":"/study-js-es6-destructuring-1/"}}},{"node":{"id":"4f8ce1b1-d33b-5de6-93d7-5fa4528905cf","excerpt":"1. Function Spread 호출하는 함수의 파라미터에  대상 작성 처리 순서 및 방법 함수가 호출되면 우선, 파라미터의 배열을 엘리먼트 단위로 전개 전개한 순서대로 파라미터 값으로 넘겨 줌 호출 받는 함수의 파라미터에 순서대로 매핑됨 , , 이 매핑 됨 2. Rest 파라미터 Syntax:  분리하여 받은 파라미터를 배열로 결합  : 분리, : 결합 작성 방법 호출받은 함수의 파라미터에 에 이어서 파라미터 이름 작성 호출한 함수에서 보낸 순서로 매핑 , , 이 매핑 됨 파라미터와  파라미터 혼합 사용 에 10이 설정되고 설정되지 않은 나머지 값 전체가 파라미터 에 설정됨 그래서  파라미터 임 나머지라는 시맨틱을 나타내기 위해 파라미터 이름을 로 사용하기도 함 3. Array-like  타입이지만 배열처럼 이터러블 가능한 오브젝트 문으로 전개할 수 있음 작성 방법 프로퍼티  값을 0부터 1씩 증가하면서 프로퍼티 값을 작성 에 전체 프로퍼티 수 작성 이렇게 작성하지 않으면 그냥…","frontmatter":{"categories":"JS","title":"Rest 파라미터","date":"September 07, 2021"},"fields":{"slug":"/study-js-es6-spread-2/"}}},{"node":{"id":"6c4f182d-3ce6-5970-8c62-595135dc4f76","excerpt":"1. let, const 사용 기준  : 변경 할 수 있음  : 변경 할 수 없음 ,  변수의 시맨틱을 우선하여 사용 값이 변경되면  초깃값이 변경되지 않으면  2. Spread Syntax:   처럼   안에 점 3개를 작성하고 이어서 이터러블 오브젝트 작성 이터러블 오브젝트를 하나씩 전개 의 가 이터러블 오브젝트는 아니지만 전개 가능 3. Array Speard  대상 배열을 작성한 위치에 엘리머트 단위로 분리(전개)  작성 형태  :  배열의 를 엘리먼트 단위로 분리(전개) 함  :  위치에  배열의 를 엘리먼트 단위로 분리(전개) 함 값이 대체되지 않고 전개 앞에 과 가 있지만 값을 대체하지 않고 을 작성한 위치에 전개 함 4. String Spread  대상 문자열을 작성한 위치에 문자 단위로 전개  작성 형태  의 를 문자 단위로 분리하여  위치에 설정 5. Object Spread  대상 를 작성한 위치에 프로퍼티 단위로 전개  작성 형태  :  오브젝트의 프로퍼티를 …","frontmatter":{"categories":"JS","title":"Spread(스프레드)","date":"September 06, 2021"},"fields":{"slug":"/study-js-es6-spread-1/"}}},{"node":{"id":"87584584-6b5c-561c-9e17-f74cc688dcaa","excerpt":"1. 이터레이터 프로토콜 이터레이터(iterator) 프로토콜 값을 순서대로 생성하는 방법(규약) 이터레이터 오브젝트 를 호출하면 이터레이터 오브젝트를 생성하여 반환 이터레이터 오브젝트에 가 있음 생성한 오브젝트를 이터레이터라고 부름 이터레이터 오브젝트의 를 호출하면 이터레이터를 호출한다고도 함  를 반환함, 에서 첫 번째 값이고 는 이터레이터 상태 임 두 번째  호출  를 반환함, 에서 두 번째 값이고 는 이터레이터 상태 임 세 번째  호출  반환, 는 처리할 값이 없다는 것을 뜻하며 는 이터레이터의 종료를 뜻함 이터레이터 오브젝트 구조 1. 이터레이터 프로토콜","frontmatter":{"categories":"JS","title":"이터레이터 오브젝트, 프로토콜","date":"September 05, 2021"},"fields":{"slug":"/study-js-es6-iteration-3/"}}},{"node":{"id":"f7245bf9-482f-518e-9125-74eae8d4167b","excerpt":"1. 이터러블 오브젝트 1). 이러터블 오브젝트 개념 이터러블 프로토콜을 갖고 있는 오브젝트 스펙에서는 로 표기 반복 구조,   리터럴로 생성한 에 가 있으므로 는 이터러블 오브젝트 임  리터럴로 생성한 에 가 없으므로 는 이터러블 오브젝트가 아님  문의 반복과 이터레이션이 차이가 있듯이, 의 열거와 이터레이션은 차이가 있음 2). 이터러블 오브젝트 구조 3). 자체 오브젝트에는 없지만 이터러블 오브젝트를 상속받아도 됨 즉, 에 있으면 됨 예를 들어,  오브젝트를 상속 받으면 이터러블 오브젝트가 됨 2. 이터러블 프로토콜 1). 이터러블 프로토콜 개념 오브젝트가 반복할 수 있는 구조이어야 함 를 갖고 있어야 함 2). 아래 빌트인 오브젝트는 디폴트로 이터러블 프로토콜을 갖고 있음 즉 를 갖고 있음 -, , , , , ,  1. 이터러블 오브젝트 1). 이러터블 오브젝트 개념 2). 이터러블 오브젝트 구조 3). 자체 오브젝트에는 없지만 2. 이터러블 프로토콜 1). 이터러블 프로토…","frontmatter":{"categories":"JS","title":"이터러블 오브젝트, 프로토콜","date":"September 04, 2021"},"fields":{"slug":"/study-js-es6-iteration-2/"}}},{"node":{"id":"47189ccd-128b-5c7b-b7c3-f0a81cc1f54d","excerpt":"1. 이터레이션 이터레이션(Iteration)의 사전적 의미 : 반복 문의 반복 개념과 차이 있음 이터레이션을 위한 프로토콜(Protocol) 필요 예: 통신 프로토콜(규약) 데이터 송수신 프로토콜 정의 어떻게 반복을 할 것인가에 대한 규약이 필요 즉, 이터레이션은 프로토콜을 갖고 있으며 프로토콜에 따라 이터레이션 수행 프로토콜이 구문과 빌트인이 아니므로 프로토콜에 맞으면 이터레이션 가능 2. 이터레이션 프로토콜 이터레이션 프로토콜(규약)은 오브젝트가 이터레이션 할 수 있는 구조이어야 하며 10, 20은 가능, 100은 불가능 이터레이션 프로토콜 구분 이터러블(iterable) 프로토콜 : 반복가능 한 것 이터레이터(iterator) 프로토콜 :  처럼 반복문을 실행시키는 것\n—> 이렇게 이터러블, 이터레이터를 규약하는 이유는?  때문에 개발자 코드로 프로토콜을 맞추면 이터레이션 할 수 없는 오브젝트를 이터레이션 할 수 있도록 만들 수 있음 1. 이터레이션 2. 이터레이션 프로토콜","frontmatter":{"categories":"JS","title":"이터레이션","date":"September 03, 2021"},"fields":{"slug":"/study-js-es6-iteration-1/"}}},{"node":{"id":"de1ec596-a364-5239-a995-afdb0a459dfe","excerpt":"1. 화살표 함수와 인스턴스 인스턴스에서 화살표 함수의 에 따라 가 참조하는 오브젝트가 다름 1). 에 메소드로 작성 에 화살표 함수를 연결하면 함수 안에서 가 글로벌 오브젝트를 참조 함  에서 글로벌 오브젝트의  값이 200을 출력 2). 의 메소드 안에 작성 에 일반 함수를 연결하고, 함수 안에 화살표 함수를 작성한 형태 임. 가 일반 함수 이므로 가 생성한 인스턴스 참조 또한, 화살표 함수에서도 가 생성한 인스턴스를 참조 함 화살표 함수의 스코프인 의 를 사용하기 때문 2. 화살표 함수 특징  대신  를 사용, 함수 표현식 형태 이 없으므로 함수가 가벼움 가 없으므로  연산자로 인스턴스를 생성할 수 없음 화살표 함수에 가 없음 화살표 함수로  오브젝트를 생성할 때 정적으로 화살표 함수가 속한 스코프의 를 화살표 함수에 바인딩 함 바인딩 된  참조가 바뀌지 않으며 화살표 함수에서 로 사용 함 일반 함수는  등으로 바꿀 수 있음 메소드보다 함수로 사용하는 것이 효율 성이 높음 1…","frontmatter":{"categories":"JS","title":"Arrow Function과 인스턴스","date":"September 02, 2021"},"fields":{"slug":"/study-js-es6-arrowFunction-4/"}}},{"node":{"id":"9bca858c-fcd0-5de9-b67d-ee9905bea888","excerpt":"1. 화살표 함수와 this 1).  모드에서 함수를 호출할 때 함수 앞에 오브젝트 작성은 필수  모드에서는  처럼 호출하는 함수 앞에 오브젝트를 작성해야 함, 이렇게 하지 않으면  함수 안에서  값이  또한,  처럼 를 앞에 작성하지 않으면  안에서  값이  임 이를 피하기 위해 로 호출하면  오브젝트에 가 없으므로 에러가 남(현재  함수 블록 안에 가 있음)  모드의 함수에서 를 참조하기 위해서는 를 별도로 저장한 후 사용해야 하는 번거로움이 있음 —> 화살표 함수로 해결 가능 2). 화살표 함수에서 가 글로벌 오브젝트 참조 화살표 함수로 작성하면 로 호출할 수 있음 또한,  화살표 함수 안에서 가 가 아니라 글로벌() 오브젝트를 참조 함 을 작성했으므로 100이 출력됨 3). 값이  2. 가 정적 스코프 참조 화살표 함수에서 정적 스코프의 를 사용 정적(Lexical)스코프란 엔진이 해석할 때, 화살표 함수를 만나면 를 생성하고 화살표 함수가 속한 스코프를 생성한 함수 오브젝…","frontmatter":{"categories":"JS","title":"Arrow Function와 this","date":"September 02, 2021"},"fields":{"slug":"/study-js-es6-arrowFunction-3/"}}},{"node":{"id":"950d15a9-2609-5da0-99e1-e265a879e551","excerpt":"1) 화살표 함수 구조 을  로 표기하는 것이 전부가 아님 화살표 함수는 일반 함수와 구조가 다름 화살표 함수 나름의 특징이 있음 2) Arguments 사용 불가 (파라미터가 유동적일 때 사용하는 것) 사용 할 수 없음  대신에  파라미터 사용 1) 화살표 함수 구조 2) Arguments 사용 불가","frontmatter":{"categories":"JS","title":"Arrow Function 구조","date":"September 02, 2021"},"fields":{"slug":"/study-js-es6-arrowFunction-2/"}}},{"node":{"id":"49d4822e-f517-5073-a8d0-965517afa3d5","excerpt":"1) Arrow Function 의 사전적 의미 : 화살, 화살표 코드 형태   키워드 대신에 화살표  사용 표 양쪽에 공백 작성 가능 의 축약 형태이지만, 고려할 사항도 있음( 참조가 다름) 2) 함수 블록 사용 함수 블록과  작성생략 함수 블록과 을 생략한 형태로 와 같음  앞에서 줄을 분리하면   뒤에서는 개행 가능 함수 블록 만 작성한 형태 함수 블록만 작성하면  반환 함수 블록에 을 작성하지 않은 것과 같음 을 작성하지 않으면 로 를 반환 함 화살표가 함수이기 때문이 아니라  문법임 를 반환하는 형태 를 소괄호()로 감싸면 를 반환함 소괄호()을 작성하지 않으면 를 반환함 3) 파라미터 사용 파라미터가 하나 일 때 파라미터가 하나이면 에서 소괄호를 생략할 수 있음 에서 이 에 설정됨 파라미터가 없으면 소괄호만 작성 파라미터가 없으면 소괄호만 작성할 수 있음 1) Arrow Function 2) 함수 블록 사용 3) 파라미터 사용","frontmatter":{"categories":"JS","title":"Arrow Function 사용","date":"September 02, 2021"},"fields":{"slug":"/study-js-es6-arrowFunction-1/"}}},{"node":{"id":"785e5292-f02a-5c99-85c0-3d4102a1330a","excerpt":"💡 요약 문에서 반복 할 때마다  변수는 스코프를 갖지 않음  변수는 스코프를 가짐 1) var 변수와 스코프 어떤 것을 클릭하더라도 항상 문이 끝났을 때의 값인 을 출력함 전체의 스코프에서 하나의 값으로 할당되기 때문 for문의 마지막 값인 이  선언된  즉 글로벌 변수에 할당 됨.  에서 k 변수의 스코프는 함수 임 2) let 변수와 스코프 이벤트를 설정할 때의 값을 출력 합니다. 💡 요약 1) var 변수와 스코프 2) let 변수와 스코프","frontmatter":{"categories":"JS","title":"let vs var","date":"September 01, 2021"},"fields":{"slug":"/study-js-es6-letVSvar/"}}},{"node":{"id":"42e4b63c-3896-5333-86fe-b91e1605545d","excerpt":"1) 글로벌 오브젝트에서 let변수를 this로 참조 불가 현재 위치는 글로벌 오브젝트   오브젝트에 설정됨   오브젝트에 설정되지 않음 에서 가  오브젝트를 참조 하며 이  오브젝트에 설정되어 있으므로 “음악”이 출력됨 에서 sports가 에 설정되지 않으므로 가 출력됨 2) 엔진 관점에서 let 변수 처리   변수를 블록 안에 작성해야 하지만, 블록이 없으므로 엔진이 블록을 만들고 이를 스코프로 사용하여 설정함 위에 언급한 것 같이 현재 에  변수에 할당한 값이 존재 이것은 를 하나의 블록 개념으로 에 작성한 모든 파일에서 공유 가능 1) 글로벌 오브젝트에서 let변수를 this로 참조 불가 2) 엔진 관점에서 let 변수 처리","frontmatter":{"categories":"JS","title":"let and this","date":"September 01, 2021"},"fields":{"slug":"/study-js-es6-letAndThis/"}}},{"node":{"id":"d5ec61f1-3748-546d-94a8-3e6a4bcc64f4","excerpt":"1) let 변수 개요  블록 스코프를 가진 변수 변수가 선언된 블록이 스코프 스코프 적용 기준 블록, 문, 표현시 블록 안과 밖이 스코프가 다름 변수 이름이 같아도 값이 대체되지 않음 2) let 변수 선언 Syntax  , 에 변수 이름 작성 식별자로 사용 는 생략 가능을 나타냄 값을 할당하지 않아도 됨  값을 할당하지 않고 변수만 선언할 수 있음, 초깃값 가 할당됨  콤마로 구분하여 다수를 선언할 수 있음 , 에 초깃값 작성 표현식 작성 가능, 평가 결과 사용  변수를 선언하고 초깃값을 할당했습니다.  콤마로 구분하여 다수의 변수를 선언하고 값을 할당한 형태임   발생, 을 처음에 한 번만 작성함  콤마로 구분하여 let과 var을 같이 사용할 수 없음 3) 블록 스코프 블록 기준 중괄호    블록 안과 밖이 스코프가 다름 변수 이름이 같아도 값이 대체되지 않음  블록  안과 밖에 를 작성했으며 스코프가 다르므로 같은 이름을 사용할 수 있음 변숫값이 대체되지 않고 유지 됨 블…","frontmatter":{"categories":"JS","title":"let 변수","date":"September 01, 2021"},"fields":{"slug":"/study-js-es6-let/"}}},{"node":{"id":"82dd1053-3180-5baa-9a62-c02292bc76fc","excerpt":"1) ES5의 실행 콘텍스트 처리 순서 함수 선언문 설정(함수부터 찾음) 변수 이름을 바인딩, 변숫 값은 (변수 이름 찾고 값은 라고 넣음) 소스 코드 실행 2) var 변수 호이스팅  코드 아래  이 존재 변수가 아래에 있지만 식별자 해결을 할 수 있음 단, 이 위에서  값은  이것을 이라고 함 식별자 해결을 하지 못하면 에러가 발생 3) let 변수 호이스팅 사용 불가  변수는 호이스팅되지 않음, 즉  변수 앞에서 변수 사용 불가  변수를 인식하는 시점  안에  변수 작성 1) ES5의 실행 콘텍스트 처리 순서 2) var 변수 호이스팅 3) let 변수 호이스팅 사용 불가","frontmatter":{"categories":"JS","title":"호이스팅","date":"September 01, 2021"},"fields":{"slug":"/study-js-es6-hoisting/"}}},{"node":{"id":"5490584c-6aef-59b7-b763-184230d77c2a","excerpt":"💡 요약 모든  파일에서 글로벌 오브젝트에 작성한  변수와  변수를 공유  안에 작성하면 공유하지 않음 변수를 어디에 선언하냐에 따라 저장 위치가 다름 1) 글로벌 오브젝트에 작성  : , , , 에 변수가 저장됨  : 에 설정됨, 공유가능  : 에 설정됨, 공유가능 처럼 의도적으로 작성하지 않아도 됨  : 에 설정됨, 공유 불가능 글로벌 오브젝트에서만 사용하는 로컬 변수로 사용 2) 함수에 작성  : 에 설정됨  : 에 설정됨 💡 요약 1) 글로벌 오브젝트에 작성 2) 함수에 작성","frontmatter":{"categories":"JS","title":"변수 선언 위치","date":"September 01, 2021"},"fields":{"slug":"/study-js-es6-declaration-position/"}}},{"node":{"id":"31224a95-5280-5fc7-b067-eea8c0a6b865","excerpt":"1) const 문법 구문:  값을 바꿀 수 없는 변수 선언(예외로 배열이나, 객체면 값을 바꿀 수 있음) 에 변수 이름 작성, 식별자로 사용  sports를 로 선언하고 값 할당  try 블록도 별도의 스코프이지만 const, let을 작성하지 않았으므로 sports 변수에 값을 할당하게 됨 이때 가  변수 이므로 에러 발생 2) JS에서 상수는 대문자 사용이 관례 가 이지만 값 형태에 따라 바꿀 수 있음  대문자 사용이 코딩 관례이므로 괜찮음 우선 이 아닌  사용 가능을 검토(우선순위  >  > ) 3) const 변수 사용  변수 전체를 바꿀 수 없지만, 의 프로퍼티 값을 바꿀수 있음  book에 값을 할당하면 에러 발생,  전체를 바꿀 수 없음  프로퍼티 값은 변경할 수 있음  변수의 변경 불가는 에 값을 할당하는 것을 뜻 함 의 엘리먼트 값도 바꿀 수 있음  book에 값을 할당하면 에러 발생  엘리먼트 값은 변경할 수 있음 1) const 문법 2) JS에서 상수는 대문…","frontmatter":{"categories":"JS","title":"const 변수","date":"September 01, 2021"},"fields":{"slug":"/study-js-es6-const/"}}},{"node":{"id":"7b7ffc0d-364b-5f5a-aca8-09ad808eac0d","excerpt":"1) function 블록 도 블록 스코프  안과 밖에 같은 이름의  변수 선언 가능 스코프가 다르기 때문 그래서 밖의 와 안의 는 다르게 저장되어 있음  밖의  변수를  안에서 사용 가능() 2) try-catch  문도 블록 스코프  블록  기준으로 안과 밖에 같은 이름의  변수 선언 가능  블록의 안과 밖에 를 선언했으며 안과 밖이 스코프가 다르므로 변숫값이 각각 설정됨 에서  밖의 변수 사용   블록에서 값을 할당   변수가 없으므로 에러가 발생   블록 안에서 선언한  값을 출력하지 않고  밖의  값을 출력 함 3) switch-case 문도 블록 스코프  블록 기준으로 같은 이름의  변수 작성 불가 , 는 블록 스코프가 아님   블록 안에서 을 사용하여 선언한 변수가 있는데 다시 을 사용하여 변수를 선언하므로 에러가 발생 그래서 주석으로 처리 에러는 실행할 때 생기지 않고 컴파일 할 때 에러가 발생함 1) function 블록 2) try-catch 3) switch-c…","frontmatter":{"categories":"JS","title":"function 블록, try-catch, switch-case","date":"August 31, 2021"},"fields":{"slug":"/study-js-es6-scope/"}}},{"node":{"id":"84fcd2b7-6b47-5c08-9674-e9f52f4aebeb","excerpt":"1) 일을 대하는 마음 책을 접하기 이전에 나는 약간의 매너리즘에 빠져있었다.\n무언가 열심히 사는 것 같은데 스스로에 대한 확신이 없는채, 제자리 걸음을 하고 있다는 느낌이 강하게 들었었다. 그 때 이 책을 접하게 되었다.\n단순히 직장이 돈을 버는 곳이 아닌 나를 시켜주는 좋은 장소라는 사실과 을 기를 수 있도록 해주며 내가 일하는 을 파악할 수 있는 곳.\n저자의 말을 통해, 현재 다니고 있는 직장에 대한 불평 불만 보다는 앞으로 성장할 나의 모습에 있어서 좋은 밑거름이 될 수 있다는 확신이 들었다. 이외에도 책에서는 회사를 통해 성장 할 수 있는 다양한 방법을 소개 하고 있다. 그 중 마음에 와 닿았던 부분을 소개 한다. 이처럼 나에게 주어진 하루 중 대부분을 일에 사용하는데, 이 시간을 통해 책에서 알려준 방법을 가지고 하나씩 실천하여 더 나은 미래를 만들고 싶다. 2) 경제적인 사고를 갖춘다는 것 일을 넘어 삶을 살아가는데 필요한 경제적인 사고에 대해서도 이 책은 많은 내용을…","frontmatter":{"categories":"Book","title":"📕 성장을 꿈꾸는 너에게를 읽고","date":"August 30, 2021"},"fields":{"slug":"/read-book-1/"}}}]},"site":{"siteMetadata":{"language":"ko","author":{"name":"고영욱","bio":{"role":"개발자","description":["매일 1%씩 성장하는","기본에 집중하는","이로운 것을 만드는","운동을 좋아하는","독서를 좋아하는","커피를 좋아하는"],"thumbnail":"woogi.gif"},"social":{"github":"https://github.com/free-ko","linkedIn":"https://www.linkedin.com/in/youngwock-ko-74223921b/","email":"duddnr654@naver.com"}}}}},"pageContext":{}},"staticQueryHashes":["1073350324","1562467322","2938748437"]}