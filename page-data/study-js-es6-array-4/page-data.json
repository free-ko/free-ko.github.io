{"componentChunkName":"component---src-templates-blog-template-js","path":"/study-js-es6-array-4/","result":{"data":{"cur":{"id":"3346c0c4-514b-5681-a973-75d5aafb46d9","html":"<br>\n<h1 align=\"center\">\n  👋  find(), findIndex()\n</h1>\n<br>\n<h2 id=\"1-find\" style=\"position:relative;\"><a href=\"#1-find\" aria-label=\"1 find permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. find()</h2>\n<ul>\n<li>\n<p>배열의 엘리먼트를 하나씩 읽어가면서 콜백 함수 호출</p>\n<ul>\n<li>파라미터 : 엘리먼트, 인덱스, 배열 전체</li>\n<li>콜백 함수에서 <code class=\"language-text\">true</code>를 반환하면 <code class=\"language-text\">find()</code>를 종료하면서</li>\n<li>현재 처리중인 엘리먼트 값을 반환</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">cb</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> all</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> value <span class=\"token operator\">===</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>cb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// B</span>\n\n<span class=\"token comment\">// 1. [\"A\", \"B\", \"C\"]를 반복하면서 콜백 함수 호출</span>\n<span class=\"token comment\">// 2. 콜백 함수에서 엘리먼트 값이 B이면 true를 반환</span>\n<span class=\"token comment\">// 3. 콜백 함수에서 true를 반환하면 현재 처리중인 엘리먼트 값인 B를 반환하고 find() 실행을 종료함</span>\n<span class=\"token comment\">// 4. 조건에 맞으면 find() 실행을 종료하므로 배열 앞에서 true가 되면 효율이 높음</span></code></pre></div>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\">onst list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"C\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">cb</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> all</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> value <span class=\"token operator\">===</span> <span class=\"token number\">77</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>cb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1. 콜백 함수에서 조건에 맞는 값이 없으면 undefined를 반환함</span></code></pre></div>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">cb</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> all</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> value <span class=\"token operator\">===</span> <span class=\"token string\">'A'</span> <span class=\"token operator\">&amp;&amp;</span> value <span class=\"token operator\">===</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>check<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>cb<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> check<span class=\"token operator\">:</span> <span class=\"token string\">'A'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// A</span>\n\n<span class=\"token comment\">// 1. 두 번째 파라미터에 콜백 함수에서 this로 참조할 오브젝트를 작성한 형태</span>\n<span class=\"token comment\">// 2. 콜백 함수를 화살표 함수로 작성하면 콜백 함수에서 this가 window를 참조하므로 두 번째 파라미터의 오브젝트를 참조하지 못함</span>\n<span class=\"token comment\">// 3. 일반 함수를 작성해야 함</span></code></pre></div>\n</li>\n</ul>\n<br>\n<h2 id=\"2-findindex\" style=\"position:relative;\"><a href=\"#2-findindex\" aria-label=\"2 findindex permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. findIndex()</h2>\n<ul>\n<li>\n<p>배열의 엘리먼트를 하나씩 읽어가면서 콜백 함수 호출</p>\n<ul>\n<li>파라미터 : 엘리먼트, 인덱스, 배열 전체</li>\n<li>콜백 함수에서 <code class=\"language-text\">true</code> 반환하면 <code class=\"language-text\">findIndex()</code> 종료하면서</li>\n<li>현재 처리 중인 엘리먼트의 인덱스를 반환</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">cb</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> all</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> value <span class=\"token operator\">===</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">findeIndex</span><span class=\"token punctuation\">(</span>cb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n\n<span class=\"token comment\">// 1. [\"A\", \"B\", \"C\"]를 반복하면서 콜백 함수 호출</span>\n<span class=\"token comment\">// 2. 콜백 함수에서 엘리먼트 값이 B이면 true를 반환</span>\n<span class=\"token comment\">// 3. 콜백 함수에서 true를 반환하면 현재 처리 중인 엘리먼트의 인덱스를 반환하고 findIndex()를 종료</span></code></pre></div>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\">onst list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"C\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">cb</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> all</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> value <span class=\"token operator\">===</span> <span class=\"token number\">77</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span>cb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// -1</span>\n\n<span class=\"token comment\">// 1. 콜백 함수에서 조건에 맞는 값이 없으면 -1를 반환함</span>\n<span class=\"token comment\">// 2. indexOf(searchValue, fromIndex)는 값을 직접 지정할 수 있으며 검색을 시작할 인덱스를 지정할 수 있음</span>\n<span class=\"token comment\">// 3. 콜백 함수가 없으므로 다양한 조건으로 체크 불가</span>\n<span class=\"token comment\">// 4. 단, 값만으로 인덱스를 찾을 때는 indexOf()가 효율적</span>\n<span class=\"token comment\">// 5. includes(searchValue, fromIndex)는 true/false를 반환</span></code></pre></div>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1-find\">1. find()</a></li>\n<li><a href=\"#2-findindex\">2. findIndex()</a></li>\n</ul>\n</div>","excerpt":"1. find() 배열의 엘리먼트를 하나씩 읽어가면서 콜백 함수 호출 파라미터 : 엘리먼트, 인덱스, 배열 전체 콜백 함수에서 를 반환하면 를 종료하면서 현재 처리중인 엘리먼트 값을 반환 2. findIndex() 배열의 엘리먼트를 하나씩 읽어가면서 콜백 함수 호출 파라미터 : 엘리먼트, 인덱스, 배열 전체 콜백 함수에서  반환하면  종료하면서 현재 처리 중인 엘리먼트의 인덱스를 반환 1. find() 2. findIndex()","frontmatter":{"date":"October 02, 2021","title":"find(), findIndex()","categories":"JS","author":"Kay","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-array-4/"}},"next":{"id":"8a2b0e0d-56a4-5962-8f4e-d200e4f0365e","html":"<br>\n<h1 align=\"center\">\n  👋  배열 엘리먼트 복사, copyWithin()\n</h1>\n<br>\n<h2 id=\"1-copywithin\" style=\"position:relative;\"><a href=\"#1-copywithin\" aria-label=\"1 copywithin permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. copyWithin()</h2>\n<ul>\n<li>범위 값을 복사하여 같은 오브젝트에 설정</li>\n<li>\n<p>두 번째 파라미터의 인덱스부터 복사하여</p>\n<ul>\n<li>첫 번째 파라미터 인덱스 부터 순서대로 설정(대체)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'D'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'E'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> copy <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">copyWithin</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [A,D,E,D,E]</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>copy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [A,D,E,D,E]</span>\n\n<span class=\"token comment\">// list 배열이 대상임</span>\n<span class=\"token comment\">// 두 번 째 파라미터의 3번 인덱스부터 배열의 끝까지 복사하여</span>\n<span class=\"token comment\">// 첫 번째 파라미터의 1번 인덱스 부터 차례로 설정</span>\n<span class=\"token comment\">// D와 E를 복사하므로 엘리먼트가 2개이며</span>\n<span class=\"token comment\">// 1번 인덱스부터 2개를 대체 하므로 B가, D로, C가 E로 대체됨</span>\n<span class=\"token comment\">// 복사 대상에 대체하므로 반환된 Array 오브젝트와 복사 대상이 같음</span></code></pre></div>\n</li>\n<li>\n<p>세 번째 파라미터의 인덱스 직전까지 복사</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'D'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'E'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nlist<span class=\"token punctuation\">.</span><span class=\"token function\">copyWithin</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [C, D, C, D, E]</span>\n\n<span class=\"token comment\">// 두 번째 파라미터의 2번 인덱스 부터</span>\n<span class=\"token comment\">// 세 번째 파라미터의 4번 인덱스 직전까지 복사하여 list 배열의 0번 인덱스부터 설정</span>\n<span class=\"token comment\">// 2번 인덱스, 3번 인덱스를 복사하므로 C와 D를 복사하게 됨</span>\n<span class=\"token comment\">// A가 C로, B가 D로 대체됨</span></code></pre></div>\n</li>\n<li>복사 시작 인덱스와 끝 인덱스를 작성하지 않으면 배열 전체 복사</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'D'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'E'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nlist<span class=\"token punctuation\">.</span><span class=\"token function\">copyWithin</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [A,B,C,A,B]</span>\n\n<span class=\"token comment\">// list 배열 전체가 복사 대상임</span>\n<span class=\"token comment\">// 3번 인덱스부터 대체 함</span>\n<span class=\"token comment\">// 복사할 엘리먼트 수가 대체할 엘리먼트 수보다 많으면</span>\n<span class=\"token comment\">// 매치되는 인덱스만 값을 대체하고 남는 것은 대체하지 않음</span>\n<span class=\"token comment\">// D가 A로, E가 A로 대체됨</span></code></pre></div>\n<br>\n<h2 id=\"2-copywithin\" style=\"position:relative;\"><a href=\"#2-copywithin\" aria-label=\"2 copywithin permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. copyWithin()</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">copyWithin()</code> 함수의 특징</p>\n<ul>\n<li><code class=\"language-text\">shallow copy(얕은 복사)</code></li>\n<li>같은 배열 안에서 이동하는 개념</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">B</span><span class=\"token operator\">:</span> <span class=\"token string\">'가'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">copyWithin</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [{B: \"가\"}, C, C]</span>\n\n<span class=\"token comment\">// {B: \"가\"}를 복사 할 때 새로운 {B: \"가\"}를 만들지 않고 현재의 메모리 주소를 복사함</span>\n<span class=\"token comment\">// shallow copy(얕은 복사)라고 함</span>\n<span class=\"token comment\">// shallow copy는 값이 연동됨</span>\n<span class=\"token comment\">// 연동되지 않도록 하려면 Deep Copy를 해야 함</span></code></pre></div>\n<ul>\n<li>배열의 엘리먼트 수가 변동되지 않음</li>\n<li>배열 안에서 엘리먼트를 이동은 엘리먼트를 왼쪽, 오른쪽으로 이동하는 것(처리 속도가 빠름)</li>\n</ul>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1-copywithin\">1. copyWithin()</a></li>\n<li><a href=\"#2-copywithin\">2. copyWithin()</a></li>\n</ul>\n</div>","frontmatter":{"date":"October 01, 2021","title":"배열 엘리먼트 복사, copyWithin()","categories":"JS","author":"Kay","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-array-2/"}},"prev":{"id":"43d46169-b0e9-59d3-b0aa-9e9bcb9366f2","html":"<br>\n<h1 align=\"center\">\n  👋  Generic\n</h1>\n<br>\n<h2 id=\"generic\" style=\"position:relative;\"><a href=\"#generic\" aria-label=\"generic permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Generic</h2>\n<ul>\n<li>\n<p>스펙에서 아래 문장을 볼 수 있음</p>\n<ul>\n<li><code class=\"language-text\">copyWithin function is intentionally(의도적) generic</code></li>\n<li>ES7 스펙, 22.1.3.3 <code class=\"language-text\">copyWithin()</code></li>\n<li><code class=\"language-text\">MDN copyWithin()</code></li>\n</ul>\n</li>\n</ul>\n<br>\n<ul>\n<li>\n<p><code class=\"language-text\">generic</code> 사용 형태</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> like <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> length<span class=\"token operator\">:</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">copyWithin</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>like<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// {0: 10, 1: 20, 2: 30, length: 3};</span>\n\n<span class=\"token comment\">// 1. call()의 첫번째 파라미터에 Array-like를 작성했으며, Array-like 타입은 Object임</span>\n<span class=\"token comment\">// 2. copyWithin()이 Array 메소드이므로 Array를 넘겨주어야 하는데 Array-like를 넘겨주어도 처리가 됨</span>\n<span class=\"token comment\">// 3. 이것이 Generic임, copyWithin()은 Generic 함수 임</span>\n<span class=\"token comment\">// 4. 배열로 반환하지 않고 대상 오브젝트 형태로 반환함</span></code></pre></div>\n</li>\n</ul>\n<br>\n<ul>\n<li>\n<p><code class=\"language-text\">generic</code>의 뜻하는 것은?</p>\n<ul>\n<li><code class=\"language-text\">copyWithin()</code>이 <code class=\"language-text\">Array</code> 메소드이므로 <code class=\"language-text\">Array</code> 오브젝트가 처리 대상이지만</li>\n<li><code class=\"language-text\">generic</code>은 <code class=\"language-text\">Array</code> 오브젝트가 아닌 <code class=\"language-text\">Array-like</code>, <code class=\"language-text\">iterable object</code>를 처리할 수 있다는 것을 뜻함</li>\n</ul>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#generic\">Generic</a></li>\n</ul>\n</div>","frontmatter":{"date":"October 02, 2021","title":"Generic","categories":"JS","author":"Kay","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-array-3/"}},"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":"zoomkoding/zoomkoding-gatsby-blog"}}}}},"pageContext":{"slug":"/study-js-es6-array-4/","nextSlug":"/study-js-es6-array-2/","prevSlug":"/study-js-es6-array-3/"}},"staticQueryHashes":["1073350324","2938748437"]}