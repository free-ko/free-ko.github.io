{"componentChunkName":"component---src-templates-blog-template-js","path":"/study-js-es6-array-4/","result":{"data":{"cur":{"id":"ef43d290-5e72-5643-97d1-34b59ded1b5d","html":"<br>\n<h1 align=\"center\">\n  👋  find(), findIndex()\n</h1>\n<br>\n<h2 id=\"1-find\" style=\"position:relative;\"><a href=\"#1-find\" aria-label=\"1 find permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. find()</h2>\n<ul>\n<li>\n<p>배열의 엘리먼트를 하나씩 읽어가면서 콜백 함수 호출</p>\n<ul>\n<li>파라미터 : 엘리먼트, 인덱스, 배열 전체</li>\n<li>콜백 함수에서 <code class=\"language-text\">true</code>를 반환하면 <code class=\"language-text\">find()</code>를 종료하면서</li>\n<li>현재 처리중인 엘리먼트 값을 반환</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const list = [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;];\nconst cb = (value, index, all) =&gt; value === &#39;B&#39;;\nconst result = list.find(cb);\n\nconsole.log(result); // B\n\n// 1. [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;]를 반복하면서 콜백 함수 호출\n// 2. 콜백 함수에서 엘리먼트 값이 B이면 true를 반환\n// 3. 콜백 함수에서 true를 반환하면 현재 처리중인 엘리먼트 값인 B를 반환하고 find() 실행을 종료함\n// 4. 조건에 맞으면 find() 실행을 종료하므로 배열 앞에서 true가 되면 효율이 높음</code>\n        </deckgo-highlight-code>\n<br>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">onst list = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;];\nconst cb = (value, index, all) =&gt; value === 77;\nconst result = list.find(cb);\n\nconsole.log(result);\n\n// 1. 콜백 함수에서 조건에 맞는 값이 없으면 undefined를 반환함</code>\n        </deckgo-highlight-code>\n<br>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const list = [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;];\n\nfunction cb(value, index, all) {\n  return value === &#39;A&#39; &amp;&amp; value === this.check;\n}\n\nconst result = list.find(cb, { check: &#39;A&#39; });\n\nconsole.log(result); // A\n\n// 1. 두 번째 파라미터에 콜백 함수에서 this로 참조할 오브젝트를 작성한 형태\n// 2. 콜백 함수를 화살표 함수로 작성하면 콜백 함수에서 this가 window를 참조하므로 두 번째 파라미터의 오브젝트를 참조하지 못함\n// 3. 일반 함수를 작성해야 함</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<h2 id=\"2-findindex\" style=\"position:relative;\"><a href=\"#2-findindex\" aria-label=\"2 findindex permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. findIndex()</h2>\n<ul>\n<li>\n<p>배열의 엘리먼트를 하나씩 읽어가면서 콜백 함수 호출</p>\n<ul>\n<li>파라미터 : 엘리먼트, 인덱스, 배열 전체</li>\n<li>콜백 함수에서 <code class=\"language-text\">true</code> 반환하면 <code class=\"language-text\">findIndex()</code> 종료하면서</li>\n<li>현재 처리 중인 엘리먼트의 인덱스를 반환</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const list = [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;];\n\nconst cb = (value, index, all) =&gt; value === &#39;B&#39;;\n\nconsole.log(list.findeIndex(cb)); // 1\n\n// 1. [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;]를 반복하면서 콜백 함수 호출\n// 2. 콜백 함수에서 엘리먼트 값이 B이면 true를 반환\n// 3. 콜백 함수에서 true를 반환하면 현재 처리 중인 엘리먼트의 인덱스를 반환하고 findIndex()를 종료</code>\n        </deckgo-highlight-code>\n<br>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">onst list = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;];\nconst cb = (value, index, all) =&gt; value === 77;\nconst result = list.findIndex(cb);\n\nconsole.log(result);  // -1\n\n// 1. 콜백 함수에서 조건에 맞는 값이 없으면 -1를 반환함\n// 2. indexOf(searchValue, fromIndex)는 값을 직접 지정할 수 있으며 검색을 시작할 인덱스를 지정할 수 있음\n// 3. 콜백 함수가 없으므로 다양한 조건으로 체크 불가\n// 4. 단, 값만으로 인덱스를 찾을 때는 indexOf()가 효율적\n// 5. includes(searchValue, fromIndex)는 true/false를 반환</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","excerpt":"1. find() 배열의 엘리먼트를 하나씩 읽어가면서 콜백 함수 호출 파라미터 : 엘리먼트, 인덱스, 배열 전체 콜백 함수에서 를 반환하면 를 종료하면서 현재 처리중인 엘리먼트 값을 반환 2. findIndex() 배열의 엘리먼트를 하나씩 읽어가면서 콜백 함수 호출 파라미터 : 엘리먼트, 인덱스, 배열 전체 콜백 함수에서  반환하면  종료하면서 현재 처리 중인 엘리먼트의 인덱스를 반환","frontmatter":{"date":"October 02, 2021","title":"find(), findIndex()","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-array-4/"}},"next":{"id":"f8a5c3e4-1b9b-554b-ab76-750b7455ffef","html":"<br>\n<h1 align=\"center\">\n  👋  Generic\n</h1>\n<br>\n<h2 id=\"generic\" style=\"position:relative;\"><a href=\"#generic\" aria-label=\"generic permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Generic</h2>\n<ul>\n<li>\n<p>스펙에서 아래 문장을 볼 수 있음</p>\n<ul>\n<li><code class=\"language-text\">copyWithin function is intentionally(의도적) generic</code></li>\n<li>ES7 스펙, 22.1.3.3 <code class=\"language-text\">copyWithin()</code></li>\n<li><code class=\"language-text\">MDN copyWithin()</code></li>\n</ul>\n</li>\n</ul>\n<br>\n<ul>\n<li>\n<p><code class=\"language-text\">generic</code> 사용 형태</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const like = { 0: 10, 1: 20, 2: 30, length: 3 };\n\nconsole.log(Array.prototype.copyWithin.call(like, 1, 0));\n// {0: 10, 1: 20, 2: 30, length: 3};\n\n// 1. call()의 첫번째 파라미터에 Array-like를 작성했으며, Array-like 타입은 Object임\n// 2. copyWithin()이 Array 메소드이므로 Array를 넘겨주어야 하는데 Array-like를 넘겨주어도 처리가 됨\n// 3. 이것이 Generic임, copyWithin()은 Generic 함수 임\n// 4. 배열로 반환하지 않고 대상 오브젝트 형태로 반환함</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<ul>\n<li>\n<p><code class=\"language-text\">generic</code>의 뜻하는 것은?</p>\n<ul>\n<li><code class=\"language-text\">copyWithin()</code>이 <code class=\"language-text\">Array</code> 메소드이므로 <code class=\"language-text\">Array</code> 오브젝트가 처리 대상이지만</li>\n<li><code class=\"language-text\">generic</code>은 <code class=\"language-text\">Array</code> 오브젝트가 아닌 <code class=\"language-text\">Array-like</code>, <code class=\"language-text\">iterable object</code>를 처리할 수 있다는 것을 뜻함</li>\n</ul>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","frontmatter":{"date":"October 02, 2021","title":"Generic","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-array-3/"}},"prev":{"id":"492f979e-a5f3-5d0d-97a9-6fce4a69db73","html":"<br>\n<h1 align=\"center\">\n  👋  fill(), includes()\n</h1>\n<br>\n<h2 id=\"1-fill\" style=\"position:relative;\"><a href=\"#1-fill\" aria-label=\"1 fill permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. fill()</h2>\n<ul>\n<li>범위 값을 지정한 값으로 설정, 반환</li>\n<li>\n<p>설정 방법</p>\n<ul>\n<li>시작 인덱스부터 끝 인덱스 직전까지</li>\n<li>첫 번째 파라미터 값으로 설정(대체)</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const list = [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;];\nlist.fill(&#39;책&#39;, 1);\n\nconsole.log(list); // [A, 책, 책]\n\n// 1. 시작 인덱스를 작성하고 끝 인덱스를 작성하지 않으면\n// 2. 시작 인덱스 부터 끝까지가 대체 대상\n// 3. 첫 번째 파라미터 값인 &quot;책&quot;으로 대체 함</code>\n        </deckgo-highlight-code>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const list = [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;];\nlist.fill(&#39;책&#39;, 1, 3);\n\nconsole.log(list); // [A, 책, 책, D]\n\n// 1. 끝 인덱스를 작성하면\n// 시작 인덱스부터 끝(인덱스 -1) 까지 대체 대상</code>\n        </deckgo-highlight-code>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const list = [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;];\nlist.fill(&#39;책&#39;);\n\nconsole.log(list); // [책, 책, 책]\n\n// 1. 시작 인덱스와 끝 인덱스를 작성하지 않으면 전체가 대체 대상</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>Generic 함수</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const like = { 0: &#39;A&#39;, 1: &#39;B&#39;, 2: &#39;C&#39;, length: 3 };\n\nconsole.log(Array.prototype.fill.call(like, &#39;책&#39;, 1));\n\n// 1. Array-Like를 사용하여 대체 처리\n// 결과 : {0: A, 1: 책, 2: 책, length: 3}</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<h2 id=\"2-includes\" style=\"position:relative;\"><a href=\"#2-includes\" aria-label=\"2 includes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. includes()</h2>\n<ul>\n<li>\n<p>대상 배열에</p>\n<ul>\n<li>첫 번째 파라미터 값이 있으면 <code class=\"language-text\">true</code>, 없으면 <code class=\"language-text\">false</code>를 반환</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const list = [10, 20, 30];\n\nconsole.log(list.includes(10)); // true\nconsole.log(list.includes(50)); // false;\n\nconsole.log(list.includes(10, 1)); // false\n\n// 10이 있지만 1번 인덱스 부터 비교하므로 false 반환\n// 두 번째 파라미터에 음수를 작성하는 등의 값을 작성할 때의 처리는 MDN 참고</code>\n        </deckgo-highlight-code>\n<ul>\n<li>두 번째 파라미터는 선택이며 비교 시작 인덱스 작성</li>\n</ul>\n</li>\n<li>\n<p>제네릭 함수</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const like = { 0: 10, 1: 20, 2: 30, length: 3 };\n\nconsole.log(Array.prototype.includes.call(like, 20)); // true</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","frontmatter":{"date":"October 03, 2021","title":"fill(), includes()","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-array-5/"}},"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":"zoomkoding/zoomkoding-gatsby-blog"}}}}},"pageContext":{"slug":"/study-js-es6-array-4/","nextSlug":"/study-js-es6-array-3/","prevSlug":"/study-js-es6-array-5/"}},"staticQueryHashes":["1073350324","2938748437"]}