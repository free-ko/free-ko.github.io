{"componentChunkName":"component---src-templates-blog-template-js","path":"/study-js-es6-proxyTrap-3/","result":{"data":{"cur":{"id":"eafb77ad-b233-5475-9ff5-ab3aee807ec5","html":"<br>\n<h1 align=\"center\">\n  👋 get(), get() 트랩 호출, get() 트랩 준수사항\n</h1>\n<br>\n<h2 id=\"1-get\" style=\"position:relative;\"><a href=\"#1-get\" aria-label=\"1 get permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. get()</h2>\n<ul>\n<li>값을 구하는 트랩 : <code class=\"language-text\">target, receiver</code>에서 값을 구함</li>\n<li>\n<p><code class=\"language-text\">get()</code> 트랩이 호출되면 엔진이 실행 환경을 분석하여 파라미터 값을 설정</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> point<span class=\"token operator\">:</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> handler <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">get</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> receiver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> traget<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 300</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>bonus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// NaN</span>\n\n<span class=\"token comment\">// 1. console.log(obj.point); get() 트랩이 호출됨</span>\n<span class=\"token comment\">// 2. 트랩: gtet(target, key, receiver) {...} target에 target 오브젝트가 설정되고 key에 \"point\"가 설정됨, receiver에 Proxy 또는 Proxy를 상속받은 오브젝트가 설정됨</span>\n<span class=\"token comment\">// 3. 트랩: return target[key] + 200; target 오브젝트에서 point 값을 구하고 구한 값 100에 200을 더해 반환함</span>\n<span class=\"token comment\">// 4. console.log(obj.bonus); obj 인스턴스에 bonus가 없지만 obj에 get() 트랩이 있으면 호출함 bonus 프로퍼티의 존재를 체크하지 않음</span>\n<span class=\"token comment\">// 5. 트랩: return target[key] + 200; 에서 target[key]에서 \"bonus\"가 없으므로 undefined이며 200을 더하므로 NaN을 반환함</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">get()</code> 트랩 활용 형태 : 조건 체크</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> point<span class=\"token operator\">:</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> handler <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">get</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> receiver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> target<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>check <span class=\"token operator\">?</span> value <span class=\"token operator\">+</span> <span class=\"token number\">200</span> <span class=\"token operator\">:</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nhandler<span class=\"token punctuation\">.</span>check <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 300</span>\n\n<span class=\"token comment\">// 1. handler.check = true; get() 트랩에서 체크 값으로 사용함</span>\n<span class=\"token comment\">// 2. 트랩: return this.check ? value + 200 : value; this는 handler 오브젝트를 참조 함, check 값이 true이므로 200을 더해 반환함</span>\n<span class=\"token comment\">// 3. 이처럼 조건을 부여하여 값을 구할 때 호출하는 곳마다 조건 코드를 작성하지 않고 get() 트랩에 조건 코드를 작성하면 깨끗하게 코드를 관리할 수 있음</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">get()</code> 트랩 활용 형태 : 데이터 변경</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">let</span> target <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> point<span class=\"token operator\">:</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 아래에서 target 전체를 대체하므로 let 변수로 선언함</span>\n\n<span class=\"token keyword\">const</span> handler <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">get</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> receiver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> target<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> proxy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ntarget<span class=\"token punctuation\">.</span>point <span class=\"token operator\">=</span> <span class=\"token number\">300</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// target과 proxy.[[Target]]의 point 값이 바뀜</span>\n\ntarget <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> point<span class=\"token operator\">:</span> <span class=\"token number\">500</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1. target: '</span><span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">.</span>point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*\n\t1. target 오브젝트 전체를 바꿈 \n\t\t- target.point 값으로 500이 출력됨\n\n\t2. 한편, proxy.[[Target]].point는 바뀌지 않음\n\t\t- 즉, target.point는 500이고 proxy.[[Target]].point는 300임\n*/</span>\n\n<span class=\"token comment\">/*\n\ttarget = {point: 500};\n\n\t1. {point: 500}은 새로운 빌트인 Object를 생성함\n\n\t2. 새로운 메모리 주소를 target에 할당하므로\n\t\t- target이 참조하는 메모리 주소가 바뀌게 됨\n\t\n\t3. 이때, target의 바뀐 메모리 주소가 proxy.[[Target]] 반영되지 않음\n*/</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2. proxy: '</span><span class=\"token punctuation\">,</span> proxy<span class=\"token punctuation\">.</span>point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*\n\t1. get(target, key, receiver){...}에서\n\t\t- target에 바뀌기 전의 {point: 300}이 설정됨\n\t\t- 즉, 바뀐 target이 설정되지 않고 proxy.[[Target]]이 설정됨\n\n\t2. new Proxy(target, handler)로 인스턴스를 생성할 때\n\t\t- proxy.[[Target]]에 target의 메모리 주소를 설정하고 get() 트랩에서 이를 사용하여 target의 프로퍼티 값을 구하는 것이 됨\n*/</span>\n\nproxy<span class=\"token punctuation\">.</span>point <span class=\"token operator\">=</span> <span class=\"token number\">700</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'3. proxy: '</span><span class=\"token punctuation\">,</span> proxy<span class=\"token punctuation\">.</span>point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*\n\t1. proxy.[[Target]].point 값을 바꿈\n\t\t- 바뀐 값이 700이 출력됨\n*/</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'4. target: '</span><span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">.</span>point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*\n\t1. proxy.point = 700;으로 바꾼 값이 target에 반영되지 않음\n\n\t2. 일반적으로 target.point에도 값이 연동되어 반영되지만\n\t\t- 지금은 proxy.[[Target]]이 참조하는 메모리 주소와\n\t\t- target의 메모리 주소가 다르기 때문 임\n*/</span>\n\n<span class=\"token comment\">/*\n\t1. 결과적으로 target의 값을 프로퍼티 단위로 바꿔야 함\n\n\t2. 앞의 트랩에서 체크하는 코드를 함수로 만들고 target의 프로퍼티를 변경하는 것도 함수로 만들면 프레임워크 개념으로 사용할 수 있음\n*/</span></code></pre></div>\n</li>\n</ul>\n<br>\n<h2 id=\"2-get-트랩-호출\" style=\"position:relative;\"><a href=\"#2-get-%ED%8A%B8%EB%9E%A9-%ED%98%B8%EC%B6%9C\" aria-label=\"2 get 트랩 호출 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. get() 트랩 호출</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">get()</code> 트랩이 호출되는 형태</p>\n<ul>\n<li><code class=\"language-text\">proxy[key]</code></li>\n<li><code class=\"language-text\">Object.create(proxy, {프로퍼티})</code></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> point<span class=\"token operator\">:</span> <span class=\"token number\">600</span><span class=\"token punctuation\">,</span> bonus<span class=\"token operator\">:</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> handler <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> receiver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> target<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> proxy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>proxy<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  point<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token number\">500</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 500</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>bonus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 300</span>\n\n<span class=\"token comment\">// 1. console.log(obj.point); Object.create(proxy, {...}의 두 번째 파라미터에 point를 작성했음</span>\n<span class=\"token comment\">// 2. 즉, point가 인스턴스 프로퍼티이므로 get() 트랩을 호출하지 않고 point 프로퍼티 값 500을 반환함</span>\n<span class=\"token comment\">// 3. get() 트랩을 호출하면 target에 {point: 600}이 있으므로 600이 반환됨</span>\n<span class=\"token comment\">// 4. console.log(obj.bonus); Object.create(proxy, {...}의 두번째 파라미터에 bonus를 작성하지 않았으므로 get(0 트랩이 호출 됨</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">Reflect.get()</code></li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"3-get-트랩-준수사항\" style=\"position:relative;\"><a href=\"#3-get-%ED%8A%B8%EB%9E%A9-%EC%A4%80%EC%88%98%EC%82%AC%ED%95%AD\" aria-label=\"3 get 트랩 준수사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. get() 트랩 준수사항</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">target</code> 의 프로퍼티가 <code class=\"language-text\">data</code> 디스크립터일 때</p>\n<ul>\n<li><code class=\"language-text\">[[Writable]]: false</code> 또는 <code class=\"language-text\">[[Configurable]]: false</code> 이면 반환 값을 변경하여 <code class=\"language-text\">return</code> 불가</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> <span class=\"token string\">'point'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  value<span class=\"token operator\">:</span> <span class=\"token number\">500</span><span class=\"token punctuation\">,</span>\n  writable<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> handler <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> receiver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// return target[key] + 200;</span>\n    <span class=\"token keyword\">return</span> target<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 500</span>\n\n<span class=\"token comment\">// 1. {value: 500, writable: false} target 오브젝트의 point 프로퍼티는 {writable: false} 임</span>\n<span class=\"token comment\">// 2. 트랩: // return target[key] + 200; 프로퍼티가 {writable: false}일 때 target[key]로 구한 값을 반환해야 함</span>\n<span class=\"token comment\">// 3. 트랩처럼 구한 값에 값을 더해 return 하면 에러가 발생 함</span>\n<span class=\"token comment\">// 4. {writable: true}이면 return 값을 변경할 수 있음</span>\n<span class=\"token comment\">// 5. get() 트랩에서 try-catch를 사용할 수 없음</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">target</code> 의 프로퍼티가 악세서 디스크립터일 때</p>\n<ul>\n<li><code class=\"language-text\">[[Configurable]]: false</code> 이면 반환 값을 변경하여 <code class=\"language-text\">return</code> 불가</li>\n</ul>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1-get\">1. get()</a></li>\n<li><a href=\"#2-get-%ED%8A%B8%EB%9E%A9-%ED%98%B8%EC%B6%9C\">2. get() 트랩 호출</a></li>\n<li><a href=\"#3-get-%ED%8A%B8%EB%9E%A9-%EC%A4%80%EC%88%98%EC%82%AC%ED%95%AD\">3. get() 트랩 준수사항</a></li>\n</ul>\n</div>","excerpt":"1. get() 값을 구하는 트랩 : 에서 값을 구함  트랩이 호출되면 엔진이 실행 환경을 분석하여 파라미터 값을 설정  트랩 활용 형태 : 조건 체크  트랩 활용 형태 : 데이터 변경 2. get() 트랩 호출  트랩이 호출되는 형태    3. get() 트랩 준수사항  의 프로퍼티가  디스크립터일 때  또는  이면 반환 값을 변경하여  불가  의 프로퍼티가 악세서 디스크립터일 때  이면 반환 값을 변경하여  불가 1. get() 2. get() 트랩 호출 3. get() 트랩 준수사항","frontmatter":{"date":"November 30, 2021","title":"get(), get() 트랩 호출, get() 트랩 준수사항","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-proxyTrap-3/"}},"next":{"id":"2993b36b-e2c8-5296-bfc8-ed5b2b1c65d9","html":"<br>\n<h1 align=\"center\">\n  👋 set()의 4번째 파라미터, set()과 this\n</h1>\n<br>\n<h2 id=\"1-set의-4번째-파라미터\" style=\"position:relative;\"><a href=\"#1-set%EC%9D%98-4%EB%B2%88%EC%A7%B8-%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0\" aria-label=\"1 set의 4번째 파라미터 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. set()의 4번째 파라미터</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">set()</code> 트랩의 4번째 파라미터에 <code class=\"language-text\">Proxy</code> 인스턴스가 설정됨</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> point<span class=\"token operator\">:</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> hanlder <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">set</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> receiver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token keyword\">is</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> receiver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>receiver<span class=\"token punctuation\">.</span>point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">.</span>point <span class=\"token operator\">=</span> <span class=\"token number\">500</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1. obj.point = 500; set() 트랩이 호출됨</span>\n<span class=\"token comment\">// 2. 트랩: set(target, key, value, receiver){...} set() 트랩의 receiver 파라미터에 obj.point = 500의 obj가 설정됨. 즉, Proxy 인스턴스가 설정됨</span>\n<span class=\"token comment\">// 3. 트랩: console.log(Object.is(target, receiver)); target과 receiver가 같지 않으므로 false가 출력됨</span>\n<span class=\"token comment\">// 4. 트랩: console.log(receiver.point), receiver(Proxy 인스턴스)에 get() 트랩이 없으므로 target의 [[Get]]을 호출하며, 100을 반환함</span>\n<span class=\"token comment\">// 5. 500이 반환되지 않는 이유는 기본 오퍼레이션 생각</span>\n\n<span class=\"token comment\">// 실행결과</span>\n<span class=\"token comment\">// false</span>\n<span class=\"token comment\">// 100</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">const obj = Object.create(proxy, {프로퍼티})</code></p>\n<ul>\n<li>4번째 파라미터에 <code class=\"language-text\">Object.create()</code>로 생성한 인스턴스가 설정됨</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> handler <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> receiver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    target<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value <span class=\"token operator\">+</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\n    target<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> receiver<span class=\"token punctuation\">.</span>title <span class=\"token operator\">+</span> <span class=\"token string\">' ,JS'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> proxy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>proxy<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  title<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token string\">'책'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nobj<span class=\"token punctuation\">.</span>point <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 책</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 책, JS</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">Object.create()</code>와 인스턴스 구조</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> point<span class=\"token operator\">:</span> <span class=\"token number\">500</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> handler <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">set</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> receiver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  target<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value <span class=\"token operator\">+</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\n  target<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> receiver<span class=\"token punctuation\">.</span>title <span class=\"token operator\">+</span> <span class=\"token string\">' ,JS'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> proxy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*\n\t1. Proxy 인스턴스를 생성하여 proxy 변수에 할당함\n\t\n\t2. proxy에 [[Handler]]가 있으며, 그 안에 set() 트랩이 있음\n\t\t- [[Target]]이 있으며, 그 안에 {point: 500}이 있음\n*/</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>proxy<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\ntitle<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token string\">'책'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*\n\t1. create() 함수는 두 번째 파라미터로 인스턴스를 생성하고\n\t\t- {title: \"책}을 인스턴스 프로퍼티로 설정함\n\t\n\t2. 생성한 인스턴스의 __proto__에 첫 번째 파라미터를 첨부함\n\t\t- [[Handler]]의 set() 트랩과\n\t\t- [[Target]]의 {point: 500}을 사용할 수 있게 됨\n*/</span>\n\nobj<span class=\"token punctuation\">.</span>point <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// obj.__proto__에 연결된 [[Handler]]의 set() 트랩이 호출 됨</span>\n\n<span class=\"token comment\">/*\n\tset(target, key, value, receiver) {...}\n\t\n\t1. receiver 파라미터에 obj가 설정됨\n\t\t- receiver에서 title: {value: \"책}을 참조할 수 있으며\n\t\t- [[Handler]]와 [[Target]]을 참조할 수 있음\n\n\t2. 이처럼 set() 트랩에서 Proxy 이외의 다른 오브젝트를 참조할 수 있음\n*/</span>\n\n<span class=\"token comment\">/*\n\ttarget[key] = value + 200;\n\t\n\t1. value 값 100에 200을 더해 target의 key(\"point\")에 할당함\n\t\t- target 오브젝트의 point 프로퍼티 값이 300으로 바뀜\n*/</span>\n\n<span class=\"token comment\">/*\n\ttarget.title = receiver.title + \", JS\";\n\n\t1. receiver(obj 인스턴스)에 title 프로퍼티가 있으며\n\t\t- 값은 \"책\" 임\n\n\t2. target 오브젝트의 title 프로퍼티에 연결한 문자열을 설정함\n\t\t- 이때, target이 아닌 receiver에 값을 설정하면 receiver가 읽기 전용이므로 에러가 발생함\n*/</span>\n\n<span class=\"token comment\">/*\n\treturn true;\n\t\n\t1. return true;는 호출한 곳으로 true를 반환하는 것이 아니라 엔진에게 성공적으로 처리된 것을 알려주는 것\n*/</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>titlt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*\n\t1. obj를 펼치면 인스턴스 프로퍼티로 {title: \"책}이 있으며\n\t\t- [[Target]]에 {title: \"책, JS\"}가 있음\n\t\t\n\t2. 인스턴스 구조의 위에서부터 검색하므로 인스턴스 프로퍼티 값인 \"책\"이 반환됨\n*/</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*\n\t1. Proxy가 아닌 target 오브젝트의 [[Get]]을 호출 함\n\t\t- 따라서 \"책, JS\"가 출력됨\n*/</span></code></pre></div>\n</li>\n</ul>\n<br>\n<h2 id=\"2-set과-this\" style=\"position:relative;\"><a href=\"#2-set%EA%B3%BC-this\" aria-label=\"2 set과 this permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. set()과 this</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">set()</code> 트랩에서 <code class=\"language-text\">this</code> 는 <code class=\"language-text\">handler</code> 오브젝트를 참조 함</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> point<span class=\"token operator\">:</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> handler <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\npoint<span class=\"token operator\">:</span> <span class=\"token number\">123</span><span class=\"token punctuation\">,</span>\n<span class=\"token function\">set</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> receiver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>book <span class=\"token operator\">=</span> <span class=\"token string\">'책'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">.</span>point <span class=\"token operator\">=</span> <span class=\"token number\">500</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>handler<span class=\"token punctuation\">.</span>book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// this가 handler 오브젝트를 참조하므로 handler의 {point: 123}에서 123를 반환 함</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// thisrk handler의 오브젝트를 참조하므로 handler의 {book: \"책\"}이 설정됨</span></code></pre></div>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1-set%EC%9D%98-4%EB%B2%88%EC%A7%B8-%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0\">1. set()의 4번째 파라미터</a></li>\n<li><a href=\"#2-set%EA%B3%BC-this\">2. set()과 this</a></li>\n</ul>\n</div>","frontmatter":{"date":"November 29, 2021","title":"set()의 4번째 파라미터, set()과 this","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-proxyTrap-2/"}},"prev":{"id":"8cf81bc1-413f-54fa-ad43-72a1ad3e64f7","html":"<br>\n<h1 align=\"center\">\n  👋 has() 트랩, deleteProperty() 트랩\n</h1>\n<br>\n<h2 id=\"1-has\" style=\"position:relative;\"><a href=\"#1-has\" aria-label=\"1 has permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. has()</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">in</code> 연산자의 트랩임</p>\n<ul>\n<li><code class=\"language-text\">target</code> 에 <code class=\"language-text\">key</code> 의 존재 여부를 반환함</li>\n<li>프로퍼티 값을 <code class=\"language-text\">true/false</code>로 변환하여 반환함</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> point<span class=\"token operator\">:</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> handler <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> target<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'point'</span> <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'booK'</span> <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n\n<span class=\"token comment\">// 1. console.log(\"point\" in obj); has() 트랩이 호출됨</span>\n<span class=\"token comment\">// 2. has(target, key){...} target이 target에, \"point\"가 key에 설정됨</span>\n<span class=\"token comment\">// 3. return target[key]; target에 point가 있으며 값은 100임</span>\n<span class=\"token comment\">// 4. 이때, 100을 그대로 return하지 않고 true/false로 변환하여 return함</span>\n<span class=\"token comment\">// 5. 100은 true로 변환하므로 true를 반환함 0을 true/false로 변환하여 false임</span>\n<span class=\"token comment\">// 6. console.log(\"booK\" in obj); obj에 book이 없지만, has() 트랩을 호출함</span>\n<span class=\"token comment\">// 7. return target[key]; undefined를 반환하게 되지만 undefined를 false로 변환하여 반환 함</span></code></pre></div>\n<ul>\n<li>두 번째 파라미터에 <code class=\"language-text\">Symbol</code> 작성 가능</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"2-has-트랩-호출\" style=\"position:relative;\"><a href=\"#2-has-%ED%8A%B8%EB%9E%A9-%ED%98%B8%EC%B6%9C\" aria-label=\"2 has 트랩 호출 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. has() 트랩 호출</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">has()</code> 트랩이 호출되는 형태</p>\n<ul>\n<li><code class=\"language-text\">key in proxy</code></li>\n<li><code class=\"language-text\">ke in Object.create(proxy, {프로퍼티})</code></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> point<span class=\"token operator\">:</span> <span class=\"token number\">600</span><span class=\"token punctuation\">,</span> bonus<span class=\"token operator\">:</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> handler <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> target<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> proxy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>proxy<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  point<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token number\">500</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'point'</span> <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bonus'</span> <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n\n<span class=\"token comment\">// 1. console.log(\"point\" in obj); obj 인스턴스 프로퍼티로 point가 있으므로 has() 트랩을 호출하지 않음</span>\n<span class=\"token comment\">// 2. point 값 500을 반환하지 않고 true/false로 변환하여 반환하므로 ture가 반환됨</span>\n<span class=\"token comment\">// 3. console.log(\"bonus\" in obj); obj 인스턴스 프로퍼티로 bonus가 없으므로 has() 트랩을 호출 함</span>\n<span class=\"token comment\">// 4. has() 트랩에서 target[key]의 값은 100이며 100을 true/false로 변환하면 true임</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">Reflect.has()</code></li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"3-has-트랩-준수사항\" style=\"position:relative;\"><a href=\"#3-has-%ED%8A%B8%EB%9E%A9-%EC%A4%80%EC%88%98%EC%82%AC%ED%95%AD\" aria-label=\"3 has 트랩 준수사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. has() 트랩 준수사항</h2>\n<ul>\n<li>\n<p>오브젝트에 프로퍼티가 있으면서</p>\n<ul>\n<li>오브젝트가 프로퍼티 추가 금지이거나 <code class=\"language-text\">[[Configurable]]: flase</code> 이면</li>\n<li><code class=\"language-text\">false</code> 를 지정하여 반환할 수 없지만 <code class=\"language-text\">ture</code> 는 지정하여 반환 할 수 있음</li>\n</ul>\n</li>\n<li>\n<p>강제로 <code class=\"language-text\">ture/false</code> 를 반환하지 않고 <code class=\"language-text\">has()</code> 트랩에서 구한 값을 <code class=\"language-text\">ture/false</code> 로 변환하여 반환 함</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> point<span class=\"token operator\">:</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">preventExtensions</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> handler <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  consle<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'has 트랩 실행'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// return false;</span>\n  <span class=\"token keyword\">return</span> target<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'point'</span> <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1. Object.preventExtensions(target); target 오브젝트를 프로퍼티 추가 금지 상태로 설정함</span>\n<span class=\"token comment\">// 2. console.log(\"point\" in obj); 추가 금지 상태라도 has() 트랩이 호출 됨</span>\n<span class=\"token comment\">// 3. // reuturn false; 추가 금지 상태에서 false를 지정하여 반환하면 에러가 발생함 그래서 주석으로 처리 했음</span>\n<span class=\"token comment\">// 4. return target[key]; has() 트랩에서 구한 값을 true/false로 변환하여 반환하면 에러가 나지 않음</span>\n\n<span class=\"token comment\">// 실행결과</span>\n<span class=\"token comment\">// has 트랩 실행</span>\n<span class=\"token comment\">// true</span></code></pre></div>\n</li>\n</ul>\n<br>\n<h2 id=\"4-deleteproperty\" style=\"position:relative;\"><a href=\"#4-deleteproperty\" aria-label=\"4 deleteproperty permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. deleteProperty()</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">delete</code> 연산자의 트랩임</p>\n<ul>\n<li>오브젝트의 프로퍼티를 삭제함</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> point<span class=\"token operator\">:</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> handler <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">deleteProperty</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token keyword\">in</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">delete</span> target<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> ture<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">delete</span> obj<span class=\"token punctuation\">.</span>point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">delete</span> obj<span class=\"token punctuation\">.</span>point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">delete</span> target<span class=\"token punctuation\">.</span>point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n\n<span class=\"token comment\">// 1. console.log(delete obj.point) deleteProperty() 트랩이 호출 됨</span>\n<span class=\"token comment\">// 2. if(key in target) {...} target 오브젝트에 point 프로퍼티가 있으므로 point 프로퍼티를 삭제하고 ture를 반환함</span>\n<span class=\"token comment\">// 3. console.log(target.point) 트랩에서 point 프로퍼티를 삭제했으므로 undefined가 출력됨</span>\n<span class=\"token comment\">// 4. console.log(delete obj.point); deleteProperty() 트랩이 호출됨 트랩에서 target에 point 프로퍼티가 없으므로 false를 반환 함</span>\n<span class=\"token comment\">// 5. console.log(delete target.point); deleteProperty() 트랩이 호출되지 않음 [[Delete]]가 호출됨 일반적으로 delete 처리임</span></code></pre></div>\n</li>\n<li><code class=\"language-text\">delete</code> 연산자는 프로퍼티가 없어도 <code class=\"language-text\">true</code>를 반환하므로 코드처럼 조건을 체크하여 <code class=\"language-text\">true/false</code>를 반환하면 완전하게 처리할 수 있음</li>\n</ul>\n<br>\n<h2 id=\"4-deleteproperty-트랩-호출\" style=\"position:relative;\"><a href=\"#4-deleteproperty-%ED%8A%B8%EB%9E%A9-%ED%98%B8%EC%B6%9C\" aria-label=\"4 deleteproperty 트랩 호출 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. deleteProperty() 트랩 호출</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">deleteProprerty()</code> 트랩이 호출되는 형태</p>\n<ul>\n<li><code class=\"language-text\">delete[key]</code></li>\n<li><code class=\"language-text\">Reflect.deleteProperty()</code></li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"5-deleteproperty-트랩-준수사항\" style=\"position:relative;\"><a href=\"#5-deleteproperty-%ED%8A%B8%EB%9E%A9-%EC%A4%80%EC%88%98%EC%82%AC%ED%95%AD\" aria-label=\"5 deleteproperty 트랩 준수사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. deleteProperty() 트랩 준수사항</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">target</code> 오브젝트의 프로퍼티가</p>\n<ul>\n<li><code class=\"language-text\">[[Configurable]]: false</code> 이면 프로퍼티를 삭제할 수 없으며 에러가 발생함</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nObje<span class=\"token punctuation\">.</span><span class=\"token function\">ctdefinedProperty</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> <span class=\"token string\">\"point\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\tvalue<span class=\"token operator\">:</span> <span class=\"token number\">500</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">,</span> configurable<span class=\"token operator\">:</span> flase\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> handler <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">deleteProperty</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">const</span> descriptor <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyDescriptor</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>descriptor<span class=\"token punctuation\">.</span>configurable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">delete</span> target<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>delte obj<span class=\"token punctuation\">.</span>point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// false</span>\n\n<span class=\"token comment\">// 1. console.log(delete obj.point) deleteProeprty() 트랩이 호출됨</span>\n<span class=\"token comment\">// 2. Object.getWonPropertyDescriptor(target, key); point 프로퍼티의 디스크립터를 구함</span>\n<span class=\"token comment\">// 3. if(descriptor.configurable){...} configurable이 ture이면 삭제할 수 있으며 point 프로퍼티를 삭제하고 true를 반환함</span>\n<span class=\"token comment\">// 4. 한편, {configurable: false}이므로 false를 반환함</span></code></pre></div>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1-has\">1. has()</a></li>\n<li><a href=\"#2-has-%ED%8A%B8%EB%9E%A9-%ED%98%B8%EC%B6%9C\">2. has() 트랩 호출</a></li>\n<li><a href=\"#3-has-%ED%8A%B8%EB%9E%A9-%EC%A4%80%EC%88%98%EC%82%AC%ED%95%AD\">3. has() 트랩 준수사항</a></li>\n<li><a href=\"#4-deleteproperty\">4. deleteProperty()</a></li>\n<li><a href=\"#4-deleteproperty-%ED%8A%B8%EB%9E%A9-%ED%98%B8%EC%B6%9C\">4. deleteProperty() 트랩 호출</a></li>\n<li><a href=\"#5-deleteproperty-%ED%8A%B8%EB%9E%A9-%EC%A4%80%EC%88%98%EC%82%AC%ED%95%AD\">5. deleteProperty() 트랩 준수사항</a></li>\n</ul>\n</div>","frontmatter":{"date":"December 01, 2021","title":"has() 트랩, deleteProperty() 트랩","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-proxyTrap-4/"}},"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":"zoomkoding/zoomkoding-gatsby-blog"}}}}},"pageContext":{"slug":"/study-js-es6-proxyTrap-3/","nextSlug":"/study-js-es6-proxyTrap-2/","prevSlug":"/study-js-es6-proxyTrap-4/"}},"staticQueryHashes":["1073350324","2938748437"]}