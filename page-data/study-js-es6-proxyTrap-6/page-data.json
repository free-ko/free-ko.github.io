{"componentChunkName":"component---src-templates-blog-template-js","path":"/study-js-es6-proxyTrap-6/","result":{"data":{"cur":{"id":"3b98e1b5-c7b5-5fc0-a4d4-a96ac0d2f46a","html":"<br>\n<h1 align=\"center\">\n  👋 getPrototypeof(), setPrototypeof() 트랩\n</h1>\n<br>\n<h2 id=\"1-getprototypeof\" style=\"position:relative;\"><a href=\"#1-getprototypeof\" aria-label=\"1 getprototypeof permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. getPrototypeof()</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">[[GetPrototypeOf]]</code> 의 트랩임</p>\n<ul>\n<li><code class=\"language-text\">target</code> 의 <code class=\"language-text\">prototype</code>을 반환</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">class Point {\n  getPoint() {\n    return 100;\n  }\n}\n\nconst handler = {\n  getPrototypeOf(target) {\n    return target.prototype;\n  },\n};\n\nconst obj = new Proxy(Point, handler);\nconst proto = Object.getPrototypeOf(obj);\n\nconsole.log(proto.getPoint); // getPoint(){return 100;}\n\n// 1. const obj = new Proxy(Point, handler); 첫 번째 파라미터에 Point 클래스를 작성했음, 트랩에서 Point.prototype을 구하기 위해서 obj.[[Target]]에서 Point 클래스가 설정됨\n// 2. const proto = Object.getPrototypeOf(obj); getProtytpeOf() 트랩이 호출됨\n// 3. 트랩: getPrototypeOf(target){} target에 Point 클래스가 설정됨\n// 4. 트랩: return target.prototype; Popoint.prototype을 반환함\n// 5. console.log(proto.getPoint); Point.prototype에 getPoint()가 있으므로 메소드 코드가 출력됨</code>\n        </deckgo-highlight-code>\n<ul>\n<li><code class=\"language-text\">target</code> 이 확장 불가라도 <code class=\"language-text\">prototype</code>을 반환 함</li>\n<li><code class=\"language-text\">String</code>, <code class=\"language-text\">Number</code> 처럼 값을 반환하면 <code class=\"language-text\">TypeError</code></li>\n</ul>\n</li>\n<li>\n<p>트랩 준수 사항</p>\n<ul>\n<li><code class=\"language-text\">target</code> 이 확장 불가일 때</li>\n<li><code class=\"language-text\">Object.getPrototypeOf(target)</code> 와 같은 값을 반환해야 함</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"2-getprototypeof-트랩-호출\" style=\"position:relative;\"><a href=\"#2-getprototypeof-%ED%8A%B8%EB%9E%A9-%ED%98%B8%EC%B6%9C\" aria-label=\"2 getprototypeof 트랩 호출 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. getPrototypeOf() 트랩 호출</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">getPrototypeOf()</code> 트랩이 호출되는 형태</p>\n<ul>\n<li><code class=\"language-text\">Object.getPrototypeOf()</code></li>\n<li><code class=\"language-text\">__proto__</code></li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">class Point {\n  getPoint() {\n    return 100;\n  }\n}\n\nconst handler = {\n  getPrototyepOf(target) {\n    return this.list ? Array.prototype : target.prototype;\n  },\n};\n\nconst obj = new Proxy(Point, handler);\nhandler.list = true;\n\nconst proto = obj.__proto__;\n\nconsole.log(proto.map); // function map() {[native code]}\n\n// 1. handler.list = true; getPrototypeOf() 트랩에서 체크 값으로 사용함\n// 2. const proto = obj.__proto__, getPrototypeOf 트랩이 호출됨 트랩에서 Array.prototype을 반환함\n// 3. console.log(proto.map) map 메소드가 있으므로 코드가 출력됨\n// 4. 조건에 따라 반환되는 prototype을 바꿀 수 있음</code>\n        </deckgo-highlight-code>\n<ul>\n<li><code class=\"language-text\">instanceof</code></li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">class Point {\n\tgetPoint(){return 100;}\n};\n\nconst handler = {\n\tgetPrototypeOf(target) {\n\t\treturn Point.rptotype;\n\t}\n};\n\nconst target = new Point();\nconsole.log(targetinstanceof Point);  // true\nconsole.log(Point.prototype instanceof Point);   // false\n\nconst obj = new Proxy(target, handler);\nconsole.log(obj instanceof Point);   // true\n\n// 1. console.log(target instanceof Point) target을 Point로 만들었으므로 true가 출력됨\n// 2. console.log(Point.protytpe instanceof Point) Point.prototype이 인스턴스가 아니므로 false가 출력됨\n// 3. console.log(obj instanceof Point) getPrototypeOf() 트랩이 호출됨 트랩에서 Point.prototype을 반환함\n// 4. (Point.prototype instanceof Point) 형태가 되므로 false가 출력되어야 하는데 ture가 출력됨</code>\n        </deckgo-highlight-code>\n<ul>\n<li><code class=\"language-text\">Object.prototype.isPrototypeOf()</code></li>\n<li><code class=\"language-text\">Reflect.getPrototypeOf()</code></li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"3-setprototypeof\" style=\"position:relative;\"><a href=\"#3-setprototypeof\" aria-label=\"3 setprototypeof permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. setPrototypeOf()</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">Object.setPrototypeOf()</code> 특징</p>\n<ul>\n<li><code class=\"language-text\">target</code>의 <code class=\"language-text\">__proto__</code> 에 두 번째 파라미터를 설정함</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">class Book {\n  setTitle() {\n    return &#39;책&#39;;\n  }\n}\nclass Point {\n  getPOint() {\n    return &#39;100&#39;;\n  }\n}\nObject.setPrototypeOf(Book, Point.prototype);\n\nconsole.log(Book.prototype.getPOint); // undefined\nconsole.log(Book.__proto__.getPoint); // getPoint() {return 100;}\n\nconst obj = new Book();\nconsole.log(obj.getPoint); // undefined\n\n// 1. Object.setPrototypeOf(Book, Point.rptotyep); Book.__proto__에 있는 Function.prototype이 Point.prototype으로 대체됨\n// 2. console.log(Book.prototype.getPoint) Book.__proto__에 설정되므로 undfined가 출력됨\n// 3. Book.__protot__.getPoint getPoint() 코드가 출력됨\n// 4. console.log(obj.getPoint) Book.prototype으로 인스턴스를 생성하므로 obj 인스턴스에 getPoint가 없음</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p><code class=\"language-text\">Object.setPrototypeOf()</code> 의 트랩임</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">class Book {\nsetTitle() {\n  return &#39;책&#39;;\n}\n}\nclass Point {\ngetPOint() {\n  return &#39;100&#39;;\n}\n}\nconst handler = {\nsetPrototypeOf(target, proto) {\n  Object.setPrototypeOf(target, proto);\n  return true;\n},\n};\n\nconst obj = new Proxy(Book, handler);\nObject.setPrototypeOf(obj, Point.prototype);\n\nconsole.log(Book.prototype.getPoint); // undefined\nconsole.log(Book.__proto__.getPOint); // getPoint(){ return 100; }\nconsole.log(obj.getPoint); // getPoint(){ return 100; }\n\n// 1. Object.setPrototypeOf(obj, Point.prototype); setPrototypeOf() 트랩이 호출됨\n// 2. 트랩: setPrototypeOf(target, proto){...} target에 Book 클래스가 설정되고 proto에 Point.prototype이 설정됨\n// 3. 트랩: Ojbect.setPrototypeOf(target, proto); Book.__proto__와 obj.[[Target]].__proto__가 Point.prototype으로 대체됨\n// 4. true를 반환하지 않으면 에러가 발생함\n// 5. console.log(Book.prototype.getPoint) undefined가 출력되며, Point.prototype이 Book.prototype에 설정되지 않기 때문\n// 6. console.log(Book.__proto__.getPoint) getPoint 코드가 출력됨\n// 7. console.log(obj.getPoint) getPoint 코드가 출력되며 obj.[[Target]].__proto__에 getPoint가 있기 때문</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>트랩 준수 사항</p>\n<ul>\n<li><code class=\"language-text\">target</code> 이 확장 불가 일 때</li>\n<li>두 번째 파라미터의 <code class=\"language-text\">prototype</code>과 <code class=\"language-text\">Object.getPrototypeOf(target)</code>로 구한 것과 같아야 함</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"4-setprototypeof-트랩-호출\" style=\"position:relative;\"><a href=\"#4-setprototypeof-%ED%8A%B8%EB%9E%A9-%ED%98%B8%EC%B6%9C\" aria-label=\"4 setprototypeof 트랩 호출 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. setPrototypeOf() 트랩 호출</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">setPrototypeOf()</code> 트랩이 호출되는 형태</p>\n<ul>\n<li><code class=\"language-text\">Object.setPrototypeOf()</code></li>\n<li><code class=\"language-text\">Reflect.setPrototypeOf()</code></li>\n</ul>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","excerpt":"1. getPrototypeof()  의 트랩임  의 을 반환  이 확장 불가라도 을 반환 함 ,  처럼 값을 반환하면  트랩 준수 사항  이 확장 불가일 때  와 같은 값을 반환해야 함 2. getPrototypeOf() 트랩 호출  트랩이 호출되는 형태      3. setPrototypeOf()  특징 의  에 두 번째 파라미터를 설정함  의 트랩임 트랩 준수 사항  이 확장 불가 일 때 두 번째 파라미터의 과 로 구한 것과 같아야 함 4. setPrototypeOf() 트랩 호출  트랩이 호출되는 형태","frontmatter":{"date":"December 03, 2021","title":"getPrototypeof(), setPrototypeof() 트랩","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-proxyTrap-6/"}},"next":{"id":"d2dbe2b8-70bb-590e-b566-a24fb01358b8","html":"<br>\n<h1 align=\"center\">\n  👋 defineProperty(), preventExtensions() , isExtensible() 트랩\n</h1>\n<br>\n<h2 id=\"1-defineproperty\" style=\"position:relative;\"><a href=\"#1-defineproperty\" aria-label=\"1 defineproperty permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. defineProperty()</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">Object.defineProperty()</code> 의 트랩임</p>\n<ul>\n<li>\n<p><code class=\"language-text\">target</code> 에 프로퍼티를 추가하거나 속성값을 변경함</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const target = {};\nconst handler = {\n  defineProperty(target, key, desc) {\n    if (desc.value &gt; 0) {\n      desc.value = desc.value * -1;\n    }\n    Object.defineProperty(target, key, desc);\n    return true;\n  },\n};\n\nconst proxy = new Proxy(target, handler);\nObject.defineProperty(proxy, &#39;point&#39;, {\n  value: 100,\n  writable: true,\n});\n\nconsole.log(target.point);\n-100;\n\n// 1. Object.defineProperty(obj, &quot;point&quot;, {...}, defineProperty() 트랩이 호출됨\n// 2. 트랩: defineProperty(target, key, desc){...} desc에 {...}에 작성한 디스크립터가 설정됨\n// 3. 트랩: if(desc.value &gt; 0){...}, value 속성값이 100이며, 0보다 크므로 100에 -1을 곱해 -100으로 바꿈\n// 4. 트랩에서 속성 값을 바꿀 수 있음</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"2-defineproperty-트랩-호출\" style=\"position:relative;\"><a href=\"#2-defineproperty-%ED%8A%B8%EB%9E%A9-%ED%98%B8%EC%B6%9C\" aria-label=\"2 defineproperty 트랩 호출 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. defineProperty() 트랩 호출</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">defineProperty()</code> 트랩이 호출되는 형태</p>\n<ul>\n<li><code class=\"language-text\">Object.defineProperty()</code></li>\n<li><code class=\"language-text\">Reflect.defineProperty()</code></li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"3-defineproperty-트랩-준수사항\" style=\"position:relative;\"><a href=\"#3-defineproperty-%ED%8A%B8%EB%9E%A9-%EC%A4%80%EC%88%98%EC%82%AC%ED%95%AD\" aria-label=\"3 defineproperty 트랩 준수사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. defineProperty() 트랩 준수사항</h2>\n<br>\n<ul>\n<li><code class=\"language-text\">strict mode</code> 일 때 트랩에서 <code class=\"language-text\">false</code> 를 반환하여 <code class=\"language-text\">TypeError</code></li>\n<li>\n<p><code class=\"language-text\">target</code> 오브젝트가 확장 불가이면 프로퍼티를 추가 할 수 없음</p>\n<ul>\n<li><code class=\"language-text\">Object.preventExtensions(target);</code></li>\n</ul>\n</li>\n<li><code class=\"language-text\">target</code> 오브젝트의 프로퍼티가 <code class=\"language-text\">[[Writable]]: false</code> 또는 <code class=\"language-text\">[[Configurable]]: false</code> 이면 프로퍼티 값을 변경할 수 없음</li>\n</ul>\n<br>\n<h2 id=\"4-preventextensions\" style=\"position:relative;\"><a href=\"#4-preventextensions\" aria-label=\"4 preventextensions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. preventExtensions()</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">Object.preventExtensions()</code> 트랩임</p>\n<ul>\n<li><code class=\"language-text\">target</code> 오브젝트에 오브젝트의 확장 금지를 설정함</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const target = { point: 100 };\nconst handler = {\npreventExtensions(target) {\n  if (target.point) {\n    Object.preventExtensions(target);\n    return true;\n  }\n  return false;\n},\n};\n\nconst proxy = new Proxy(target, handler);\nconst obj = Object.preventExtensions(proxy);\n\nconsole.log(obj.point); // 100\nconsole.log(Object.isExtensible(target)); // false\n\n// 1. const obj = Object.preventExtensions(proxy); preventExtensions() 트랩이 호출됨\n// 2. 트랩: if(target.point){...} point에 값이 있을 때만 확장 금지를 설정하기 위해 비교한 것\n// 3. 트랩에서 true를 반환하면 true를 반환하지 않고 Proxy 인스턴스를 반환함\n// 4. console.log(obj.point); Proxy 인스턴스의 point 프로퍼티 값을 출력함\n// 5. console.log(Object.isExtensible(target)) 확장 불가 상태이므로 false를 반환함</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<h2 id=\"5-preventextensions-트랩-호출\" style=\"position:relative;\"><a href=\"#5-preventextensions-%ED%8A%B8%EB%9E%A9-%ED%98%B8%EC%B6%9C\" aria-label=\"5 preventextensions 트랩 호출 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. preventExtensions() 트랩 호출</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">preventExtensions()</code> 트랩이 호출되는 형태</p>\n<ul>\n<li><code class=\"language-text\">Object.preventExtensions()</code></li>\n<li><code class=\"language-text\">Reflect.preventExtensions()</code></li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"6-preventextensions-트랩-준수-사항\" style=\"position:relative;\"><a href=\"#6-preventextensions-%ED%8A%B8%EB%9E%A9-%EC%A4%80%EC%88%98-%EC%82%AC%ED%95%AD\" aria-label=\"6 preventextensions 트랩 준수 사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. preventExtensions() 트랩 준수 사항</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">target</code> 오브젝트가 확장 불가 일 때</p>\n<ul>\n<li>즉, <code class=\"language-text\">Object.isExtensible(target)</code> 결과가 <code class=\"language-text\">false</code>일 때</li>\n<li><code class=\"language-text\">false</code> 를 반환하면 <code class=\"language-text\">TypeError</code>, <code class=\"language-text\">true</code> 만 반환할 수 있음</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"7-isextensible\" style=\"position:relative;\"><a href=\"#7-isextensible\" aria-label=\"7 isextensible permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>7. isExtensible()</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">Object.isExtensible()</code> 트랩임</p>\n<ul>\n<li><code class=\"language-text\">targe</code>의 확장 가능 여부를 반환 함</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const target = { point: 100 };\nconst handler = {\n  isExtensible(target) {\n    return Object.isExtensible(target);\n  },\n};\n\nconst obj = new Proxy(target, handler);\nconsole.log(Object.isExtensible(obj)); // true\n\nObject.seal(target);\nconsole.log(Object.isExtensible(obj)); // false\n\n// 1. console.log(Object.isExtensible(obj)); isExtensible() 트랩이 호출됨\n// 2. target 오브젝트가 확장 가능 상태이므로 true를 반환함\n// 3. Object.seal(target); target 오브젝트를 확장 불가 상태로 설정 함\n// 4. console.log(Object.isExtensible(obj)) 확장 불가 상태이므로 false를 반환함</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p><code class=\"language-text\">false</code> 를 반환하는 오브젝트 상태</p>\n<ul>\n<li><code class=\"language-text\">Object.seal()</code></li>\n<li><code class=\"language-text\">Object.freeze()</code></li>\n<li><code class=\"language-text\">Object.preventExtensions()</code></li>\n<li><code class=\"language-text\">Reflect.preventExtensions()</code></li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"8-isextensible-트랩-호출\" style=\"position:relative;\"><a href=\"#8-isextensible-%ED%8A%B8%EB%9E%A9-%ED%98%B8%EC%B6%9C\" aria-label=\"8 isextensible 트랩 호출 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>8. isExtensible() 트랩 호출</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">isExtensible()</code> 트랩이 호출되는 형태</p>\n<ul>\n<li><code class=\"language-text\">Object.isExtensible()</code></li>\n<li><code class=\"language-text\">Relfect.isExtensible()</code></li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"9isextensible-트랩-준수-사항\" style=\"position:relative;\"><a href=\"#9isextensible-%ED%8A%B8%EB%9E%A9-%EC%A4%80%EC%88%98-%EC%82%AC%ED%95%AD\" aria-label=\"9isextensible 트랩 준수 사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>9.isExtensible() 트랩 준수 사항</h2>\n<ul>\n<li><code class=\"language-text\">Object.isExtensible(target)</code> 결과와 같은 값을 반환해야 함</li>\n<li>즉, 결과를 바꿀 수 없음</li>\n<li>같지 않으면 <code class=\"language-text\">TypeError</code>가 발생함</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","frontmatter":{"date":"December 02, 2021","title":"defineProperty(), preventExtensions() , isExtensible() 트랩","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-proxyTrap-5/"}},"prev":{"id":"acb64fd3-6c22-5de1-b15a-9b50a53b6231","html":"<br>\n<h1 align=\"center\">\n  👋 construct(), apply(), ownKeys(), getOwnPropertyDescriptor() 트랩\n</h1>\n<br>\n<h2 id=\"1-construct\" style=\"position:relative;\"><a href=\"#1-construct\" aria-label=\"1 construct permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. construct()</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">new</code> 연산자의 트랩임</p>\n<ul>\n<li>인스턴스를 생성하여 반환함</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">class Point {\n  constructor(point) {\n    this.point = point;\n  }\n}\n\nconst handler = {\n  construct(target, args, proxy) {\n    let point = args[0];\n    if (Object.is(args[1], &#39;add&#39;)) {\n      point += args[2];\n    }\n    return new target(point);\n  },\n};\n\nconst obj = new Proxy(Point, handler);\nconst pointObj = new obj(100, &#39;add&#39;, 300);\n\nconsole.log(pointobj.point); // 400\n\n// 1. const obj = new Proxy(Point, handler); Point 클래스로 Proxy 인스턴스를 생성함\n// 2. const pointObj = new obj(100, &quot;add&quot;, 300); construct() 트랩이 호출됨\n// 3. 트랩: construct(target, args, proxy) {...}\n//\t\t- target에 Point 클래스가 설정되고\n//\t\t- args에 [100, &quot;add&quot;, 300] 형태로 설정됨\n//    - proxy에 new Proxy()로 생성한 obj 인스턴스가 설정됨\n// 4. construct(){...} 트랩처리 Point 클래스의 constructor를 호출하기 전에 조건에 따라 인스턴스의 초깃값을 정리 함\n// 5. 트랩을 호출할 때마다 정리하지 않고 트랩에서 일괄적으로 정리하면 효율이 높음\n// 6. 트랩을 이렇게 활용할 수 있음</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p><code class=\"language-text\">construct()</code> 트랩이 호출되는 형태</p>\n<ul>\n<li><code class=\"language-text\">const obj = new Proxy(Point, handler);</code></li>\n<li><code class=\"language-text\">new obj</code>를 실행할 때 호출</li>\n<li><code class=\"language-text\">Reflect.construct()</code></li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"2-apply\" style=\"position:relative;\"><a href=\"#2-apply\" aria-label=\"2 apply permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. apply()</h2>\n<ul>\n<li>\n<p>함수 호출 트랩임</p>\n<ul>\n<li><code class=\"language-text\">Proxy</code> 인스턴스 호출로 트랩이 실행된 형태 임</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">function getPoint(...values) {\n  return values.map((value) =&gt; {\n    return value + 10;\n  });\n}\n\nconst handler = {\n  apply(target, that, params) {\n    return target.apply(this.params);\n  },\n};\n\nconst obj = new Proxy(getPoint, handler);\n\nconsole.log(obj(100, 200)); // [110, 210]\n\n// 1. console.log(obj(100, 200)); obj는 Proxy 인스턴스이며 이를 호출하면 apply() 트랩이 호출됨\n// 2. 트랩: apply(target, that, params){...} target에 getPoint 함수가 설정됨\n// 3. Proxy 인스턴스 호출로 인해 트랩이 실행되면 that에 값이 설정되지 않음</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<h2 id=\"3-apply-트랩-호출\" style=\"position:relative;\"><a href=\"#3-apply-%ED%8A%B8%EB%9E%A9-%ED%98%B8%EC%B6%9C\" aria-label=\"3 apply 트랩 호출 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. apply() 트랩 호출</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">apply()</code> 트랩이 호출되는 형태</p>\n<ul>\n<li><code class=\"language-text\">Function.prototype.apply()</code></li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">function getPoint(...values) {\n  return values.map((value) =&gt; {\n    return value + this.bonus;\n  });\n}\n\nconst handler = {\n  apply(target, that, params) {\n    return target.apply(that, params);\n  },\n};\n\nconst obj = new Proxy(getPoint, handler);\nconst add = { bonus: 10 };\n\nconsole.log(obj.apply(add, [100, 200])); // [110, 210]\n\n// 1. console.log(obj.apply(add, [100, 200])); apply() 호출하면 apply() 트랩이 호출됨\n// 2. 첫 번째 파라미터에 getPoint()에서 this로 참조할 오브젝트를 작성함\n// 3. 두 번째 파라미터에 getPoint()로 넘겨 줄 파라미터 값을 작성함\n// 4. 트랩: apply(target, that, params){...} target에 getPoint 함수가 설정되고 that에 add 오브젝트가 설정됨 prams에 [100, 200]이 설정됨</code>\n        </deckgo-highlight-code>\n<ul>\n<li><code class=\"language-text\">Function.prototype.call()</code></li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">function getPoint(...values) {\n  return values.map((value) =&gt; {\n    return value + this.bonus;\n  });\n}\n\nconst handler = {\n  apply(target, that, ...params) {\n    return target.apply(that, parms);\n  },\n};\n\nconst obj = new Proxy(getPoint, handler);\nconst add = { bonus: 10 };\nconsole.log(obj.call(add, 100, 200)); // [110, 210]\n\n// 1. obj.call(add, 100, 200) call() 호출하면 apply 트랩이 호출됨\n// 2. 첫 번째 파라미터에 getPoint()에서 this로 참조할 오브젝트를 작성함\n// 3. 두 번째 파라미터 이후에 getPoint()로 넘겨 줄 파라미터 값을 작성함\n// 4. call() 호출이므로 두 번째 파라미터 이후에 콤마로 구분하여 값을 작성함\n// 5. 트랩: apply(target, that, ...params){...} target에 getPoint 함수가 설정되고 that에 add 오브젝트가 설정됨 params에 [100, 200]이 설정됨</code>\n        </deckgo-highlight-code>\n<ul>\n<li><code class=\"language-text\">proxy(...args): Proxy</code> 인스턴스</li>\n<li><code class=\"language-text\">Reflect.apply()</code></li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"4-ownkeys\" style=\"position:relative;\"><a href=\"#4-ownkeys\" aria-label=\"4 ownkeys permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. ownKeys()</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">Object.getOwnPropertyNames()</code> 의 트랩임</p>\n<ul>\n<li><code class=\"language-text\">target</code>의 모든 <code class=\"language-text\">key</code>를 배열로 반환함</li>\n<li><code class=\"language-text\">[[Configurable]]: false</code> 이거나 오브젝트가 확장 불가라도 반환함</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const target = {};\nObject.defineProperties(target, {\n  point: { value: 100, enumerable: true },\n  bonus: { value: 200 },\n});\n\nconst handler = {\n  ownKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  },\n};\n\nconst obj = new Proxy(target, handler);\n\nconsole.log(Object.getOwnPropertyNames(obj)); // [point, bonus]\nconsole.log(Object.keys(obj)); // [point]\n\n// 1. console.log(Object.getOwnPropertyNames(obj)); ownKeys() 트랩이 호출됨\n// 2. 트랩: return Object.getOwnPropertyNames(target); target 오브젝트의 모든 프로퍼티 key를 반환함\n// 3. console.log(Object.keys(obj)); 트랩을 호출하며, 모든 프로퍼티 key를 반환함\n// 4. 한편, Object.keys()는 {enumerable: false}인 프로퍼티는 반환하지 않음 그래서 point만 출력됨</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p><code class=\"language-text\">ownKeys()</code> 트랩이 호출되는 형태</p>\n<ul>\n<li><code class=\"language-text\">Object.getOwnPropertyNmaes()</code></li>\n<li><code class=\"language-text\">Object.getOwnPropertySymbols()</code></li>\n<li><code class=\"language-text\">Object.keys()</code></li>\n<li><code class=\"language-text\">Reflect.ownKeys()</code></li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"5-getownpropertydescriptor\" style=\"position:relative;\"><a href=\"#5-getownpropertydescriptor\" aria-label=\"5 getownpropertydescriptor permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. getOwnPropertyDescriptor()</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">Object.getOwnPropertyDescriptor()</code> 트랩임</p>\n<ul>\n<li>프로퍼티 디스크립터를 반환함</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const target = {};\nObject.defineProperty(target, &#39;point&#39;, {\n  value: 100,\n  configurable: true,\n});\n\nconst handler = {\n  getOwnPropertyDescriptor(target, key) {\n    const desc = Object.getOwnPropertyDescriptor(target, key);\n\n    if (desc.configurable) {\n      return { value: 300, configurable: true };\n    }\n    return desc;\n  },\n};\n\nconst obj = new Proxy(target, handler);\n\nconsole.log(Object.getOwnPropertyDescriptor(obj, &#39;point&#39;)); // {value: 300, writable: false, enumerable: false, configurable: true}\n\n// 1. console.log(Object.getOwnPropertyDescriptor(obj, &quot;point&quot;)); 트랩이 호출됨\n// 2. 트랩: if(desc.configurable){...} 디스크립터의 configurable 값이 true이면 value 속성 값을 바꾸어 반환함\n// 3. point 프로퍼티 {configurable: true}이므로 트랩에서 값을 바꾸어 반환할 수 있음 {configurable: false} 일 때는 바꿀 수 없음</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p><code class=\"language-text\">getOwnPropertyDescriptor()</code> 트랩이 호출되는 형태</p>\n<ul>\n<li><code class=\"language-text\">Object.getOwnPropertyDescriptor()</code></li>\n<li><code class=\"language-text\">Reflect.getOwnPropertyDescriptor()</code></li>\n</ul>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","frontmatter":{"date":"December 04, 2021","title":"construct(), apply(), ownKeys(), getOwnPropertyDescriptor() 트랩","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-proxyTrap-7/"}},"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":"zoomkoding/zoomkoding-gatsby-blog"}}}}},"pageContext":{"slug":"/study-js-es6-proxyTrap-6/","nextSlug":"/study-js-es6-proxyTrap-5/","prevSlug":"/study-js-es6-proxyTrap-7/"}},"staticQueryHashes":["1073350324","2938748437"]}