{"componentChunkName":"component---src-templates-blog-template-js","path":"/study-js-es6-Symbol-1/","result":{"data":{"cur":{"id":"ecc64ad2-854c-517e-8434-5f6a390d1947","html":"<br>\n<h1 align=\"center\">\n  👋  primitive 값, wrapper 오브젝트\n</h1>\n<h2 id=\"1-primitive-값\" style=\"position:relative;\"><a href=\"#1-primitive-%EA%B0%92\" aria-label=\"1 primitive 값 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Primitive 값</h2>\n<ul>\n<li>JS에서 <code class=\"language-text\">Primitive</code> 값은 오브젝트가 아니라 값이며 함수를 갖고 있지 않음</li>\n<li>\n<p><code class=\"language-text\">const num = 100;</code> 을 할당하면</p>\n<ul>\n<li><code class=\"language-text\">num</code> 변수에 100만 할당되며 아무것도 첨부되지 않음</li>\n<li>100이 <code class=\"language-text\">primitive</code> 값</li>\n</ul>\n</li>\n<li>\n<p>ES5의 <code class=\"language-text\">primitive</code> 값 타입</p>\n<ul>\n<li><code class=\"language-text\">string</code>, <code class=\"language-text\">number</code>, <code class=\"language-text\">boolean</code>, <code class=\"language-text\">null</code>, <code class=\"language-text\">undefined</code></li>\n</ul>\n</li>\n<li>ES6에서 <code class=\"language-text\">symbol</code> 타입추가</li>\n</ul>\n<br>\n<h2 id=\"2-wrapper-오브젝트\" style=\"position:relative;\"><a href=\"#2-wrapper-%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8\" aria-label=\"2 wrapper 오브젝트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Wrapper 오브젝트</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">wrapper</code> 오브젝트는?</p>\n<ul>\n<li>프리미티브 값이 포함된 오브젝트</li>\n<li><code class=\"language-text\">wrapper</code> 오브젝트에는 메소드가 있음</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">wrapper</code> 오브젝트가 있는 프리미티브 값 타입</p>\n<ul>\n<li>stiring : String, number : Number 오브젝트</li>\n<li>boolean : Boolean, symbol : Symbol 오브젝트</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">const obj = new String(100);</code></p>\n<ul>\n<li>obj 인스턴스의 <code class=\"language-text\">[[PrimitiveValue]]</code> 에 100이 설정됨</li>\n<li><code class=\"language-text\">[[PrimitiveValue]]</code> 형태</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> sports <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n\t1. 오른쪽의 sports를 펼치면\n\n\t2. [[PrimitiveValue]]: \"100\"이 있음\n      - [[PrimitiveValue]]가 프리미티브 값을 나타내는\n      - 프로퍼티 이름이며, \"100\"이 프로퍼티 값\n\n\t3. sports가 wrapper 오브젝트 임\n*/</span>\n\n<span class=\"token keyword\">const</span> sym <span class=\"token operator\">=</span> Symbol<span class=\"token punctuation\">{</span><span class=\"token string\">\"ABC\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n\t1. sports를 펼치면 [[PrimitiveValue]]가 표시 되지만\n\n\t2. sym은 펼칠 수가 없으며\n    - [[PrimitiveValue]]가 표시되지 않음\n\n\t3. 그렇다고 Symbol에 Primitive 값이 없는 것이 아니며\n\n\t4. 이것은 Symbol은 Primitive 값을\n\t- 외부에 노출시키지 않는 특성 때문\n*/</span></code></pre></div>\n</li>\n<li><code class=\"language-text\">undefined</code>, <code class=\"language-text\">null</code>은 <code class=\"language-text\">wrapper</code> 오브젝트 없음</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1-primitive-%EA%B0%92\">1. Primitive 값</a></li>\n<li><a href=\"#2-wrapper-%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8\">2. Wrapper 오브젝트</a></li>\n</ul>\n</div>","excerpt":"1. Primitive 값 JS에서  값은 오브젝트가 아니라 값이며 함수를 갖고 있지 않음  을 할당하면  변수에 100만 할당되며 아무것도 첨부되지 않음 100이  값 ES5의  값 타입 , , , ,  ES6에서  타입추가 2. Wrapper 오브젝트  오브젝트는? 프리미티브 값이 포함된 오브젝트  오브젝트에는 메소드가 있음  오브젝트가 있는 프리미티브 값 타입 stiring : String, number : Number 오브젝트 boolean : Boolean, symbol : Symbol 오브젝트  obj 인스턴스의  에 100이 설정됨  형태 , 은  오브젝트 없음 1. Primitive 값 2. Wrapper 오브젝트","frontmatter":{"date":"October 18, 2021","title":"primitive 값, wrapper 오브젝트","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-Symbol-1/"}},"next":{"id":"58bb17ab-d900-5385-a20c-7c64f3038d04","html":"<br>\n<h1 align=\"center\">\n  👋  yield* 표현식\n</h1>\n<h2 id=\"code-classlanguage-textyieldcode\" style=\"position:relative;\"><a href=\"#code-classlanguage-textyieldcode\" aria-label=\"code classlanguage textyieldcode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">yield*</code></h2>\n<ul>\n<li><code class=\"language-text\">Syntax: yield*</code> 표현식</li>\n<li><code class=\"language-text\">yield*</code> 의 표현식에 따라 처리하는 방법이 다름</li>\n<li>\n<p><code class=\"language-text\">yield*</code>의 표현식이 배열</p>\n<ul>\n<li><code class=\"language-text\">next()</code> 로 호출할 때마다 배열의 엘리먼트를 하나씩 처리</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">sports</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">yield</span><span class=\"token operator\">*</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token function\">sports</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1. 첫 번째의 obj.next()를 호출하면 yield* [10,20]에서 10을 반환함 {value: 10, done: false} 반환</span>\n<span class=\"token comment\">// 2. 두 번째의 obj.next()를 호출하면 yield* [10,20]에서 20을 반환함 {value: 20, done: false} 반환</span>\n<span class=\"token comment\">// 3. yield*의 표현식이 배열이면 next()를 호출할 때마다 배열의 엘리먼트를 순서대로 반환함</span></code></pre></div>\n</li>\n</ul>\n<br>\n<ul>\n<li>\n<p><code class=\"language-text\">yield*</code>의 표현식이 제너레이터 함수</p>\n<ul>\n<li>함수의 <code class=\"language-text\">yield</code>를 먼저 처리</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">point</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">count</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">yield</span> count <span class=\"token operator\">+</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">yield</span> count <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">sports</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">yield</span><span class=\"token operator\">*</span> <span class=\"token function\">point</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">yield</span> value <span class=\"token operator\">+</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token function\">sports</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {value: 15, done: false}</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {value: 20, done: false}</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {value: 30, done: false}</span>\n\n<span class=\"token comment\">// 1. 첫 번째의 obj.next()를 호출하면 yield* point(value)를 실행합니다.</span>\n<span class=\"token comment\">// 2. yield*의 표현식에 함수를 작성했으므로 point(value)를 호출함, point()가 제너레이터 함수이므로 우선, 제너레이터 오브젝트를 생성함</span>\n<span class=\"token comment\">// 3. next()로 호출해야 yield가 수행되지만 자동적으로 point() 첫 번째의 yield count+5를 수행함, {value: 15, done: false} 반환</span>\n<span class=\"token comment\">// 4. 다시 point()를 호출한 곳에서 반환 값을 받아 반환함</span>\n<span class=\"token comment\">// 5. 두 번째의 obje.next()를 호출함 point()의 yield count +10를 실행 함 {value: 20, done: false} 반환</span>\n<span class=\"token comment\">// 6. 세 번째의 obj.next()를 호출함 point()의 yield를 모두 처리 했으므로 sports()의 yield value +20을 실행하며 {value: 30, done: false} 반환</span></code></pre></div>\n</li>\n</ul>\n<br>\n<ul>\n<li>\n<p><code class=\"language-text\">yield*</code> 표현식에서 자신 호출</p>\n<ul>\n<li>재귀 호출</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">sports</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">point</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">yield</span> point<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">yield</span><span class=\"token operator\">*</span> <span class=\"token function\">sports</span><span class=\"token punctuation\">(</span>point <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token function\">sports</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {value: 10, done: false}</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {value: 20, done: false}</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {value: 30, done: false}</span>\n\n<span class=\"token comment\">// 1. 첫 번째의 obj.next()를 호출하면 yield point를 실행 {value: 10, done: false} 반환</span>\n<span class=\"token comment\">// 2. 두 번째의 obj.next()를 호출함, yield* sports(point + 10)에서 자신을 호출 함, 첫 번째 줄의 yield point를 실행 {value: 20, done: false} 반환</span>\n<span class=\"token comment\">// 3. 세 번째의 obj.next()를 호출함, yield* sports(point + 10)에서 자신을 호출 함, 첫 번째 줄의 yield point를 실행 {value: 30, done: false} 반환</span>\n<span class=\"token comment\">// 4. 주의 : yield point가 없으면 무한 반복 함</span></code></pre></div>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#yield\"><code class=\"language-text\">yield*</code></a></li>\n</ul>\n</div>","frontmatter":{"date":"October 17, 2021","title":"yield* 표현식","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-Generator-8/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":"zoomkoding/zoomkoding-gatsby-blog"}}}}},"pageContext":{"slug":"/study-js-es6-Symbol-1/","nextSlug":"/study-js-es6-Generator-8/","prevSlug":""}},"staticQueryHashes":["1073350324","2938748437"]}