{"componentChunkName":"component---src-templates-blog-template-js","path":"/study-js-es6-array-6/","result":{"data":{"cur":{"id":"c494ff70-31c5-535d-813b-1f5ec6540936","html":"<br>\n<h1 align=\"center\">\n  👋  flat(), flatMap()\n</h1>\n<br>\n<h2 id=\"1-flat\" style=\"position:relative;\"><a href=\"#1-flat\" aria-label=\"1 flat permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. flat()</h2>\n<ul>\n<li>\n<p>배열 차원을 변환하고 새로운 배열로 설정하여 반환</p>\n<ul>\n<li>파라미터의 대상 깊이에 따라 변환이 다름</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const list = [1, 2, [3, 4]];\nconst result = list.falt();\n\nconsole.log(result); // [1,2,3,4]\nconsole.log(list); // [1,2,[3,4]]\n\n// 1. flat() 파라미터에 값을 작성하지 않으면 디폴트 값은 1\n// 2. 파라미터에 1을 더하면 2차원이 되며, 2차원까지를 엘리먼트로 변환\n// 3. [1,2]는 1,2가 되며, [[3,4]]도 3,4가 됨\n// 4. 변환한 엘리먼트를 새로운 배열에 설정하여 반환함, 따라서 1차원 배열의 엘리먼트로 설정됨\n// 5. flat() 대상인 list 배열은 바뀌지 않음</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>파라미터에 <code class=\"language-text\">0</code>을 작성한 경우</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const list = [1, 2, [3, 4]];\nconsole.log(list.flat(0));\n\n// 1. 파라미터 값에 0에 1을 더하면 1임\n// 2. [1,2]는 1, 2가 되며 배열에 설정하여 반환하므로 [1,2]가 됨\n// 3. [[3,4]]는 [3,4]가 되며 배열에 설정하여 반환하므로 [[3,4]]가 됨</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>파라미터에 <code class=\"language-text\">1보다 큰 값</code>을 작성</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const list = [1, 2, [3, 4, [5, [6]]]];\nconsole.log(list.flat(2)); // [1,2,3,4,5,[6]];\n\n// 1. 파라미터에 1을 더한 3차원까지 엘리먼트로 변환하므로 [[[5]]]까지 변환함\n// 2. 4차원인 6은 4차원에서 3차원을 빼면 1차원이 됨, 즉 [6]으로 변환됨\n// 배열에 설정하여 반환하므로 [[6]]이 됨</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>빈 엘리먼트를 삭제</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const list = [1, 2, , , , [3, 4]];\nconsole.log(list.length); // 6\n\nconst change = list.flat();\nconsole.log(change); // [1,2,3,4]\nconsole.log(change.length); // 4</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<h2 id=\"2-flatmap\" style=\"position:relative;\"><a href=\"#2-flatmap\" aria-label=\"2 flatmap permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. flatMap()</h2>\n<ul>\n<li><code class=\"language-text\">flat()</code> 와 기본 기능은 같음</li>\n<li>\n<p>배열을 반복하면서 콜백 함수 호출</p>\n<ul>\n<li>파라미터 : 엘리먼트, 인덱스, 배열 전체</li>\n<li>콜백 함수에서 반환한 값을 배열로 반환</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const list = [10, 20];\nconst cb = (element, index, all) =&gt; {\nreturn element + 5;\n};\n\nconsole.log(list.flatMap(cb)); // [15, 25]\nconsole.log(list.map(cb)); // [15, 25]\n\n// 콜백 함수에서 파라미터로 넘겨준 값을 단지 값만 변경하여 반환하면\n// map()과 flatMap()의 차이가 없음</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p><code class=\"language-text\">map()</code> 과 차이</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const list = [10, 20];\nconst cb = (element, index, all) =&gt; {\nreturn [element + 5];\n};\n\nconsole.log(list.flatMap(cb)); // [15, 25]\nconsole.log(list.map(cb)); // [[15], [25]]\n\n// 1. 콜백 함수에서 배열로 반환\n// 2. map() 반환된 배열을 새로운 배열에 설정하여 반환하므로 2차원이 배열이 되지만\n// 3. flatMap()은 반환된 값을 1차원 줄여서 반환함\n// 4. 이것이 map()과 flatMap()차이</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","excerpt":"1. flat() 배열 차원을 변환하고 새로운 배열로 설정하여 반환 파라미터의 대상 깊이에 따라 변환이 다름 파라미터에 을 작성한 경우 파라미터에 을 작성 빈 엘리먼트를 삭제 2. flatMap()  와 기본 기능은 같음 배열을 반복하면서 콜백 함수 호출 파라미터 : 엘리먼트, 인덱스, 배열 전체 콜백 함수에서 반환한 값을 배열로 반환  과 차이","frontmatter":{"date":"October 04, 2021","title":"flat(), flatMap()","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-array-6/"}},"next":{"id":"492f979e-a5f3-5d0d-97a9-6fce4a69db73","html":"<br>\n<h1 align=\"center\">\n  👋  fill(), includes()\n</h1>\n<br>\n<h2 id=\"1-fill\" style=\"position:relative;\"><a href=\"#1-fill\" aria-label=\"1 fill permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. fill()</h2>\n<ul>\n<li>범위 값을 지정한 값으로 설정, 반환</li>\n<li>\n<p>설정 방법</p>\n<ul>\n<li>시작 인덱스부터 끝 인덱스 직전까지</li>\n<li>첫 번째 파라미터 값으로 설정(대체)</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const list = [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;];\nlist.fill(&#39;책&#39;, 1);\n\nconsole.log(list); // [A, 책, 책]\n\n// 1. 시작 인덱스를 작성하고 끝 인덱스를 작성하지 않으면\n// 2. 시작 인덱스 부터 끝까지가 대체 대상\n// 3. 첫 번째 파라미터 값인 &quot;책&quot;으로 대체 함</code>\n        </deckgo-highlight-code>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const list = [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;];\nlist.fill(&#39;책&#39;, 1, 3);\n\nconsole.log(list); // [A, 책, 책, D]\n\n// 1. 끝 인덱스를 작성하면\n// 시작 인덱스부터 끝(인덱스 -1) 까지 대체 대상</code>\n        </deckgo-highlight-code>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const list = [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;];\nlist.fill(&#39;책&#39;);\n\nconsole.log(list); // [책, 책, 책]\n\n// 1. 시작 인덱스와 끝 인덱스를 작성하지 않으면 전체가 대체 대상</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>Generic 함수</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const like = { 0: &#39;A&#39;, 1: &#39;B&#39;, 2: &#39;C&#39;, length: 3 };\n\nconsole.log(Array.prototype.fill.call(like, &#39;책&#39;, 1));\n\n// 1. Array-Like를 사용하여 대체 처리\n// 결과 : {0: A, 1: 책, 2: 책, length: 3}</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<h2 id=\"2-includes\" style=\"position:relative;\"><a href=\"#2-includes\" aria-label=\"2 includes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. includes()</h2>\n<ul>\n<li>\n<p>대상 배열에</p>\n<ul>\n<li>첫 번째 파라미터 값이 있으면 <code class=\"language-text\">true</code>, 없으면 <code class=\"language-text\">false</code>를 반환</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const list = [10, 20, 30];\n\nconsole.log(list.includes(10)); // true\nconsole.log(list.includes(50)); // false;\n\nconsole.log(list.includes(10, 1)); // false\n\n// 10이 있지만 1번 인덱스 부터 비교하므로 false 반환\n// 두 번째 파라미터에 음수를 작성하는 등의 값을 작성할 때의 처리는 MDN 참고</code>\n        </deckgo-highlight-code>\n<ul>\n<li>두 번째 파라미터는 선택이며 비교 시작 인덱스 작성</li>\n</ul>\n</li>\n<li>\n<p>제네릭 함수</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const like = { 0: 10, 1: 20, 2: 30, length: 3 };\n\nconsole.log(Array.prototype.includes.call(like, 20)); // true</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","frontmatter":{"date":"October 03, 2021","title":"fill(), includes()","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-array-5/"}},"prev":{"id":"44e7f961-f997-5349-838d-d451fd2d6e68","html":"<br>\n<h1 align=\"center\">\n  👋  keys(), values()\n</h1>\n<br>\n<h2 id=\"1-keys\" style=\"position:relative;\"><a href=\"#1-keys\" aria-label=\"1 keys permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. keys()</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">Array</code> 오브젝트를 <code class=\"language-text\">Array</code> 이터레이터 오브젝트로 생성, 반환</p>\n<ul>\n<li><code class=\"language-text\">entries()</code>와 같으며</li>\n<li><code class=\"language-text\">[key, value]</code> 형태에서 <code class=\"language-text\">value</code>는 반환하지 않고 <code class=\"language-text\">key</code>만 반환</li>\n</ul>\n</li>\n<li>\n<p>배열 인덱스가 <code class=\"language-text\">key</code>가 됨</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const iterator = [&#39;A&#39;, &#39;B&#39;].keys();\nconsole.og(iterator.next()); // {value: 0, done: false}\nconsole.og(iterator.next()); // {value: 1, done: false}\nconsole.og(iterator.next()); // {valude: undefined, done: true}\n\n// 1. 생성한 Array 이터레이터 오브젝트는 [key] 형태임\n// 2. value에 인덱스가 설정됨</code>\n        </deckgo-highlight-code>\n<br>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const iterator = [&#39;A&#39;, &#39;B&#39;].keys();\n\nfor (const property of iterator) {\nconsole.log(property);\n}\n\n// 1. key만 설정되므로 값이 하나, 따라서 분할 할당을 하지 않아도 됨\n// 결과 : 0, 1</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<h2 id=\"2-values\" style=\"position:relative;\"><a href=\"#2-values\" aria-label=\"2 values permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. values()</h2>\n<ul>\n<li><code class=\"language-text\">Array</code> 오브젝트를 <code class=\"language-text\">Array</code> 이터레이터 오브젝트로 생성, 반환</li>\n<li><code class=\"language-text\">[key, value]</code> 형태에서 <code class=\"language-text\">value</code>는 반환하고 <code class=\"language-text\">key</code> 반환하지 않음</li>\n<li>\n<p>배열의 엘리먼트 값이 <code class=\"language-text\">value</code>가 됨</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const iterator = [&#39;A&#39;, &#39;B&#39;].values();\nconsole.og(iterator.next()); // {value: A, done: false}\nconsole.og(iterator.next()); // {value: B, done: false}\nconsole.og(iterator.next()); // {valude: undefined, done: true}\n\n// 1. 생성한 Array 이터레이터 오브젝트는 [value] 형태임\n\nconst iterator = [&#39;A&#39;, &#39;B&#39;].values();\n\nfor (const property of iterator) {\nconsole.log(property);\n}\n\n// 1. value만 설정되므로 값이 하나\n// 결과 : A, B</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p><code class=\"language-text\">[Symbol.iterator]()</code> 사용</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const check = Array.prototype.values === Array.prototype[Symbol.iterator];\n\nconsole.log(check); // true\n\nconst iterator = [&#39;A&#39;, &#39;B&#39;][Symbol.iterator]();\n\nfor (const property of iterator) {\nconsole.log(property); // A, B\n}\n\n// 1. Array.prototype.values()와 Array.prototype[Symbol.iterator]가 같음\n// 2. 따라서 values() 대신에 [Symbol.iterator]()를 사용해도 결과가 같음</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>값이 연동 됨</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">let list = [&#39;A&#39;, &#39;B&#39;];\nlet iterator = list.values();\n\nlist[0] = &#39;연동&#39;;\n\nconsole.log(iterator.next()); // {value: 연동, done: false}\nconsole.log(iterator.next()); // {value: B, done: false}\n\n// Array 이터레이터 오브젝트에서 배열의 메모리 주소를 참조하므로 값이 연동 됨</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","frontmatter":{"date":"October 05, 2021","title":"keys(), values()","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-array-7/"}},"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":"zoomkoding/zoomkoding-gatsby-blog"}}}}},"pageContext":{"slug":"/study-js-es6-array-6/","nextSlug":"/study-js-es6-array-5/","prevSlug":"/study-js-es6-array-7/"}},"staticQueryHashes":["1073350324","2938748437"]}