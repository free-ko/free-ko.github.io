{"componentChunkName":"component---src-templates-blog-template-js","path":"/study-js-es6-Generator-4/","result":{"data":{"cur":{"id":"5e302ba9-fe01-5a53-a335-2fdd7e660997","html":"<br>\n<h1 align=\"center\">\n  👋  next()\n</h1>\n<br>\n<h2 id=\"next\" style=\"position:relative;\"><a href=\"#next\" aria-label=\"next permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>next()</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">next()</code> 는 <code class=\"language-text\">yield</code> 단위로 실행</p>\n<ul>\n<li><code class=\"language-text\">yield</code> 수 만큼 <code class=\"language-text\">next()</code> 를 작성해야 <code class=\"language-text\">yield</code> 전체를 실행</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">next()</code> 를 호출하면 이전 <code class=\"language-text\">yield</code>의 다음부터 <code class=\"language-text\">yield</code>까지 실행</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">function* sports(value) {\n\tvalue += 20;\n\tconst param = tield ++value;\n\tvalue = param + value;\n\tyield ++value;\n};\n\nconst obj = sports(10);\n\nconsole.log(obj.next());     // {value: 31, done: false}\nconsole.log(obj.next(20));   // {value: 52, done: false}\n\n// 1. 첫 번째의 obj.next()를 호출하면 value += 20을 실행하고 yield ++value;를 실행함\n// 2. {value: 31, done: false}를 반환\n// 3. 왼쪽의 param에 값을 할당하지 않음\n// 4. 두 번째의 obj.next(20)을 호출하면 첫 번째 yield의 다음 부터 다음의 yield까지 실행 함\n// 5. 여기서 yield의 다음이란 파라미터 값 20을 param에 설정하는 것을 뜻함\n// 6. 20 + 31은 51이 되며\n// 7. yield ++value;에서 1을 더해 52를 반환함</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<ul>\n<li>\n<p><code class=\"language-text\">yield</code> 를 작성하지 않았을 때</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">function* sports(value) {\n++value;\nconsole.log(value);\n}\n\nconst obj = sports(10);\nconsole.log(obj.next());\n\n// 1. 첫 번째 obj.next()를 호출하면 제너레이터 함수를 실행하여 value 값이 증가하지만\n// 2. yield가 없으므로 값이 반환되지 않음\n\n// 실행 결과\n// 11\n// {value: undefined, done: treu}</code>\n        </deckgo-highlight-code>\n<br>\n</li>\n<li>\n<p>제너레이터 함수에 <code class=\"language-text\">return</code> 문을 작성했을 때</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">function* sports(value) {\nreturn ++value;\n}\n\nconst obj = sports(10);\nconsole.log(obj.next()); // {value: 11, done: false}\nconsole.log(obj.next()); // {value: undefined, done: true}</code>\n        </deckgo-highlight-code>\n<br>\n</li>\n<li>함수는 호출 할 때마다 변수에 초깃값을 설정</li>\n<li>\n<p>제너레이터 함수는 제너레이터 오브젝트를 생성할 때 초깃값을 설정</p>\n<ul>\n<li><code class=\"language-text\">next()</code> 로 실행할 때 마다 초깃값을 설정하지 않음</li>\n<li>변숫값을 그래도 유지</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const sports = function* (param) {\nconst one = param + 10;\nyield one;\nlet two = 2;\nyield one + two;\n};\n\nconst obj = sports(10);\n\n/*\n1. 제너레이터 함수에 2개의 yield가 있음\n\t- 또한 const one과 let two가 있음\n\n2. obj의 [[Scope]]를 펼치면 0: Local\n\t- one: undefined, param: 10, two: undefined\n\n3. param에 10이 있다는 것은\n\t- sports 함수 안으로 들어간 것\n\t- sports 함수가 호출되어\n\t- 실행 콘텍스트의 초기화 단계에서 초깃값을 설정한 것\n\t- 단지, 함수 안의 코드를 실행하지 않은 것\n*/\n\nconsole.log(obj.next());\n\n/*\n1. obj.next()를 호출하면\n\t- sports 제너레이터 함수 안으로 이동 함\n\n2. const one = param + 10;에서 멈추게 하면\n\t- one: undefined, param: 10, two: undfined임\n\t- 이 값은 제너레이터 오브젝트를 만들때 설정한 값\n\n3. const one = param + 10;\n\t- one 변수의 값이 20으로 변경됨\n\n4. yield one;에서 {value: 20, done: false}를 반환함\n*/\n\nconsole.log(obj.next());\n\n/*\n1. obj.next()를 호출 하면\n\t- sports 제너레이터 함수 안으로 이동\n\n2. let two = 2;에서 멈추게 하면\n\t- one: 20, two: undefined임\n\t- one 변숫값 20은 이전 처리에서 설정한 값\n\n3. 함수를 빠져 나온 후 다시 obj.next()를 호출 하면\n\t- 함수 안으로 이동하게 되며\n\t- 함수 안의 변수에 초깃값을 설정하는데\n\t- 앞의 obj.next()로 one 변수에 할당한 값이 그대로 남아 있음\n\n4. 이것이 제너레이터 함수의 특징임\n\t- 제너레이터 오브젝트를 생성할 때 초깃값을 설정하고\n\t- next()를 호출할 때 마다 초깃값을 설정하지 않음\n*/</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","excerpt":"next()  는  단위로 실행  수 만큼  를 작성해야  전체를 실행  를 호출하면 이전 의 다음부터 까지 실행  를 작성하지 않았을 때 제너레이터 함수에  문을 작성했을 때 함수는 호출 할 때마다 변수에 초깃값을 설정 제너레이터 함수는 제너레이터 오브젝트를 생성할 때 초깃값을 설정  로 실행할 때 마다 초깃값을 설정하지 않음 변숫값을 그래도 유지","frontmatter":{"date":"October 13, 2021","title":"next()","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-Generator-4/"}},"next":{"id":"60607d67-e32f-5ac9-8919-389f048f2e97","html":"<br>\n<h1 align=\"center\">\n  👋  yield 키워드\n</h1>\n<br>\n<h2 id=\"1-yield\" style=\"position:relative;\"><a href=\"#1-yield\" aria-label=\"1 yield permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Yield</h2>\n<ul>\n<li><code class=\"language-text\">Syntax: [returnValue] = yield [표현식];</code></li>\n<li>\n<p><code class=\"language-text\">yield</code> 키워드 사용 형태</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">function* sports(one) {\nyield one + 10;\nyield;\nconst value = yield one + 50;\n}\n\nconst obj = sports(30);\n\nconsole.log(obj.next()); // {value: 40, done: false}\nconsole.log(obj.next()); // {value: undefined, done: false}\nconsole.log(obj.next()); // {value: 80, done: false}\nconsole.log(obj.next(200)); // {value: undefined, done: true}</code>\n        </deckgo-highlight-code>\n<ul>\n<li><code class=\"language-text\">next()</code>로 호출할 때 마다 하나씩 실행</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">yield</code> 키워드는 제너레이터 함수 실행을 멈추거나 다시 실행할 때 사용</p>\n<ul>\n<li><code class=\"language-text\">yield</code> 오른쪽의 표현식을 평가하고 결과를 반환</li>\n<li>표현식을 작성하지 않으면 <code class=\"language-text\">undefined</code> 반환</li>\n</ul>\n</li>\n<li><code class=\"language-text\">[returnValue]</code> 오른쪽의 평가 결과가 설정되지 않고 다음 <code class=\"language-text\">next()</code> 에서 파라미터로 넘겨준 값이 설정됨</li>\n<li>\n<p><code class=\"language-text\">yield</code> 표현식을 평가하면 호출한 곳으로 <code class=\"language-text\">{value: 값, done: true/false}</code> 반환</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">function* sports(one) {\nyield one;\nconst check = 20;\n}\n\nconst obj = sports(10);\nconsole.log(obj.next()); // {value: 10, done: false}\nconsole.log(obj.next()); // {value: undefined, done: true}\n\n// 1. obj.next() 호출 yield one; 실행, {value: 10, done: false} 반환\n// 2. obj.next() 호출 check = 20;을 실행하지만, yield 처리가 아니므로 {value: undefined, done: false}반환\n// 3. 이 상태에서 계속 next()를 호출하면 {value: undefined, done: true} 반환\n// 4. 함수를 호출할 수 있지만 함수가 실행되지 않음</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p><code class=\"language-text\">value</code> 값</p>\n<ul>\n<li><code class=\"language-text\">yield</code> 표현식의 평가 결과 설정</li>\n<li><code class=\"language-text\">yield</code>를 실행하지 못하면 <code class=\"language-text\">undefined</code></li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">done</code> 값</p>\n<ul>\n<li><code class=\"language-text\">yeild</code> 를 실행하면 <code class=\"language-text\">false</code></li>\n<li><code class=\"language-text\">yeild</code> 를 실행하지 못하면 <code class=\"language-text\">true</code></li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"2-yield-정리\" style=\"position:relative;\"><a href=\"#2-yield-%EC%A0%95%EB%A6%AC\" aria-label=\"2 yield 정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Yield 정리</h2>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">function* sports(one) {\n  let two = yield one;\n  let param = yield one + two;\n  yield param + one;\n}\n\nconst obj = sports(10);\n\nconsole.log(obj.next()); // {value: 10, done: false}\nconsole.log(obj.next()); // {value: NaN, done: false}\nconsole.log(obj.next(20)); // {value: 30, done: false}\nconsole.log(obj.next()); // {value: undefined, done: true}</code>\n        </deckgo-highlight-code>\n<ol>\n<li>\n<p><code class=\"language-text\">function* sports(one){}</code></p>\n<ul>\n<li>제너레이터 함수를 선언</li>\n<li>3개의 <code class=\"language-text\">yield</code>를 작성함</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">const obj = sports(10);</code></p>\n<ul>\n<li>제너레이터 오브젝트를 생성함</li>\n<li>파라미터 값, 10이 <code class=\"language-text\">one</code>에 설정됨</li>\n</ul>\n</li>\n<li>\n<p>첫 번째의 <code class=\"language-text\">obj.next()</code> 를 호출 함</p>\n<ul>\n<li><code class=\"language-text\">let two = yield one</code>이 실행됨</li>\n<li><code class=\"language-text\">one</code>의 값인 10을 반환함</li>\n<li><code class=\"language-text\">two</code> 변수에 10을 할당하지 않음</li>\n</ul>\n</li>\n<li>\n<p>두 번째의 <code class=\"language-text\">obj.next()</code>를 호출 함</p>\n<ul>\n<li><code class=\"language-text\">next()</code> 에 파라미터 값을 작성하지 않았으므로 <code class=\"language-text\">two</code> 변수에 <code class=\"language-text\">undefined</code>가 설정됨</li>\n<li><code class=\"language-text\">let param = yield one + two</code> 를 실행</li>\n<li><code class=\"language-text\">two</code> 변수 값이 <code class=\"language-text\">undefined</code>이므로 <code class=\"language-text\">NaN</code>를 반환</li>\n</ul>\n</li>\n<li>\n<p>세 번째의 <code class=\"language-text\">obj.next(20)</code>를 호출 함</p>\n<ul>\n<li>파라미터 값 20이 바로 앞의 <code class=\"language-text\">param</code> 변수에 설정됨</li>\n<li><code class=\"language-text\">yield param + one</code> 을 실행함</li>\n<li>20 + 10을 반환 함</li>\n</ul>\n</li>\n<li>\n<p>네 번째의 <code class=\"language-text\">obj.next()</code> 를 호출 함</p>\n<ul>\n<li>실행할 <code class=\"language-text\">yield</code>가 없으므로 더 이상 처리하지 않으며</li>\n<li>끝이라는 것을 나타내는 <code class=\"language-text\">done: true</code>를 반환 함</li>\n</ul>\n</li>\n</ol>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","frontmatter":{"date":"October 12, 2021","title":"yield 키워드","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-Generator-3/"}},"prev":{"id":"8a6b06d7-74ed-509d-9f8e-97892e2b2518","html":"<br>\n<h1 align=\"center\">\n  👋  yield 반복, 다수의 yield 처리\n</h1>\n<br>\n<h2 id=\"1-yield-반복\" style=\"position:relative;\"><a href=\"#1-yield-%EB%B0%98%EB%B3%B5\" aria-label=\"1 yield 반복 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. yield 반복</h2>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">let status = true;\n\nfunction* sports() {\n  let count = 0;\n  while (status) {\n    yield ++count;\n  }\n}\n\nconst obj = sports();\n\nconsole.log(obj.next()); // {value: 1, done: false}\nconsole.log(obj.next()); // {value: 2, done: false}\n\nstatus = false;\nconsole.log(obj.next()); // {value: undefined, done: true}</code>\n        </deckgo-highlight-code>\n<ul>\n<li><code class=\"language-text\">yield</code> 를 반복하는 형태 임</li>\n<li>\n<p><code class=\"language-text\">let status = ture;</code></p>\n<ul>\n<li><code class=\"language-text\">while()</code> 문을 제어하기 위한 상태 값</li>\n</ul>\n</li>\n<li>\n<p>첫 번 째 <code class=\"language-text\">next()</code> 호출</p>\n<ul>\n<li><code class=\"language-text\">let count = 0;</code> 을 실행하여 <code class=\"language-text\">count</code> 변수에 0을 설정 함</li>\n<li>누적 값을 구하기 위한 것</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">while(statu) { yield ++count; }</code></p>\n<ul>\n<li><code class=\"language-text\">satus</code> 가 <code class=\"language-text\">true</code> 이므로 <code class=\"language-text\">yeild</code> 를 수행 함</li>\n<li><code class=\"language-text\">{ value: 1, done: false }</code> 반환</li>\n</ul>\n</li>\n<li>\n<p>두 번째 <code class=\"language-text\">next()</code> 를 호출 함</p>\n<ul>\n<li><code class=\"language-text\">status</code> 가 <code class=\"language-text\">true</code>이므로 <code class=\"language-text\">yield</code>를 수행 함</li>\n</ul>\n</li>\n<li>\n<p>세 번째 <code class=\"language-text\">next()</code> 를 호출 함</p>\n<ul>\n<li><code class=\"language-text\">status</code>가 <code class=\"language-text\">false</code>이므로 <code class=\"language-text\">yield ++count;</code> 를 수행하지 않음</li>\n<li><code class=\"language-text\">{ value: undefined, done: true }</code> 반환</li>\n<li><code class=\"language-text\">{ done: true }</code> 이므로 이터레이터를 더 이상 사용 할 수 없음</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"2-다수의-yield-처리\" style=\"position:relative;\"><a href=\"#2-%EB%8B%A4%EC%88%98%EC%9D%98-yield-%EC%B2%98%EB%A6%AC\" aria-label=\"2 다수의 yield 처리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 다수의 yield 처리</h2>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">function* sports() {\n  return yield yield yield;\n}\n\nconst obj = sports();\n\nconsole.log(obj.next()); // {value: undefined, done: false}\nconsole.log(obj.next(10)); // {value: 10, done: false}\nconsole.log(obj.next(20)); // {value: 20, done: false}\nconsole.log(obj.next(30)); // {value: 30, done: true}</code>\n        </deckgo-highlight-code>\n<ul>\n<li>\n<p>한 줄에 다수의 <code class=\"language-text\">yeild</code>와 <code class=\"language-text\">return</code> 작성</p>\n<ul>\n<li><code class=\"language-text\">return yield yield yield;</code></li>\n</ul>\n</li>\n<li>\n<p>첫 번째 <code class=\"language-text\">next()</code> 호출</p>\n<ul>\n<li>첫 번째 <code class=\"language-text\">yield</code>를 소행 함</li>\n<li><code class=\"language-text\">yield</code>에 반환 값이 없으므로 <code class=\"language-text\">{ value: undefined, done: false }</code> 반환</li>\n</ul>\n</li>\n<li>\n<p>두 번째 <code class=\"language-text\">next(10)</code> 호출</p>\n<ul>\n<li>파라미터 값 : 10</li>\n<li>두 번째 <code class=\"language-text\">yield</code>를 수행 함</li>\n<li>함수에 파라미터 값을 받을 변수가 없으면 파라미터 넘겨준 값을 반환</li>\n<li><code class=\"language-text\">{ value: 10, done: false }</code></li>\n</ul>\n</li>\n<li>\n<p>세 번째 <code class=\"language-text\">next(20)</code> 호출</p>\n<ul>\n<li>파라미터 값 : 20</li>\n<li>세 번째 <code class=\"language-text\">yeild</code> 를 수행 함</li>\n<li>함수에 파라미터 값을 받을 변수가 없으므로 파라미터로 넘겨 준 값을 반환</li>\n<li><code class=\"language-text\">{ value: 20, done: false }</code> 반환</li>\n</ul>\n</li>\n<li>\n<p>네 번째 <code class=\"language-text\">next(30)</code> 호출</p>\n<ul>\n<li>파라미터 값: 30</li>\n<li>처리할 <code class=\"language-text\">yield</code> 가 없으므로 <code class=\"language-text\">done: true</code> 반환</li>\n<li><code class=\"language-text\">return</code>문을 작성했으므로 파라미터로 넘겨 준 값을 반환 <code class=\"language-text\">{ value: 30, done: true }</code> 반환</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">return</code> 문을 작성하지 않으면</p>\n<ul>\n<li>30이 아닌 <code class=\"language-text\">undefined</code> 반환 <code class=\"language-text\">{value: undefined, done: true}</code></li>\n</ul>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","frontmatter":{"date":"October 14, 2021","title":"yield 반복, 다수의 yield 처리","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-Generator-5/"}},"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":"zoomkoding/zoomkoding-gatsby-blog"}}}}},"pageContext":{"slug":"/study-js-es6-Generator-4/","nextSlug":"/study-js-es6-Generator-3/","prevSlug":"/study-js-es6-Generator-5/"}},"staticQueryHashes":["1073350324","2938748437"]}