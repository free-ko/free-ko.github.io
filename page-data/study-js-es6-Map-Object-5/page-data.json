{"componentChunkName":"component---src-templates-blog-template-js","path":"/study-js-es6-Map-Object-5/","result":{"data":{"cur":{"id":"573f6298-d270-5aba-8f4e-a68d5d909850","html":"<br>\n<h1 align=\"center\">\n  👋  콜백 함수, 삭제, 지우기: forEach(), delete(), clear()\n</h1>\n<br>\n<h2 id=\"1-foreach\" style=\"position:relative;\"><a href=\"#1-foreach\" aria-label=\"1 foreach permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. forEach()</h2>\n<ul>\n<li>\n<p>Map 인스턴스를 반복하면서 <code class=\"language-text\">callback</code> 함수 호출</p>\n<ul>\n<li><code class=\"language-text\">map()</code>, <code class=\"language-text\">filter()</code> 등의 <code class=\"language-text\">callback</code> 함수가 동반되는 메소드 사용 불가</li>\n</ul>\n</li>\n<li>\n<p>callback 함수에서 넘겨주는 파라미터</p>\n<ul>\n<li>value, key, Map 인스턴스 key, value 순서가 아님</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const obj = new Map([\n  [&#39;one&#39;, 100],\n  [&#39;two&#39;, 200],\n]);\n\nconst callback = (value, key, map) =&gt; {\n  console.log(`${key}, ${value}`);\n};\n\nobj.forEach(callback);\n\n// 실행결과\n// one, 100\n// two, 200</code>\n        </deckgo-highlight-code>\n<ul>\n<li>콜백 함수에서 <code class=\"language-text\">this</code> 사용</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const obj = new Map([\n\t[&quot;one&quot;, 100],\n\t[&quot;two&quot;, 200]\n]);\n\nfunction callback = (value, key, map) =&gt; {\n\tconsole.log(`${key}, ${value}, ${this.check}`);\n};\n\nobj.forEach(callback, {check: 50});\n\n// 1. 콜백 함수를 일반 함수로 작성했음\n// 2. 콜백 함수를 화살표 함수로 작성하면 this가 window 오브젝트를 참조함\n// 3. 콜백 함수에서 this가 forEach()의 두 번째 파라미터에 작성한 오브젝틀 참조 함\n\n// 실행결과\n// one, 100, 50\n// two, 200, 50</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<h2 id=\"2-delete\" style=\"position:relative;\"><a href=\"#2-delete\" aria-label=\"2 delete permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. delete()</h2>\n<ul>\n<li>\n<p>Map 인스턴스에 파라미터 값과 같은 entry 삭제</p>\n<ul>\n<li>같은 key가 있으면 <code class=\"language-text\">true</code> 반환 없으면 <code class=\"language-text\">false</code> 반환</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const obj = new Map([\n\t[&quot;one&quot;, 100],\n\t[{}, &quot;오브젝트&quot;]\n]};\n\nconsole.log(obj.delete(&quot;one&quot;));   // true\nconsole.log(obj.delete({}));      // false\n\nconst sports = {};\nobj.set(sports, &quot;스포츠&quot;);\n\nconsole.log(obj.delte(sports));   // true</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<h2 id=\"3-clear\" style=\"position:relative;\"><a href=\"#3-clear\" aria-label=\"3 clear permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. clear()</h2>\n<ul>\n<li>\n<p>Map 인스턴스의 모든 entry를 지움</p>\n<ul>\n<li>Map 인스턴스를 삭제하는 것은 아님</li>\n<li>따라서 <code class=\"language-text\">[key, value]</code>를 추가할 수 있음</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const obj = new Map([\n  [&#39;one&#39;, 100],\n  [&#39;two&#39;, 200],\n]);\n\nconsole.log(obj.size); // 2\n\nobj.clear();\nconsole.log(obj.size); // 0\n\nobj.set(&#39;add&#39;, &#39;추가&#39;);\nconsole.log(obj.size); // 1</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>Size 프로퍼티</p>\n<ul>\n<li>Map 인스턴스의 entry 수를 반환</li>\n<li>개발자 코드로 수정 할 수 없음</li>\n</ul>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","excerpt":"1. forEach() Map 인스턴스를 반복하면서  함수 호출 ,  등의  함수가 동반되는 메소드 사용 불가 callback 함수에서 넘겨주는 파라미터 value, key, Map 인스턴스 key, value 순서가 아님 콜백 함수에서  사용 2. delete() Map 인스턴스에 파라미터 값과 같은 entry 삭제 같은 key가 있으면  반환 없으면  반환 3. clear() Map 인스턴스의 모든 entry를 지움 Map 인스턴스를 삭제하는 것은 아님 따라서 를 추가할 수 있음 Size 프로퍼티 Map 인스턴스의 entry 수를 반환 개발자 코드로 수정 할 수 없음","frontmatter":{"date":"November 05, 2021","title":"콜백 함수, 삭제, 지우기 - forEach(), delete(), clear()","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-Map-Object-5/"}},"next":{"id":"ba1f99f8-391d-5a16-b039-f96dbc8afef8","html":"<br>\n<h1 align=\"center\">\n  👋  Map과 이터레이터 오브젝트 - entries(), keys(), values(), Symbol.iterator()\n</h1>\n<br>\n<h2 id=\"1-entries\" style=\"position:relative;\"><a href=\"#1-entries\" aria-label=\"1 entries permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. entries()</h2>\n<ul>\n<li>\n<p>Map 인스턴스로 이터레이터 오브젝트 생성, 반환</p>\n<ul>\n<li>Map 인스턴스에 설정된 순서로 반환</li>\n<li><code class=\"language-text\">next()</code> 로 <code class=\"language-text\">[key, value]</code> 반환</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const obj = new Map([\n  [&#39;one&#39;, 100],\n  [&#39;two&#39;, 200],\n]);\n\nconst iter = obj.entries();\n\nconsole.log(iter.next()); // {value: [one, 100], done: false}\nconsole.log(iter.next()); // {value: [one, 200], done: false}\nconsole.log(iter.next()); // {value: undefined, done: true}</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<h2 id=\"2-keys\" style=\"position:relative;\"><a href=\"#2-keys\" aria-label=\"2 keys permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. keys()</h2>\n<ul>\n<li>\n<p>Map 인스턴스의 key로 이터레이터 오브젝트 생성, 반환</p>\n<ul>\n<li>value는 포함하지 않음</li>\n<li>Map 인스턴스에 설정된 순서로 반환</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">next()</code> 로 key 반환</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const obj = new Map([\n[&#39;one&#39;, 100],\n[&#39;two&#39;, 200],\n]);\n\nconst iter = obj.keys();\n\nconsole.log(iter.next()); // {value: one, done: false}\nconsole.log(iter.next()); // {value: two, done: false}\nconsole.log(iter.next()); // {value: undefined, done: true}</code>\n        </deckgo-highlight-code>\n<br>\n</li>\n</ul>\n<h2 id=\"3-values\" style=\"position:relative;\"><a href=\"#3-values\" aria-label=\"3 values permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. values()</h2>\n<ul>\n<li>\n<p>Map 인스턴스의 value로 이터레이터 오브젝트 생성, 반환</p>\n<ul>\n<li>key는 포함하지 않음</li>\n<li>Map 인스턴스에 설정된 순서로 반환</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">next()</code> 로 value 반환</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const obj = new Map([\n[&#39;one&#39;, 100],\n[&#39;two&#39;, 200],\n]);\n\nconst iter = obj.values();\n\nconsole.log(iter.next()); // {value: 100, done: false}\nconsole.log(iter.next()); // {value: 200, done: false}\nconsole.log(iter.next()); // {value: undefined, done: true}</code>\n        </deckgo-highlight-code>\n<br>\n</li>\n</ul>\n<h2 id=\"4-symboliterator\" style=\"position:relative;\"><a href=\"#4-symboliterator\" aria-label=\"4 symboliterator permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. Symbol.iterator()</h2>\n<ul>\n<li>\n<p>Map 인스턴스로 이터레이터 오브젝트 생성, 반환</p>\n<ul>\n<li><code class=\"language-text\">Map.prototype.entries()</code> 와 같음</li>\n<li><code class=\"language-text\">next()</code> 로 <code class=\"language-text\">[key, value]</code> 반환</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const obj = new Map([\n  [&#39;one&#39;, 100],\n  [&#39;two&#39;, 200],\n]);\n\nconst iter = obj[Symbol.iterator]();\n\nconsole.log(iter.next()); // {value: [one, 100], done: false}\nconsole.log(iter.next()); // {value: [one, 200], done: false}\nconsole.log(iter.next()); // {value: undefined, done: true}</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","frontmatter":{"date":"November 04, 2021","title":"Map과 이터레이터 오브젝트 - entries(), keys(), values(), Symbol.iterator()","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-Map-Object-4/"}},"prev":{"id":"40d98f2a-693b-54c0-9400-f409664c15b6","html":"<br>\n<h1 align=\"center\">\n  👋  WeakMap 오브젝트 개요, new WeakMap()\n</h1>\n<br>\n<h2 id=\"1-weakmap-오브젝트\" style=\"position:relative;\"><a href=\"#1-weakmap-%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8\" aria-label=\"1 weakmap 오브젝트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. WeakMap 오브젝트</h2>\n<ul>\n<li>WeakMap: 약한 Map?</li>\n<li>\n<p>WeakMap은 Object만 <code class=\"language-text\">Key</code>로 사용 가능</p>\n<ul>\n<li>number 등의 프리미티브 타입 사용 불가</li>\n<li>value는 제한 없음</li>\n</ul>\n</li>\n<li>\n<p>Map에서 key로 참조한 Object를 삭제하면 object를 사용할 수 없게 되지만 Map에 object가 남음</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">let sports = {like: &quot;축구&quot;};\nconst obj = new Map([\n\t[sports, &quot;like: 축구&quot;]\n)];\n\nsports = {like: &quot;농구&quot;}</code>\n        </deckgo-highlight-code>\n<ul>\n<li>메모리 릭 발생</li>\n</ul>\n</li>\n<li>\n<p>WeakMap의 object를 GC가 지움</p>\n<ul>\n<li>GC: Garbage Collection</li>\n<li>그래서(약한, 부서지기 쉬운) WeakMap?</li>\n</ul>\n</li>\n<li>\n<p>WeakMap 오브젝트 메소드</p>\n<ul>\n<li><code class=\"language-text\">set()</code>, <code class=\"language-text\">get()</code>, <code class=\"language-text\">has()</code>, <code class=\"language-text\">delete()</code></li>\n<li>CRUD와 관련된 메소드만 있음</li>\n</ul>\n</li>\n<li>WeakMap entry의 열거 불가</li>\n<li>이터레이션 불가</li>\n</ul>\n<br>\n<h2 id=\"2-new-weakmap\" style=\"position:relative;\"><a href=\"#2-new-weakmap\" aria-label=\"2 new weakmap permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. new WeakMap()</h2>\n<ul>\n<li>WeakMap 인스턴스 생성, 반환</li>\n<li>\n<p>파라미터 작성</p>\n<ul>\n<li>대괄호 <code class=\"language-text\">[ ]</code> 안에 이터러블 오브젝트 작성</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const empty = new WeakMap();\n\nconst sports = {};\nconst obj = new WeakMap([[sports, &#39;sports 오브젝트&#39;]]);\n\nconsole.log(typeof obj); // object\n\n// 1. 파라미터를 작성하지 않아도 됨\n// 2. new 연산자를 사용함\n// 3. 인스턴스이므로 타입은 object</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>WeakMap 오브젝트 구조</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const map = Map;\nconst weakmap = WeakMap;\n/*\n\t1. map과 weakmap이 구조에서 크게 다르지 않지만\n\t\t\n\t2. Map 오브젝트에 Symbol(Symbol.species)가 있지만\n\t\t- WeakMap 오브젝트에는 없음\n\n\t3. map.prototype에 Symbol.iterator가 있지만\n\t\t- weakmap.prototype에는 Symbol.iterator가 없음\n\n\t4. map.prototype에는 forEach()가 있지만\n\t\t- weakmap.prototype에는 forEach()가 없음\n*/\n\nconst sports = {};\nconst obj = new WeakMap([[sports, &#39;종목&#39;]]);\n/*\n\t1. 오른쪽의 obj를 펼치면 [[Entries]]가 있음\n\t\t- 이것은 엔진에서 설정하는 것을 뜻함\n\n\t2. [[Entries]]를 펼치면 0: {Object =&gt; &quot;종목&quot;} 형태 임\n\t\t- [Object, &quot;종목&quot;] 형태로 작성한 것을\n\t\t- 인덱스를 부여하여 배열로 만들고\n\t\t- 엘리먼트에 {Object: &quot;종목&quot;} 형태로 변환 함\n\n\t3. Map 인스턴스와 구조가 같음\n*/</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","frontmatter":{"date":"November 06, 2021","title":"WeakMap 오브젝트 개요, new WeakMap()","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-weakMap-1/"}},"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":"zoomkoding/zoomkoding-gatsby-blog"}}}}},"pageContext":{"slug":"/study-js-es6-Map-Object-5/","nextSlug":"/study-js-es6-Map-Object-4/","prevSlug":"/study-js-es6-weakMap-1/"}},"staticQueryHashes":["1073350324","2938748437"]}