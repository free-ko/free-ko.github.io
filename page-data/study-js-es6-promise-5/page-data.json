{"componentChunkName":"component---src-templates-blog-template-js","path":"/study-js-es6-promise-5/","result":{"data":{"cur":{"id":"241899ff-e2b3-5f15-b262-b508d1cafd9b","html":"<br>\n<h1 align=\"center\">\n  👋  Promise -  all(), race()\n</h1>\n<br>\n<h2 id=\"1-all\" style=\"position:relative;\"><a href=\"#1-all\" aria-label=\"1 all permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. all()</h2>\n<ul>\n<li>\n<p>파라미터의 모든 <code class=\"language-text\">Promise</code> 처리를 완료했을 때</p>\n<ul>\n<li><code class=\"language-text\">then()</code> 의 핸들러 함수를 실행함</li>\n<li><code class=\"language-text\">Promise.all()</code> 형태로 작성</li>\n</ul>\n</li>\n<li>\n<p>파라미터를 이터러블로 작성함</p>\n<ul>\n<li>작성한 순서로 <code class=\"language-text\">Promise</code> 인스턴스 생성</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">order</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">delay</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'실행자:'</span><span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token function\">order</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">order</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">order</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">param</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'then:'</span> <span class=\"token operator\">+</span> param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1. Promise.all([order(500), order(300), order(100)]) all() 파라미터를 이터러블로 작성했음, 파라미터에 작성한 순서로 order() 함수를 호출하며 Promise 인스턴스를 생성하여 반환함</span>\n<span class=\"token comment\">// 2. setTimeout(() => {...}, delay) setTimeout()의 두 번째 파라미터 delay는 지연 시간으로 값의 단위는 밀리초임</span>\n<span class=\"token comment\">// 3. 따라서, setTimeout()의 지연 시간이 짧은 순서인 100, 300, 500 순서로 resolve(dealy)를 실행하지만 실행할 때마다 아래의 then()을 호출하지 않고 3개를 모두 실행한 후에 then()을 한번만 호출함</span>\n<span class=\"token comment\">// 4. 이것이 all() 함수의 특징임</span>\n<span class=\"token comment\">// 5. then((param) => consoel.log(\"then:\" + param)); 'then'처럼 resolve(dealy)의 파라미터 값을 배열로 만들어 param 파라미터에 설정함</span>\n<span class=\"token comment\">// 6. 이때, resolve(delay)가 실행된 순서가 아니라 all()의 파라미터에 작성한 순서로 값을 설정함</span>\n<span class=\"token comment\">// 7. resolve() 실행 순서는 100, 300 500이지만 결과는 500, 300, 100이 출력됨</span>\n\n<span class=\"token comment\">// [실행결과]</span>\n<span class=\"token comment\">// 실행자: 100</span>\n<span class=\"token comment\">// 실행자: 300</span>\n<span class=\"token comment\">// 실행자: 500</span>\n<span class=\"token comment\">// then: 500, 300, 100실행자에서 실패가 발생했을 때</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">reject()</code> 가 발생한 시점에 <code class=\"language-text\">then()</code>을 실행</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">order</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">delay</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    dealy <span class=\"token operator\">===</span> <span class=\"token number\">300</span> <span class=\"token operator\">?</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>dealy<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token function\">order</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">order</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">order</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n<span class=\"token punctuation\">(</span><span class=\"token parameter\">param</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'성공:'</span> <span class=\"token operator\">+</span> param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token parameter\">param</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'실패:'</span> <span class=\"token operator\">+</span> param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1. reject()가 있으며 reject()가 발생하면 처리가 앞 코드와 다름</span>\n<span class=\"token comment\">// 2. delay === 300 ? reject(delay) : resolve(delay); 설명을 위해 order(300)일 때 reject(delay)가 실행되도록 했음</span>\n<span class=\"token comment\">// 3. 처음 resolve(100)이 실행되며 100이 출력됨</span>\n<span class=\"token comment\">// 4. 이어서 reject(300)이 실행되며 300이 출력됨</span>\n<span class=\"token comment\">// 5. 또한 then()의 두 번째 파라미터 함수가 호출되어 \"실패:300\"이 출력됨 reject()가 발생했을 때 전체가 끝나지 않음</span>\n<span class=\"token comment\">// 6. resolve(500)이 실행되며 500이 출력됨</span>\n<span class=\"token comment\">// 7. 앞 코드에서는 3개 모두가 끝나면 all() 파라미터에 작성한 순서로 값을 출력했는데 여기서는 출력하지 않음</span>\n<span class=\"token comment\">// 8. all()은 이렇게 하나라도 reject()가 발생하면 then()의 첫 번째 파라미터 함수를 실행하지 않음</span>\n<span class=\"token comment\">// 9. 이것이 all()의 또 하나의 특징</span>\n\n<span class=\"token comment\">// [실행결과]</span>\n<span class=\"token comment\">// 100</span>\n<span class=\"token comment\">// 300</span>\n<span class=\"token comment\">// 실패: 300</span>\n<span class=\"token comment\">// 500</span></code></pre></div>\n</li>\n</ul>\n<br>\n<h2 id=\"2-race\" style=\"position:relative;\"><a href=\"#2-race\" aria-label=\"2 race permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. race()</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">resolve(), reject()</code> 에 관계없이 처음 한 번만 <code class=\"language-text\">then()</code> 을 실행하고 더 이상 실행하지 않음</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">order</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">delay</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">race</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token function\">order</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">order</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">order</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">param</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'then:'</span> <span class=\"token operator\">+</span> param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1. Promise.race([order(500), order(100), order(300)]) race()의 파라미터 순서로 order()를 호출함</span>\n<span class=\"token comment\">// 2. 그러면 결과는 100,300,500 순서로 resolve(delay)가 실행됨</span>\n<span class=\"token comment\">// 3. 그런데 order(100)일 때, 처음 한 번만 then()의 핸들러 함수를 실행하고 다음은 실행하지 않음 그래서 \"then:100\"만 출력됨</span>\n<span class=\"token comment\">// 4. 이것이 race()의 특징</span>\n\n<span class=\"token comment\">// 실행결과</span>\n<span class=\"token comment\">// 100</span>\n<span class=\"token comment\">// then: 100</span>\n<span class=\"token comment\">// 300</span>\n<span class=\"token comment\">// 500</span></code></pre></div>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1-all\">1. all()</a></li>\n<li><a href=\"#2-race\">2. race()</a></li>\n</ul>\n</div>","excerpt":"1. all() 파라미터의 모든  처리를 완료했을 때  의 핸들러 함수를 실행함  형태로 작성 파라미터를 이터러블로 작성함 작성한 순서로  인스턴스 생성  가 발생한 시점에 을 실행 2. race()  에 관계없이 처음 한 번만  을 실행하고 더 이상 실행하지 않음 1. all() 2. race()","frontmatter":{"date":"December 20, 2021","title":"Promise - all(), race()","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-promise-5/"}},"next":{"id":"ead5ac93-850b-5dc7-b46a-75f8f86e5273","html":"<br>\n<h1 align=\"center\">\n  👋  HTTP 메서드 - 속성\n</h1>\n<br>\n<h2 id=\"1안전\" style=\"position:relative;\"><a href=\"#1%EC%95%88%EC%A0%84\" aria-label=\"1안전 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.안전</h2>\n<ul>\n<li>호출해도 리소스를 변경하지 않는다.</li>\n<li>Q) 그래도 계속 호출해서, 로그 같은게 쌓여서 장애가 발생하면요?\n—> 안전은 해당 리소스만 고려한다. 그런 부분까지 고려하지 않는다.</li>\n</ul>\n<br>\n<h2 id=\"2멱등\" style=\"position:relative;\"><a href=\"#2%EB%A9%B1%EB%93%B1\" aria-label=\"2멱등 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.멱등</h2>\n<ul>\n<li>한 번 호출하든, 두 번 호출하든 100번 호출하든 결과가 똑같다.</li>\n<li>\n<p>멱등 메서드</p>\n<ol>\n<li>GET : 한 번 조회하든, 두 번 조회하든 같은 결과가 조회된다.</li>\n<li>PUT : 결과를 대체한다. 따라가 같은 요청을 여러번 해도 최종 결과는 같다.</li>\n<li>DELETE : 결과를 삭제한다. 같은 요청을 여러번 해도 삭제된 결과는 똑같다.</li>\n<li>POST : 멱등이 아니다!!! 두 번 호출하면 같은 결제가 중복해서 발생할 수 있다.</li>\n</ol>\n</li>\n<li>\n<p>활용</p>\n<ol>\n<li>자동 복구 메커니즘</li>\n<li>서버가 TIMEOUT 등으로 정상 응답을 못주었을 때, 클라이언트가 같은 요청을 다시 해도 되는가에 대한 판단 근거가 됨</li>\n</ol>\n</li>\n<li>\n<p>재 요청 중간에 다른 곳에서 리소스를 변경해버리면?</p>\n<ol>\n<li>사용자1 : GET —> userName: A, age: 20</li>\n<li>사용자2 :PUT —> userName: A, age: 30</li>\n<li>사용자1 : GET —> userName: A, age: 30 —> 사용자2의 영향으로 바뀐 데이터 조회</li>\n</ol>\n<p>—> 멱등은 외부 요인으로 중간에 리소스가 변경되는 것 까지는 고려하지 않는다.</p>\n</li>\n</ul>\n<br>\n<h2 id=\"3캐시가능\" style=\"position:relative;\"><a href=\"#3%EC%BA%90%EC%8B%9C%EA%B0%80%EB%8A%A5\" aria-label=\"3캐시가능 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.캐시가능</h2>\n<ul>\n<li>응답 결과 리소스를 캐시해서 사용해도 되는가?</li>\n<li>GET, HEAD, POST, PATCH 캐시가능</li>\n<li>\n<p>실제로는 GET, HEAD 정도만 캐시로 사용</p>\n<ul>\n<li>POST, PATCH는 본문 내용까지 캐시 키로 고려해야 하는데, 구현이 쉽지 않음</li>\n</ul>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1%EC%95%88%EC%A0%84\">1.안전</a></li>\n<li><a href=\"#2%EB%A9%B1%EB%93%B1\">2.멱등</a></li>\n<li><a href=\"#3%EC%BA%90%EC%8B%9C%EA%B0%80%EB%8A%A5\">3.캐시가능</a></li>\n</ul>\n</div>","frontmatter":{"date":"December 20, 2021","title":"HTTP - 4.HTTP 메서드(4)","categories":"CS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-cs-HTTP-9/"}},"prev":{"id":"79e0ab68-c33e-5795-8a09-21196e259a7c","html":"<br>\n<h1 align=\"center\">\n  👋  클라이언트에서 서버로 데이터 전송\n</h1>\n<br>\n<h2 id=\"1-데이터-전달-방식은-크게-2가지\" style=\"position:relative;\"><a href=\"#1-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%8B%AC-%EB%B0%A9%EC%8B%9D%EC%9D%80-%ED%81%AC%EA%B2%8C-2%EA%B0%80%EC%A7%80\" aria-label=\"1 데이터 전달 방식은 크게 2가지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 데이터 전달 방식은 크게 2가지</h2>\n<ol>\n<li>\n<p>쿼리 파라미터를 통한 데이터 전송</p>\n<ul>\n<li>GET</li>\n<li>ex) 주로 정렬 필터(검색어)</li>\n</ul>\n</li>\n<li>\n<p>메시지 바디를 통한 데이터 전송</p>\n<ul>\n<li>POST, PUT, PATCH</li>\n<li>ex) 회원가입, 상품주문, 리소스 등록, 리소스 변경</li>\n</ul>\n</li>\n</ol>\n<br>\n<h2 id=\"2-4가지-상황\" style=\"position:relative;\"><a href=\"#2-4%EA%B0%80%EC%A7%80-%EC%83%81%ED%99%A9\" aria-label=\"2 4가지 상황 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 4가지 상황</h2>\n<ol>\n<li>\n<p>정적 데이터 조회</p>\n<ul>\n<li>이미지, 정적 테스트 문서</li>\n<li>쿼리 파라미터 미사용(리소스 경로로 단순하게 조회 가능)</li>\n<li>조회는 GET 사용</li>\n</ul>\n</li>\n<li>\n<p>동적 데이터 조회</p>\n<ul>\n<li>주로 검색, 게시판 목록에서 정렬 필터(검색어)</li>\n<li>조회는 GET 사용</li>\n<li>GET은 쿼리 파라미터 사용해서 데이터를 전달</li>\n</ul>\n</li>\n<li>\n<p>HTML Form을 통한 데이터 전송</p>\n<ul>\n<li>HTML Form Submit시 POST 전송 ex) 회원 가입, 상품 주문, 데이터 변경</li>\n<li>Content-Type : application/x-www.form-urlencode 사용</li>\n<li>form의 내용을 메시지 바디를 통해서 전송(key-value, 쿼리 파라미터 형식)</li>\n<li>전송 데이터를 Url encoding 처리 ex) abc김 —> abc%EA%B9%80</li>\n<li>HTML Form은 GET 전송도 가능</li>\n<li>Content-Type: multipart/form-data</li>\n<li>파일 업로드 같은 바이너리 데이터 전송시 사용</li>\n<li>다른 종류의 여러 파일과 폼의 내용 함께 전송 가능(그래서 이름이 multipart)</li>\n<li>참고 : HTML Form 전송은 GET, POST만 지원</li>\n</ul>\n</li>\n<li>\n<p>HTTP API를 통한 데이터 전송</p>\n<ul>\n<li>회원 가입, 상품 주문, 데이터 변경</li>\n<li>서버 to 서버, 앱 클라이언트, 웹 클라이언트(Ajax) : 백엔드 시스템 통신</li>\n<li>앱 클라이언트 : 아이폰, 안드로이드</li>\n<li>웹 클라이언트</li>\n<li>HTML에서 Form 전송 대신 JS를 통한 통신에 사용(AJAX) ex) React, VueJS 같은 웹 클라이언트와 API 통신</li>\n<li>POST, PUT, PATCH : 메시지 바디를 통해 데이터 전송</li>\n<li>GET : 조회, 쿼리 파라미터로 데이터 전달</li>\n<li>Content-Type: application/json을 주로 사용(사실상 표준) ex) TEXT, XML, JSON 등</li>\n</ul>\n</li>\n</ol>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%8B%AC-%EB%B0%A9%EC%8B%9D%EC%9D%80-%ED%81%AC%EA%B2%8C-2%EA%B0%80%EC%A7%80\">1. 데이터 전달 방식은 크게 2가지</a></li>\n<li><a href=\"#2-4%EA%B0%80%EC%A7%80-%EC%83%81%ED%99%A9\">2. 4가지 상황</a></li>\n</ul>\n</div>","frontmatter":{"date":"December 21, 2021","title":"HTTP - 5.메서드 활용(1)","categories":"CS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-cs-HTTP-10/"}},"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":"zoomkoding/zoomkoding-gatsby-blog"}}}}},"pageContext":{"slug":"/study-js-es6-promise-5/","nextSlug":"/study-cs-HTTP-9/","prevSlug":"/study-cs-HTTP-10/"}},"staticQueryHashes":["1073350324","2938748437"]}