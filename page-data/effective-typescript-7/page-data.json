{"componentChunkName":"component---src-templates-blog-template-js","path":"/effective-typescript-7/","result":{"data":{"cur":{"id":"94da810f-2c09-5bef-b483-5c9c12b03a4c","html":"<h2 id=\"아이템-53-ts-기능보다는-ecmascript-기능을-사용하기\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-53-ts-%EA%B8%B0%EB%8A%A5%EB%B3%B4%EB%8B%A4%EB%8A%94-ecmascript-%EA%B8%B0%EB%8A%A5%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"아이템 53 ts 기능보다는 ecmascript 기능을 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이템 53: TS 기능보다는 ECMAScript 기능을 사용하기</h2>\n<ol>\n<li>\n<p>JS에 새로 추가된 기능은 TS의 초기 기능과 호환성 문제를 발생</p>\n<ul>\n<li>JS의 신규 기능을 그대로 채택하고 TS 초기 버전과 호환성을 포기 그러나 이미 사용되고 있던 몇 가지 기능(호환성 문제로 지양하는 방식) 있음</li>\n</ul>\n</li>\n<li>\n<p>열거형(enum)</p>\n<ul>\n<li>몇몇 값의 모음을 나타내는 방식</li>\n<li>문제점</li>\n<li>숫자 열거형에 0, 1, 2 외의 다른 숫자가 할당되면 매우 위험</li>\n<li>상수 열거형(const enum)은 런타임에 완전히 제거되어, 문자열 열거형에서 문제를 일으킴</li>\n<li>preserveConstEnums 플래그를 설정한 상수 열거형은 런타임 코드에 정보를 유지함</li>\n<li>문자열 열거형은 구조적 타이핑이 아닌 명목적 타이핑을 사용함</li>\n<li>문자열 열거형의 명목적 타이핑은 JS와 동작이 다르다는 문제가 있음</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">enum</span> Flavor <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">VANILLA</span> <span class=\"token operator\">=</span> <span class=\"token string\">'vanilla'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">CHOCOLATE</span> <span class=\"token operator\">=</span> <span class=\"token string\">'chocolate'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">STRAWBERRY</span> <span class=\"token operator\">=</span> <span class=\"token string\">'strawberry'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> flavor <span class=\"token operator\">=</span> Flavor<span class=\"token punctuation\">.</span><span class=\"token constant\">CHOCOLATE</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 타입이 Flavor</span>\nflavor <span class=\"token operator\">=</span> <span class=\"token string\">'strawberry'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 🚨 'strawberry' 형식은 'Flavor' 형식에 할당할 수 없습니다</span>\n\n<span class=\"token comment\">// 열거형 대신 리터럴 타입의 유니온 사용을 권장</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Flavor</span> <span class=\"token operator\">=</span> <span class=\"token string\">'vanilla'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'chocolate'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'strawberry'</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>매개변수 속성</p>\n<ul>\n<li>생성자의 매개변수를 사용하여 클래스 초기화 시 TS는 간결한 문법을 제공</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">public</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>\n<p>문제점</p>\n<ul>\n<li>실제로는 코드가 늘어남</li>\n<li>매개변수 속성은 런타임에는 실제로 사용되지만, TS에서는 사용되지 않는 것처럼 보임</li>\n<li>매개변수 속성과 일반 속성을 섞어서 사용하면 클래스의 설계가 혼란스러워 짐</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>네임스페이스와 트리플 슬래시 임포트</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// ES2015 스타일의 모듈(import와 export) 사용을 권장</span>\n\n<span class=\"token keyword\">namespace</span> foo <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/// &lt;reference path=\"other.ts\" /></span>\nfoo<span class=\"token punctuation\">.</span><span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol start=\"5\">\n<li>\n<p>데코레이터</p>\n<ul>\n<li>클래스, 메서드, 속성에 annotation을 붙이거나 기능을 추가하는 것</li>\n<li>문제점</li>\n<li>표준화가 완료되지 않았기 때문에 비표준으로 바뀌거나 호환성이 깨질 가능성이 있음</li>\n</ul>\n</li>\n</ol>\n<br>\n<h2 id=\"아이템-54-객체를-순회하는-노하우\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-54-%EA%B0%9D%EC%B2%B4%EB%A5%BC-%EC%88%9C%ED%9A%8C%ED%95%98%EB%8A%94-%EB%85%B8%ED%95%98%EC%9A%B0\" aria-label=\"아이템 54 객체를 순회하는 노하우 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이템 54: 객체를 순회하는 노하우</h2>\n<ol>\n<li>\n<p>편집기에서 오류가 발생하는 경우</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n one<span class=\"token operator\">:</span> <span class=\"token string\">'uno'</span><span class=\"token punctuation\">,</span>\n two<span class=\"token operator\">:</span> <span class=\"token string\">'dos'</span><span class=\"token punctuation\">,</span>\n three<span class=\"token operator\">:</span> <span class=\"token string\">'tres'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> k <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">const</span> v <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n <span class=\"token comment\">// 🚨 obj에 인덱스 시그니처가 없기 때문에 엘리먼트는 암시적으로 'any' 타입</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// k가 string 으로 인식되기 때문</span>\n<span class=\"token comment\">// k의 타입을 더욱 구체적으로 명시해서 해결가능</span>\n<span class=\"token keyword\">let</span> k<span class=\"token operator\">:</span> <span class=\"token keyword\">keyof</span> <span class=\"token keyword\">typeof</span> obj<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>k <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">const</span> v <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 정상</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">k</code>가 <code class=\"language-text\">string</code>으로 추론된 이유</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// a, b, c 외에 다른 속성이 존재하는 객체도 foo 함수의 매개변수 abc에 할당 가능하기 때문</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token constant\">ABC</span></span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  b<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  c<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>abc<span class=\"token operator\">:</span> <span class=\"token constant\">ABC</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> k <span class=\"token keyword\">in</span> abc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> v <span class=\"token operator\">=</span> abc<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 🚨</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">keyof</code>을 사용하는 것의 문제</p>\n<ul>\n<li><code class=\"language-text\">v</code>도 <code class=\"language-text\">string | number</code>로 한정되어 범위가 너무 좁아짐</li>\n</ul>\n</li>\n<li>\n<p>단지 객체의 키와 값을 순회하고 싶다면 <code class=\"language-text\">Object.entries</code>를 사용</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>abc<span class=\"token operator\">:</span> <span class=\"token constant\">ABC</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>abc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   k<span class=\"token punctuation\">;</span> <span class=\"token comment\">// string 타입</span>\n   v<span class=\"token punctuation\">;</span> <span class=\"token comment\">// any 타입</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ol>\n<br>\n<h2 id=\"아이템-55-dom-계층-구조-이해하기\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-55-dom-%EA%B3%84%EC%B8%B5-%EA%B5%AC%EC%A1%B0-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0\" aria-label=\"아이템 55 dom 계층 구조 이해하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이템 55: DOM 계층 구조 이해하기</h2>\n<ol>\n<li>\n<p>DOM 엘리먼트를 사용할 때 TS 에러</p>\n<ul>\n<li>\n<p>EventTarget : DOM 타입 중 가장 추상화된 타입으로, 이벤트리스너의 추가/제거, 이벤트 보내기만 가능</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// 'EventTarget' 형식에 'classList' 속성이 없음</span>\n<span class=\"token comment\">// Event의 currentTarget 속성의 타입은 EventTarget | null</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">handleDrag</span><span class=\"token punctuation\">(</span>eDown<span class=\"token operator\">:</span> Event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> targetEl <span class=\"token operator\">=</span> eDown<span class=\"token punctuation\">.</span>currentTarget<span class=\"token punctuation\">;</span>\n  targetEl<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dragging'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>Node : Element가 아닌 Node, 텍스트 조각과 주석</li>\n<li>Element와 HTMLElement : HTML이 아닌 엘리먼트, SVGSvgElement</li>\n<li>\n<p>HTMLxxxElement</p>\n<ul>\n<li>HTMLxxxElement 형태의 특정 엘리먼트들은 자신만의 고유한 속성을 가지고 있음 ex) HTMLImageElement(src), HTMLInputElement(value)</li>\n<li>항상 정확한 타입을 얻을 수 있는 것은 아님</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// 정확한 타입</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// HTMLButtonElement</span>\n\n<span class=\"token comment\">// 정확한 타입이 아닌 경우</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'my-div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// HTMLElement</span></code></pre></div>\n<ul>\n<li>타입 단언문 사용</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'my-div'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> HTMLDivElement<span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>strictNullChecks 설정 시, 엘리먼트가 null인 경우를 체크함</li>\n<li>\n<p>Event 는 가장 추상화된 이벤트로, 별도의 계층구조를 가짐</p>\n<ul>\n<li>ex) UIEvent, MouseEvent, TouchEvent, WheelEvent, KeyboardEvent</li>\n<li>더 많은 문맥 정보를 제공하여 DOM에 대한 타입 추론을 가능하게 해야 함</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<br>\n<h2 id=\"아이템-56-정보를-감추는-목적으로-private-사용하지-않기\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-56-%EC%A0%95%EB%B3%B4%EB%A5%BC-%EA%B0%90%EC%B6%94%EB%8A%94-%EB%AA%A9%EC%A0%81%EC%9C%BC%EB%A1%9C-private-%EC%82%AC%EC%9A%A9%ED%95%98%EC%A7%80-%EC%95%8A%EA%B8%B0\" aria-label=\"아이템 56 정보를 감추는 목적으로 private 사용하지 않기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이템 56: 정보를 감추는 목적으로 private 사용하지 않기</h2>\n<ol>\n<li>\n<p>public, protected, private 같은 접근 제어자</p>\n<ul>\n<li>TS 키워드기 때문에 컴파일 후에 제거 됨</li>\n</ul>\n</li>\n<li>\n<p>심지어 단언문을 사용하면 TS 상태에서도 private 속성에 접근 가능</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// 정보를 감추기 위해 private 을 사용하면 안 됨</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Diary</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">private</span> secret <span class=\"token operator\">=</span> <span class=\"token string\">'test'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> diary <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Diary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">(</span>diary <span class=\"token keyword\">as</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>secret<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 정상</span></code></pre></div>\n</li>\n<li>\n<p>정보를 감추기 위해 클로저 사용</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// PasswordChecker 의 생성자 외부에서 passwordHash 변수에 접근할 수 없기 때문에 정보가 숨겨 짐</span>\n<span class=\"token comment\">// 이때 passwordHash에 접근하는 메서드 역시 생성자 내부에 정의되어야 함</span>\n<span class=\"token comment\">// 메서드 정의가 생성자 내부에 있으면, 인스턴스 메서드로 생성된다는 점을 기억(메모리 낭비)</span>\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> <span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>text<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PasswordChecker</span> <span class=\"token punctuation\">{</span>\n <span class=\"token function-variable function\">checkPassword</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>password<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>passwordHash<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">checkPassword</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>password<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">return</span> <span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> passwordHash<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> checker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PasswordChecker</span><span class=\"token punctuation\">(</span><span class=\"token function\">hash</span><span class=\"token punctuation\">(</span><span class=\"token string\">'s3cret'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nchecker<span class=\"token punctuation\">.</span><span class=\"token function\">checkPassword</span><span class=\"token punctuation\">(</span><span class=\"token string\">'s3cret'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n</li>\n<li>\n<p>비공개 필드 (현재 표준화 진행중) 사용</p>\n<ul>\n<li>접두사 #</li>\n<li>타입 체크와 런타임 모두에서 비공개</li>\n<li>클래스 외부에서는 접근할 수 없지만, 클래스 메서드나 동일 클래스의 개별 인스턴스끼리는 접근이 가능</li>\n</ul>\n</li>\n</ol>\n<br>\n<h2 id=\"아이템-57-소스맵을-사용하여-ts-디버깅하기\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-57-%EC%86%8C%EC%8A%A4%EB%A7%B5%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-ts-%EB%94%94%EB%B2%84%EA%B9%85%ED%95%98%EA%B8%B0\" aria-label=\"아이템 57 소스맵을 사용하여 ts 디버깅하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이템 57: 소스맵을 사용하여 TS 디버깅하기</h2>\n<ol>\n<li>디버거는 런타임에 동작하며, 현재 동작하는 코드가 어떤 과정을 거쳤는지 모름</li>\n<li>\n<p>디버깅 문제를 해결하기 위해 브라우저는 소스맵(source map) 기능을 제공</p>\n<ul>\n<li>변환된 코드의 위치와 심벌들을 원본 코드의 원래 위치와 심벌들로 매핑함</li>\n</ul>\n</li>\n<li>\n<p>TS의 소스맵 활성화</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">   <span class=\"token comment\">// tsconfig.json</span>\n   <span class=\"token comment\">// 각 .ts 파일에 대해서 .js와 .js.map 두 개의 파일을 생성</span>\n   <span class=\"token punctuation\">{</span>\n     <span class=\"token string\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token string\">\"sourceMap\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n     <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>소스맵에 대해 알아야 할 사항들</p>\n<ul>\n<li>TS와 함께 번들러나 압축기를 사용하고 있다면, 번들러나 압축기가 각자의 소스맵을 생성. 이상적인 디버깅을 위해서는 생성된 JS가 아닌 원본 TS 소스로 매핑되도록 해야 함</li>\n<li>상용 환경에 소스맵이 유출되고 있는지 확인해야 함. 소스맵에 원본 코드의 인라인 복사본이 포함되어 있다면 공개해서는 안될 내용이 들어있을 수 있음</li>\n</ul>\n</li>\n</ol>\n<br>\n<h3 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h3>\n<ul>\n<li><a href=\"https://github.com/pagers-org/Effective-TypeScript\">이펙티브 타입스크립트 Study</a></li>\n<li><a href=\"http://www.yes24.com/Product/Goods/102124327\">이펙티브 타입스크립트 책</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-53-ts-%EA%B8%B0%EB%8A%A5%EB%B3%B4%EB%8B%A4%EB%8A%94-ecmascript-%EA%B8%B0%EB%8A%A5%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\">아이템 53: TS 기능보다는 ECMAScript 기능을 사용하기</a></li>\n<li><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-54-%EA%B0%9D%EC%B2%B4%EB%A5%BC-%EC%88%9C%ED%9A%8C%ED%95%98%EB%8A%94-%EB%85%B8%ED%95%98%EC%9A%B0\">아이템 54: 객체를 순회하는 노하우</a></li>\n<li><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-55-dom-%EA%B3%84%EC%B8%B5-%EA%B5%AC%EC%A1%B0-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0\">아이템 55: DOM 계층 구조 이해하기</a></li>\n<li><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-56-%EC%A0%95%EB%B3%B4%EB%A5%BC-%EA%B0%90%EC%B6%94%EB%8A%94-%EB%AA%A9%EC%A0%81%EC%9C%BC%EB%A1%9C-private-%EC%82%AC%EC%9A%A9%ED%95%98%EC%A7%80-%EC%95%8A%EA%B8%B0\">아이템 56: 정보를 감추는 목적으로 private 사용하지 않기</a></li>\n<li>\n<p><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-57-%EC%86%8C%EC%8A%A4%EB%A7%B5%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-ts-%EB%94%94%EB%B2%84%EA%B9%85%ED%95%98%EA%B8%B0\">아이템 57: 소스맵을 사용하여 TS 디버깅하기</a></p>\n<ul>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"아이템 53: TS 기능보다는 ECMAScript 기능을 사용하기 JS에 새로 추가된 기능은 TS의 초기 기능과 호환성 문제를 발생 JS의 신규 기능을 그대로 채택하고 TS 초기 버전과 호환성을 포기 그러나 이미 사용되고 있던 몇 가지 기능(호환성 문제로 지양하는 방식) 있음 열거형(enum) 몇몇 값의 모음을 나타내는 방식 문제점 숫자 열거형에 0, 1, 2 외의 다른 숫자가 할당되면 매우 위험 상수 열거형(const enum)은 런타임에 완전히 제거되어, 문자열 열거형에서 문제를 일으킴 preserveConstEnums 플래그를 설정한 상수 열거형은 런타임 코드에 정보를 유지함 문자열 열거형은 구조적 타이핑이 아닌 명목적 타이핑을 사용함 문자열 열거형의 명목적 타이핑은 JS와 동작이 다르다는 문제가 있음 매개변수 속성 생성자의 매개변수를 사용하여 클래스 초기화 시 TS는 간결한 문법을 제공 문제점 실제로는 코드가 늘어남 매개변수 속성은 런타임에는 실제로 사용되지만, TS에서는 …","frontmatter":{"date":"June 25, 2023","title":"Effective TypeScript 7장","categories":"Study","author":"Kay","emoji":"👋"},"fields":{"slug":"/effective-typescript-7/"}},"next":{"id":"c4b41970-424e-56b3-b897-50bfabd8661f","html":"<h2 id=\"업무를-통해-배운점\" style=\"position:relative;\"><a href=\"#%EC%97%85%EB%AC%B4%EB%A5%BC-%ED%86%B5%ED%95%B4-%EB%B0%B0%EC%9A%B4%EC%A0%90\" aria-label=\"업무를 통해 배운점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>업무를 통해 배운점</h2>\n<ol>\n<li>개발 하기 앞서 스스로 설계를 해보고, 어려운 문제라도 단순하게 생각을 해보자.</li>\n<li>스스로 오버 스택이 아닌지 판단 할 줄 알아야 하며, 단순하게 해결할 수 있는 방법이 없는지 고민해 봐야 한다.</li>\n<li>PR을 할 때(특히 비즈니스적으로 중요한 서비스 개발), 내가 개발한 사항을 다른 팀원분들도 테스트 할 수 있도록 문서에 작성해야 한다.</li>\n<li>해피 케이스를 생각하고 개발을 진행한 뒤에, 다양한 케이스를 고려해서 개발을 해야 한다. 이 때 개발하는 과정에서 재사용성을 고려하지 않거나 특정 컴포넌트 안에 비즈니스 로직이 얽혀 있으면 추후에 요구사항에 맞게 개발하기가 쉽지 않다.</li>\n<li>데이터의 초깃 값을 <code class=\"language-text\">Null</code>로 하는 이유는, 만약에 서버로 부터 요청한 데이터가 <code class=\"language-text\">[]</code>이고 초깃 값이 <code class=\"language-text\">[]</code>이면 현재 어떤 상황인지 명확하지가 않아, 초깃 값을 <code class=\"language-text\">Null</code>로 명시해, 서버로부터 가져온 데이터가 확실하게 어떤 데이터인지 구분할 필요가 있다.</li>\n<li>핸들러 함수를 만들더라고 각 요구사항에 대비할 수 있도록 Util 함수를 맵핑 할 수 있도록 빼는 연습이 필요하다. 예를 들어 특정 상황에 목록 아이템을 클릭 했을 때, Toast를 띄워야 한다면, 핸들러 함수 안에 세부적으로 요청하는 함수를 외부에서 주입하도록 개발을 진행하면 유연하게 요구사항을 대처할 수 있을 것 같다.</li>\n<li>BE에서 전달해주는 DB 값을 잘 활용하자. FE에서 BE에 주는 값을 가지고 FE에서만 사용하는 값을 조작해야 하는 상황과 그렇지 않은 상황을 구분해 개발을 시작해야 하자.</li>\n</ol>\n<br>\n<h2 id=\"한-주-회고\" style=\"position:relative;\"><a href=\"#%ED%95%9C-%EC%A3%BC-%ED%9A%8C%EA%B3%A0\" aria-label=\"한 주 회고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>한 주 회고</h2>\n<p>결론부터 말하자면 정신이 없다. 업무도 많고, 익숙하지 않은 환경에서 개발을 진행하다보니 개인적으로 많이 힘이 드는 부분이 있다. 또한 개발 공부를 시작한 이후로 제대로 쉬지도 않고 지금까지 달려온 것 같다. 스스로 임계점에 있는 느낌이 든다. 물론 이 임계점을 넘으면 분명 내가 경험해 보지 못한 시야를 볼 수 있어 많은 기대가 있지만, 그래도 제대로 쉬고 싶은 생각이 있다.</p>\n<p>하지만, 지금은 아닌 것 같다.</p>\n<p>내가 생각했을 때, 현재 하고 있는 업무가 비즈니스 적으로 너무나 중요하다고 느껴져 조금 만 더 힘을 내고 싶다.</p>\n<p>그리고 요즘들어 개발 생산성을 높이기위한 방법이 무엇이 있는지 고민을 하고 있다. 주어진 시간은 한정적인데 어떻게 하면 더 빠르고 더 퀄리티 높은 개발을 할 수 있는지 혹은 그렇게 하고 있는 사람들은 어떻게 하는지가 매우 관심사 이다.</p>\n<p>개인적으로 이번 스프린트를 끝내고 따로 시간을 내어서 디자인 시스템을 구축하고 싶다. 디자인 시스템만 제대로 잡혀있어도 개발 생상성을 높일 수 있을 것 같고 퀄리티 면에서는 PR을 날리기 전에 Chat GPT에서 코드 검사하는 로직을 적용하면 어떨까 하는 생각을 하고 있다.(물론 팀내에서 중요하게 여기는 컨벤션을 학습시켜야 한다.)</p>\n<p>이런 저런 생각이 많은 한 주였다. 몸도 많이 지쳤는데 여전히 머리는 아직 풀지 않은 로직을 생각하고 있다. 이럴 때 스스로 ‘무언가에 집중’하는 삶을 살고 있구나 생각을 한다.</p>\n<p>마지막으로 전 직장 CTO분과 점심을 먹었다. 함께 일했었던 이야기, 근황 그리고 덕담 등 다양한 주제에 대해 이야기를 나누었다. 오랜만에 뵈서 너무나 기뻤고 같이 일하는 팀원들과의 시간이 너무나도 중요하고 소중한 거구나 라는 것을 새삼 다시 느끼게 되었다.</p>\n<p>언제 또 전 직장 동료분들과 같이 일 할 수 있을까? 확률로는 많이 높지 않기에 현재 동료들과 함께 일하는 시간을 소중하게 여기자.</p>\n<p>이번 주도 수고했다.</p>\n<p>p.s\n항상 저를 응원해주시는 사람들에게 감사함을 전합니다.</p>\n<br>\n<h3 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h3>\n<ul>\n<li><a href=\"https://velog.io/@jeonbyeongmin/Chat-GPT%ED%95%9C%ED%85%8C-%EC%BD%94%EB%93%9C%EB%A6%AC%EB%B7%B0-%EC%8B%9C%EC%BC%B0%EC%8A%B5%EB%8B%88%EB%8B%A4..-feat.-Github-Action\">Chat GPT로 코드리뷰 시키기</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EC%97%85%EB%AC%B4%EB%A5%BC-%ED%86%B5%ED%95%B4-%EB%B0%B0%EC%9A%B4%EC%A0%90\">업무를 통해 배운점</a></li>\n<li>\n<p><a href=\"#%ED%95%9C-%EC%A3%BC-%ED%9A%8C%EA%B3%A0\">한 주 회고</a></p>\n<ul>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"June 24, 2023","title":"6월 4주 회고","categories":"Log","author":"Kay","emoji":"👋"},"fields":{"slug":"/write-log-230624/"}},"prev":{"id":"4017e440-6bf7-5cd2-97d8-ea43c4256872","html":"<h2 id=\"아이템-58-모던-자바스크립트로-작성하기\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-58-%EB%AA%A8%EB%8D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%A1%9C-%EC%9E%91%EC%84%B1%ED%95%98%EA%B8%B0\" aria-label=\"아이템 58 모던 자바스크립트로 작성하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이템 58: 모던 자바스크립트로 작성하기</h2>\n<ol>\n<li>\n<p>타입스크립트의 컴파일러를 자바스크립트의 ‘트랜스파일러’로 사용</p>\n<ul>\n<li>타입스크립트는 자바스크립트의 상위집합이므로 타입스크립트를 자바스크립트로 컴파일할 수 있음</li>\n</ul>\n</li>\n<li>\n<p>ECMAScript 모듈 사용</p>\n<ul>\n<li>ES2015에 등장한 import와 export 를 사용하는 모듈이 표준이 되었음</li>\n</ul>\n</li>\n<li>\n<p>프로토타입 대신 클래스 사용</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n first<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n last<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>first<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> last<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>first <span class=\"token operator\">=</span> first<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>last <span class=\"token operator\">=</span> last<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n\n <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>first <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>last<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> marie <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Marie'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Curie'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> personName <span class=\"token operator\">=</span> marie<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">var</code> 대신 <code class=\"language-text\">let / const</code> 사용</p>\n<ul>\n<li>스코프 문제 피하기</li>\n<li>함수 선언문 대신 함수 표현식을 사용하여 호이스팅 문제 피하기</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">for(;;)</code> 대신 <code class=\"language-text\">for-of</code> 또는 배열 메서드 사용</p>\n<ul>\n<li><code class=\"language-text\">for-of</code> 루프는 코드가 짧고 인덱스 변수를 사용하지 않아 실수를 줄일 수 있음</li>\n<li>인덱스 변수가 필요한 경우엔 <code class=\"language-text\">forEach</code> 메서드 사용 권장</li>\n</ul>\n</li>\n<li>\n<p>함수 표현식보다 화살표 함수 사용</p>\n<ul>\n<li>상위 스코프의 this를 유지할 수 있음</li>\n<li>코드를 더 직관적이고 간결하게 작성할 수 있음</li>\n</ul>\n</li>\n<li>\n<p>단축 객체 표현과 구조 분해 할당 사용</p>\n<ul>\n<li>변수와 객체 속성의 이름이 같은 경우</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  y <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  z <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> pt <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>객체 속성 중 함수를 축약해서 표현하는 방법</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">onClickLong</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">onClickCompact</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>객체 구조 분해</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n  props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">,</span> b <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>함수 매개변수 기본값 사용</p>\n<ul>\n<li>기본값을 기반으로 타입 추론이 가능하기 때문에, 타입스크립트로 마이그레이션 시 매개변수에 타입 구문을 쓰지 않아도 됨</li>\n</ul>\n</li>\n<li>\n<p>저수준 프로미스나 콜백 대신 <code class=\"language-text\">async / await</code> 사용</p>\n<ul>\n<li>버그나 실수를 방지할 수 있고, 비동기 코드에 타입 정보가 전달되어 타입 추론을 가능하게 함</li>\n</ul>\n</li>\n<li>\n<p>연관 배열에 객체 대신 Map과 Set 사용</p>\n<ul>\n<li>인덱스 시그니처 사용 시 : <code class=\"language-text\">constructor</code> 등의 특정 문자열이 주어지는 경우 예약어로 인식하는 문제</li>\n<li>\n<p>Map 사용</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">countWordsMap</span><span class=\"token punctuation\">(</span>text<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">const</span> counts <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> word <span class=\"token keyword\">of</span> text<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[\\s,.]+</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  counts<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>counts<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">return</span> counts<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>타입스크립트에 use strict 넣지 않기</p>\n<ul>\n<li>타입스크립트는 기본적으로 ‘use strict’를 사용</li>\n<li>alwaysStrict 또는 strict 컴파일러 옵션 설정 권장</li>\n</ul>\n</li>\n<li>TC39나 타입스크립트 릴리즈 노트를 통해 최신 기능 확인 가능</li>\n</ol>\n<br>\n<h2 id=\"아이템-59-타입스크립트-도입-전에-ts-check와-jsdoc으로-시험해-보기\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-59-%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EB%8F%84%EC%9E%85-%EC%A0%84%EC%97%90-ts-check%EC%99%80-jsdoc%EC%9C%BC%EB%A1%9C-%EC%8B%9C%ED%97%98%ED%95%B4-%EB%B3%B4%EA%B8%B0\" aria-label=\"아이템 59 타입스크립트 도입 전에 ts check와 jsdoc으로 시험해 보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이템 59: 타입스크립트 도입 전에 @ts-check와 JSDoc으로 시험해 보기</h2>\n<ol>\n<li>\n<p><code class=\"language-text\">@ts-check</code> 지시자를 사용하여 타입 체커가 파일을 분석하고, 발견된 오류를 보고하도록 지시할 수 있음</p>\n<ul>\n<li>매우 느슨한 수준으로 타입 체크를 수행</li>\n<li>타입 불일치나 함수의 매개변수 개수 불일치 등</li>\n</ul>\n</li>\n<li>\n<p>선언되지 않은 전역 변수</p>\n<ul>\n<li>숨어 있는 변수라면 변수를 제대로 인식할 수 있게 별도로 타입 선언 파일을 만들기</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// @ts-check</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>firstName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// types.d.ts</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserData</span> <span class=\"token punctuation\">{</span>\n firstName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n lastName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">let</span> user<span class=\"token operator\">:</span> UserData<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 선언 파일을 찾지 못하는 경우 ‘트리플 슬래시’ 참조를 사용하여 명시적으로 import</span>\n<span class=\"token comment\">// @ts-check</span>\n<span class=\"token comment\">// &lt;reference path=\"./types.d.ts\" /></span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>firstName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 정상</span></code></pre></div>\n</li>\n<li>\n<p>알 수 없는 라이브러리</p>\n<ul>\n<li>서드파티 라이브러리의 타입 정보</li>\n<li><code class=\"language-text\">@types/xxx</code> 설치하기</li>\n</ul>\n</li>\n<li>\n<p>DOM 문제</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// @ts-check</span>\n<span class=\"token keyword\">const</span> ageEl <span class=\"token operator\">=</span> <span class=\"token comment\">/** @type {HTMLInputElement} */</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nageEl<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">'12'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 정상</span></code></pre></div>\n</li>\n<li>\n<p>부정확한 JSDoc</p>\n<ul>\n<li>타입스크립트 언어 서비스는 타입을 추론해서 JSDoc을 자동으로 생성</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// @ts-check</span>\n<span class=\"token comment\">/**\n* @param {number} val\n*/</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">double</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">return</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> val<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ol>\n<br>\n<h2 id=\"아이템-60-allowjs로-타입스크립트와-자바스크립트-같이-사용하기\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-60-allowjs%EB%A1%9C-%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%99%80-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EA%B0%99%EC%9D%B4-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"아이템 60 allowjs로 타입스크립트와 자바스크립트 같이 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이템 60: allowJS로 타입스크립트와 자바스크립트 같이 사용하기</h2>\n<ol>\n<li>\n<p>allowJS 옵션</p>\n<ul>\n<li>타입 체크와 관련이 없지만, 기존 빌드 과정에 타입스크립트 컴파일러를 추가하기 위함</li>\n<li>모듈 단위로 타입스크립트로 전환하는 과정에서 테스트를 수행하기 위함</li>\n</ul>\n</li>\n<li>\n<p>프레임워크 없이 빌드 체인 직접 구성하기</p>\n<ul>\n<li>outDir 옵션 사용하기</li>\n</ul>\n</li>\n</ol>\n<br>\n<h2 id=\"아이템-61-의존성-관계에-따라-모듈-단위로-전환하기\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-61-%EC%9D%98%EC%A1%B4%EC%84%B1-%EA%B4%80%EA%B3%84%EC%97%90-%EB%94%B0%EB%9D%BC-%EB%AA%A8%EB%93%88-%EB%8B%A8%EC%9C%84%EB%A1%9C-%EC%A0%84%ED%99%98%ED%95%98%EA%B8%B0\" aria-label=\"아이템 61 의존성 관계에 따라 모듈 단위로 전환하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이템 61: 의존성 관계에 따라 모듈 단위로 전환하기</h2>\n<ol>\n<li>\n<p>의존성 관련 오류 없이 작업하려면, 다른 모듈에 의존하지 않는 최하단 모듈부터 작업을 시작해서 의존성의 최상단에 있는 모듈을 마지막으로 완성해야 함</p>\n<ul>\n<li>서드파티 라이브러리 타입 정보를 가장 먼저 해결 (@types/)</li>\n<li>외부 API의 타입 정보 추가</li>\n</ul>\n</li>\n<li>리팩터링은 타입스크립트 전환 작업이 완료된 후에 해야 함</li>\n<li>\n<p>선언되지 않은 클래스 멤버</p>\n<ul>\n<li>‘누락된 모든 멤버 추가’ 빠른 수정</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Greeting</span> <span class=\"token punctuation\">{</span>\n  greeting<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 직접 수정 필요</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>greeting <span class=\"token operator\">=</span> <span class=\"token string\">'Hello'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>greeting <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>타입이 바뀌는 값</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// 한번에 객체 생성 또는 타입 단언문 사용</span>\n<span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nstate<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'New York'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 🚨 '{}' 유형에 'name' 속성이 없습니다</span>\nstate<span class=\"token punctuation\">.</span>capital <span class=\"token operator\">=</span> <span class=\"token string\">'Albany'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 🚨 '{}' 유형에 'capital' 속성이 없습니다</span></code></pre></div>\n</li>\n<li>자바스크립트에서 JSDoc과 @ts-check를 사용해 타입 정보를 추가한 상태라면, 타입스크립트로 전환하는 순간 타입 정보가 ‘무효화’된다는 점에 주의</li>\n<li>마지막으로 테스트 코드를 타입스크립트로 전환</li>\n</ol>\n<br>\n<h2 id=\"아이템-62-마이그레이션의-완성을-위해-noimplicitany-설정하기\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-62-%EB%A7%88%EC%9D%B4%EA%B7%B8%EB%A0%88%EC%9D%B4%EC%85%98%EC%9D%98-%EC%99%84%EC%84%B1%EC%9D%84-%EC%9C%84%ED%95%B4-noimplicitany-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0\" aria-label=\"아이템 62 마이그레이션의 완성을 위해 noimplicitany 설정하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이템 62: 마이그레이션의 완성을 위해 noImplicitAny 설정하기</h2>\n<ol>\n<li><code class=\"language-text\">noImplicitAny</code> 설정을 통해 타입 선언과 관련된 실제 오류를 드러낼 수 있음</li>\n<li>최종적으로 가장 강력한 설정은 <code class=\"language-text\">\"srict: true\"</code></li>\n</ol>\n<br>\n<h3 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h3>\n<ul>\n<li><a href=\"https://github.com/pagers-org/Effective-TypeScript\">이펙티브 타입스크립트 Study</a></li>\n<li><a href=\"http://www.yes24.com/Product/Goods/102124327\">이펙티브 타입스크립트 책</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-58-%EB%AA%A8%EB%8D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%A1%9C-%EC%9E%91%EC%84%B1%ED%95%98%EA%B8%B0\">아이템 58: 모던 자바스크립트로 작성하기</a></li>\n<li><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-59-%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EB%8F%84%EC%9E%85-%EC%A0%84%EC%97%90-ts-check%EC%99%80-jsdoc%EC%9C%BC%EB%A1%9C-%EC%8B%9C%ED%97%98%ED%95%B4-%EB%B3%B4%EA%B8%B0\">아이템 59: 타입스크립트 도입 전에 @ts-check와 JSDoc으로 시험해 보기</a></li>\n<li><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-60-allowjs%EB%A1%9C-%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%99%80-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EA%B0%99%EC%9D%B4-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\">아이템 60: allowJS로 타입스크립트와 자바스크립트 같이 사용하기</a></li>\n<li><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-61-%EC%9D%98%EC%A1%B4%EC%84%B1-%EA%B4%80%EA%B3%84%EC%97%90-%EB%94%B0%EB%9D%BC-%EB%AA%A8%EB%93%88-%EB%8B%A8%EC%9C%84%EB%A1%9C-%EC%A0%84%ED%99%98%ED%95%98%EA%B8%B0\">아이템 61: 의존성 관계에 따라 모듈 단위로 전환하기</a></li>\n<li>\n<p><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-62-%EB%A7%88%EC%9D%B4%EA%B7%B8%EB%A0%88%EC%9D%B4%EC%85%98%EC%9D%98-%EC%99%84%EC%84%B1%EC%9D%84-%EC%9C%84%ED%95%B4-noimplicitany-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0\">아이템 62: 마이그레이션의 완성을 위해 noImplicitAny 설정하기</a></p>\n<ul>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"June 30, 2023","title":"Effective TypeScript 8장","categories":"Study","author":"Kay","emoji":"👋"},"fields":{"slug":"/effective-typescript-8/"}},"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/effective-typescript-7/","nextSlug":"/write-log-230624/","prevSlug":"/effective-typescript-8/"}},"staticQueryHashes":["1073350324","2938748437"]}