{"componentChunkName":"component---src-templates-blog-template-js","path":"/write-log-240113/","result":{"data":{"cur":{"id":"881cfecc-0d5e-5c3f-821f-f6179c556bd6","html":"<h2 id=\"회고\" style=\"position:relative;\"><a href=\"#%ED%9A%8C%EA%B3%A0\" aria-label=\"회고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>회고</h2>\n<h3 id=\"1-업무-회고\" style=\"position:relative;\"><a href=\"#1-%EC%97%85%EB%AC%B4-%ED%9A%8C%EA%B3%A0\" aria-label=\"1 업무 회고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 업무 회고</h3>\n<ul>\n<li>개인적으로 내가 설정한 일정을 지켰을 때, 기분이 매우 좋았다.</li>\n<li>FE개발자로써, 스스로 이 분야에 대해 호기심을 가지지 않았다는 사실을 알게 되어, 앞으로 근본적인 질문부터 시작을 하면서(ex. ‘왜 React가 Vue보다 많은 사람들이 사용하고 있지?, React, Vue, Anglur의 차이점과 각 프레임워크의 장단점은 무엇이지?’ 등) FE의 분야에 대해 흥미와 호기심을 의식적으로 갖는 연습을 해야 겠다.</li>\n<li>위 내용과 마찬가지로 평상시에도 ‘왜?‘라는 질문을 던지면서 대답하는 연습을 해야 겠다.(사실 ‘흥미’가 생기지 않는다고 그냥 넘겼던 것 같은데, 적어도 내가 FE개발을 하면서 돈을 번다라면 알아야 할 것은 정확하게 이해하고 알아야 겠다는 생각을 하게되었다.)</li>\n<li>단순히 ‘React가 많이 사용하니깐 이것만 잘해야지’ 라는 생각을 하는 것 자체가 나의 가능성을 막는 생각이다.</li>\n<li>내가 일하고 있는 회사가 사용중인 서비스에 대해 관심을 가지면서 어떤 기능때문에 사용하는지, 그리고 왜 사용하는지 등을 다른팀원분들에게 물어보는 시간도 가져야 겠다.</li>\n<li>사실 나는 팀원분들에게 피드백 요청을 자주하는 편인데, 피드백 내용을 잘 정리해서 지금 당장 행동해야 할 ‘우선순위’를 정하는 것이 필요하다.</li>\n<li>일을 하면서 ‘단기’목표도 중요하지만, ‘은퇴’이 후에 삶도 지금 부터 생각하면서 준비를 하는 것도 중요하다.(인간은 사회적 동물이기 때문이다. 그리고 인간은 일을 하지 않게 되었을 때, 우울증 걸릴 확률이 올라간다고 한다.)</li>\n<li>모바일에서 사용자가 숫자만 입력하는 Form에서는 숫자 키보드를 보여주는 것이 좋다. 이러한 디테일을 챙길 수 있도록 노력하자.</li>\n<li>input 태그(type이 file 일 때)에서 <code class=\"language-text\">accept</code> 속성을 통해 특정 파일만 업로드 할 수 있다. 만약에 해당 속성을 입력하지 않으면 모든 파일을 업로드 가능 하다.</li>\n<li>API에서 에러를 던져준다고 무조건 BE쪽 문제라고 단정짓지 말자. FE쪽에서 API를 요청할 때, <code class=\"language-text\">timeout</code>과 관련된 문제일 수 도 있다. 그래서 BE에서 정말 데이터를 주는지 확실히 파악을 하고 BE 팀에게 요청을 드리자.</li>\n<li>\n<p>앱팀에서 전달받은 동적링크에 대해 문제가 있을 때, 무조건적으로 앱팀에게 물어보기 보다는 해당 동적링크에 대해 분석을 통해 구체적으로 어떤 내용이 문제가 있는지 자세히 요청하는 태도가 필요</p>\n<ul>\n<li>동적링크에서 <code class=\"language-text\">apn</code>는 Android 장치에서 링크를 클릭했을 때 열리는 앱의 패키지 이름</li>\n<li>동적링크에서 <code class=\"language-text\">isi</code>는 iOS에서 앱을 찾기 위해 사용되는 앱 스토어의 고유 ID</li>\n<li>동적링크에서 <code class=\"language-text\">ibi</code>는 iOS 장치에서 링크를 클릭했을 때 열리는 앱의 번들 식별자</li>\n<li>동적링크에서 <code class=\"language-text\">efr=1</code>는 사용자가 첫 동적링크를 실행했을 때만, 특정 URL로 이동시키기 위해 사용되는 플래그 값</li>\n</ul>\n</li>\n<li>\n<p>React에서 렌더링과 마운트 차이</p>\n<ul>\n<li>렌더링: 컴포넌트가 UI를 그리는 과정</li>\n<li>마운트: 컴포넌트가 처음으로 DOM에 삽입되는 과정</li>\n</ul>\n</li>\n</ul>\n<br>\n<h3 id=\"2-일상-회고\" style=\"position:relative;\"><a href=\"#2-%EC%9D%BC%EC%83%81-%ED%9A%8C%EA%B3%A0\" aria-label=\"2 일상 회고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 일상 회고</h3>\n<p>퇴사하신, 리더분들(블록체인, 프론트, 디자인)과 함께 팀원집에서 집들이를 했다. 함께 있는 시간이 너무나 행복했다. 개인적으로 그 시간만큼은 아무런 걱정없이 팀원분들과 함께 즐거운 시간을 보낼 수 있었다.</p>\n<p>그리고 퇴사를 해도 환영을 받을 수 있는 팀원 및 리더가 될 수 있도록 노력을 해야겠다고 생각을 해보았다. 일하면서 모든 사람에게 만족을 시키거나, 도움을 줄 순 없지만, 그래도 적어도 최소 한 명이라고 좋은 영향을 줄 수 있다라면 의미있는 회사생활을 했다고 생각을 할 것 같다.</p>\n<br>\n<h3 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h3>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%ED%9A%8C%EA%B3%A0\">회고</a></p>\n<ul>\n<li><a href=\"#1-%EC%97%85%EB%AC%B4-%ED%9A%8C%EA%B3%A0\">1. 업무 회고</a></li>\n<li><a href=\"#2-%EC%9D%BC%EC%83%81-%ED%9A%8C%EA%B3%A0\">2. 일상 회고</a></li>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"회고 1. 업무 회고 개인적으로 내가 설정한 일정을 지켰을 때, 기분이 매우 좋았다. FE개발자로써, 스스로 이 분야에 대해 호기심을 가지지 않았다는 사실을 알게 되어, 앞으로 근본적인 질문부터 시작을 하면서(ex. ‘왜 React가 Vue보다 많은 사람들이 사용하고 있지?, React, Vue, Anglur의 차이점과 각 프레임워크의 장단점은 무엇이지?’ 등) FE의 분야에 대해 흥미와 호기심을 의식적으로 갖는 연습을 해야 겠다. 위 내용과 마찬가지로 평상시에도 ‘왜?‘라는 질문을 던지면서 대답하는 연습을 해야 겠다.(사실 ‘흥미’가 생기지 않는다고 그냥 넘겼던 것 같은데, 적어도 내가 FE개발을 하면서 돈을 번다라면 알아야 할 것은 정확하게 이해하고 알아야 겠다는 생각을 하게되었다.) 단순히 ‘React가 많이 사용하니깐 이것만 잘해야지’ 라는 생각을 하는 것 자체가 나의 가능성을 막는 생각이다. 내가 일하고 있는 회사가 사용중인 서비스에 대해 관심을 가지면서 어떤 기능때문에 …","frontmatter":{"date":"January 13, 2024","title":"2024년 1월 2주차 회고","categories":"Log","author":"Kay","emoji":"👋"},"fields":{"slug":"/write-log-240113/"}},"next":{"id":"3daf4a2a-da7d-54cb-8c83-d84a5b3931f7","html":"<h2 id=\"-webpack-dev-prod-config-분리\" style=\"position:relative;\"><a href=\"#-webpack-dev-prod-config-%EB%B6%84%EB%A6%AC\" aria-label=\" webpack dev prod config 분리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✅ webpack dev prod config 분리</h2>\n<ul>\n<li>development와 production의 빌드 목표는 서로 다름.</li>\n<li>development에서는 강력한 소스 매핑, localhost 서버에서는 라이브 리로딩이나 HMR(Hot Module Replacement) 기능을 원함.</li>\n<li>production의 목표는 로드 시간을 줄이기 위해 번들 최소화, 가벼운 소스맵 및 에셋 최적화에 초점을 맞춰야 함. 공식 문서에서는 webpack 설정을 분리하여 작성하는 것을 권장하고 있음</li>\n<li>dev와 prod에서 공통으로 사용하는 설정들은 <code class=\"language-text\">webpack.common.js</code>에 작성하고, webpack-merge를 사용하여 common의 설정 내용을 dev와 prod에서 확장하여 사용할 수 있음</li>\n</ul>\n<br>\n<h2 id=\"-babelpreset-env의-target-browserslist-설정\" style=\"position:relative;\"><a href=\"#-babelpreset-env%EC%9D%98-target-browserslist-%EC%84%A4%EC%A0%95\" aria-label=\" babelpreset env의 target browserslist 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✅ babel/preset-env의 target browserslist 설정</h2>\n<ul>\n<li>앱을 만들 때 지원할 브라우저를 명시할 수 있음.</li>\n<li>ES6와 같은 최신 자바스크립트 문법을 사용할 때 browserslist를 명시해 주면, 트랜스파일러나 모듈 번들러가 현재 타겟으로 하는 브라우저를 알 수 있음.</li>\n<li>최신 문법을 지원하지 않는 브라우저(IE 11버전 이하)를 그대로 사용한다면 별도의 polyfill을 설치해줘야 함.</li>\n<li>현재 프로젝트에서는 크롬 50버전 이상 또는 전체 브라우저의 최신 2개의 버전을 지원하며, IE 11 버전 이하의 브라우저는 지원하지 않기로 했음.</li>\n<li>전체 query 목록은 <a href=\"https://github.com/browserslist/browserslist#queries\">여기</a>서 확인할 수 있음.</li>\n<li>babel의 <code class=\"language-text\">@babel/preset-env</code> 설정에 browserslist를 명시해주는 방법도 있지만, 현재 패키지에서 확인하는 방법이 좋다고 생각하여 package.json에 작성 후 webpack에서 참조하도록 했음</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">// package.json</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token property\">\"browserslist\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"chrome > 50 or last 2 versions and not ie &lt;= 11\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// webpack.config.js</span>\n<span class=\"token comment\">// browserslist 설정이 있다면 target 옵션은 디폴트로 해당 browserslist를 가리키게 됨.</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  target<span class=\"token operator\">:</span> <span class=\"token string\">'browserslist'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">npx browserslist</code> 명령어를 통해 현재 앱에서 타겟 환경으로 지정한 브라우저와 그 버전을 명시한 목록을 볼 수 있음</li>\n</ul>\n<br>\n<h2 id=\"-file-loader-대신-assetresource\" style=\"position:relative;\"><a href=\"#-file-loader-%EB%8C%80%EC%8B%A0-assetresource\" aria-label=\" file loader 대신 assetresource permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✅ file-loader 대신 asset/resource</h2>\n<ul>\n<li>file-loader 모듈은 개발 시 import/require 구문으로 사용되는 에셋 파일들을 번들 결과의 output 폴더에 생성해줌.</li>\n<li>webpack v5부터 deprecate되었으며, 현재는 asset/resource를 사용함.</li>\n<li>generator 옵션을 사용하여 번들 이후 생성될 파일의 이름을 설정해줄 수 있음.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// webpack.config.js</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  module<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    rules<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token comment\">// ...</span>\n      <span class=\"token punctuation\">{</span>\n        test<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.(png|jpe?g|gif|webp)$</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">,</span>\n        type<span class=\"token operator\">:</span> <span class=\"token string\">'asset/resource'</span><span class=\"token punctuation\">,</span>\n        generator<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          filename<span class=\"token operator\">:</span> <span class=\"token string\">'static/[name][ext]'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<br>\n<h2 id=\"-타입-체킹-기능-사용\" style=\"position:relative;\"><a href=\"#-%ED%83%80%EC%9E%85-%EC%B2%B4%ED%82%B9-%EA%B8%B0%EB%8A%A5-%EC%82%AC%EC%9A%A9\" aria-label=\" 타입 체킹 기능 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✅ 타입 체킹 기능 사용</h2>\n<ul>\n<li>babel은 ES6 코드를 ES5 이하의 문법으로 컴파일해주지만, 타입 체크는 해주지 않음.</li>\n<li>babel에서 기본으로 제공하는 @babel/preset-typescript preset은 타입스크립트 문법을 브라우저가 이해할 수 있게끔 해주는 역할만 수행할 뿐, 타입 체크를 해주지 않음</li>\n<li>별도의 타입 체크를 위해 tsc와 같은 타입스크립트 컴파일러를 설치하여 타입 체크를 수행할 수 있지만, 그보다 webpack과의 결합도를 위해 fork-ts-checker-webpack-plugin을 적용 할 수 있음.</li>\n<li>fork-ts-checker-webpack-plugin은 babel 컴파일 과정에서 별도로 동작하여, 타입 체크와 babel 컴파일을 병렬적으로 수행할 수 있다는 장점이 있음.</li>\n<li>ts-loader를 사용하여 babel에서 타입 체크를 수행할 수 있지만, 혼자 트랜스파일링과 타입 체크를 모두 다 하게 되기 때문에 느리다는 단점이 있음. 공식 문서에서는 babel-loader의 사용을 권장함</li>\n</ul>\n<br>\n<h2 id=\"-defineplugin\" style=\"position:relative;\"><a href=\"#-defineplugin\" aria-label=\" defineplugin permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✅ DefinePlugin</h2>\n<ul>\n<li>컴파일 타임에 사용할 값들을 지정해줌.</li>\n<li>구체적으로는 production mode에서 사용할 환경변수들을 가져와 정의해줄 수 있음.</li>\n<li>Github Actions나 Jenkins 등 CI/CD를 도와주는 툴에 secret variable로 앱에서 사용하는 API key 등의 환경변수를 설정하고, 빌드 시점에 해당 환경에서 필요한 변수를 취득하여 앱에 적용해 줌.</li>\n<li>production mode에서 SENTRY의 DSN을 불러와 사용해주기 위해 작성.</li>\n<li>DefinePlugin의 key-value 쌍에서 key값은 항상 아래처럼 문자열로 감싸줘야 하며, value도 JSON.stringify로 바꿔줘야 함</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// webpack.config.js</span>\n<span class=\"token comment\">// DefinePlugin과 유사하게 동작하지만, 환경 변수 전용으로 사용되는 EnvironmentPlugin이라는 플러그인도 있음</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefinePlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token string\">'process.env.SENTRY_DSN'</span><span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">SENTRY_DSN</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<br>\n<h2 id=\"-filename-vs-chunkfilename\" style=\"position:relative;\"><a href=\"#-filename-vs-chunkfilename\" aria-label=\" filename vs chunkfilename permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✅ filename vs chunkfilename</h2>\n<ul>\n<li>filename: 각 출력 번들의 이름을 결정하며, 각 번들에 대해 독립적임. 단일 entry 지점의 경우 정적인 이름으로 설정할 수 있음. (ex. bundle.js)</li>\n<li>chunkFilename: 초기가 아닌 청크 파일의 이름을 결정하며, 런타임에서 파일 이름을 생성함. 코드 스플리팅 시 webpack에 의해 자동 생성되는 파일 이름. (async chunk의 경우 chunkFilename 채택하는 듯함. 그런데 아직 잘 안 됨)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// webpack.config.js</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  output<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    path<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>\\_dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'./dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    filename<span class=\"token operator\">:</span> <span class=\"token string\">'[name].[chunkhash].js'</span><span class=\"token punctuation\">,</span>\n    chunkFilename<span class=\"token operator\">:</span> <span class=\"token string\">'[id].js'</span><span class=\"token punctuation\">,</span>\n    publicPath<span class=\"token operator\">:</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<br>\n<h2 id=\"-tree-shaking을-위한-sideeffects-설정\" style=\"position:relative;\"><a href=\"#-tree-shaking%EC%9D%84-%EC%9C%84%ED%95%9C-sideeffects-%EC%84%A4%EC%A0%95\" aria-label=\" tree shaking을 위한 sideeffects 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✅ Tree-shaking을 위한 sideEffects 설정</h2>\n<ul>\n<li>tree-shaking은 사용하지 않는 코드를 제거함으로써 용량을 줄이는 방식을 말함</li>\n<li>webpack은 v5부터 terser 라이브러리를 통해 기본적인 tree-shaking을 수행하고 있음.</li>\n<li>하지만 ESM의 import/export 키워드를 사용할 때, import한 모듈들을 아무 곳에서도 참조하지 않는 등의 상황이 발생하면 webpack의 tree-shaking 과정에서 문제가 생김. 따라서 tree-shaking 시 sideEffects가 발생하지 않을 것이라고 개발자가 webpack을 안심시켜줘야(?) 함</li>\n<li>package.json에 sideEffects: false 옵션을 명시해줌</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">// package.json</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nolto\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0.1\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"sideEffects\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>import한 모듈을 사용하지 않는 경우 외에도 tree-shaking이 적용되지 않는 경우: 전역 함수를 사용하는 경우, 함수 실행 코드에서 멤버변수를 변경하고 반환하는 경우, static class properties를 사용하는 경우, class를 사용하는 경우 등</li>\n</ul>\n<p>| 원래는 babel config에 “modules”: false 옵션까지 지정하여, babel이 import 구문까지 commonJS의 require로 바꿔주는 것을 방지했음. (webpack의 tree-shaking은 import문만 이해하기 때문) 하지만 해당 옵션은 default로 false가 적용된다고 함</p>\n<p>| CommonJS의 require는 동기적으로 이루어짐. (원래 Node.js를 위한 것이며, 브라우저용으로 탄생한 방식이 아님) 반면 ESM은 가져온 스크립트를 바로 실행하지 않고 import/export 구문을 찾아서 스크립트를 파싱함. 그리고 더 이상 import 것이 없어질 때까지 import를 찾은 다음 dependencies의 모듈 그래프를 만들어 냄</p>\n<br>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<ul>\n<li><a href=\"https://webpack.kr/guides/production/\">참고1</a></li>\n<li><a href=\"https://ui.toast.com/weekly-pick/ko_20191212\">참고2</a></li>\n<li><a href=\"https://webpack.js.org/guides/asset-modules/\">참고3</a></li>\n<li><a href=\"https://www.debugbear.com/blog/bundle-splitting-components-with-webpack-and-react\">참고4</a></li>\n<li><a href=\"https://github.com/styled-components/styled-components/issues/2254#issuecomment-560027361\">참고5</a></li>\n<li><a href=\"https://github.com/browserslist/browserslist\">참고6</a></li>\n<li><a href=\"https://webpack.js.org/plugins/define-plugin/\">참고7</a></li>\n<li><a href=\"https://medium.com/naver-fe-platform/webpack%EC%97%90%EC%84%9C-tree-shaking-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0-1748e0e0c365\">참고8</a></li>\n<li><a href=\"https://webpack.js.org/configuration/optimization/#optimizationsideeffects\">참고9</a></li>\n<li><a href=\"https://redfin.engineering/node-modules-at-war-why-commonjs-and-es-modules-cant-get-along-9617135eeca1\">참고10</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#-webpack-dev-prod-config-%EB%B6%84%EB%A6%AC\">✅ webpack dev prod config 분리</a></li>\n<li><a href=\"#-babelpreset-env%EC%9D%98-target-browserslist-%EC%84%A4%EC%A0%95\">✅ babel/preset-env의 target browserslist 설정</a></li>\n<li><a href=\"#-file-loader-%EB%8C%80%EC%8B%A0-assetresource\">✅ file-loader 대신 asset/resource</a></li>\n<li><a href=\"#-%ED%83%80%EC%9E%85-%EC%B2%B4%ED%82%B9-%EA%B8%B0%EB%8A%A5-%EC%82%AC%EC%9A%A9\">✅ 타입 체킹 기능 사용</a></li>\n<li><a href=\"#-defineplugin\">✅ DefinePlugin</a></li>\n<li><a href=\"#-filename-vs-chunkfilename\">✅ filename vs chunkfilename</a></li>\n<li><a href=\"#-tree-shaking%EC%9D%84-%EC%9C%84%ED%95%9C-sideeffects-%EC%84%A4%EC%A0%95\">✅ Tree-shaking을 위한 sideEffects 설정</a></li>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>\n</div>","frontmatter":{"date":"January 07, 2024","title":"webpack config 설정 알아보기","categories":"Study","author":"Kay","emoji":"👋"},"fields":{"slug":"/webpack-config/"}},"prev":{"id":"4423566c-7740-59ce-970e-a7c1522a7538","html":"<h1 id=\"글또-9기-시작\" style=\"position:relative;\"><a href=\"#%EA%B8%80%EB%98%90-9%EA%B8%B0-%EC%8B%9C%EC%9E%91\" aria-label=\"글또 9기 시작 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>글또 9기 시작</h1>\n<p>저번 글또 8기를 하면서 느낀점은, 너무나도 많은 개발자 분들께서 진심으로 글을 매주 작성하시는 모습을 통해 많은 동기부여와 좋은 컨텐츠를 볼 수 있었고 또한, 수많은 고민들을 통해 나 혼자만 힘들게 아니다라는 사실을 알게 되었고 무엇보다 글을 쓰는 습관을 조금은 드릴 수 있어서 너무나 좋았다.</p>\n<p>단 한가지 아쉬운점을 말하라고 한다면, 적극적으로 외부 활동 참여와 다양한 사람들과 커피챗을 해보지 못한 것이였다.\n다양한 사람들이 있는 만큼 다양한 경험을 들을 수 있는 기회들이 분명있었는데, 단순히 일 때문에 바쁘다는 핑계로 스스로 합리화를 해버렸던 것 같다.</p>\n<p>그래서 이번 기수에는 적극적으로 다양한 직군의 개발자 분들과 커피챗 신청과 외부 행사에 참여해볼 생각이다.</p>\n<p>마지막으로 다른 분들이 어떤식으로 글을 전개해 나아가는지 흐름을 파악해서 나의 글쓰기 실력을 한층 더 높일 수 있는 시간을 가지고 싶다.</p>\n<br/>\n<h3 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h3>\n<p><a href=\"https://www.notion.so/ac5b18a482fb4df497d4e8257ad4d516\">글또 소개</a></p>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>\n</div>","frontmatter":{"date":"December 02, 2024","title":"글또 9기 - O.T","categories":"Study","author":"Kay","emoji":"✍️"},"fields":{"slug":"/study-geulddo-9-OT/"}},"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/write-log-240113/","nextSlug":"/webpack-config/","prevSlug":"/study-geulddo-9-OT/"}},"staticQueryHashes":["1073350324","2938748437"]}