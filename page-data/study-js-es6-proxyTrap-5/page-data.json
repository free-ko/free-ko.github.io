{"componentChunkName":"component---src-templates-blog-template-js","path":"/study-js-es6-proxyTrap-5/","result":{"data":{"cur":{"id":"d2dbe2b8-70bb-590e-b566-a24fb01358b8","html":"<br>\n<h1 align=\"center\">\n  👋 defineProperty(), preventExtensions() , isExtensible() 트랩\n</h1>\n<br>\n<h2 id=\"1-defineproperty\" style=\"position:relative;\"><a href=\"#1-defineproperty\" aria-label=\"1 defineproperty permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. defineProperty()</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">Object.defineProperty()</code> 의 트랩임</p>\n<ul>\n<li>\n<p><code class=\"language-text\">target</code> 에 프로퍼티를 추가하거나 속성값을 변경함</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const target = {};\nconst handler = {\n  defineProperty(target, key, desc) {\n    if (desc.value &gt; 0) {\n      desc.value = desc.value * -1;\n    }\n    Object.defineProperty(target, key, desc);\n    return true;\n  },\n};\n\nconst proxy = new Proxy(target, handler);\nObject.defineProperty(proxy, &#39;point&#39;, {\n  value: 100,\n  writable: true,\n});\n\nconsole.log(target.point);\n-100;\n\n// 1. Object.defineProperty(obj, &quot;point&quot;, {...}, defineProperty() 트랩이 호출됨\n// 2. 트랩: defineProperty(target, key, desc){...} desc에 {...}에 작성한 디스크립터가 설정됨\n// 3. 트랩: if(desc.value &gt; 0){...}, value 속성값이 100이며, 0보다 크므로 100에 -1을 곱해 -100으로 바꿈\n// 4. 트랩에서 속성 값을 바꿀 수 있음</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"2-defineproperty-트랩-호출\" style=\"position:relative;\"><a href=\"#2-defineproperty-%ED%8A%B8%EB%9E%A9-%ED%98%B8%EC%B6%9C\" aria-label=\"2 defineproperty 트랩 호출 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. defineProperty() 트랩 호출</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">defineProperty()</code> 트랩이 호출되는 형태</p>\n<ul>\n<li><code class=\"language-text\">Object.defineProperty()</code></li>\n<li><code class=\"language-text\">Reflect.defineProperty()</code></li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"3-defineproperty-트랩-준수사항\" style=\"position:relative;\"><a href=\"#3-defineproperty-%ED%8A%B8%EB%9E%A9-%EC%A4%80%EC%88%98%EC%82%AC%ED%95%AD\" aria-label=\"3 defineproperty 트랩 준수사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. defineProperty() 트랩 준수사항</h2>\n<br>\n<ul>\n<li><code class=\"language-text\">strict mode</code> 일 때 트랩에서 <code class=\"language-text\">false</code> 를 반환하여 <code class=\"language-text\">TypeError</code></li>\n<li>\n<p><code class=\"language-text\">target</code> 오브젝트가 확장 불가이면 프로퍼티를 추가 할 수 없음</p>\n<ul>\n<li><code class=\"language-text\">Object.preventExtensions(target);</code></li>\n</ul>\n</li>\n<li><code class=\"language-text\">target</code> 오브젝트의 프로퍼티가 <code class=\"language-text\">[[Writable]]: false</code> 또는 <code class=\"language-text\">[[Configurable]]: false</code> 이면 프로퍼티 값을 변경할 수 없음</li>\n</ul>\n<br>\n<h2 id=\"4-preventextensions\" style=\"position:relative;\"><a href=\"#4-preventextensions\" aria-label=\"4 preventextensions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. preventExtensions()</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">Object.preventExtensions()</code> 트랩임</p>\n<ul>\n<li><code class=\"language-text\">target</code> 오브젝트에 오브젝트의 확장 금지를 설정함</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const target = { point: 100 };\nconst handler = {\npreventExtensions(target) {\n  if (target.point) {\n    Object.preventExtensions(target);\n    return true;\n  }\n  return false;\n},\n};\n\nconst proxy = new Proxy(target, handler);\nconst obj = Object.preventExtensions(proxy);\n\nconsole.log(obj.point); // 100\nconsole.log(Object.isExtensible(target)); // false\n\n// 1. const obj = Object.preventExtensions(proxy); preventExtensions() 트랩이 호출됨\n// 2. 트랩: if(target.point){...} point에 값이 있을 때만 확장 금지를 설정하기 위해 비교한 것\n// 3. 트랩에서 true를 반환하면 true를 반환하지 않고 Proxy 인스턴스를 반환함\n// 4. console.log(obj.point); Proxy 인스턴스의 point 프로퍼티 값을 출력함\n// 5. console.log(Object.isExtensible(target)) 확장 불가 상태이므로 false를 반환함</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<h2 id=\"5-preventextensions-트랩-호출\" style=\"position:relative;\"><a href=\"#5-preventextensions-%ED%8A%B8%EB%9E%A9-%ED%98%B8%EC%B6%9C\" aria-label=\"5 preventextensions 트랩 호출 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. preventExtensions() 트랩 호출</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">preventExtensions()</code> 트랩이 호출되는 형태</p>\n<ul>\n<li><code class=\"language-text\">Object.preventExtensions()</code></li>\n<li><code class=\"language-text\">Reflect.preventExtensions()</code></li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"6-preventextensions-트랩-준수-사항\" style=\"position:relative;\"><a href=\"#6-preventextensions-%ED%8A%B8%EB%9E%A9-%EC%A4%80%EC%88%98-%EC%82%AC%ED%95%AD\" aria-label=\"6 preventextensions 트랩 준수 사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. preventExtensions() 트랩 준수 사항</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">target</code> 오브젝트가 확장 불가 일 때</p>\n<ul>\n<li>즉, <code class=\"language-text\">Object.isExtensible(target)</code> 결과가 <code class=\"language-text\">false</code>일 때</li>\n<li><code class=\"language-text\">false</code> 를 반환하면 <code class=\"language-text\">TypeError</code>, <code class=\"language-text\">true</code> 만 반환할 수 있음</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"7-isextensible\" style=\"position:relative;\"><a href=\"#7-isextensible\" aria-label=\"7 isextensible permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>7. isExtensible()</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">Object.isExtensible()</code> 트랩임</p>\n<ul>\n<li><code class=\"language-text\">targe</code>의 확장 가능 여부를 반환 함</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const target = { point: 100 };\nconst handler = {\n  isExtensible(target) {\n    return Object.isExtensible(target);\n  },\n};\n\nconst obj = new Proxy(target, handler);\nconsole.log(Object.isExtensible(obj)); // true\n\nObject.seal(target);\nconsole.log(Object.isExtensible(obj)); // false\n\n// 1. console.log(Object.isExtensible(obj)); isExtensible() 트랩이 호출됨\n// 2. target 오브젝트가 확장 가능 상태이므로 true를 반환함\n// 3. Object.seal(target); target 오브젝트를 확장 불가 상태로 설정 함\n// 4. console.log(Object.isExtensible(obj)) 확장 불가 상태이므로 false를 반환함</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p><code class=\"language-text\">false</code> 를 반환하는 오브젝트 상태</p>\n<ul>\n<li><code class=\"language-text\">Object.seal()</code></li>\n<li><code class=\"language-text\">Object.freeze()</code></li>\n<li><code class=\"language-text\">Object.preventExtensions()</code></li>\n<li><code class=\"language-text\">Reflect.preventExtensions()</code></li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"8-isextensible-트랩-호출\" style=\"position:relative;\"><a href=\"#8-isextensible-%ED%8A%B8%EB%9E%A9-%ED%98%B8%EC%B6%9C\" aria-label=\"8 isextensible 트랩 호출 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>8. isExtensible() 트랩 호출</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">isExtensible()</code> 트랩이 호출되는 형태</p>\n<ul>\n<li><code class=\"language-text\">Object.isExtensible()</code></li>\n<li><code class=\"language-text\">Relfect.isExtensible()</code></li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"9isextensible-트랩-준수-사항\" style=\"position:relative;\"><a href=\"#9isextensible-%ED%8A%B8%EB%9E%A9-%EC%A4%80%EC%88%98-%EC%82%AC%ED%95%AD\" aria-label=\"9isextensible 트랩 준수 사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>9.isExtensible() 트랩 준수 사항</h2>\n<ul>\n<li><code class=\"language-text\">Object.isExtensible(target)</code> 결과와 같은 값을 반환해야 함</li>\n<li>즉, 결과를 바꿀 수 없음</li>\n<li>같지 않으면 <code class=\"language-text\">TypeError</code>가 발생함</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","excerpt":"1. defineProperty()  의 트랩임  에 프로퍼티를 추가하거나 속성값을 변경함 2. defineProperty() 트랩 호출  트랩이 호출되는 형태   3. defineProperty() 트랩 준수사항  일 때 트랩에서  를 반환하여   오브젝트가 확장 불가이면 프로퍼티를 추가 할 수 없음   오브젝트의 프로퍼티가  또는  이면 프로퍼티 값을 변경할 수 없음 4. preventExtensions()  트랩임  오브젝트에 오브젝트의 확장 금지를 설정함 5. preventExtensions() 트랩 호출  트랩이 호출되는 형태   6. preventExtensions() 트랩 준수 사항  오브젝트가 확장 불가 일 때 즉,  결과가 일 때  를 반환하면 ,  만 반환할 수 있음 7. isExtensible()  트랩임 의 확장 가능 여부를 반환 함  를 반환하는 오브젝트 상태     8. isExtensible() 트랩 호출  트랩이 호출되는 형태   9.isExtensib…","frontmatter":{"date":"December 02, 2021","title":"defineProperty(), preventExtensions() , isExtensible() 트랩","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-proxyTrap-5/"}},"next":{"id":"8cf81bc1-413f-54fa-ad43-72a1ad3e64f7","html":"<br>\n<h1 align=\"center\">\n  👋 has() 트랩, deleteProperty() 트랩\n</h1>\n<br>\n<h2 id=\"1-has\" style=\"position:relative;\"><a href=\"#1-has\" aria-label=\"1 has permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. has()</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">in</code> 연산자의 트랩임</p>\n<ul>\n<li><code class=\"language-text\">target</code> 에 <code class=\"language-text\">key</code> 의 존재 여부를 반환함</li>\n<li>프로퍼티 값을 <code class=\"language-text\">true/false</code>로 변환하여 반환함</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const target = { point: 100 };\nconst handler = {\n  has(target, key) {\n    return target[key];\n  },\n};\n\nconst obj = new Proxy(target, handler);\n\nconsole.log(&#39;point&#39; in obj); // true\nconsole.log(&#39;booK&#39; in obj); // false\n\n// 1. console.log(&quot;point&quot; in obj); has() 트랩이 호출됨\n// 2. has(target, key){...} target이 target에, &quot;point&quot;가 key에 설정됨\n// 3. return target[key]; target에 point가 있으며 값은 100임\n// 4. 이때, 100을 그대로 return하지 않고 true/false로 변환하여 return함\n// 5. 100은 true로 변환하므로 true를 반환함 0을 true/false로 변환하여 false임\n// 6. console.log(&quot;booK&quot; in obj); obj에 book이 없지만, has() 트랩을 호출함\n// 7. return target[key]; undefined를 반환하게 되지만 undefined를 false로 변환하여 반환 함</code>\n        </deckgo-highlight-code>\n<ul>\n<li>두 번째 파라미터에 <code class=\"language-text\">Symbol</code> 작성 가능</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"2-has-트랩-호출\" style=\"position:relative;\"><a href=\"#2-has-%ED%8A%B8%EB%9E%A9-%ED%98%B8%EC%B6%9C\" aria-label=\"2 has 트랩 호출 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. has() 트랩 호출</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">has()</code> 트랩이 호출되는 형태</p>\n<ul>\n<li><code class=\"language-text\">key in proxy</code></li>\n<li><code class=\"language-text\">ke in Object.create(proxy, {프로퍼티})</code></li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const target = { point: 600, bonus: 100 };\nconst handler = {\n  has(target, key) {\n    return target[key];\n  },\n};\n\nconst proxy = new Proxy(target, handler);\nconst obj = Object.create(proxy, {\n  point: { value: 500 },\n});\n\nconsole.log(&#39;point&#39; in obj); // true\nconsole.log(&#39;bonus&#39; in obj); // true\n\n// 1. console.log(&quot;point&quot; in obj); obj 인스턴스 프로퍼티로 point가 있으므로 has() 트랩을 호출하지 않음\n// 2. point 값 500을 반환하지 않고 true/false로 변환하여 반환하므로 ture가 반환됨\n// 3. console.log(&quot;bonus&quot; in obj); obj 인스턴스 프로퍼티로 bonus가 없으므로 has() 트랩을 호출 함\n// 4. has() 트랩에서 target[key]의 값은 100이며 100을 true/false로 변환하면 true임</code>\n        </deckgo-highlight-code>\n<ul>\n<li><code class=\"language-text\">Reflect.has()</code></li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"3-has-트랩-준수사항\" style=\"position:relative;\"><a href=\"#3-has-%ED%8A%B8%EB%9E%A9-%EC%A4%80%EC%88%98%EC%82%AC%ED%95%AD\" aria-label=\"3 has 트랩 준수사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. has() 트랩 준수사항</h2>\n<ul>\n<li>\n<p>오브젝트에 프로퍼티가 있으면서</p>\n<ul>\n<li>오브젝트가 프로퍼티 추가 금지이거나 <code class=\"language-text\">[[Configurable]]: flase</code> 이면</li>\n<li><code class=\"language-text\">false</code> 를 지정하여 반환할 수 없지만 <code class=\"language-text\">ture</code> 는 지정하여 반환 할 수 있음</li>\n</ul>\n</li>\n<li>\n<p>강제로 <code class=\"language-text\">ture/false</code> 를 반환하지 않고 <code class=\"language-text\">has()</code> 트랩에서 구한 값을 <code class=\"language-text\">ture/false</code> 로 변환하여 반환 함</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const target = { point: 100 };\nObject.preventExtensions(target);\n\nconst handler = {\nhas(target, key) {\n  consle.log(&#39;has 트랩 실행&#39;);\n  // return false;\n  return target[key];\n},\n};\n\nconst obj = new Proxy(target, handler);\n\nconsole.log(&#39;point&#39; in obj);\n\n// 1. Object.preventExtensions(target); target 오브젝트를 프로퍼티 추가 금지 상태로 설정함\n// 2. console.log(&quot;point&quot; in obj); 추가 금지 상태라도 has() 트랩이 호출 됨\n// 3. // reuturn false; 추가 금지 상태에서 false를 지정하여 반환하면 에러가 발생함 그래서 주석으로 처리 했음\n// 4. return target[key]; has() 트랩에서 구한 값을 true/false로 변환하여 반환하면 에러가 나지 않음\n\n// 실행결과\n// has 트랩 실행\n// true</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<h2 id=\"4-deleteproperty\" style=\"position:relative;\"><a href=\"#4-deleteproperty\" aria-label=\"4 deleteproperty permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. deleteProperty()</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">delete</code> 연산자의 트랩임</p>\n<ul>\n<li>오브젝트의 프로퍼티를 삭제함</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const target = { point: 100 };\nconst handler = {\n  deleteProperty(target, key) {\n    if (key in target) {\n      delete target[key];\n      return ture;\n    }\n\n    return false;\n  },\n};\n\nconst obj = new Proxy(target, handler);\n\nconsole.log(delete obj.point); // true\nconsole.log(target.point); // undefined\nconsole.log(delete obj.point); // false\nconsole.log(delete target.point); // true\n\n// 1. console.log(delete obj.point) deleteProperty() 트랩이 호출 됨\n// 2. if(key in target) {...} target 오브젝트에 point 프로퍼티가 있으므로 point 프로퍼티를 삭제하고 ture를 반환함\n// 3. console.log(target.point) 트랩에서 point 프로퍼티를 삭제했으므로 undefined가 출력됨\n// 4. console.log(delete obj.point); deleteProperty() 트랩이 호출됨 트랩에서 target에 point 프로퍼티가 없으므로 false를 반환 함\n// 5. console.log(delete target.point); deleteProperty() 트랩이 호출되지 않음 [[Delete]]가 호출됨 일반적으로 delete 처리임</code>\n        </deckgo-highlight-code>\n</li>\n<li><code class=\"language-text\">delete</code> 연산자는 프로퍼티가 없어도 <code class=\"language-text\">true</code>를 반환하므로 코드처럼 조건을 체크하여 <code class=\"language-text\">true/false</code>를 반환하면 완전하게 처리할 수 있음</li>\n</ul>\n<br>\n<h2 id=\"4-deleteproperty-트랩-호출\" style=\"position:relative;\"><a href=\"#4-deleteproperty-%ED%8A%B8%EB%9E%A9-%ED%98%B8%EC%B6%9C\" aria-label=\"4 deleteproperty 트랩 호출 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. deleteProperty() 트랩 호출</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">deleteProprerty()</code> 트랩이 호출되는 형태</p>\n<ul>\n<li><code class=\"language-text\">delete[key]</code></li>\n<li><code class=\"language-text\">Reflect.deleteProperty()</code></li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"5-deleteproperty-트랩-준수사항\" style=\"position:relative;\"><a href=\"#5-deleteproperty-%ED%8A%B8%EB%9E%A9-%EC%A4%80%EC%88%98%EC%82%AC%ED%95%AD\" aria-label=\"5 deleteproperty 트랩 준수사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. deleteProperty() 트랩 준수사항</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">target</code> 오브젝트의 프로퍼티가</p>\n<ul>\n<li><code class=\"language-text\">[[Configurable]]: false</code> 이면 프로퍼티를 삭제할 수 없으며 에러가 발생함</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const target = {};\nObje.ctdefinedProperty(target, &quot;point&quot;, {\n\tvalue: 500,, configurable: flase\n});\n\nconst handler = {\n\tdeleteProperty(target, key) {\n\t\tconst descriptor = Object.getOwnPropertyDescriptor(target, key);\n\n\t\tif(descriptor.configurable) {\n\t\t\tdelete target[key];\n\t\t\treturn true;\n\t\t};\n\n\t\treturn false;\n\t}\n};\n\nconst obj = new Proxy(target, handler);\nconsole.log(delte obj.point);   // false\n\n// 1. console.log(delete obj.point) deleteProeprty() 트랩이 호출됨\n// 2. Object.getWonPropertyDescriptor(target, key); point 프로퍼티의 디스크립터를 구함\n// 3. if(descriptor.configurable){...} configurable이 ture이면 삭제할 수 있으며 point 프로퍼티를 삭제하고 true를 반환함\n// 4. 한편, {configurable: false}이므로 false를 반환함</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","frontmatter":{"date":"December 01, 2021","title":"has() 트랩, deleteProperty() 트랩","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-proxyTrap-4/"}},"prev":{"id":"3b98e1b5-c7b5-5fc0-a4d4-a96ac0d2f46a","html":"<br>\n<h1 align=\"center\">\n  👋 getPrototypeof(), setPrototypeof() 트랩\n</h1>\n<br>\n<h2 id=\"1-getprototypeof\" style=\"position:relative;\"><a href=\"#1-getprototypeof\" aria-label=\"1 getprototypeof permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. getPrototypeof()</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">[[GetPrototypeOf]]</code> 의 트랩임</p>\n<ul>\n<li><code class=\"language-text\">target</code> 의 <code class=\"language-text\">prototype</code>을 반환</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">class Point {\n  getPoint() {\n    return 100;\n  }\n}\n\nconst handler = {\n  getPrototypeOf(target) {\n    return target.prototype;\n  },\n};\n\nconst obj = new Proxy(Point, handler);\nconst proto = Object.getPrototypeOf(obj);\n\nconsole.log(proto.getPoint); // getPoint(){return 100;}\n\n// 1. const obj = new Proxy(Point, handler); 첫 번째 파라미터에 Point 클래스를 작성했음, 트랩에서 Point.prototype을 구하기 위해서 obj.[[Target]]에서 Point 클래스가 설정됨\n// 2. const proto = Object.getPrototypeOf(obj); getProtytpeOf() 트랩이 호출됨\n// 3. 트랩: getPrototypeOf(target){} target에 Point 클래스가 설정됨\n// 4. 트랩: return target.prototype; Popoint.prototype을 반환함\n// 5. console.log(proto.getPoint); Point.prototype에 getPoint()가 있으므로 메소드 코드가 출력됨</code>\n        </deckgo-highlight-code>\n<ul>\n<li><code class=\"language-text\">target</code> 이 확장 불가라도 <code class=\"language-text\">prototype</code>을 반환 함</li>\n<li><code class=\"language-text\">String</code>, <code class=\"language-text\">Number</code> 처럼 값을 반환하면 <code class=\"language-text\">TypeError</code></li>\n</ul>\n</li>\n<li>\n<p>트랩 준수 사항</p>\n<ul>\n<li><code class=\"language-text\">target</code> 이 확장 불가일 때</li>\n<li><code class=\"language-text\">Object.getPrototypeOf(target)</code> 와 같은 값을 반환해야 함</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"2-getprototypeof-트랩-호출\" style=\"position:relative;\"><a href=\"#2-getprototypeof-%ED%8A%B8%EB%9E%A9-%ED%98%B8%EC%B6%9C\" aria-label=\"2 getprototypeof 트랩 호출 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. getPrototypeOf() 트랩 호출</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">getPrototypeOf()</code> 트랩이 호출되는 형태</p>\n<ul>\n<li><code class=\"language-text\">Object.getPrototypeOf()</code></li>\n<li><code class=\"language-text\">__proto__</code></li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">class Point {\n  getPoint() {\n    return 100;\n  }\n}\n\nconst handler = {\n  getPrototyepOf(target) {\n    return this.list ? Array.prototype : target.prototype;\n  },\n};\n\nconst obj = new Proxy(Point, handler);\nhandler.list = true;\n\nconst proto = obj.__proto__;\n\nconsole.log(proto.map); // function map() {[native code]}\n\n// 1. handler.list = true; getPrototypeOf() 트랩에서 체크 값으로 사용함\n// 2. const proto = obj.__proto__, getPrototypeOf 트랩이 호출됨 트랩에서 Array.prototype을 반환함\n// 3. console.log(proto.map) map 메소드가 있으므로 코드가 출력됨\n// 4. 조건에 따라 반환되는 prototype을 바꿀 수 있음</code>\n        </deckgo-highlight-code>\n<ul>\n<li><code class=\"language-text\">instanceof</code></li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">class Point {\n\tgetPoint(){return 100;}\n};\n\nconst handler = {\n\tgetPrototypeOf(target) {\n\t\treturn Point.rptotype;\n\t}\n};\n\nconst target = new Point();\nconsole.log(targetinstanceof Point);  // true\nconsole.log(Point.prototype instanceof Point);   // false\n\nconst obj = new Proxy(target, handler);\nconsole.log(obj instanceof Point);   // true\n\n// 1. console.log(target instanceof Point) target을 Point로 만들었으므로 true가 출력됨\n// 2. console.log(Point.protytpe instanceof Point) Point.prototype이 인스턴스가 아니므로 false가 출력됨\n// 3. console.log(obj instanceof Point) getPrototypeOf() 트랩이 호출됨 트랩에서 Point.prototype을 반환함\n// 4. (Point.prototype instanceof Point) 형태가 되므로 false가 출력되어야 하는데 ture가 출력됨</code>\n        </deckgo-highlight-code>\n<ul>\n<li><code class=\"language-text\">Object.prototype.isPrototypeOf()</code></li>\n<li><code class=\"language-text\">Reflect.getPrototypeOf()</code></li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"3-setprototypeof\" style=\"position:relative;\"><a href=\"#3-setprototypeof\" aria-label=\"3 setprototypeof permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. setPrototypeOf()</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">Object.setPrototypeOf()</code> 특징</p>\n<ul>\n<li><code class=\"language-text\">target</code>의 <code class=\"language-text\">__proto__</code> 에 두 번째 파라미터를 설정함</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">class Book {\n  setTitle() {\n    return &#39;책&#39;;\n  }\n}\nclass Point {\n  getPOint() {\n    return &#39;100&#39;;\n  }\n}\nObject.setPrototypeOf(Book, Point.prototype);\n\nconsole.log(Book.prototype.getPOint); // undefined\nconsole.log(Book.__proto__.getPoint); // getPoint() {return 100;}\n\nconst obj = new Book();\nconsole.log(obj.getPoint); // undefined\n\n// 1. Object.setPrototypeOf(Book, Point.rptotyep); Book.__proto__에 있는 Function.prototype이 Point.prototype으로 대체됨\n// 2. console.log(Book.prototype.getPoint) Book.__proto__에 설정되므로 undfined가 출력됨\n// 3. Book.__protot__.getPoint getPoint() 코드가 출력됨\n// 4. console.log(obj.getPoint) Book.prototype으로 인스턴스를 생성하므로 obj 인스턴스에 getPoint가 없음</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p><code class=\"language-text\">Object.setPrototypeOf()</code> 의 트랩임</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">class Book {\nsetTitle() {\n  return &#39;책&#39;;\n}\n}\nclass Point {\ngetPOint() {\n  return &#39;100&#39;;\n}\n}\nconst handler = {\nsetPrototypeOf(target, proto) {\n  Object.setPrototypeOf(target, proto);\n  return true;\n},\n};\n\nconst obj = new Proxy(Book, handler);\nObject.setPrototypeOf(obj, Point.prototype);\n\nconsole.log(Book.prototype.getPoint); // undefined\nconsole.log(Book.__proto__.getPOint); // getPoint(){ return 100; }\nconsole.log(obj.getPoint); // getPoint(){ return 100; }\n\n// 1. Object.setPrototypeOf(obj, Point.prototype); setPrototypeOf() 트랩이 호출됨\n// 2. 트랩: setPrototypeOf(target, proto){...} target에 Book 클래스가 설정되고 proto에 Point.prototype이 설정됨\n// 3. 트랩: Ojbect.setPrototypeOf(target, proto); Book.__proto__와 obj.[[Target]].__proto__가 Point.prototype으로 대체됨\n// 4. true를 반환하지 않으면 에러가 발생함\n// 5. console.log(Book.prototype.getPoint) undefined가 출력되며, Point.prototype이 Book.prototype에 설정되지 않기 때문\n// 6. console.log(Book.__proto__.getPoint) getPoint 코드가 출력됨\n// 7. console.log(obj.getPoint) getPoint 코드가 출력되며 obj.[[Target]].__proto__에 getPoint가 있기 때문</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>트랩 준수 사항</p>\n<ul>\n<li><code class=\"language-text\">target</code> 이 확장 불가 일 때</li>\n<li>두 번째 파라미터의 <code class=\"language-text\">prototype</code>과 <code class=\"language-text\">Object.getPrototypeOf(target)</code>로 구한 것과 같아야 함</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"4-setprototypeof-트랩-호출\" style=\"position:relative;\"><a href=\"#4-setprototypeof-%ED%8A%B8%EB%9E%A9-%ED%98%B8%EC%B6%9C\" aria-label=\"4 setprototypeof 트랩 호출 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. setPrototypeOf() 트랩 호출</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">setPrototypeOf()</code> 트랩이 호출되는 형태</p>\n<ul>\n<li><code class=\"language-text\">Object.setPrototypeOf()</code></li>\n<li><code class=\"language-text\">Reflect.setPrototypeOf()</code></li>\n</ul>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","frontmatter":{"date":"December 03, 2021","title":"getPrototypeof(), setPrototypeof() 트랩","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-proxyTrap-6/"}},"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":"zoomkoding/zoomkoding-gatsby-blog"}}}}},"pageContext":{"slug":"/study-js-es6-proxyTrap-5/","nextSlug":"/study-js-es6-proxyTrap-4/","prevSlug":"/study-js-es6-proxyTrap-6/"}},"staticQueryHashes":["1073350324","2938748437"]}