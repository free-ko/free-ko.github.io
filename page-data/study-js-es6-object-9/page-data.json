{"componentChunkName":"component---src-templates-blog-template-js","path":"/study-js-es6-object-9/","result":{"data":{"cur":{"id":"5c6f154d-e2d3-5e03-aed0-da2544f869ce","html":"<br>\n<h1 align=\"center\">\n  👋  setPrototypeOf() - prototype 사용\n</h1>\n<br>\n<h2 id=\"setporotytpeof\" style=\"position:relative;\"><a href=\"#setporotytpeof\" aria-label=\"setporotytpeof permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>setPorotytpeOf()</h2>\n<ul>\n<li>첫 번째 파라미터에 <code class=\"language-text\">prototype</code>을 작성</li>\n<li>\n<p>첫 번째 파라미터의 <code class=\"language-text\">prototype</code>에</p>\n<ul>\n<li>두 번째 파라미터의 <code class=\"language-text\">prototype</code>에 연결된 프로퍼티를 설정</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">prototype</code> 연결 후의 인스턴스 구조</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Book</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\nBook<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getBook</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Point</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\nPoint<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getPoint</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">setPrototypeOf</span><span class=\"token punctuation\">(</span>Point<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">,</span> Book<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*\n\t1. Point.prototype에\n\t- Book.prototype에 연결된 프로퍼티(메소드 포함)를 설정함\n\n\t2. Point.prototype에 설정하므로 이것을 펼치면\n\t- Book.prototype.getBook()이 있어야 하는데 없음\n\n\t3. 또한, Point.prototype에 연결한 메소드가\n\t- 지워지지 않고 유지 됨 \n\n\t4. 한편, Point.prototype.__proto__를 펼치면\n\t- getBook()이 표시됨\n\n\t5. setPrototypeOf() 함수 이름의 뉘앙스가\n\t- prototype에 설정하는 것처럼 보이지만\n\t- prototype에 __proto__를 만들고 여기에 설정함\n\n\t6. prototype에 설정하면 getPoint()가 지워지므로\n\t- Point에 작성된 메소드를 사용할 수 없게 됨\n\n\t7. 이를 피하기 위해 __proto__를 만들어 설정한 것\n\n\t8. __proto__로 구조적으로 계층을 만들어 설정하므로 \n\t- 같은 이름의 메소드가 있더라도 대체되지 않음\n\t\n\t9. 식별자 해결을 할 때, __proto__ 순서로 검색하므로\n\t- 같은 이름의 메소드가 있을 때,\n\t- 앞의 메소드가 호출 됨\n*/</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*\n\t1. new Point(300)를 실행하면\n\t- Point.prototype에 연결된 메소드로 인스턴스를 생성함\n\n\t2. 오른쪽의 obj를 펼치면\n\t- obj.__proto__.proto__구조 임\n\t- 이것은 Point.prototype 구조와 같음\n\n\t3. 위의 __proto__에 Point.prototype에 연결된 메소드가 설정되고\n\t- 아래의 __proto__에 Book.prototype에 연결된 메소드가 설정 됨\n*/</span></code></pre></div>\n</li>\n<li>\n<p>상속을 위한 목적이라면</p>\n<ul>\n<li><code class=\"language-text\">super</code> 등의 상속 처리 키워드를 제공하는</li>\n<li><code class=\"language-text\">Class</code>를 사용하는 것이 좋음</li>\n</ul>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#setporotytpeof\">setPorotytpeOf()</a></li>\n</ul>\n</div>","excerpt":"setPorotytpeOf() 첫 번째 파라미터에 을 작성 첫 번째 파라미터의 에 두 번째 파라미터의 에 연결된 프로퍼티를 설정  연결 후의 인스턴스 구조 상속을 위한 목적이라면  등의 상속 처리 키워드를 제공하는 를 사용하는 것이 좋음 setPorotytpeOf()","frontmatter":{"date":"September 26, 2021","title":"setPrototypeOf() - prototype 사용","categories":"JS","author":"Kay","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-object-9/"}},"next":{"id":"0d38c314-1f43-50b5-8ea8-856d83d29574","html":"<br>\n<h1 align=\"center\">\n  👋  인스턴스에 함수로 추가\n</h1>\n<br>\n<h2 id=\"함수로-추가\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98%EB%A1%9C-%EC%B6%94%EA%B0%80\" aria-label=\"함수로 추가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수로 추가</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">new</code> 연산자로 인스턴스를 생성하고</p>\n<ul>\n<li>인스턴스의 프로퍼티로 함수를 추가</li>\n<li>다른 인스턴스와 공유하지 않음</li>\n</ul>\n</li>\n<li>\n<p>인스턴스에 추가한 후의 인스턴스 구조</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Book</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>point <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nBook<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getPoint</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>point<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Book</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 인스턴스 프로퍼티(함수)로 추가 함</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">setPoint</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">param</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>point <span class=\"token operator\">=</span> param<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// obj를 펼치면 __proto__ 위에 setPoint가 표시됨</span>\n\n<span class=\"token comment\">// 인스턴스의 함수 형태로 호출함</span>\n<span class=\"token comment\">// 함수에서 this가 인스턴스를 참조함</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">setPoint</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// prototype에 연결된 메소드를 호출 함</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">getPoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> newObj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Book</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newObj<span class=\"token punctuation\">.</span>setPoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n\n<span class=\"token comment\">/*\n\t1. 새로운 인스턴스를 생성하면\n\t- setPoint()를 인스턴스에서 사용할 수 없게 됨\n\n\t2. 인스턴스의 프로퍼티로 설정했기 때문\n\t\n\t3. 인스턴스의 프로퍼티로 연결한 것과\n\t- prototype에 연결한 메소드의 차이 임\n*/</span></code></pre></div>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%ED%95%A8%EC%88%98%EB%A1%9C-%EC%B6%94%EA%B0%80\">함수로 추가</a></li>\n</ul>\n</div>","frontmatter":{"date":"September 26, 2021","title":"인스턴스에 함수로 추가","categories":"JS","author":"Kay","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-object-6/"}},"prev":{"id":"ecf54602-5716-552e-88db-8db8874ca8ac","html":"<br>\n<h1 align=\"center\">\n  👋  Template Literal\n</h1>\n<br>\n<h2 id=\"template-literal\" style=\"position:relative;\"><a href=\"#template-literal\" aria-label=\"template literal permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Template Literal</h2>\n<ul>\n<li>\n<p>Syntax</p>\n<ul>\n<li><code class=\"language-text\">문자열</code></li>\n<li><code class=\"language-text\">문자열 ${표현식} 문자열</code></li>\n<li>tag <code class=\"language-text\">문자열 ${표현식} 문자열</code></li>\n</ul>\n</li>\n<li>\n<p>Template Literal</p>\n<ul>\n<li>문자열 처리를 위한 리터럴</li>\n<li>표현식을 포함할 수 있음</li>\n<li>강좌에서는 템플릿으로 표기</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">backtick</code> 안에 표현식 작성</p>\n<ul>\n<li>표현식을 <code class=\"language-text\">${표현식}</code> 형태로 작성</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">ABC</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ABC</span>\n\n<span class=\"token keyword\">const</span> one <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\ntwo <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">1 + 2는 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>one <span class=\"token operator\">+</span> two<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">이 된다.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1 + 2는 3이 된다.</span>\n\n<span class=\"token comment\">// 템플릿의 모든 공백이 그대로 반영됨</span></code></pre></div>\n</li>\n<li>\n<p>줄 바꿈 작성 차이</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ES5-1라인 \\n 2라인'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*\n\t1. ES5 형태로 문자열 중간에서\n\t- 줄을 바꾸려면 \\n을 작성함\n*/</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">1라인\n\t2라인</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*\n\t1. Template 리터럴을 사용함\n\t\n\t2. ES5처럼 \\n을 사용하지 않고\n\t- 백틱 안에서 줄을 바꿈\n\t- 줄 앞에 공백을 작성하면 공백으로 처리 됨\n*/</span></code></pre></div>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#template-literal\">Template Literal</a></li>\n</ul>\n</div>","frontmatter":{"date":"September 27, 2021","title":"Template Literal","categories":"JS","author":"Kay","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-template-literal-1/"}},"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":"zoomkoding/zoomkoding-gatsby-blog"}}}}},"pageContext":{"slug":"/study-js-es6-object-9/","nextSlug":"/study-js-es6-object-6/","prevSlug":"/study-js-es6-template-literal-1/"}},"staticQueryHashes":["1073350324","2938748437"]}