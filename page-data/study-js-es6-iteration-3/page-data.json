{"componentChunkName":"component---src-templates-blog-template-js","path":"/study-js-es6-iteration-3/","result":{"data":{"cur":{"id":"7d74bd95-26f7-5b37-b048-ddd398c19d8b","html":"<br>\n<h1 align=\"center\">\n  👋 이터레이터 오브젝트, 이터레이터 프로토콜\n</h1>\n<br>\n<h2 id=\"1-이터레이터-프로토콜\" style=\"position:relative;\"><a href=\"#1-%EC%9D%B4%ED%84%B0%EB%A0%88%EC%9D%B4%ED%84%B0-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C\" aria-label=\"1 이터레이터 프로토콜 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 이터레이터 프로토콜</h2>\n<ul>\n<li>\n<p>이터레이터(iterator) 프로토콜</p>\n<ul>\n<li>값을 순서대로 생성하는 방법(규약)</li>\n</ul>\n</li>\n<li>\n<p>이터레이터 오브젝트</p>\n<ul>\n<li><code class=\"language-text\">Symbol.iterator()</code>를 호출하면</li>\n<li>이터레이터 오브젝트를 생성하여 반환</li>\n<li>이터레이터 오브젝트에 <code class=\"language-text\">next()</code>가 있음</li>\n<li>생성한 오브젝트를 이터레이터라고 부름</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const list = [10, 20];\n\nconst obj = list[Symbol.iterator]();\n\nconsole.log(obj.next());\nconsole.log(obj.next());\nconsole.log(obj.next());\n\n// {value: 10, done: false}\n// {value: 20, done: false}\n// {value: undefined, done: true}</code>\n        </deckgo-highlight-code>\n<ol>\n<li>이터레이터 오브젝트의 <code class=\"language-text\">next()</code>를 호출하면 이터레이터를 호출한다고도 함</li>\n<li><code class=\"language-text\">{value: 10, done: false}</code> 를 반환함, <code class=\"language-text\">value는 [10, 20]</code>에서 첫 번째 값이고 <code class=\"language-text\">done: false</code>는 이터레이터 상태 임</li>\n<li>두 번째 <code class=\"language-text\">next()</code> 호출</li>\n<li><code class=\"language-text\">{value: 20, done: false}</code> 를 반환함, <code class=\"language-text\">value는 [10, 20]</code>에서 두 번째 값이고 <code class=\"language-text\">done: false</code>는 이터레이터 상태 임</li>\n<li>세 번째 <code class=\"language-text\">next()</code> 호출</li>\n<li><code class=\"language-text\">{value: undefined, done: true}</code> 반환, <code class=\"language-text\">undefined</code>는 처리할 값이 없다는 것을 뜻하며 <code class=\"language-text\">done: true</code>는 이터레이터의 종료를 뜻함</li>\n</ol>\n<br>\n</li>\n<li>\n<p>이터레이터 오브젝트 구조</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">{\n(&#39;use strict&#39;);\n\nconst list = [1, 2];\n\n/*\n\t\t1. list.__proto__를 펼치면 Symbol(Symbol.iterator)가 있으므로 \n\t\t\t- 이터레이터 오브젝트를 만들 수 있음\n\t*/\n\nconst obj = list[Symbol.iterator]();\n\n/*\n\t\t1. 위 형태로 호출하면 이터레이터 오브젝트를 생성하여 반환 함\n\t\n\t\t2. obj.__proto__를 펼치면 next()가 있음\n\t\t\t- next()가 있으므로 obj는 이터레이터 오브젝트임\n\t*/\n}</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","excerpt":"1. 이터레이터 프로토콜 이터레이터(iterator) 프로토콜 값을 순서대로 생성하는 방법(규약) 이터레이터 오브젝트 를 호출하면 이터레이터 오브젝트를 생성하여 반환 이터레이터 오브젝트에 가 있음 생성한 오브젝트를 이터레이터라고 부름 이터레이터 오브젝트의 를 호출하면 이터레이터를 호출한다고도 함  를 반환함, 에서 첫 번째 값이고 는 이터레이터 상태 임 두 번째  호출  를 반환함, 에서 두 번째 값이고 는 이터레이터 상태 임 세 번째  호출  반환, 는 처리할 값이 없다는 것을 뜻하며 는 이터레이터의 종료를 뜻함 이터레이터 오브젝트 구조","frontmatter":{"date":"September 05, 2021","title":"이터레이터 오브젝트, 프로토콜","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-iteration-3/"}},"next":{"id":"609a2e9f-c47d-572e-8ae7-7af1c8a30c16","html":"<br>\n<h1 align=\"center\">\n  👋 이터러블 오브젝트, 이터러블 프로토콜\n</h1>\n<br>\n<h2 id=\"1-이터러블-오브젝트\" style=\"position:relative;\"><a href=\"#1-%EC%9D%B4%ED%84%B0%EB%9F%AC%EB%B8%94-%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8\" aria-label=\"1 이터러블 오브젝트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 이터러블 오브젝트</h2>\n<h3 id=\"1-이러터블-오브젝트-개념\" style=\"position:relative;\"><a href=\"#1-%EC%9D%B4%EB%9F%AC%ED%84%B0%EB%B8%94-%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8-%EA%B0%9C%EB%85%90\" aria-label=\"1 이러터블 오브젝트 개념 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1). 이러터블 오브젝트 개념</h3>\n<ul>\n<li>이터러블 프로토콜을 갖고 있는 오브젝트</li>\n<li>스펙에서는 <code class=\"language-text\">@@iterator()</code>로 표기</li>\n<li>\n<p>반복 구조, <code class=\"language-text\">Symbol.iterator()</code></p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const list = [10, 20];\n\nconsole.log(list[Symbol.iterator]); // function values() { [native code] }\n\nconst obj = { one: 10, two: 20 };\n\nconsole.log(obj[Symbol.iterator]); // undefined</code>\n        </deckgo-highlight-code>\n<ol>\n<li><code class=\"language-text\">[ ]</code> 리터럴로 생성한 <code class=\"language-text\">list</code>에 <code class=\"language-text\">Symbol.iterator</code>가 있으므로 <code class=\"language-text\">Array</code>는 이터러블 오브젝트 임</li>\n<li><code class=\"language-text\">{ }</code> 리터럴로 생성한 <code class=\"language-text\">obj</code>에 <code class=\"language-text\">Symbol.iterator</code>가 없으므로 <code class=\"language-text\">Object</code>는 이터러블 오브젝트가 아님</li>\n<li><code class=\"language-text\">for</code> 문의 반복과 이터레이션이 차이가 있듯이, <code class=\"language-text\">for - in</code>의 열거와 이터레이션은 차이가 있음</li>\n</ol>\n</li>\n</ul>\n<br>\n<h3 id=\"2-이터러블-오브젝트-구조\" style=\"position:relative;\"><a href=\"#2-%EC%9D%B4%ED%84%B0%EB%9F%AC%EB%B8%94-%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8-%EA%B5%AC%EC%A1%B0\" aria-label=\"2 이터러블 오브젝트 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2). 이터러블 오브젝트 구조</h3>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">&#39;use strict&#39;;\n\nconst list = [&#39;A&#39;, &#39;B&#39;];\n\n/*\n  1. 오른쪽 list를 펼치면 __proto__가 있으며 __proto__를 펼치면 Array 오브젝트의 메소드가 표시됨\n\n  2. 아래로 내려가면 Symbol(Symbol.iterator)가 있음, 따라서 Array 오브젝트는 이터러블 오브젝트 임\n\n  3. 또한 Symbol(Symbol.iterator)를 펼치면 __proto__에 Function 오브젝트 메소드가 연결되어 있음\n    - 즉, Symbol.iterator는 함수 임\n\n  4. Symbol.iterator가 함수 이므로 호출 할 수 있음\n*/</code>\n        </deckgo-highlight-code>\n<br>\n<h3 id=\"3-자체-오브젝트에는-없지만\" style=\"position:relative;\"><a href=\"#3-%EC%9E%90%EC%B2%B4-%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8%EC%97%90%EB%8A%94-%EC%97%86%EC%A7%80%EB%A7%8C\" aria-label=\"3 자체 오브젝트에는 없지만 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3). 자체 오브젝트에는 없지만</h3>\n<ul>\n<li>이터러블 오브젝트를 상속받아도 됨</li>\n<li>즉, <code class=\"language-text\">prototype chain(__proto__)</code>에 있으면 됨</li>\n<li>예를 들어, <code class=\"language-text\">Array</code> 오브젝트를 상속 받으면 이터러블 오브젝트가 됨</li>\n</ul>\n<br>\n<h2 id=\"2-이터러블-프로토콜\" style=\"position:relative;\"><a href=\"#2-%EC%9D%B4%ED%84%B0%EB%9F%AC%EB%B8%94-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C\" aria-label=\"2 이터러블 프로토콜 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 이터러블 프로토콜</h2>\n<h3 id=\"1-이터러블-프로토콜-개념\" style=\"position:relative;\"><a href=\"#1-%EC%9D%B4%ED%84%B0%EB%9F%AC%EB%B8%94-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C-%EA%B0%9C%EB%85%90\" aria-label=\"1 이터러블 프로토콜 개념 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1). 이터러블 프로토콜 개념</h3>\n<ul>\n<li>오브젝트가 반복할 수 있는 구조이어야 함</li>\n<li><code class=\"language-text\">Symbol.iterator</code>를 갖고 있어야 함</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const list = [10, 20];\n\nconsole.log(list[Symbol.iterator]);\n\n// function values() { [native code] }</code>\n        </deckgo-highlight-code>\n<br>\n<h3 id=\"2-아래-빌트인-오브젝트는\" style=\"position:relative;\"><a href=\"#2-%EC%95%84%EB%9E%98-%EB%B9%8C%ED%8A%B8%EC%9D%B8-%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8%EB%8A%94\" aria-label=\"2 아래 빌트인 오브젝트는 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2). 아래 빌트인 오브젝트는</h3>\n<ul>\n<li>디폴트로 이터러블 프로토콜을 갖고 있음</li>\n<li>즉 <code class=\"language-text\">Symbol.iterator</code>를 갖고 있음 -<code class=\"language-text\">Array</code>, <code class=\"language-text\">Argument</code>, <code class=\"language-text\">String</code>, <code class=\"language-text\">TypedArray</code>, <code class=\"language-text\">Map</code>, <code class=\"language-text\">Set</code>, <code class=\"language-text\">DOM NodeList</code></li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","frontmatter":{"date":"September 04, 2021","title":"이터러블 오브젝트, 프로토콜","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-iteration-2/"}},"prev":{"id":"a90ba1f2-8d81-58a0-a9cd-34bdf250d295","html":"<br>\n<h1 align=\"center\">\n  👋  let, const 사용 기준, spread, Array spread, String spread, Object spread, push(...spread)\n</h1>\n<br>\n<h2 id=\"1-let-const-사용-기준\" style=\"position:relative;\"><a href=\"#1-let-const-%EC%82%AC%EC%9A%A9-%EA%B8%B0%EC%A4%80\" aria-label=\"1 let const 사용 기준 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. let, const 사용 기준</h2>\n<ul>\n<li><code class=\"language-text\">let</code> : 변경 할 수 있음</li>\n<li><code class=\"language-text\">const</code> : 변경 할 수 없음</li>\n<li>\n<p><code class=\"language-text\">let</code>, <code class=\"language-text\">const</code> 변수의 시맨틱을 우선하여 사용</p>\n<ul>\n<li>값이 변경되면 <code class=\"language-text\">let</code></li>\n<li>초깃값이 변경되지 않으면 <code class=\"language-text\">const</code></li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">// let, const 사용 기준\n\nconst list = [10, 20];\n\nlet value = [10, 20];\n\nvalues.push(30, 40);\n\nfor (let k = 0; k &lt; list.length; k++) {}\n\nconst book = (param) =&gt; param + 10;</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<h2 id=\"2-spread\" style=\"position:relative;\"><a href=\"#2-spread\" aria-label=\"2 spread permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Spread</h2>\n<ul>\n<li>Syntax: <code class=\"language-text\">[...iterable]</code></li>\n<li>\n<p><code class=\"language-text\">[...iterable]</code></p>\n<ul>\n<li><code class=\"language-text\">[...]</code>처럼 [ ] 안에 점<code class=\"language-text\">(.)</code> 3개를 작성하고</li>\n<li>이어서 이터러블 오브젝트 작성</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const list = [21, 22];\n\nconsole.log([11, ...list, 12]); // [11, 21, 22, 12]\n\nconst obj = { key: 50 };\n\nconsole.log({ ...obj }); // {key: 50}</code>\n        </deckgo-highlight-code>\n</li>\n<li>이터러블 오브젝트를 하나씩 전개</li>\n<li><code class=\"language-text\">{key: value}</code>의 <code class=\"language-text\">Object</code>가 이터러블 오브젝트는 아니지만 전개 가능</li>\n</ul>\n<br>\n<h2 id=\"3-array-speard\" style=\"position:relative;\"><a href=\"#3-array-speard\" aria-label=\"3 array speard permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Array Speard</h2>\n<ul>\n<li><code class=\"language-text\">Spread</code> 대상 배열을 작성한 위치에 엘리머트 단위로 분리(전개)</li>\n<li>\n<p><code class=\"language-text\">Array Spread</code> 작성 형태</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const one = [21, 22];\nconst two = [31, 32];\nconst result = [11, ...one, 12, ...two];\n\nconsole.log(result); // [11, 21, 22, 12, 31, 32[\nconsole.log(result.length); // 6</code>\n        </deckgo-highlight-code>\n<ol>\n<li><code class=\"language-text\">...one</code> : <code class=\"language-text\">one</code> 배열의 <code class=\"language-text\">[21, 22]</code>를 엘리먼트 단위로 분리(전개) 함</li>\n<li><code class=\"language-text\">...two</code> : <code class=\"language-text\">two</code> 위치에 <code class=\"language-text\">two</code> 배열의 <code class=\"language-text\">[31, 32]</code>를 엘리먼트 단위로 분리(전개) 함</li>\n</ol>\n</li>\n<li>\n<p>값이 대체되지 않고 전개</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const one = [11, 12];\nconst result = [11, 12, ...one];\n\nconsole.log(result); // [11, 12, 11, 12]\nconsole.log(result.length); // 4</code>\n        </deckgo-highlight-code>\n<ul>\n<li>앞에 <code class=\"language-text\">11</code>과 <code class=\"language-text\">12</code>가 있지만 값을 대체하지 않고 <code class=\"language-text\">...</code>을 작성한 위치에 전개 함</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"4-string-spread\" style=\"position:relative;\"><a href=\"#4-string-spread\" aria-label=\"4 string spread permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. String Spread</h2>\n<ul>\n<li><code class=\"language-text\">spread</code> 대상 문자열을 작성한 위치에 문자 단위로 전개</li>\n<li>\n<p><code class=\"language-text\">String Spread</code> 작성 형태</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const target = &#39;ABC&#39;;\n\nconsole.log([...target]); // [A, B, C]</code>\n        </deckgo-highlight-code>\n<ol>\n<li><code class=\"language-text\">[...target];</code></li>\n<li><code class=\"language-text\">target</code>의 <code class=\"language-text\">\"ABC\"</code>를 문자 단위로 분리하여 <code class=\"language-text\">...target</code> 위치에 설정</li>\n</ol>\n</li>\n</ul>\n<br>\n<h2 id=\"5-object-spread\" style=\"position:relative;\"><a href=\"#5-object-spread\" aria-label=\"5 object spread permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. Object Spread</h2>\n<ul>\n<li><code class=\"language-text\">Spread</code> 대상 <code class=\"language-text\">Object</code>를 작성한 위치에 프로퍼티 단위로 전개</li>\n<li>\n<p><code class=\"language-text\">Object Spread</code> 작성 형태</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const one = { key1: 11, key2: 22 };\nconst result = { key3: 33, ...one };\n\nconsole.log(result);\n\n// {key3: 33, key1: 11, key2: 22}</code>\n        </deckgo-highlight-code>\n<ol>\n<li><code class=\"language-text\">...one</code> : <code class=\"language-text\">one</code> 오브젝트의 프로퍼티를 전개</li>\n</ol>\n</li>\n<li>\n<p>프로퍼티 이름이 같으면 값 대체</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const one = { book: 10, music: 20 };\nconst result = { book: 30, ...one };\n\nconsole.log(result); // {book: 10, music: 20}\n\n// const check = [...one];</code>\n        </deckgo-highlight-code>\n<ol>\n<li><code class=\"language-text\">{book: 30}</code>과 <code class=\"language-text\">{book: 10}</code>에서 프로퍼티 이름이 같으므로 30이 뒤에 작성한 <code class=\"language-text\">10</code>으로 대체됨</li>\n<li><code class=\"language-text\">Object</code>는 이터러블 오브젝트가 아니므로 <code class=\"language-text\">[...one]</code> 형태로 작성하면 에러가 발생</li>\n</ol>\n</li>\n</ul>\n<br>\n<h2 id=\"6-pushspread\" style=\"position:relative;\"><a href=\"#6-pushspread\" aria-label=\"6 pushspread permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. Push(…spread)</h2>\n<ul>\n<li><code class=\"language-text\">push()</code> 파라미터에 <code class=\"language-text\">spread</code> 대상 작성</li>\n<li>\n<p>배열 끝에 대상을 분리하여 첨부</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">let result = [21, 22];\n\nconst five = [51, 52];\n\nresult.push(...five);\n\nconsole.log(result); // [21, 22, 51, 52]\n\nresult.push(...&#39;abc&#39;);\n\nconsole.log(result); // [21, 22, 51, 52, a, b, c]</code>\n        </deckgo-highlight-code>\n<ol>\n<li><code class=\"language-text\">result</code> 배열 끝에 첨부</li>\n<li>배열이면 엘리먼트로 분리하여 첨부하고 문자열이면 문자 단위로 분리하여 첨부</li>\n</ol>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","frontmatter":{"date":"September 06, 2021","title":"Spread(스프레드)","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-spread-1/"}},"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":"zoomkoding/zoomkoding-gatsby-blog"}}}}},"pageContext":{"slug":"/study-js-es6-iteration-3/","nextSlug":"/study-js-es6-iteration-2/","prevSlug":"/study-js-es6-spread-1/"}},"staticQueryHashes":["1073350324","2938748437"]}