{"componentChunkName":"component---src-templates-blog-template-js","path":"/study-js-es6-arrowFunction-2/","result":{"data":{"cur":{"id":"fe8e3dc1-fa36-5877-b540-31d36e24463a","html":"<br>\n<h1 align=\"center\">\n  👋 화살표 함수 구조, arguments 사용 불가\n</h1>\n<br>\n<h2 id=\"1-화살표-함수-구조\" style=\"position:relative;\"><a href=\"#1-%ED%99%94%EC%82%B4%ED%91%9C-%ED%95%A8%EC%88%98-%EA%B5%AC%EC%A1%B0\" aria-label=\"1 화살표 함수 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1) 화살표 함수 구조</h2>\n<ul>\n<li><code class=\"language-text\">function</code>을 <code class=\"language-text\">=></code> 로 표기하는 것이 전부가 아님</li>\n<li>\n<p>화살표 함수는 일반 함수와 구조가 다름</p>\n<ul>\n<li>화살표 함수 나름의 특징이 있음</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const book = function () {\nreturn 100;\n};\n\n// 위의 함수는 prototype과 constructor가 있음\n\nconst point = () =&gt; 100;\n\n// 1. 위의 화살표 함수는 prototype과 construcotr가 없음\n// 2. prototype에 메소드를 연결하여 확장 할 수 없음\n// 3. prototype이 없으므로 그만큼 가벼움(prototype에 있는 연산자가 없기 때문에)\n// 4. new 연산자로 인스턴스를 생성할 수 없음\n// 5. 이것이 화살표 함수의 특징이며 용도임</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<h2 id=\"2-arguments-사용-불가\" style=\"position:relative;\"><a href=\"#2-arguments-%EC%82%AC%EC%9A%A9-%EB%B6%88%EA%B0%80\" aria-label=\"2 arguments 사용 불가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2) Arguments 사용 불가</h2>\n<ul>\n<li><code class=\"language-text\">Arguments</code>(파라미터가 유동적일 때 사용하는 것) 사용 할 수 없음</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">&quot;use strict&quot;\n\nconst point = () = &gt; {\n\ttry {\n\t\tconst args = arguments;\n\t} catch(error) {\n\t\t\tconsole.log(&quot;arguments 사용 불가&quot;);\n\t}\n}\n\npoint(10, 20);\n\n/*\n1. point(10, 20) 형태로 호출하면\n- 일반 함수에서는 arguments에 10, 20이 설정되지만\n\n2. 화살표 함수에서 ReferenceError가 발생함\n- 즉, arguemtns를 사용할 수 없음\n\n3. point 함수 구조를 전개하면\n- arguements가 표시는 됨\n- 그 이유는 일반함수와 구조를 맞추기 위해서\n\n*/</code>\n        </deckgo-highlight-code>\n<ul>\n<li><code class=\"language-text\">Arguemtns</code> 대신에 <code class=\"language-text\">rest</code> 파라미터 사용</li>\n</ul>\n<br>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","excerpt":"1) 화살표 함수 구조 을  로 표기하는 것이 전부가 아님 화살표 함수는 일반 함수와 구조가 다름 화살표 함수 나름의 특징이 있음 2) Arguments 사용 불가 (파라미터가 유동적일 때 사용하는 것) 사용 할 수 없음  대신에  파라미터 사용","frontmatter":{"date":"September 02, 2021","title":"Arrow Function 구조","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-arrowFunction-2/"}},"next":{"id":"6e3f296c-2cc8-51d1-a8c0-2ae50571cf35","html":"<br>\n<h1 align=\"center\">\n  👋 Arrow Function, 함수 블록 사용, 파라미터 사용\n</h1>\n<br>\n<h2 id=\"1-arrow-function\" style=\"position:relative;\"><a href=\"#1-arrow-function\" aria-label=\"1 arrow function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1) Arrow Function</h2>\n<ul>\n<li><code class=\"language-text\">Arrow</code>의 사전적 의미 : 화살, 화살표</li>\n<li>\n<p>코드 형태</p>\n<ul>\n<li><code class=\"language-text\">(param) => {함수 코드}</code></li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const add = function (one, two) {\nreturn one + two;\n};\n\nconsole.log(add(1, 2)); // 3\n\nconst total = (one, two) =&gt; {\nreturn one + two;\n};\n\nconsole.log(total(1, 2)); // 3</code>\n        </deckgo-highlight-code>\n<ol>\n<li><code class=\"language-text\">function</code> 키워드 대신에 화살표 <code class=\"language-text\">=></code> 사용</li>\n<li><code class=\"language-text\">=></code>표 양쪽에 공백 작성 가능</li>\n</ol>\n</li>\n<li><code class=\"language-text\">function() {}</code>의 축약 형태이지만, 고려할 사항도 있음(<code class=\"language-text\">this</code> 참조가 다름)</li>\n</ul>\n<br>\n<h2 id=\"2-함수-블록-사용\" style=\"position:relative;\"><a href=\"#2-%ED%95%A8%EC%88%98-%EB%B8%94%EB%A1%9D-%EC%82%AC%EC%9A%A9\" aria-label=\"2 함수 블록 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2) 함수 블록 사용</h2>\n<ul>\n<li>\n<p>함수 블록과 <code class=\"language-text\">return</code> 작성생략</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const total = (one, two) =&gt; one + two;\n\nconsole.log((total(1,2)); // 3</code>\n        </deckgo-highlight-code>\n<ol>\n<li>함수 블록<code class=\"language-text\">{}</code>과 <code class=\"language-text\">return</code>을 생략한 형태로 <code class=\"language-text\">{ return one + two }</code>와 같음</li>\n<li><code class=\"language-text\">=></code> 앞에서 줄을 분리하면 <code class=\"language-text\">SyntaxError</code></li>\n<li><code class=\"language-text\">=></code> 뒤에서는 개행 가능</li>\n</ol>\n</li>\n<li>\n<p>함수 블록 <code class=\"language-text\">{}</code>만 작성한 형태</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const total = (one) =&gt; {};\n\nconsole.log(total(1)); // undefined</code>\n        </deckgo-highlight-code>\n<ol>\n<li>함수 블록<code class=\"language-text\">{}</code>만 작성하면 <code class=\"language-text\">undefined</code> 반환</li>\n<li>함수 블록에 <code class=\"language-text\">return</code>을 작성하지 않은 것과 같음</li>\n<li><code class=\"language-text\">return</code>을 작성하지 않으면 <code class=\"language-text\">default</code>로 <code class=\"language-text\">undefined</code>를 반환 함</li>\n<li>화살표가 함수이기 때문이 아니라 <code class=\"language-text\">JS</code> 문법임</li>\n</ol>\n</li>\n<li>\n<p><code class=\"language-text\">{key: value}</code>를 반환하는 형태</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const point = (param) =&gt; ({ book: param });\nconst result = point(&#39;책&#39;);\n\nfor (const key in result) {\nconsole.log(key + &#39;: &#39; + result[key]);\n}\n\n// book: 책</code>\n        </deckgo-highlight-code>\n<ol>\n<li><code class=\"language-text\">{key: value}</code>를 소괄호()로 감싸면 <code class=\"language-text\">{key: value}</code>를 반환함</li>\n<li>소괄호()을 작성하지 않으면 <code class=\"language-text\">undefined</code>를 반환함</li>\n</ol>\n</li>\n</ul>\n<br>\n<h2 id=\"3-파라미터-사용\" style=\"position:relative;\"><a href=\"#3-%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0-%EC%82%AC%EC%9A%A9\" aria-label=\"3 파라미터 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3) 파라미터 사용</h2>\n<ul>\n<li>\n<p>파라미터가 하나 일 때</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const get = (param) =&gt; param + 20;\n\nconsole.log(get(10)); // 30</code>\n        </deckgo-highlight-code>\n<ol>\n<li>파라미터가 하나이면 <code class=\"language-text\">(param)</code>에서 소괄호를 생략할 수 있음</li>\n<li><code class=\"language-text\">get(10)</code>에서 <code class=\"language-text\">10</code>이 <code class=\"language-text\">param</code>에 설정됨</li>\n</ol>\n</li>\n<li>\n<p>파라미터가 없으면 소괄호만 작성</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const get = () =&gt; 10 + 20;\n\nconsole.log(get()); // 30</code>\n        </deckgo-highlight-code>\n<ul>\n<li>파라미터가 없으면 소괄호만 작성할 수 있음</li>\n</ul>\n<br>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","frontmatter":{"date":"September 02, 2021","title":"Arrow Function 사용","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-arrowFunction-1/"}},"prev":{"id":"2c97ba6c-5326-5120-bf8f-14b9559810fa","html":"<br>\n<h1 align=\"center\">\n  👋 화살표 함수와 this, this가 정적 스코프 참조\n</h1>\n<br>\n<h2 id=\"1-화살표-함수와-this\" style=\"position:relative;\"><a href=\"#1-%ED%99%94%EC%82%B4%ED%91%9C-%ED%95%A8%EC%88%98%EC%99%80-this\" aria-label=\"1 화살표 함수와 this permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 화살표 함수와 this</h2>\n<h3 id=\"1-code-classlanguage-textstrictcode-모드에서-함수를-호출할-때\" style=\"position:relative;\"><a href=\"#1-code-classlanguage-textstrictcode-%EB%AA%A8%EB%93%9C%EC%97%90%EC%84%9C-%ED%95%A8%EC%88%98%EB%A5%BC-%ED%98%B8%EC%B6%9C%ED%95%A0-%EB%95%8C\" aria-label=\"1 code classlanguage textstrictcode 모드에서 함수를 호출할 때 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1). <code class=\"language-text\">Strict</code> 모드에서 함수를 호출할 때</h3>\n<ul>\n<li>함수 앞에 오브젝트 작성은 필수</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">// 오브젝트 작성은 필수\n\n&#39;use strict&#39;;\n\nfunction book() {\n  function getPoint() {\n    console.log(this);\n  }\n\n  getPoint();\n  // window.getPoint();\n}\n\nwindow.book(); // undefined</code>\n        </deckgo-highlight-code>\n<ol>\n<li><code class=\"language-text\">strict</code> 모드에서는 <code class=\"language-text\">window.book()</code> 처럼 호출하는 함수 앞에 오브젝트를 작성해야 함, 이렇게 하지 않으면 <code class=\"language-text\">book()</code> 함수 안에서 <code class=\"language-text\">this</code> 값이 <code class=\"language-text\">undefined</code></li>\n<li>또한, <code class=\"language-text\">getPoint()</code> 처럼 <code class=\"language-text\">window</code>를 앞에 작성하지 않으면 <code class=\"language-text\">getPoint()</code> 안에서 <code class=\"language-text\">this</code> 값이 <code class=\"language-text\">undefined</code> 임</li>\n<li>이를 피하기 위해 <code class=\"language-text\">window.getPoint()</code>로 호출하면 <code class=\"language-text\">window</code> 오브젝트에 <code class=\"language-text\">getPoint()</code>가 없으므로 에러가 남(현재 <code class=\"language-text\">book</code> 함수 블록 안에 <code class=\"language-text\">getPoint()</code>가 있음)</li>\n<li><code class=\"language-text\">strict</code> 모드의 함수에서 <code class=\"language-text\">this</code>를 참조하기 위해서는 <code class=\"language-text\">this</code>를 별도로 저장한 후 사용해야 하는 번거로움이 있음</li>\n</ol>\n<p>—> 화살표 함수로 해결 가능</p>\n<br>\n<h3 id=\"2-화살표-함수에서-code-classlanguage-textthiscode가-글로벌-오브젝트-참조\" style=\"position:relative;\"><a href=\"#2-%ED%99%94%EC%82%B4%ED%91%9C-%ED%95%A8%EC%88%98%EC%97%90%EC%84%9C-code-classlanguage-textthiscode%EA%B0%80-%EA%B8%80%EB%A1%9C%EB%B2%8C-%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8-%EC%B0%B8%EC%A1%B0\" aria-label=\"2 화살표 함수에서 code classlanguage textthiscode가 글로벌 오브젝트 참조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2). 화살표 함수에서 <code class=\"language-text\">this</code>가 글로벌 오브젝트 참조</h3>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">// 화살표 함수 사용\n\n&#39;use strict&#39;;\n\nvar point = 100;\n\nfunction sports() {\n  const getPoint = () =&gt; {\n    console.log(this.point);\n  };\n\n  getPoint();\n}\n\nwindow.sports();</code>\n        </deckgo-highlight-code>\n<ol>\n<li>화살표 함수로 작성하면 <code class=\"language-text\">getPoint()</code>로 호출할 수 있음</li>\n<li>또한, <code class=\"language-text\">getPoint()</code> 화살표 함수 안에서 <code class=\"language-text\">this</code>가 <code class=\"language-text\">undefined</code>가 아니라 글로벌(<code class=\"language-text\">window</code>) 오브젝트를 참조 함</li>\n<li><code class=\"language-text\">var point = 100</code>을 작성했으므로 100이 출력됨</li>\n</ol>\n<br>\n<h3 id=\"3-code-classlanguage-textthiscode값이-code-classlanguage-textundefinedcode\" style=\"position:relative;\"><a href=\"#3-code-classlanguage-textthiscode%EA%B0%92%EC%9D%B4-code-classlanguage-textundefinedcode\" aria-label=\"3 code classlanguage textthiscode값이 code classlanguage textundefinedcode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3). <code class=\"language-text\">this</code>값이 <code class=\"language-text\">undefined</code></h3>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">&#39;use strict&#39;;\n\nconst book = {\n  point: 500,\n  getPoint: function () {\n    console.log(this.point);\n  },\n};\n\nbook.getPoint();\n\n/*\n1. 일반 함수인 book.getPoint()를 호출하면\n- 함수 안에서 this가 book 오브젝트를 참조 함\n- 따라서 console.log에 500이 출력됨\n*/\n\nvar point = 100;\n\nconst sports = {\n  getPoint: () =&gt; {\n    console.log(&#39;this.point&#39;, this.point);\n  },\n};\n\nsports.getPoint(); // 100이 출력됨\n\n/*\n1. 화살표 함수인 sports.getPoint()를 호출하면\n- 오른쪽 Local에 this:undefined가 표시됨\n\n2. 이것은, 화살표 함수는 함수에 this를 갖고 있지 않기 때문\n\n3. 이때, this가 window 오브젝트를 참조 함\n*/\n\n// 정리\n/*\n1. console.log(&quot;this.point&quot;, this.point);\n- var point = 100;에서 var 키워드를 사용했으므\n- poinrt 변수가 window 오브젝트에 설정됨\n- 따라서 console.log에 100이 출력됨\n\n2. 지금부터 this가 window 오브젝트를 참조하는 논리를 살펴봄\n- 어떻게 화살표 함수는 this가 undefined인데 window를 참조하여 this에 값을 할당 할 수 있는지 파악\n*/</code>\n        </deckgo-highlight-code>\n<br>\n<h2 id=\"2-code-classlanguage-textthiscode가-정적-스코프-참조\" style=\"position:relative;\"><a href=\"#2-code-classlanguage-textthiscode%EA%B0%80-%EC%A0%95%EC%A0%81-%EC%8A%A4%EC%BD%94%ED%94%84-%EC%B0%B8%EC%A1%B0\" aria-label=\"2 code classlanguage textthiscode가 정적 스코프 참조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. <code class=\"language-text\">this</code>가 정적 스코프 참조</h2>\n<ul>\n<li>화살표 함수에서 정적 스코프의 <code class=\"language-text\">this</code>를 사용</li>\n<li>\n<p>정적(Lexical)스코프란</p>\n<ul>\n<li>엔진이 해석할 때, 화살표 함수를 만나면</li>\n<li><code class=\"language-text\">function object</code>를 생성하고</li>\n<li>화살표 함수가 속한 스코프를 생성한 함수 오브젝트 스코프에 바인딩</li>\n</ul>\n</li>\n<li>\n<p>오브젝트에 바인딩된 스코프의 <code class=\"language-text\">this</code>를 화살표 함수에서 <code class=\"language-text\">this</code>로 사용</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">var title = &quot;책&quot;;\n\nconst book = {\n\tshow: () =&gt; console.log(this.title);\n}\n\nbook.show();  // 책</code>\n        </deckgo-highlight-code>\n<ol>\n<li><code class=\"language-text\">show()</code> 화살표 함수에서 <code class=\"language-text\">this</code>가 <code class=\"language-text\">window</code> 오브젝트를 참조하는 것은</li>\n<li>함수 밖 스코프의 변수를 사용하듯이 <code class=\"language-text\">show()</code>의 스코프인 <code class=\"language-text\">book</code> 함수 오브젝트에 설정된 스코프(글로벌 스코프)의 <code class=\"language-text\">this</code>를 화살표 함수에서 <code class=\"language-text\">this</code>로 사용하기 때문</li>\n<li><code class=\"language-text\">book</code> 오브젝트가 글로벌 오브젝트에 설정되므로 <code class=\"language-text\">this</code>가 <code class=\"language-text\">window</code> 오브젝트를 참조 함</li>\n</ol>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","frontmatter":{"date":"September 02, 2021","title":"Arrow Function와 this","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-arrowFunction-3/"}},"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":"zoomkoding/zoomkoding-gatsby-blog"}}}}},"pageContext":{"slug":"/study-js-es6-arrowFunction-2/","nextSlug":"/study-js-es6-arrowFunction-1/","prevSlug":"/study-js-es6-arrowFunction-3/"}},"staticQueryHashes":["1073350324","2938748437"]}