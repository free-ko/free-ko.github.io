{"componentChunkName":"component---src-templates-blog-template-js","path":"/study-js-es6-arrowFunction-2/","result":{"data":{"cur":{"id":"3cec56e3-2ae2-594a-835f-384d9ca721ab","html":"<br>\n<h1 align=\"center\">\n  👋 화살표 함수 구조, arguments 사용 불가\n</h1>\n<br>\n<h2 id=\"1-화살표-함수-구조\" style=\"position:relative;\"><a href=\"#1-%ED%99%94%EC%82%B4%ED%91%9C-%ED%95%A8%EC%88%98-%EA%B5%AC%EC%A1%B0\" aria-label=\"1 화살표 함수 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1) 화살표 함수 구조</h2>\n<ul>\n<li><code class=\"language-text\">function</code>을 <code class=\"language-text\">=></code> 로 표기하는 것이 전부가 아님</li>\n<li>\n<p>화살표 함수는 일반 함수와 구조가 다름</p>\n<ul>\n<li>화살표 함수 나름의 특징이 있음</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">book</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 위의 함수는 prototype과 constructor가 있음</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">point</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1. 위의 화살표 함수는 prototype과 construcotr가 없음</span>\n<span class=\"token comment\">// 2. prototype에 메소드를 연결하여 확장 할 수 없음</span>\n<span class=\"token comment\">// 3. prototype이 없으므로 그만큼 가벼움(prototype에 있는 연산자가 없기 때문에)</span>\n<span class=\"token comment\">// 4. new 연산자로 인스턴스를 생성할 수 없음</span>\n<span class=\"token comment\">// 5. 이것이 화살표 함수의 특징이며 용도임</span></code></pre></div>\n</li>\n</ul>\n<br>\n<h2 id=\"2-arguments-사용-불가\" style=\"position:relative;\"><a href=\"#2-arguments-%EC%82%AC%EC%9A%A9-%EB%B6%88%EA%B0%80\" aria-label=\"2 arguments 사용 불가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2) Arguments 사용 불가</h2>\n<ul>\n<li><code class=\"language-text\">Arguments</code>(파라미터가 유동적일 때 사용하는 것) 사용 할 수 없음</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token string\">\"use strict\"</span>\n\n<span class=\"token keyword\">const</span> point <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">const</span> args <span class=\"token operator\">=</span> arguments<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"arguments 사용 불가\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">point</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n1. point(10, 20) 형태로 호출하면\n- 일반 함수에서는 arguments에 10, 20이 설정되지만\n\n2. 화살표 함수에서 ReferenceError가 발생함\n- 즉, arguemtns를 사용할 수 없음\n\n3. point 함수 구조를 전개하면\n- arguements가 표시는 됨\n- 그 이유는 일반함수와 구조를 맞추기 위해서\n\n*/</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">Arguemtns</code> 대신에 <code class=\"language-text\">rest</code> 파라미터 사용</li>\n</ul>\n<br>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1-%ED%99%94%EC%82%B4%ED%91%9C-%ED%95%A8%EC%88%98-%EA%B5%AC%EC%A1%B0\">1) 화살표 함수 구조</a></li>\n<li><a href=\"#2-arguments-%EC%82%AC%EC%9A%A9-%EB%B6%88%EA%B0%80\">2) Arguments 사용 불가</a></li>\n</ul>\n</div>","excerpt":"1) 화살표 함수 구조 을  로 표기하는 것이 전부가 아님 화살표 함수는 일반 함수와 구조가 다름 화살표 함수 나름의 특징이 있음 2) Arguments 사용 불가 (파라미터가 유동적일 때 사용하는 것) 사용 할 수 없음  대신에  파라미터 사용 1) 화살표 함수 구조 2) Arguments 사용 불가","frontmatter":{"date":"September 02, 2021","title":"Arrow Function 구조","categories":"JS","author":"Kay","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-arrowFunction-2/"}},"next":{"id":"6a364120-eda5-57b8-b5f5-392f60f16387","html":"<br>\n<h1 align=\"center\">\n  👋 화살표 함수와 인스턴스, 화살표 함수 특징\n</h1>\n<br>\n<h2 id=\"1-화살표-함수와-인스턴스\" style=\"position:relative;\"><a href=\"#1-%ED%99%94%EC%82%B4%ED%91%9C-%ED%95%A8%EC%88%98%EC%99%80-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4\" aria-label=\"1 화살표 함수와 인스턴스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 화살표 함수와 인스턴스</h2>\n<ul>\n<li>인스턴스에서 화살표 함수의 <code class=\"language-text\">작성 위치</code>에 따라 <code class=\"language-text\">this</code>가 참조하는 오브젝트가 다름</li>\n</ul>\n<h3 id=\"1-code-classlanguage-textprototypecode에-메소드로-작성\" style=\"position:relative;\"><a href=\"#1-code-classlanguage-textprototypecode%EC%97%90-%EB%A9%94%EC%86%8C%EB%93%9C%EB%A1%9C-%EC%9E%91%EC%84%B1\" aria-label=\"1 code classlanguage textprototypecode에 메소드로 작성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1). <code class=\"language-text\">prototype</code>에 메소드로 작성</h3>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">var</span> point <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 생성자 함수</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Point</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>point <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nPoint<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getPoint</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// new 연산자로 인스턴스를 만든 후 getPoint() 메소드를 호출 합니다.</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getPoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 200</span></code></pre></div>\n<ol>\n<li><code class=\"language-text\">prototype</code>에 화살표 함수를 연결하면 함수 안에서 <code class=\"language-text\">this</code>가 글로벌 오브젝트를 참조 함</li>\n<li><code class=\"language-text\">console.log(this.point)</code> 에서 글로벌 오브젝트의 <code class=\"language-text\">point</code> 값이 200을 출력</li>\n</ol>\n<br>\n<h3 id=\"2-code-classlanguage-textprototypecode의-메소드-안에-작성\" style=\"position:relative;\"><a href=\"#2-code-classlanguage-textprototypecode%EC%9D%98-%EB%A9%94%EC%86%8C%EB%93%9C-%EC%95%88%EC%97%90-%EC%9E%91%EC%84%B1\" aria-label=\"2 code classlanguage textprototypecode의 메소드 안에 작성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2). <code class=\"language-text\">prototype</code>의 메소드 안에 작성</h3>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Point</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>point <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nPoint<span class=\"token punctuation\">.</span>prototpe<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getPoint</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>point <span class=\"token operator\">+</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token punctuation\">[</span><span class=\"token number\">1.2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>point <span class=\"token operator\">+</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getPoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 120</span>\n<span class=\"token comment\">// 101</span>\n<span class=\"token comment\">// 102</span></code></pre></div>\n<ol>\n<li><code class=\"language-text\">prototype</code>에 일반 함수를 연결하고, 함수 안에 화살표 함수를 작성한 형태 임.</li>\n<li><code class=\"language-text\">getPoint()</code>가 일반 함수 이므로 <code class=\"language-text\">this</code>가 생성한 인스턴스 참조</li>\n<li>또한, 화살표 함수에서도 <code class=\"language-text\">this</code>가 생성한 인스턴스를 참조 함</li>\n<li>화살표 함수의 스코프인 <code class=\"language-text\">getPoint()</code>의 <code class=\"language-text\">this</code>를 사용하기 때문</li>\n</ol>\n<br>\n<h2 id=\"2-화살표-함수-특징\" style=\"position:relative;\"><a href=\"#2-%ED%99%94%EC%82%B4%ED%91%9C-%ED%95%A8%EC%88%98-%ED%8A%B9%EC%A7%95\" aria-label=\"2 화살표 함수 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 화살표 함수 특징</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">function</code> 대신 <code class=\"language-text\">=></code> 를 사용, 함수 표현식 형태</p>\n<ul>\n<li><code class=\"language-text\">prototype</code>이 없으므로 함수가 가벼움</li>\n<li><code class=\"language-text\">constructor</code>가 없으므로 <code class=\"language-text\">new</code> 연산자로 인스턴스를 생성할 수 없음</li>\n</ul>\n</li>\n<li>\n<p>화살표 함수에 <code class=\"language-text\">this</code>가 없음</p>\n<ul>\n<li>화살표 함수로 <code class=\"language-text\">Function</code> 오브젝트를 생성할 때</li>\n<li>정적으로 화살표 함수가 속한 스코프의 <code class=\"language-text\">this</code>를 화살표 함수에 바인딩 함</li>\n<li>바인딩 된 <code class=\"language-text\">this</code> 참조가 바뀌지 않으며 화살표 함수에서 <code class=\"language-text\">this</code>로 사용 함</li>\n<li>일반 함수는 <code class=\"language-text\">call()</code> 등으로 바꿀 수 있음</li>\n</ul>\n</li>\n<li>메소드보다 함수로 사용하는 것이 효율 성이 높음</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#1-%ED%99%94%EC%82%B4%ED%91%9C-%ED%95%A8%EC%88%98%EC%99%80-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4\">1. 화살표 함수와 인스턴스</a></p>\n<ul>\n<li><a href=\"#1-prototype%EC%97%90-%EB%A9%94%EC%86%8C%EB%93%9C%EB%A1%9C-%EC%9E%91%EC%84%B1\">1). <code class=\"language-text\">prototype</code>에 메소드로 작성</a></li>\n<li><a href=\"#2-prototype%EC%9D%98-%EB%A9%94%EC%86%8C%EB%93%9C-%EC%95%88%EC%97%90-%EC%9E%91%EC%84%B1\">2). <code class=\"language-text\">prototype</code>의 메소드 안에 작성</a></li>\n</ul>\n</li>\n<li><a href=\"#2-%ED%99%94%EC%82%B4%ED%91%9C-%ED%95%A8%EC%88%98-%ED%8A%B9%EC%A7%95\">2. 화살표 함수 특징</a></li>\n</ul>\n</div>","frontmatter":{"date":"September 02, 2021","title":"Arrow Function과 인스턴스","categories":"JS","author":"Kay","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-arrowFunction-4/"}},"prev":{"id":"72257ccb-d0bf-53f8-a94e-cedf129b22b0","html":"<br>\n<h1 align=\"center\">\n  👋 이터레이션, 이터레이션 프로토콜\n</h1>\n<br>\n<h2 id=\"1-이터레이션\" style=\"position:relative;\"><a href=\"#1-%EC%9D%B4%ED%84%B0%EB%A0%88%EC%9D%B4%EC%85%98\" aria-label=\"1 이터레이션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 이터레이션</h2>\n<ul>\n<li>\n<p>이터레이션(Iteration)의 사전적 의미 : 반복</p>\n<ul>\n<li><code class=\"language-text\">for()</code>문의 반복 개념과 차이 있음</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> value <span class=\"token keyword\">of</span> list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> list<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 10</span>\n<span class=\"token comment\">// 20</span>\n<span class=\"token comment\">// {value: 10, done: false}</span>\n<span class=\"token comment\">// {value: 20, done: false}</span>\n<span class=\"token comment\">// {value: undefined, done: true}</span></code></pre></div>\n</li>\n<li>\n<p>이터레이션을 위한 프로토콜(Protocol) 필요</p>\n<ul>\n<li>예: 통신 프로토콜(규약)</li>\n<li>데이터 송수신 프로토콜 정의</li>\n<li>어떻게 반복을 할 것인가에 대한 규약이 필요</li>\n</ul>\n</li>\n<li>\n<p>즉, 이터레이션은 프로토콜을 갖고 있으며</p>\n<ul>\n<li>프로토콜에 따라 이터레이션 수행</li>\n<li>프로토콜이 구문과 빌트인이 아니므로 프로토콜에 맞으면 이터레이션 가능</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"2-이터레이션-프로토콜\" style=\"position:relative;\"><a href=\"#2-%EC%9D%B4%ED%84%B0%EB%A0%88%EC%9D%B4%EC%85%98-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C\" aria-label=\"2 이터레이션 프로토콜 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 이터레이션 프로토콜</h2>\n<ul>\n<li>이터레이션 프로토콜(규약)은</li>\n<li>\n<p>오브젝트가 이터레이션 할 수 있는 구조이어야 하며</p>\n<ul>\n<li>[10, 20]은 가능, 100은 불가능</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> list<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// {value: 10, done: false}</span>\n<span class=\"token comment\">// {value: 20, done: false}</span>\n<span class=\"token comment\">// {value: undefined, done: true}</span></code></pre></div>\n</li>\n<li>\n<p>이터레이션 프로토콜 구분</p>\n<ul>\n<li>이터러블(iterable) 프로토콜 : 반복가능 한 것</li>\n<li>이터레이터(iterator) 프로토콜 : <code class=\"language-text\">obj.next()</code> 처럼 반복문을 실행시키는 것\n—> 이렇게 이터러블, 이터레이터를 규약하는 이유는? <code class=\"language-text\">확장성</code> 때문에</li>\n</ul>\n</li>\n<li>개발자 코드로 프로토콜을 맞추면 이터레이션 할 수 없는 오브젝트를 이터레이션 할 수 있도록 만들 수 있음</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1-%EC%9D%B4%ED%84%B0%EB%A0%88%EC%9D%B4%EC%85%98\">1. 이터레이션</a></li>\n<li><a href=\"#2-%EC%9D%B4%ED%84%B0%EB%A0%88%EC%9D%B4%EC%85%98-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C\">2. 이터레이션 프로토콜</a></li>\n</ul>\n</div>","frontmatter":{"date":"September 03, 2021","title":"이터레이션","categories":"JS","author":"Kay","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-iteration-1/"}},"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":"zoomkoding/zoomkoding-gatsby-blog"}}}}},"pageContext":{"slug":"/study-js-es6-arrowFunction-2/","nextSlug":"/study-js-es6-arrowFunction-4/","prevSlug":"/study-js-es6-iteration-1/"}},"staticQueryHashes":["1073350324","2938748437"]}