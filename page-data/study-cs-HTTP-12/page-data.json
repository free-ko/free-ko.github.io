{"componentChunkName":"component---src-templates-blog-template-js","path":"/study-cs-HTTP-12/","result":{"data":{"cur":{"id":"34f99b6c-8585-506c-a793-6c9d9d0f14f6","html":"<br>\n<h1 align=\"center\">\n  👋  HTTP 상태코드 소개\n</h1>\n<br>\n<h2 id=\"1상태-코드--클라이언트가-보낸-요청의-처리-상태를-응답에서-알려주는-기능\" style=\"position:relative;\"><a href=\"#1%EC%83%81%ED%83%9C-%EC%BD%94%EB%93%9C--%ED%81%B4%EB%9D%BC%EC%9D%B4%EC%96%B8%ED%8A%B8%EA%B0%80-%EB%B3%B4%EB%82%B8-%EC%9A%94%EC%B2%AD%EC%9D%98-%EC%B2%98%EB%A6%AC-%EC%83%81%ED%83%9C%EB%A5%BC-%EC%9D%91%EB%8B%B5%EC%97%90%EC%84%9C-%EC%95%8C%EB%A0%A4%EC%A3%BC%EB%8A%94-%EA%B8%B0%EB%8A%A5\" aria-label=\"1상태 코드  클라이언트가 보낸 요청의 처리 상태를 응답에서 알려주는 기능 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.상태 코드 : 클라이언트가 보낸 요청의 처리 상태를 응답에서 알려주는 기능</h2>\n<ol>\n<li>1XX : 요청이 수신되어 처리 중(Informational) —> <code class=\"language-text\">거의 사용하지 않음</code></li>\n<li>2XX : 요청 정상 처리(Successful)</li>\n<li>3XX : 요청을 완료하려면 추가 행동이 필요(Redirection)</li>\n<li>4XX : 클라이언트 오류, 잘못된 문법 등으로 서버가 요청을 수행할 수 없음</li>\n<li>5XX : 서버 오류, 서버가 정상 요청을 처리하지 못함(Server Error)</li>\n</ol>\n<br>\n<h2 id=\"2만약-모르는-상태-코드가-나타나면\" style=\"position:relative;\"><a href=\"#2%EB%A7%8C%EC%95%BD-%EB%AA%A8%EB%A5%B4%EB%8A%94-%EC%83%81%ED%83%9C-%EC%BD%94%EB%93%9C%EA%B0%80-%EB%82%98%ED%83%80%EB%82%98%EB%A9%B4\" aria-label=\"2만약 모르는 상태 코드가 나타나면 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.만약 모르는 상태 코드가 나타나면?</h2>\n<ol>\n<li>클라이언트가 인식할 수 없는 상태코드를 서버가 반환하면?</li>\n<li>클라이언트는 상위 상태코드로 해석해서 처리</li>\n<li>\n<p>미래에서 새로운 상태 코드가 추가되어도 클라리언트를 변경하지 않아도 됨</p>\n<p>ex) 299 ??? —> 2XX : <code class=\"language-text\">Successful</code></p>\n<p>ex) 451 ??? —> 4XX : <code class=\"language-text\">Client Error</code></p>\n<p>ex) 599 ??? —> 5XX : <code class=\"language-text\">Server Error</code></p>\n</li>\n</ol>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","excerpt":"1.상태 코드 : 클라이언트가 보낸 요청의 처리 상태를 응답에서 알려주는 기능 1XX : 요청이 수신되어 처리 중(Informational) —>  2XX : 요청 정상 처리(Successful) 3XX : 요청을 완료하려면 추가 행동이 필요(Redirection) 4XX : 클라이언트 오류, 잘못된 문법 등으로 서버가 요청을 수행할 수 없음 5XX : 서버 오류, 서버가 정상 요청을 처리하지 못함(Server Error) 2.만약 모르는 상태 코드가 나타나면? 클라이언트가 인식할 수 없는 상태코드를 서버가 반환하면? 클라이언트는 상위 상태코드로 해석해서 처리 미래에서 새로운 상태 코드가 추가되어도 클라리언트를 변경하지 않아도 됨 ex) 299 ??? —> 2XX :  ex) 451 ??? —> 4XX :  ex) 599 ??? —> 5XX :","frontmatter":{"date":"December 23, 2021","title":"HTTP - 6.상태코드","categories":"CS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-cs-HTTP-12/"}},"next":{"id":"a335c683-6b3e-5e8c-bf0b-f3a894add9ac","html":"<br>\n<h1 align=\"center\">\n  👋  async/await - 개요, 함수\n</h1>\n<br>\n<h2 id=\"1-asyncawait-개요\" style=\"position:relative;\"><a href=\"#1-asyncawait-%EA%B0%9C%EC%9A%94\" aria-label=\"1 asyncawait 개요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. async/await 개요</h2>\n<ul>\n<li>\n<p>비동기 환경에서 실행하지만 실행이 끝나야 다음을 실행함</p>\n<ul>\n<li>즉, 실행은 비동기이고 실행 순서는 동기 임</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">function create(param) {\n  return new Promise((resolve) =&gt; {\n    resolve(param);\n  });\n}\n\nasync function getPoint(option) {\n  const value = await create(option);\n  console.log(vaule);\n}\n\ngetPoint({ point: 100 });\n\n// 1. async function getPoint(option){...} 비동기 함수로 선언함\n// 2. const value = await create(option); create() 함수를 호출함\n// 3. 호출된 함수에서 Promise 인스턴스를 반환함 따라서 비동기 처리를 하게 됨 즉, resolve()가 실행되기 전에 아래 코드를 실행함\n// 4. 한편, await는 아래로 내려가지 않고 resolve()가 끝나는 것을 기다림\n// 5. resolve(param)가 실행되면 param 값을 create()로 보내며 이 값을 받아 value 변수에 할당함\n// 6. 이어서 console.log(value)를 실행함\n\n// 실행결과\n// {point: 100}</code>\n        </deckgo-highlight-code>\n</li>\n<li><code class=\"language-text\">async</code> 키워드가 아니며 <code class=\"language-text\">\"async function\"</code> 이 키워드 개념이며</li>\n<li><code class=\"language-text\">async</code> 함수라고 부름</li>\n<li><code class=\"language-text\">await</code> 는 키워드(키워드 나름대로 기능을 가지고 있음)</li>\n</ul>\n<br>\n<h2 id=\"2-async-함수\" style=\"position:relative;\"><a href=\"#2-async-%ED%95%A8%EC%88%98\" aria-label=\"2 async 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. async 함수</h2>\n<ul>\n<li>\n<p>비동기 함수를 뜻하며 <code class=\"language-text\">AsyncFunction</code> 오브젝트를 생성하여 반환함</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">async function sports() {\nreturn &#39;축구&#39;;\n}\n\nconsole.log(Object.prototype.toString.call(sports));\n\n// 1. async function sports(){...} 엔진이 async 함수를 만나면 AsyncFunction 오브젝트로 생성함\n// 2. 함수 표현식으로 작성할 수도 있음 const sport = async function(){...}\n// 3. Object.prototype.toString.call(sports) toString()을 call하면 Symbol.toStringTag()가 실행되며 오브젝트를 설명하는 디폴트 문자열을 반환함\n// 4. [object AsyncFunction]이 출력됨 즉, sports는 AsyncFunction 오브젝트임\n// 5. AsyncFunction 오브젝트는 자체에 Symbol.toStringTag만 있으면 빌트인 Function 오브젝트를 상속받음 따라서 호출할 수 있음\n\n// 실행결과\n// [object AsyncFunction]</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p><code class=\"language-text\">async</code> 함수가 호출되며 <code class=\"language-text\">Promise</code> 인스턴스를 반환함</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">async function sports() {\nreturn &#39;축구&#39;;\n}\n\nconst obj = sports();\n\nconsole.log(obj instanceof Promise);\n\n// 1. const obj = sports(); async 함수를 호출하면 &quot;축구&quot;를 반환하지 않고 Promise 인스턴스를 반환함\n// 2. console.log(obj instanceof Promise); true가 출력되면, Promise 인스턴스를 뜻함 그래서 비동기 환경에서 실행됨\n\n// 실행환경\n// true</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p><code class=\"language-text\">async</code> 함수의 <code class=\"language-text\">return</code> 값을 처리하려면 <code class=\"language-text\">then()</code> 을 함수 호출에 연결하여 작성</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">async function sports() {\nreturn &#39;축구&#39;;\n}\n\nsports().then((res) =&gt; console.log(res));\n\nconsole.log(&#39;여기 먼저&#39;);\n\n// 1. sports()를 호출하면 Promise 인스턴스를 반환하므로 then()을 연결하여 사용할 수 있음\n// 2. then()을 실행하지 않고 아래의 console.log(&quot;여기 먼저&quot;)를 먼저 실행함\n// 3. return &quot;축구&quot;; resolve()를 작성하지 않았지만 return문의 표현식 평가 결과를 resolve()의 파라미터 값으로 사용하여 then()의 첫 번째 파라미터 함수를 호출함\n// 4. then((res) =&gt; console.log(res)); return 문의 표현식 평가 결과가 then()의 첫 번째 파라미터 함수의 res 파라미터에 설정됨\n\n// 실행결과\n// 여기 먼저\n// 축구</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p><code class=\"language-text\">async</code> 함수에서 <code class=\"language-text\">throw</code> 가 발생하면 <code class=\"language-text\">reject()</code> 로 처리 됨</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">async function sports() {\nthrow &#39;에러&#39;;\n}\n\nsports().then(\n() =&gt; 0,\n(rej) =&gt; console.log(rej),\n);\n\n// 1. async 함수에서 throw가 발생하면 reject()로 처리되며 표현식의 평가 결과를 파라미터 값으로 사용함\n// 2. then()의 두 번째 파라미터 함수가 호출되며 표현식의 평가 결과가 rej에 설정됨\n\n// 실행결과\n// 에러</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","frontmatter":{"date":"December 22, 2021","title":"async/await - 개요, 함수","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-async-await-1/"}},"prev":{"id":"e624fc01-0f38-5508-96e1-5305eb9ed2d2","html":"<br>\n<h1 align=\"center\">\n  👋  async/await - 반환, 형태, for-await-of\n</h1>\n<br>\n<h2 id=\"1-await\" style=\"position:relative;\"><a href=\"#1-await\" aria-label=\"1 await permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. await</h2>\n<ul>\n<li>\n<p>Syntax</p>\n<ul>\n<li><code class=\"language-text\">[value] = awiat</code> 표현식</li>\n<li><code class=\"language-text\">async</code> 함수 안에 작성함</li>\n<li><code class=\"language-text\">[value]</code> 는 선택임</li>\n</ul>\n</li>\n<li>\n<p>표현식이 <code class=\"language-text\">Promise</code> 오브젝트 이면 <code class=\"language-text\">resolve()</code>의 파라미터 값을 반환함</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">function crate(param) {\nreturn new Promise((resolve) =&gt; {\n  resolve(param);\n});\n}\n\nasync function getPoint(option) {\nconst value = await create(option);\nconsole.log(value);\n}\n\ngetPoint({ point: 100 });\n\n// 1. const value = await create(option); 에서 create() 함수를 호출함\n// 2. 호출된 함수에서 Promise 인스턴스를 반환함 따라서 아래 코드로 이동하게 되는데 await로 인해 resolve(param)이 실행되어 param 값을 보낼 때 까지 기다림\n// 3. resolve(param)을 실행함 보낸 값을 받아 value 변수에 할당함\n// 4. conosle.log(value)를 실행함\n\n// 실행결과\n// {point:100}</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>표현식이 <code class=\"language-text\">Promise</code> 오브젝트가 아니면 표현식의 평가 결과를 반환함</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">async function getPoint(option) {\nconst value = (await option.point) + 200;\nconsole.log(value);\n}\n\ngetPoint({ point: 100 });\n\n// 1. const value = await option.point + 200; option은 파라미터 값으로 {point: 100}임 await 표현식이 Promise 오브젝트가 아님\n// 2. 이때에는 표현식의 평가 결과를 반환함\n// 3. await가 비동기 환경에서 동기 처리를 위한 것이므로 표현식이 비동기 처리가 아니면 의미가 약함\n\n// 실행결과\n// 300</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p><code class=\"language-text\">Promise</code> 에서 <code class=\"language-text\">reject()</code> 가 발생했을 때 에러에 대처하는 형태임</p>\n<ul>\n<li><code class=\"language-text\">try-catch</code> 를 사용한 형태</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">function create(param) {\n  return new Promise((res, reject) =&gt; {\n    reject(param);\n  });\n}\n\nasync function getPoint(option) {\n  try {\n    await create(option);\n  } catch (error) {\n    console.log(error);\n  }\n}\n\ngetPoint({ point: 100 });\n\n// 1. reject(param); Promise에서 reject()가 실행되면\n// 2. catch(error) 블록에서 받음 reject(param)의 param이 catch(error)의 error에 설정됨\n// 3. try-catch로 에러 발생에 대응할 수 있음\n\n// 실행결과\n// {point:100}</code>\n        </deckgo-highlight-code>\n<ul>\n<li><code class=\"language-text\">catch()</code> 를 사용한 형태</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">function create(param) {\n  return new Promise((res, reject) =&gt; {\n    reject(param);\n  });\n}\n\nasync function getPoint(option) {\n  await create(option)\n    .catch((value) =&gt; {\n      return 300;\n    })\n    .then((param) =&gt; {\n      console.log(param);\n    });\n}\n\ngetPoint({ point: 100 });\n\n// 1. reject(param); reject() 처리이므로 catch()가 실행됨\n// 2. catch((value) =&gt; {...} reject(param)의 param 값이 value에 설정됨\n// 3. return 300; 300이 반환되지 않고 Promise 인스턴스를 반환하므로 아래의 then()이 호출됨\n// 4. then((param) =&gt; {...} catch()에서 return 300은 정상 처리이므로 첫 번째 파라미터 함수가 실행되며 param에 300이 설정됨\n\n// 실행결과\n// 300</code>\n        </deckgo-highlight-code>\n<ul>\n<li><code class=\"language-text\">Promise</code> 가 아닌 값을 반환하는 형태</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">function create(param) {\n  return new Promise((res, reject) =&gt; {\n    reject(param);\n  });\n}\n\nasync function getPoint(option) {\n  const value = await create(option).catch((value) =&gt; {\n    return 300;\n  });\n  console.log(value);\n}\n\n// 1. 앞은 catch().then() 형태이지만 여기는 catch()가 끝임\n// 2. return 300; catch()에 then()이 연결되어 있으면 Promise 인스턴스를 반환하지만 then() 연결이 없으면 300을 반환함\n// 3. console.log(value) 300을 반환하므로 300이 출력됨\n\n// 실행결과\n// 300</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<h2 id=\"2-for-await-of\" style=\"position:relative;\"><a href=\"#2-for-await-of\" aria-label=\"2 for await of permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. for-await-of</h2>\n<ul>\n<li>\n<p>Syntax</p>\n<ul>\n<li><code class=\"language-text\">for await (variable of iterable) {...}</code></li>\n<li><code class=\"language-text\">async</code> 함수에서 사용할 수 있음</li>\n</ul>\n</li>\n<li>\n<p>동기 반복에서 사용할 수 있지만</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const list = [10, 20];\n\nasync function show() {\nfor await (const value of list) {\n  console.log(value);\n}\n}\n\nshow();\n\n// 1. for await (variable of iterable) {...} iterable에 이터러블 오브젝트를 작성함 [10,20]은 이터러블 오브젝트 임 variable에 const/let/var 변수를 작성함\n// 2. for await (const value of list) {...} [10,20]의 엘리먼트를 하나씩 반복하면서 값을 value에 설정하고 console.log(value)로 값을 출력함\n// 3. 배열에서 Promise 인스턴스를 반환하지 않으므로 이것은 비동기 반복이 아니라 동기 반복\n\n// 실행결과\n// 10\n// 20</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>일반적으로 비동기 반복에서 사용</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">async function* point() {\nyield 10;\nyield 20;\n}\n\nasync function show() {\nfor await (const value of point()) {\n  console.log(value);\n}\n}\n\nshow();\n\n// 1. for await (const value of point()){...} point() 제너레이터 함수를 호출하면 Proimse 인스턴스를 반환하므로 비오디로 반복하게 됨\n\n// 실행결과\n// 10\n// 20</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","frontmatter":{"date":"December 23, 2021","title":"async/await - 반환, 형태, for-await-of","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-async-await-2/"}},"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":"zoomkoding/zoomkoding-gatsby-blog"}}}}},"pageContext":{"slug":"/study-cs-HTTP-12/","nextSlug":"/study-js-es6-async-await-1/","prevSlug":"/study-js-es6-async-await-2/"}},"staticQueryHashes":["1073350324","2938748437"]}