{"componentChunkName":"component---src-templates-blog-template-js","path":"/study-js-es6-Symbol-2/","result":{"data":{"cur":{"id":"5b5fd239-fe59-5874-8599-5a001513168a","html":"<br>\n<h1 align=\"center\">\n  👋  Symbol() 함수\n</h1>\n<h2 id=\"1-symbol\" style=\"position:relative;\"><a href=\"#1-symbol\" aria-label=\"1 symbol permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Symbol()</h2>\n<ul>\n<li>외부로 노출되는 것 허용 하지 않음</li>\n<li>\n<p><code class=\"language-text\">Symbol()</code> 함수는 값을 생성하여 반환</p>\n<ul>\n<li>반환된 값을 볼 수 없음</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const sym = Symbol();\n\nconsole.log(sym); // Symbol()\nconsole.log(typeof sym); // symbol\n\n// 1. const sym = Symbol(); Symbol 오브젝트가 아니라, Symbol 값을 생성하여 반환 함\n// 2. 새로운 값을 생성하여 반환하므로 값을 생성한다는 표현이 적절 함\n// 3. console.log(sym) 생성한 Symbol 값이 출력되지 않고 Symbol 값을 생성한 코드 형태가 표시 됨\n// 4. typeof sym Symbol로 생성한 값 타입은 symbol임</code>\n        </deckgo-highlight-code>\n<ul>\n<li><code class=\"language-text\">new</code> 연산자를 사용할 수 없음</li>\n</ul>\n</li>\n<li>\n<p>프로그램 전체를 통해 유일한 값 제공</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const one = Symbol();\nconst two = Symbol();\n\nconsole.log(one == two); // false\n\n// 1. Symbol()을 실행할 때마다 프로그램 전체에서 하나만 있는 값을 생성함\n// 2. 따라서 one의 값과 two의 값이 다름</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p><code class=\"language-text\">Symbol</code> 값으로 연산 불가</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">let sym = Symbol();\n\ntry {\nconst add = sym + 5;\n} catch (e) {\nconsole.log(&#39;연산 불가&#39;);\n}\n\n// 1. const add = sym + 5; Symbol이 값이지만 연산 할 수 없음</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p><code class=\"language-text\">Symbol</code> 타입 변경 불가</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">let sym = Symbol();\n\ntry {\n+sym;\n} catch (e) {\nconsole.log(&#39;값 타입 변경 불가&#39;);\n}\n\n// 1. +sym; 단항 + 연산자는 Number 타입으로 바꿈, Symbol 타입을 바꿀 수 없음\n// 2. 이외에도 비교할 수 없는 등의 Symbol 값 사용에 제약이 있음\n// 3. 이것은 외부에 값이 노출되지 않도록 하기 위해서 임\n// 4. 외부에 Symbol 값이 노출되는 처리(계산, 변환 등)을 할 수 없음</code>\n        </deckgo-highlight-code>\n<ul>\n<li>파라미터에 주석, 설명을 작성</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const sym = Symbol(&#39;주석, 설명&#39;);\n\nconsole.log(sym); // Symbol(주석, 설명)\n\n// 1. const sym = Symbol(&quot;주석, 설명&quot;); 파라미터에 Symbol()로 생성한 값의 설명, 주석을 문자열로 작성 함\n// 2. 생성한 Symbol 값을 볼 수 없으므로 값 설명이 필요할 때마다 사용\n// 3. Symbol() 실행에 영향을 미치지 않음\n// 4. console.log(sym); 생성한 Symbol 값이 출력되지 않고 Symbol 값을 생성한 코드가 표시 됨</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p><code class=\"language-text\">Symbol</code> 값을 문자열로 바꿔서 연결</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const sym = Symbol(&#39;설명&#39;);\n\nconsole.log(sym.toString() + &#39;연결&#39;); // Symbol(설명)연결\n\n// 1. sym.toString() + &quot;연결&quot;\n// 2. Symbol 값을 toString()으로 변환하면 에러가 발생하지 않지만\n// 3. 값이 변환되지 않고 값을 만든 형태에 문자열을 연결 함\n// 4. new String(sym) 형태는 에러가 발생함</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p><code class=\"language-text\">Template</code> 에 사용</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const sym = Symbol(&#39;주석, 설명&#39;);\n\ntry {\n`${sym}`;\n} catch {\nconsole.log(&#39;`${sym}불가`&#39;);\n}\n\n// 1. Symbol 값을 Template에 사용할 수 없음\n// 2. 외부로 노출 되기 때문에</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","excerpt":"1. Symbol() 외부로 노출되는 것 허용 하지 않음  함수는 값을 생성하여 반환 반환된 값을 볼 수 없음  연산자를 사용할 수 없음 프로그램 전체를 통해 유일한 값 제공  값으로 연산 불가  타입 변경 불가 파라미터에 주석, 설명을 작성  값을 문자열로 바꿔서 연결  에 사용","frontmatter":{"date":"October 19, 2021","title":"Symbol() 함수","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-Symbol-2/"}},"next":{"id":"ecc64ad2-854c-517e-8434-5f6a390d1947","html":"<br>\n<h1 align=\"center\">\n  👋  primitive 값, wrapper 오브젝트\n</h1>\n<h2 id=\"1-primitive-값\" style=\"position:relative;\"><a href=\"#1-primitive-%EA%B0%92\" aria-label=\"1 primitive 값 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Primitive 값</h2>\n<ul>\n<li>JS에서 <code class=\"language-text\">Primitive</code> 값은 오브젝트가 아니라 값이며 함수를 갖고 있지 않음</li>\n<li>\n<p><code class=\"language-text\">const num = 100;</code> 을 할당하면</p>\n<ul>\n<li><code class=\"language-text\">num</code> 변수에 100만 할당되며 아무것도 첨부되지 않음</li>\n<li>100이 <code class=\"language-text\">primitive</code> 값</li>\n</ul>\n</li>\n<li>\n<p>ES5의 <code class=\"language-text\">primitive</code> 값 타입</p>\n<ul>\n<li><code class=\"language-text\">string</code>, <code class=\"language-text\">number</code>, <code class=\"language-text\">boolean</code>, <code class=\"language-text\">null</code>, <code class=\"language-text\">undefined</code></li>\n</ul>\n</li>\n<li>ES6에서 <code class=\"language-text\">symbol</code> 타입추가</li>\n</ul>\n<br>\n<h2 id=\"2-wrapper-오브젝트\" style=\"position:relative;\"><a href=\"#2-wrapper-%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8\" aria-label=\"2 wrapper 오브젝트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Wrapper 오브젝트</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">wrapper</code> 오브젝트는?</p>\n<ul>\n<li>프리미티브 값이 포함된 오브젝트</li>\n<li><code class=\"language-text\">wrapper</code> 오브젝트에는 메소드가 있음</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">wrapper</code> 오브젝트가 있는 프리미티브 값 타입</p>\n<ul>\n<li>stiring : String, number : Number 오브젝트</li>\n<li>boolean : Boolean, symbol : Symbol 오브젝트</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">const obj = new String(100);</code></p>\n<ul>\n<li>obj 인스턴스의 <code class=\"language-text\">[[PrimitiveValue]]</code> 에 100이 설정됨</li>\n<li><code class=\"language-text\">[[PrimitiveValue]]</code> 형태</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const sports = new String(100);\n\n/*\n\t1. 오른쪽의 sports를 펼치면\n\n\t2. [[PrimitiveValue]]: &quot;100&quot;이 있음\n      - [[PrimitiveValue]]가 프리미티브 값을 나타내는\n      - 프로퍼티 이름이며, &quot;100&quot;이 프로퍼티 값\n\n\t3. sports가 wrapper 오브젝트 임\n*/\n\nconst sym = Symbol{&quot;ABC&quot;);\n\n/*\n\t1. sports를 펼치면 [[PrimitiveValue]]가 표시 되지만\n\n\t2. sym은 펼칠 수가 없으며\n    - [[PrimitiveValue]]가 표시되지 않음\n\n\t3. 그렇다고 Symbol에 Primitive 값이 없는 것이 아니며\n\n\t4. 이것은 Symbol은 Primitive 값을\n\t- 외부에 노출시키지 않는 특성 때문\n*/</code>\n        </deckgo-highlight-code>\n</li>\n<li><code class=\"language-text\">undefined</code>, <code class=\"language-text\">null</code>은 <code class=\"language-text\">wrapper</code> 오브젝트 없음</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","frontmatter":{"date":"October 18, 2021","title":"primitive 값, wrapper 오브젝트","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-Symbol-1/"}},"prev":{"id":"68d154c9-0ea7-5435-acd5-37833c2c6d8d","html":"<br>\n<h1 align=\"center\">\n  👋  Symbol 사용 형태\n</h1>\n<br>\n<h2 id=\"symbol-사용-형태\" style=\"position:relative;\"><a href=\"#symbol-%EC%82%AC%EC%9A%A9-%ED%98%95%ED%83%9C\" aria-label=\"symbol 사용 형태 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Symbol 사용 형태</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">Object</code> 프로퍼티 키로 사용</p>\n<ul>\n<li><code class=\"language-text\">Symbol</code> 값이 유일하므로 중복되지 않음</li>\n<li><code class=\"language-text\">symbol-keyed property</code> 라고 부름</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const sym = Symbol(&#39;설명&#39;);\nconst obj = { [sym]: 100 };\n\n// 1. const obj = {[sym]j: 100};\n// 2. Symbol 값을 Object의 프로퍼티 키로 사용했음\n// 3. [sym]처럼 대괄호 안에 Symbol()로 할당한 변수 이름을 작성 함\n// 4. 이를 symbol-keyed property라고 부름</code>\n        </deckgo-highlight-code>\n<ul>\n<li>프로퍼티 값 추출 방법</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const sym = Symbol(&#39;설명&#39;);\nconst obj = { [sym]: 100 };\n\nconsole.log(obj[sym]); // 100\nconsole.log(obj.sym); // undefined\n\n// 1. obj[sym] Symbol() 결과를 할당한 sym을 프로퍼티 키로 사용하여 값을 구함\n// 2. 프로퍼티 값인 100이 출력 됨\n// 3. obj.sym undefined가 출력되며 obj[sym] 형태를 사용해야 함</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p><code class=\"language-text\">Object</code> 에서 함수 이름으로 사용</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const sym = Symbol(&#39;함수 이름&#39;);\nconst obj = {\n[sym](param) {\n  return apram;\n},\n};\n\nconsole.log(obj[sym](200)); // 200\n\n// 1. [sym](param){} 형태로 함수를 정의하고\n// 2. obj[sym](200) 형태로 호출함</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p><code class=\"language-text\">for-in</code> 문에서 사용</p>\n<ul>\n<li><code class=\"language-text\">Symbol</code>이 열거되지 않음</li>\n<li><code class=\"language-text\">[[Enumerable]]: false</code> 이기 때문</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const obj = {\n  [Symbol(&#39;100&#39;)]: 100,\n  two: 200,\n};\n\nfor (let key in obj) {\n  console.log(key);\n}\n\n// 1. Object에 Symbol-keyed 프로퍼티를 사용하여 프로퍼티 값을 작성했음\n// 2. for-in 문으로 열거되지 않음, 에러가 나지 않음\n// 실행 결과\n// two</code>\n        </deckgo-highlight-code>\n</li>\n<li><code class=\"language-text\">Object.getOwnPropertySymbols()</code>로 열거 가능</li>\n<li>\n<p><code class=\"language-text\">for-of</code> 문에서 사용</p>\n<ul>\n<li>배열 안에 <code class=\"language-text\">Symbol()</code> 작성</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const list = [Symbol(&#39;100&#39;)];\nfor (let value of list) {\n  console.log(value);\n}\n\n// 실행결과\nSymbol(100);</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p><code class=\"language-text\">JSON.stringify()</code> 에서 사용</p>\n<ul>\n<li><code class=\"language-text\">Symbol</code> 값이 문자열로 변환되지 않음</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const sym = Symbol(&#39;JSON&#39;);\nconst result = JSON.stringify({ [sym]: &#39;ABC&#39; });\n\nconsole.log(result); // {}\n\n// 1. JSON.stringify()는 Object의 프로퍼티 키와 값을 {&quot;key&quot;: &quot;value&quot;} 형태로 변환 함\n// 2. Symbol은 변환에서 제외 됨\n// 3. 이것은 Symbol 값을 외부에 노출하지 않기 위해서 임\n// 4. 빈 오브젝트가 반환됨</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","frontmatter":{"date":"October 20, 2021","title":"Symbol 사용 형태","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-Symbol-3/"}},"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":"zoomkoding/zoomkoding-gatsby-blog"}}}}},"pageContext":{"slug":"/study-js-es6-Symbol-2/","nextSlug":"/study-js-es6-Symbol-1/","prevSlug":"/study-js-es6-Symbol-3/"}},"staticQueryHashes":["1073350324","2938748437"]}