{"componentChunkName":"component---src-templates-blog-template-js","path":"/study-js-es6-arrowFunction-4/","result":{"data":{"cur":{"id":"944938f0-3cf5-510c-87f6-813ce60b8755","html":"<br>\n<h1 align=\"center\">\n  👋 화살표 함수와 인스턴스, 화살표 함수 특징\n</h1>\n<br>\n<h2 id=\"1-화살표-함수와-인스턴스\" style=\"position:relative;\"><a href=\"#1-%ED%99%94%EC%82%B4%ED%91%9C-%ED%95%A8%EC%88%98%EC%99%80-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4\" aria-label=\"1 화살표 함수와 인스턴스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 화살표 함수와 인스턴스</h2>\n<ul>\n<li>인스턴스에서 화살표 함수의 <code class=\"language-text\">작성 위치</code>에 따라 <code class=\"language-text\">this</code>가 참조하는 오브젝트가 다름</li>\n</ul>\n<h3 id=\"1-code-classlanguage-textprototypecode에-메소드로-작성\" style=\"position:relative;\"><a href=\"#1-code-classlanguage-textprototypecode%EC%97%90-%EB%A9%94%EC%86%8C%EB%93%9C%EB%A1%9C-%EC%9E%91%EC%84%B1\" aria-label=\"1 code classlanguage textprototypecode에 메소드로 작성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1). <code class=\"language-text\">prototype</code>에 메소드로 작성</h3>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">var point = 200;\n\n// 생성자 함수\nconst Point = function () {\n  this.point = 100;\n};\n\nPoint.prototype.getPoint = () =&gt; {\n  console.log(this.point);\n};\n\n// new 연산자로 인스턴스를 만든 후 getPoint() 메소드를 호출 합니다.\nnew Point().getPoint(); // 200</code>\n        </deckgo-highlight-code>\n<ol>\n<li><code class=\"language-text\">prototype</code>에 화살표 함수를 연결하면 함수 안에서 <code class=\"language-text\">this</code>가 글로벌 오브젝트를 참조 함</li>\n<li><code class=\"language-text\">console.log(this.point)</code> 에서 글로벌 오브젝트의 <code class=\"language-text\">point</code> 값이 200을 출력</li>\n</ol>\n<br>\n<h3 id=\"2-code-classlanguage-textprototypecode의-메소드-안에-작성\" style=\"position:relative;\"><a href=\"#2-code-classlanguage-textprototypecode%EC%9D%98-%EB%A9%94%EC%86%8C%EB%93%9C-%EC%95%88%EC%97%90-%EC%9E%91%EC%84%B1\" aria-label=\"2 code classlanguage textprototypecode의 메소드 안에 작성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2). <code class=\"language-text\">prototype</code>의 메소드 안에 작성</h3>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const Point = function () {\n  this.point = 100;\n};\n\nPoint.prototpe.getPoint = function () {\n  const add = () =&gt; this.point + 20;\n\n  console.log(add());\n\n  [1.2].forEach((value) =&gt; {\n    console.log(this.point + value);\n  });\n};\n\nnew Point().getPoint();\n\n// 120\n// 101\n// 102</code>\n        </deckgo-highlight-code>\n<ol>\n<li><code class=\"language-text\">prototype</code>에 일반 함수를 연결하고, 함수 안에 화살표 함수를 작성한 형태 임.</li>\n<li><code class=\"language-text\">getPoint()</code>가 일반 함수 이므로 <code class=\"language-text\">this</code>가 생성한 인스턴스 참조</li>\n<li>또한, 화살표 함수에서도 <code class=\"language-text\">this</code>가 생성한 인스턴스를 참조 함</li>\n<li>화살표 함수의 스코프인 <code class=\"language-text\">getPoint()</code>의 <code class=\"language-text\">this</code>를 사용하기 때문</li>\n</ol>\n<br>\n<h2 id=\"2-화살표-함수-특징\" style=\"position:relative;\"><a href=\"#2-%ED%99%94%EC%82%B4%ED%91%9C-%ED%95%A8%EC%88%98-%ED%8A%B9%EC%A7%95\" aria-label=\"2 화살표 함수 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 화살표 함수 특징</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">function</code> 대신 <code class=\"language-text\">=></code> 를 사용, 함수 표현식 형태</p>\n<ul>\n<li><code class=\"language-text\">prototype</code>이 없으므로 함수가 가벼움</li>\n<li><code class=\"language-text\">constructor</code>가 없으므로 <code class=\"language-text\">new</code> 연산자로 인스턴스를 생성할 수 없음</li>\n</ul>\n</li>\n<li>\n<p>화살표 함수에 <code class=\"language-text\">this</code>가 없음</p>\n<ul>\n<li>화살표 함수로 <code class=\"language-text\">Function</code> 오브젝트를 생성할 때</li>\n<li>정적으로 화살표 함수가 속한 스코프의 <code class=\"language-text\">this</code>를 화살표 함수에 바인딩 함</li>\n<li>바인딩 된 <code class=\"language-text\">this</code> 참조가 바뀌지 않으며 화살표 함수에서 <code class=\"language-text\">this</code>로 사용 함</li>\n<li>일반 함수는 <code class=\"language-text\">call()</code> 등으로 바꿀 수 있음</li>\n</ul>\n</li>\n<li>메소드보다 함수로 사용하는 것이 효율 성이 높음</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","excerpt":"1. 화살표 함수와 인스턴스 인스턴스에서 화살표 함수의 에 따라 가 참조하는 오브젝트가 다름 1). 에 메소드로 작성 에 화살표 함수를 연결하면 함수 안에서 가 글로벌 오브젝트를 참조 함  에서 글로벌 오브젝트의  값이 200을 출력 2). 의 메소드 안에 작성 에 일반 함수를 연결하고, 함수 안에 화살표 함수를 작성한 형태 임. 가 일반 함수 이므로 가 생성한 인스턴스 참조 또한, 화살표 함수에서도 가 생성한 인스턴스를 참조 함 화살표 함수의 스코프인 의 를 사용하기 때문 2. 화살표 함수 특징  대신  를 사용, 함수 표현식 형태 이 없으므로 함수가 가벼움 가 없으므로  연산자로 인스턴스를 생성할 수 없음 화살표 함수에 가 없음 화살표 함수로  오브젝트를 생성할 때 정적으로 화살표 함수가 속한 스코프의 를 화살표 함수에 바인딩 함 바인딩 된  참조가 바뀌지 않으며 화살표 함수에서 로 사용 함 일반 함수는  등으로 바꿀 수 있음 메소드보다 함수로 사용하는 것이 효율 성이 높음","frontmatter":{"date":"September 02, 2021","title":"Arrow Function과 인스턴스","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-arrowFunction-4/"}},"next":{"id":"2c97ba6c-5326-5120-bf8f-14b9559810fa","html":"<br>\n<h1 align=\"center\">\n  👋 화살표 함수와 this, this가 정적 스코프 참조\n</h1>\n<br>\n<h2 id=\"1-화살표-함수와-this\" style=\"position:relative;\"><a href=\"#1-%ED%99%94%EC%82%B4%ED%91%9C-%ED%95%A8%EC%88%98%EC%99%80-this\" aria-label=\"1 화살표 함수와 this permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 화살표 함수와 this</h2>\n<h3 id=\"1-code-classlanguage-textstrictcode-모드에서-함수를-호출할-때\" style=\"position:relative;\"><a href=\"#1-code-classlanguage-textstrictcode-%EB%AA%A8%EB%93%9C%EC%97%90%EC%84%9C-%ED%95%A8%EC%88%98%EB%A5%BC-%ED%98%B8%EC%B6%9C%ED%95%A0-%EB%95%8C\" aria-label=\"1 code classlanguage textstrictcode 모드에서 함수를 호출할 때 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1). <code class=\"language-text\">Strict</code> 모드에서 함수를 호출할 때</h3>\n<ul>\n<li>함수 앞에 오브젝트 작성은 필수</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">// 오브젝트 작성은 필수\n\n&#39;use strict&#39;;\n\nfunction book() {\n  function getPoint() {\n    console.log(this);\n  }\n\n  getPoint();\n  // window.getPoint();\n}\n\nwindow.book(); // undefined</code>\n        </deckgo-highlight-code>\n<ol>\n<li><code class=\"language-text\">strict</code> 모드에서는 <code class=\"language-text\">window.book()</code> 처럼 호출하는 함수 앞에 오브젝트를 작성해야 함, 이렇게 하지 않으면 <code class=\"language-text\">book()</code> 함수 안에서 <code class=\"language-text\">this</code> 값이 <code class=\"language-text\">undefined</code></li>\n<li>또한, <code class=\"language-text\">getPoint()</code> 처럼 <code class=\"language-text\">window</code>를 앞에 작성하지 않으면 <code class=\"language-text\">getPoint()</code> 안에서 <code class=\"language-text\">this</code> 값이 <code class=\"language-text\">undefined</code> 임</li>\n<li>이를 피하기 위해 <code class=\"language-text\">window.getPoint()</code>로 호출하면 <code class=\"language-text\">window</code> 오브젝트에 <code class=\"language-text\">getPoint()</code>가 없으므로 에러가 남(현재 <code class=\"language-text\">book</code> 함수 블록 안에 <code class=\"language-text\">getPoint()</code>가 있음)</li>\n<li><code class=\"language-text\">strict</code> 모드의 함수에서 <code class=\"language-text\">this</code>를 참조하기 위해서는 <code class=\"language-text\">this</code>를 별도로 저장한 후 사용해야 하는 번거로움이 있음</li>\n</ol>\n<p>—> 화살표 함수로 해결 가능</p>\n<br>\n<h3 id=\"2-화살표-함수에서-code-classlanguage-textthiscode가-글로벌-오브젝트-참조\" style=\"position:relative;\"><a href=\"#2-%ED%99%94%EC%82%B4%ED%91%9C-%ED%95%A8%EC%88%98%EC%97%90%EC%84%9C-code-classlanguage-textthiscode%EA%B0%80-%EA%B8%80%EB%A1%9C%EB%B2%8C-%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8-%EC%B0%B8%EC%A1%B0\" aria-label=\"2 화살표 함수에서 code classlanguage textthiscode가 글로벌 오브젝트 참조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2). 화살표 함수에서 <code class=\"language-text\">this</code>가 글로벌 오브젝트 참조</h3>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">// 화살표 함수 사용\n\n&#39;use strict&#39;;\n\nvar point = 100;\n\nfunction sports() {\n  const getPoint = () =&gt; {\n    console.log(this.point);\n  };\n\n  getPoint();\n}\n\nwindow.sports();</code>\n        </deckgo-highlight-code>\n<ol>\n<li>화살표 함수로 작성하면 <code class=\"language-text\">getPoint()</code>로 호출할 수 있음</li>\n<li>또한, <code class=\"language-text\">getPoint()</code> 화살표 함수 안에서 <code class=\"language-text\">this</code>가 <code class=\"language-text\">undefined</code>가 아니라 글로벌(<code class=\"language-text\">window</code>) 오브젝트를 참조 함</li>\n<li><code class=\"language-text\">var point = 100</code>을 작성했으므로 100이 출력됨</li>\n</ol>\n<br>\n<h3 id=\"3-code-classlanguage-textthiscode값이-code-classlanguage-textundefinedcode\" style=\"position:relative;\"><a href=\"#3-code-classlanguage-textthiscode%EA%B0%92%EC%9D%B4-code-classlanguage-textundefinedcode\" aria-label=\"3 code classlanguage textthiscode값이 code classlanguage textundefinedcode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3). <code class=\"language-text\">this</code>값이 <code class=\"language-text\">undefined</code></h3>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">&#39;use strict&#39;;\n\nconst book = {\n  point: 500,\n  getPoint: function () {\n    console.log(this.point);\n  },\n};\n\nbook.getPoint();\n\n/*\n1. 일반 함수인 book.getPoint()를 호출하면\n- 함수 안에서 this가 book 오브젝트를 참조 함\n- 따라서 console.log에 500이 출력됨\n*/\n\nvar point = 100;\n\nconst sports = {\n  getPoint: () =&gt; {\n    console.log(&#39;this.point&#39;, this.point);\n  },\n};\n\nsports.getPoint(); // 100이 출력됨\n\n/*\n1. 화살표 함수인 sports.getPoint()를 호출하면\n- 오른쪽 Local에 this:undefined가 표시됨\n\n2. 이것은, 화살표 함수는 함수에 this를 갖고 있지 않기 때문\n\n3. 이때, this가 window 오브젝트를 참조 함\n*/\n\n// 정리\n/*\n1. console.log(&quot;this.point&quot;, this.point);\n- var point = 100;에서 var 키워드를 사용했으므\n- poinrt 변수가 window 오브젝트에 설정됨\n- 따라서 console.log에 100이 출력됨\n\n2. 지금부터 this가 window 오브젝트를 참조하는 논리를 살펴봄\n- 어떻게 화살표 함수는 this가 undefined인데 window를 참조하여 this에 값을 할당 할 수 있는지 파악\n*/</code>\n        </deckgo-highlight-code>\n<br>\n<h2 id=\"2-code-classlanguage-textthiscode가-정적-스코프-참조\" style=\"position:relative;\"><a href=\"#2-code-classlanguage-textthiscode%EA%B0%80-%EC%A0%95%EC%A0%81-%EC%8A%A4%EC%BD%94%ED%94%84-%EC%B0%B8%EC%A1%B0\" aria-label=\"2 code classlanguage textthiscode가 정적 스코프 참조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. <code class=\"language-text\">this</code>가 정적 스코프 참조</h2>\n<ul>\n<li>화살표 함수에서 정적 스코프의 <code class=\"language-text\">this</code>를 사용</li>\n<li>\n<p>정적(Lexical)스코프란</p>\n<ul>\n<li>엔진이 해석할 때, 화살표 함수를 만나면</li>\n<li><code class=\"language-text\">function object</code>를 생성하고</li>\n<li>화살표 함수가 속한 스코프를 생성한 함수 오브젝트 스코프에 바인딩</li>\n</ul>\n</li>\n<li>\n<p>오브젝트에 바인딩된 스코프의 <code class=\"language-text\">this</code>를 화살표 함수에서 <code class=\"language-text\">this</code>로 사용</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">var title = &quot;책&quot;;\n\nconst book = {\n\tshow: () =&gt; console.log(this.title);\n}\n\nbook.show();  // 책</code>\n        </deckgo-highlight-code>\n<ol>\n<li><code class=\"language-text\">show()</code> 화살표 함수에서 <code class=\"language-text\">this</code>가 <code class=\"language-text\">window</code> 오브젝트를 참조하는 것은</li>\n<li>함수 밖 스코프의 변수를 사용하듯이 <code class=\"language-text\">show()</code>의 스코프인 <code class=\"language-text\">book</code> 함수 오브젝트에 설정된 스코프(글로벌 스코프)의 <code class=\"language-text\">this</code>를 화살표 함수에서 <code class=\"language-text\">this</code>로 사용하기 때문</li>\n<li><code class=\"language-text\">book</code> 오브젝트가 글로벌 오브젝트에 설정되므로 <code class=\"language-text\">this</code>가 <code class=\"language-text\">window</code> 오브젝트를 참조 함</li>\n</ol>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","frontmatter":{"date":"September 02, 2021","title":"Arrow Function와 this","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-arrowFunction-3/"}},"prev":{"id":"58fc7cd7-afb8-5d42-b489-17fd89c6bb54","html":"<br>\n<h1 align=\"center\">\n  👋 이터레이션, 이터레이션 프로토콜\n</h1>\n<br>\n<h2 id=\"1-이터레이션\" style=\"position:relative;\"><a href=\"#1-%EC%9D%B4%ED%84%B0%EB%A0%88%EC%9D%B4%EC%85%98\" aria-label=\"1 이터레이션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 이터레이션</h2>\n<ul>\n<li>\n<p>이터레이션(Iteration)의 사전적 의미 : 반복</p>\n<ul>\n<li><code class=\"language-text\">for()</code>문의 반복 개념과 차이 있음</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const list = [10, 20];\n\nfor (let value of list) {\nconsole.log(value);\n}\n\nconst obj = list[Symbol.iterator]();\n\nconsole.log(obj.next());\nconsole.log(obj.next());\nconsole.log(obj.next());\n\n// 10\n// 20\n// {value: 10, done: false}\n// {value: 20, done: false}\n// {value: undefined, done: true}</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>이터레이션을 위한 프로토콜(Protocol) 필요</p>\n<ul>\n<li>예: 통신 프로토콜(규약)</li>\n<li>데이터 송수신 프로토콜 정의</li>\n<li>어떻게 반복을 할 것인가에 대한 규약이 필요</li>\n</ul>\n</li>\n<li>\n<p>즉, 이터레이션은 프로토콜을 갖고 있으며</p>\n<ul>\n<li>프로토콜에 따라 이터레이션 수행</li>\n<li>프로토콜이 구문과 빌트인이 아니므로 프로토콜에 맞으면 이터레이션 가능</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"2-이터레이션-프로토콜\" style=\"position:relative;\"><a href=\"#2-%EC%9D%B4%ED%84%B0%EB%A0%88%EC%9D%B4%EC%85%98-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C\" aria-label=\"2 이터레이션 프로토콜 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 이터레이션 프로토콜</h2>\n<ul>\n<li>이터레이션 프로토콜(규약)은</li>\n<li>\n<p>오브젝트가 이터레이션 할 수 있는 구조이어야 하며</p>\n<ul>\n<li>[10, 20]은 가능, 100은 불가능</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const list = [10, 20];\n\nconst obj = list[Symbol.iterator]();\n\nconsole.log(obj.next());\nconsole.log(obj.next());\nconsole.log(obj.next());\n\n// {value: 10, done: false}\n// {value: 20, done: false}\n// {value: undefined, done: true}</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>이터레이션 프로토콜 구분</p>\n<ul>\n<li>이터러블(iterable) 프로토콜 : 반복가능 한 것</li>\n<li>이터레이터(iterator) 프로토콜 : <code class=\"language-text\">obj.next()</code> 처럼 반복문을 실행시키는 것\n—> 이렇게 이터러블, 이터레이터를 규약하는 이유는? <code class=\"language-text\">확장성</code> 때문에</li>\n</ul>\n</li>\n<li>개발자 코드로 프로토콜을 맞추면 이터레이션 할 수 없는 오브젝트를 이터레이션 할 수 있도록 만들 수 있음</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","frontmatter":{"date":"September 03, 2021","title":"이터레이션","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-iteration-1/"}},"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":"zoomkoding/zoomkoding-gatsby-blog"}}}}},"pageContext":{"slug":"/study-js-es6-arrowFunction-4/","nextSlug":"/study-js-es6-arrowFunction-3/","prevSlug":"/study-js-es6-iteration-1/"}},"staticQueryHashes":["1073350324","2938748437"]}