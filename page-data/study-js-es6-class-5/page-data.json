{"componentChunkName":"component---src-templates-blog-template-js","path":"/study-js-es6-class-5/","result":{"data":{"cur":{"id":"9a081108-e42b-5a07-9ce4-20a05c0b7b34","html":"<br>\n<h1 align=\"center\">\n  👋  getter, setter, static 메소드, 호이스팅\n</h1>\n<br>\n<h2 id=\"1-getter\" style=\"position:relative;\"><a href=\"#1-getter\" aria-label=\"1 getter permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. getter</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">getter</code> 는 메소드를 호출하여 값을 구함</p>\n<ul>\n<li>메소드를 호출 할 때는 <code class=\"language-text\">name()</code> 처럼 소괄호<code class=\"language-text\">()</code> 를 작성하지만 <code class=\"language-text\">getter</code> 는 소괄호<code class=\"language-text\">()</code> 를 작성하지 않고 <code class=\"language-text\">name</code>만 작성함</li>\n<li>파라미터를 사용 할 수 없음</li>\n</ul>\n</li>\n<li>\n<p>클래스에 <code class=\"language-text\">getter</code> 작성하는 방법</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">point</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>point <span class=\"token operator\">=</span> point<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">get</span> <span class=\"token function\">getPoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>point<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>getPoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 100</span>\n\n<span class=\"token comment\">// 1. get getPoint(){...} getter는 메소드 이름 앞에 get을 작성함</span>\n<span class=\"token comment\">// 2. console.log(obj.getPoint) getter 이름을 작성하면 getter가 호출됨</span>\n<span class=\"token comment\">// 3. getter 에서 100을 반환 함</span></code></pre></div>\n</li>\n</ul>\n<br>\n<h2 id=\"2-setter\" style=\"position:relative;\"><a href=\"#2-setter\" aria-label=\"2 setter permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. setter</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">setter</code> 는 메소드를 호출하여 값을 설정 함</p>\n<ul>\n<li><code class=\"language-text\">setter</code>도 <code class=\"language-text\">getter</code> 처럼 소괄호<code class=\"language-text\">()</code> 를 작성하지 않고 이름만 작성함</li>\n</ul>\n</li>\n<li>\n<p>클래스에 <code class=\"language-text\">setter</code> 작성 방법</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">set</span> <span class=\"token function\">setPoint</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">point</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>point <span class=\"token operator\">=</span> point<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">.</span>setPoint <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 100</span>\n\n<span class=\"token comment\">// 1. set setPoint(point){...} setter는 메소드 이름 앞에 set을 작성함</span>\n<span class=\"token comment\">// 2. obj.setPoint = 100; 값을 setter에 할당하면 setter가 호출되며 할당하는 값 100을 파라미터로 넘겨줌</span></code></pre></div>\n</li>\n</ul>\n<br>\n<h2 id=\"3-static-메소드\" style=\"position:relative;\"><a href=\"#3-static-%EB%A9%94%EC%86%8C%EB%93%9C\" aria-label=\"3 static 메소드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. static 메소드</h2>\n<ul>\n<li>Syntax : <code class=\"language-text\">static name(){...}</code></li>\n<li>\n<p><code class=\"language-text\">static</code> 메소드 작성 방법</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">static</span> <span class=\"token function\">getPoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Point<span class=\"token punctuation\">.</span><span class=\"token function\">getPoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 100</span>\n\n<span class=\"token comment\">// 1. static getPoint(){} 메소드 이름 앞에 static을 작성함, 정적 메소드라고 부름</span>\n<span class=\"token comment\">// 2. Point.getPoint() Point 클래스 이름에 이어서 getPoint()를 작성함 그러면 getPoint()가 호출됨</span>\n<span class=\"token comment\">// 3. 인스턴스의 메소드로 호출하지 않음</span>\n<span class=\"token comment\">// 4. 호출하는 방법이 다르므로 ES5에서는 함수와 메소드를 구분했지만 ES6에서는 static 메소드로 구분해야 함</span>\n<span class=\"token comment\">// 5. 클래스만 static을 사용할 수 있음</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">static</code> 메소드의 구조적 특징</p>\n<ul>\n<li><code class=\"language-text\">prototype</code> 이 아닌 클래스에 연결되며 생성한 인스턴스에 할당되지 않음</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> <span class=\"token function\">getPoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>getPoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n\n<span class=\"token comment\">// 1. static getPoint(){...} 엔진이 Point 오브젝트를 만들면서 static 메소드를 Function 오브젝트로 만듬</span>\n<span class=\"token comment\">// 2. 그러므로 Point.getPoint() 형태로 호출할 수 있음</span>\n<span class=\"token comment\">// 3. const obj = new Point(); obj 인스턴스에 static 메소드가 설정되지 않음</span>\n<span class=\"token comment\">// 4. obj 인스턴스에 getPoint가 없으므로 undefined가 출력됨</span></code></pre></div>\n</li>\n</ul>\n<br>\n<h2 id=\"4-호이스팅\" style=\"position:relative;\"><a href=\"#4-%ED%98%B8%EC%9D%B4%EC%8A%A4%ED%8C%85\" aria-label=\"4 호이스팅 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 호이스팅</h2>\n<ul>\n<li>\n<p>클래스는 호이스팅 되지 않음</p>\n<ul>\n<li><code class=\"language-text\">const</code>, <code class=\"language-text\">let</code> 변수처럼 <code class=\"language-text\">class</code> 키워드가 작성된 위치에서 클래스 이름 선언과 오브젝트 생성을 동시에 하기 때문</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> Point<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'호이스팅 불가'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> <span class=\"token function\">getPoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Point<span class=\"token punctuation\">.</span><span class=\"token function\">getPoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 실행 결과</span>\n<span class=\"token comment\">// 호이스팅 불가</span>\n<span class=\"token comment\">// 100</span></code></pre></div>\n</li>\n<li><code class=\"language-text\">const obj = Point;</code> 코드 아래에 <code class=\"language-text\">Point</code> 클래스가 있지만 <code class=\"language-text\">Point</code> 를 참조하지 못하므로 에러 발생</li>\n<li>\n<p><code class=\"language-text\">Point.getPoint();</code></p>\n<ul>\n<li>코드 앞에서 <code class=\"language-text\">Point</code> 클래스를 오브젝트로 생성하므로 <code class=\"language-text\">getPoint()</code> 를 호출할 수 있음</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"5-newtarget\" style=\"position:relative;\"><a href=\"#5-newtarget\" aria-label=\"5 newtarget permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. new.target</h2>\n<ul>\n<li><code class=\"language-text\">[new.target](http://new.target)</code> 프로퍼티는 함수 또는 생성자가 <code class=\"language-text\">new</code> 연산자로 호출된 여부를 반환함</li>\n<li>\n<p><code class=\"language-text\">new</code> 연산자로 <code class=\"language-text\">constructor</code>를 호출하면 <code class=\"language-text\">new.target</code> 은 <code class=\"language-text\">constructor</code>를 참조</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1. new Point() constructor를 호출함</span>\n<span class=\"token comment\">// 2. new.target.name constructor에서 new.target은 constructor를 참조함</span>\n<span class=\"token comment\">// 3. 또한, constructor가 클래스를 참조하므로 name 프로퍼티 값으로 Point가 출력 됨</span></code></pre></div>\n</li>\n<li>\n<p>함수로 호출하면 <code class=\"language-text\">undefined</code> 반환</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">book</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">book</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1. book() new 연산자를 사용하지 않고 호출 됨</span>\n<span class=\"token comment\">// 2. new.target 함수로 호출 하면 new.target은 undefined를 반환</span></code></pre></div>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1-getter\">1. getter</a></li>\n<li><a href=\"#2-setter\">2. setter</a></li>\n<li><a href=\"#3-static-%EB%A9%94%EC%86%8C%EB%93%9C\">3. static 메소드</a></li>\n<li><a href=\"#4-%ED%98%B8%EC%9D%B4%EC%8A%A4%ED%8C%85\">4. 호이스팅</a></li>\n<li><a href=\"#5-newtarget\">5. new.target</a></li>\n</ul>\n</div>","excerpt":"1. getter  는 메소드를 호출하여 값을 구함 메소드를 호출 할 때는  처럼 소괄호 를 작성하지만  는 소괄호 를 작성하지 않고 만 작성함 파라미터를 사용 할 수 없음 클래스에  작성하는 방법 2. setter  는 메소드를 호출하여 값을 설정 함 도  처럼 소괄호 를 작성하지 않고 이름만 작성함 클래스에  작성 방법 3. static 메소드 Syntax :   메소드 작성 방법  메소드의 구조적 특징  이 아닌 클래스에 연결되며 생성한 인스턴스에 할당되지 않음 4. 호이스팅 클래스는 호이스팅 되지 않음 ,  변수처럼  키워드가 작성된 위치에서 클래스 이름 선언과 오브젝트 생성을 동시에 하기 때문  코드 아래에  클래스가 있지만  를 참조하지 못하므로 에러 발생  코드 앞에서  클래스를 오브젝트로 생성하므로  를 호출할 수 있음 5. new.target  프로퍼티는 함수 또는 생성자가  연산자로 호출된 여부를 반환함  연산자로 를 호출하면  은 를 참조 함수로 호출하면  반환…","frontmatter":{"date":"November 19, 2021","title":"getter, setter, static 메소드, 호이스팅","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-class-5/"}},"next":{"id":"cb5ef57a-dc37-5105-bf35-b67df175d003","html":"<br>\n<h1 align=\"center\">\n  👋  constructor, constructor 반환\n</h1>\n<br>\n<h2 id=\"1-constructor\" style=\"position:relative;\"><a href=\"#1-constructor\" aria-label=\"1 constructor permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. constructor</h2>\n<ul>\n<li><code class=\"language-text\">constructor</code>는 생성자로 인스턴스를 생성하고 초기화 함</li>\n<li>\n<p>ES5까지는 <code class=\"language-text\">constructor</code> 를 작성할 수 없었으나 ES6부터는 작성 할 수 있음</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">point</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>point <span class=\"token operator\">=</span> point<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 인스턴스 생성 방법</span>\n<span class=\"token comment\">// 1. new 연산자가 Point 클래스 오브젝트의 constructor를 호출 함, 파라미터 값인 100을 constructor로 넘겨줌</span>\n<span class=\"token comment\">// 2. 엔진은 빈 오브젝트{}를 생성함 이것이 인스턴스 임</span>\n<span class=\"token comment\">// 3. 인스턴스에 프로퍼티 이름과 값을 설정하여 인스턴스 구조를 만듬(ex. __proto__, __proto__.constructor 등)</span>\n<span class=\"token comment\">// 4. construcotr 블록의 코드를 실행 함</span>\n<span class=\"token comment\">// 5. this가 생성한 인스턴스를 참조함, 인스턴스{}를 먼저 생성하므로 this로 참조할 수 있음</span>\n<span class=\"token comment\">// 6. point는 인스턴스 프로퍼티가 됨(point 파라미터 값이 100이 됨)</span>\n<span class=\"token comment\">// 7. 생성한 인스턴스를 반환 함</span></code></pre></div>\n</li>\n</ul>\n<br>\n<h2 id=\"2-constructor-미작성\" style=\"position:relative;\"><a href=\"#2-constructor-%EB%AF%B8%EC%9E%91%EC%84%B1\" aria-label=\"2 constructor 미작성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. constructor 미작성</h2>\n<ul>\n<li><code class=\"language-text\">constructor</code> 를 작성하지 않은 상태에서 <code class=\"language-text\">new</code> 연산자로 인스턴스를 생성하면</li>\n<li>\n<p><code class=\"language-text\">porototype</code>에 연결된 <code class=\"language-text\">constructor</code>가 호출 됨</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">setPoint</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">point</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>point <span class=\"token operator\">=</span> point<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">setPoint</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1. 엔진이 class 키워드를 만나 Point 클래스 오브젝트를 생성할 때 constructor에서 클래스 전체를 참조하도록 환경을 만듬</span>\n<span class=\"token comment\">// 2. constructor를 작성하지 않으면 prototype.constructor를 사용하므로 인스턴스를 생성할 수 있지만 인스턴스에 초깃값을 설정할 수 없음</span>\n<span class=\"token comment\">// 3. 클래스에 constructor를 작성하면 protytpe.constructor를 오버라이드 하게 됨</span></code></pre></div>\n</li>\n</ul>\n<br>\n<h2 id=\"3-constructor-반환\" style=\"position:relative;\"><a href=\"#3-constructor-%EB%B0%98%ED%99%98\" aria-label=\"3 constructor 반환 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. constructor 반환</h2>\n<ul>\n<li><code class=\"language-text\">constructor</code> 에 <code class=\"language-text\">return</code> 을 작성하지 않으면 생성한 인스턴스를 반환 함</li>\n<li>\n<p><code class=\"language-text\">constructor</code> 에서 <code class=\"language-text\">Number</code>, <code class=\"language-text\">String</code>을 반환 하면 이를 무시하고 인스턴스를 반환 함</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">point</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>point <span class=\"token operator\">=</span> point<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> point<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 100</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n\n<span class=\"token comment\">// 1. return point; constructor에서 파라미터로 받은 Number 타입의 100을 반환 함</span>\n<span class=\"token comment\">// 2. 이때, 100을 반환하지 않고 생성한 인스턴스를 반환함</span>\n<span class=\"token comment\">// 3. console.log(obj.point) obj가 인스턴스이므로 프로퍼티로 값을 구할 수 있음</span>\n<span class=\"token comment\">// 4. console.log(obj instanceof Point); obj가 Point 클래스로 만든 인스턴스이므로 true가 출력됨</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">constructor</code> 에서 <code class=\"language-text\">Object</code>를 반환 하면 인스턴스를 반환하지 않고 <code class=\"language-text\">Object</code> 반환</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">point</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> point<span class=\"token operator\">:</span> point <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {point: 100}</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n\n<span class=\"token comment\">// 1. return {point: point}; constructor에서 Objet를 반환함</span>\n<span class=\"token comment\">// 2. 생성한 인스턴스를 반환하지 않고 return 표현식의 결과를 반환 함</span>\n<span class=\"token comment\">// 3. console.log(obj); return한 Object가 출력됨</span>\n<span class=\"token comment\">// 4. console.log(obj instanceof Point); obj가 Point으로 만든 인스턴스가 아니므로 false가 출력됨</span></code></pre></div>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1-constructor\">1. constructor</a></li>\n<li><a href=\"#2-constructor-%EB%AF%B8%EC%9E%91%EC%84%B1\">2. constructor 미작성</a></li>\n<li><a href=\"#3-constructor-%EB%B0%98%ED%99%98\">3. constructor 반환</a></li>\n</ul>\n</div>","frontmatter":{"date":"November 18, 2021","title":"constructor, constructor 반환","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-class-4/"}},"prev":{"id":"4efb37d1-9659-532f-9119-9f24d5f80927","html":"<br>\n<h1 align=\"center\">\n  👋  상속, extends 키워드, 상속 구조, 메소드 오버라이딩\n</h1>\n<br>\n<h2 id=\"1-상속\" style=\"position:relative;\"><a href=\"#1-%EC%83%81%EC%86%8D\" aria-label=\"1 상속 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 상속</h2>\n<ul>\n<li>\n<p>상속은 OOP 기능 중 하나 임</p>\n<ul>\n<li>클래스에 다른 클래스를 포함시키는 형태</li>\n<li>따라서 포함시킨 클래스의 메소드와 프로퍼티를 내 것처럼 사용 할 수 있음</li>\n</ul>\n</li>\n<li>\n<p>상속해주는 클래스, 상속 받을 클래스를 부모 클래스, 슈퍼 클래스라고 부름</p>\n<ul>\n<li><code class=\"language-text\">super</code> 키워드로 슈퍼 클래스를 참조</li>\n</ul>\n</li>\n<li>상속 받는 클래스를 자식 클래스, 서브(<code class=\"language-text\">sub</code>) 클래스라고 부름</li>\n</ul>\n<br>\n<h2 id=\"2-extends-키워드\" style=\"position:relative;\"><a href=\"#2-extends-%ED%82%A4%EC%9B%8C%EB%93%9C\" aria-label=\"2 extends 키워드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. extends 키워드</h2>\n<ul>\n<li>Syntax : <code class=\"language-text\">subCalss extends superClass {...}</code></li>\n<li>\n<p><code class=\"language-text\">extends</code> 키워드로 상속을 구현 함</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">title</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> title<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">getTitle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Book</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">setPoint</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">point</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>point <span class=\"token operator\">=</span> point<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token string\">'책'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">getTitle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 책</span>\n\n<span class=\"token comment\">// 1. 엔진이 extends 키워드를 만나면 Point 클래스에서 Book 클래스를 상속받아 구조적, 계층적인 형태로 만듬</span>\n<span class=\"token comment\">// 2. Book.prototype에 연결된 메소드를 Point.prototype에 구조적으로 연결함</span>\n<span class=\"token comment\">// 3. setPoint()는 Point 클래스의 메소드임</span></code></pre></div>\n</li>\n<li>\n<p>상속 구조</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">title</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> title<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">getTitle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 엔진이 Book.prototype.getTitle() 형태로 만듬</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Book</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">setPoint</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">point</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>point <span class=\"token operator\">=</span> point<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\n\t1. Book {setPoint(point){...}}\n\t\t- setPoint()는 Point 클래스드의 메소드이며\n\t\t- Point.prototype에 연결됨\n\n\t2. 엔진이 extends 키워드를 만나면\n\t\t- Point 클래스에서 Book 클래스를 상속받아 서브와 슈퍼 구조를 만듬\n\n\t3. Point.prototytpe.__proto__를 펼치면 getTitle()이 있으며\n\t\t- Book.prototype에 연결된 메소드임\n\n\t4. prototype.__proto__에 상속해주는 클래스의 prototype에 연결된 메소드를\n\t\t- 구조적, 계층적으로 만듬, 이것이 상속임\n*/</span>\n\n<span class=\"token comment\">// Point.__proto__를 펼치면 상속 받은 Book 클래스 전체가 표시됨</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token string\">'책'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*\n\t1. new Point(\"책\")를 실행하면 우선 Point 클래스의 constructor를 호출함, 즉 Point.prototype의 constructor를 호출 함\n\n\t2. 이어서 Book 클래스의 constructor를 호출하며 constructor에 파라미터 값인 \"책\"을 넘겨 줌\n*/</span>\n\n<span class=\"token comment\">/*\n\t1. obj를 펼치면 {title: \"책\"}이 있으며 이것은 인스턴스 프로퍼티 임\n\n\t2. 이런 방법으로 인스턴스마다 고유의 프로퍼티 값을 가질 수 있음\n\n\t3. 고유의 값을 갖는 것이 인스턴스 가장 큰 목적임\n\n\t4. 상속이 클래스의 가장 큰 목적이 아님\n\t\t- 상속은 인스턴스 프로퍼티를 지원하기 위한 수단 임\n\n\t5. obj.__proto__를 펼치면 setPoint()가 있으며 이것은 서브 클래스의 메소드임\n\n\t6. obj.__proto__.__proto__를 펼치면 getTitle()이 있으며 이것은 슈퍼 클래스의 메소드임\n\n\t7. 이처럼 __proto__를 사용하여 슈퍼 클래스의 prototype에 연결된 메소드를 구조적, 계층적으로 연결함\n\t\t- 이것이 상속 구조임\n\n\t8. 인스턴스의 메소드를 호출하면 __proto__구조를 따라 아래로 내려 가면서 메소드를 식별함\n\t\t- 식별하는 위치에 메소드가 있으면 실행 함\n*/</span></code></pre></div>\n</li>\n<li>\n<p>메소드 오버라이딩(Overriding)</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">title</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> title<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">getTitle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Book</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">getTitle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">'서브 클래스'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\n\t1. 오버라이드 설명을 위해 Point 클래스에도 getTitle()을 작성함\n\n\t2. getTitle()이 양쪽 클래스에 있음\n*/</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token string\">'책'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*\n\t1. obj.__proto__를 펼치면 getTitle()이 있으며 이것은 서브 클래스의 메소드 임\n\n\t2. obj.__proto__.__proto__를 펼치면 getTitle()이 있으며 이것은 슈퍼 클래스의 메소드 임\n*/</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">getTitle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*\n\t1. obj.getTitle()을 호출하면 먼저 서브 클래스에서 찾음\n\t\t- 즉, obj.__proto__에서 찾음\n\n\t2. 없으면 슈퍼 클래스에서 찾음\n\t\t- 즉, obj.__proto__.proto__에서 찾음\n\n\t3. obj.__proto__에 즉, 서브클래스에 getTitle()이 있으므로 이것을 호출 함\n\t\n\t4. 이것을 메소드 오버라이딩이라고 함\n*/</span></code></pre></div>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1-%EC%83%81%EC%86%8D\">1. 상속</a></li>\n<li><a href=\"#2-extends-%ED%82%A4%EC%9B%8C%EB%93%9C\">2. extends 키워드</a></li>\n</ul>\n</div>","frontmatter":{"date":"November 20, 2021","title":"상속, extends 키워드, 상속 구조, 메소드 오버라이딩","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-class-6/"}},"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":"zoomkoding/zoomkoding-gatsby-blog"}}}}},"pageContext":{"slug":"/study-js-es6-class-5/","nextSlug":"/study-js-es6-class-4/","prevSlug":"/study-js-es6-class-6/"}},"staticQueryHashes":["1073350324","2938748437"]}