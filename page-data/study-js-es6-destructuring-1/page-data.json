{"componentChunkName":"component---src-templates-blog-template-js","path":"/study-js-es6-destructuring-1/","result":{"data":{"cur":{"id":"749ce0e7-bf5b-5e62-93d5-7b6348b35b49","html":"<br>\n<h1 align=\"center\">\n  👋 Destructuring, Array 분할 할당\n</h1>\n<br>\n<h2 id=\"1-destructuring\" style=\"position:relative;\"><a href=\"#1-destructuring\" aria-label=\"1 destructuring permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Destructuring</h2>\n<ul>\n<li>Destructuring Assignment</li>\n<li>\n<p>사전적 의미</p>\n<ul>\n<li>~구조를 파괴하다.</li>\n<li>파괴, 해체는 있는 것이 없어지는 뉘앙스</li>\n<li>원 데이터는 변경되지 않음</li>\n<li>이 관점에서 보면 분할/분리가 더 까움</li>\n</ul>\n</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">let one, two, three;\n\nconst list = [1, 2, 3];\n\n[one, two, three] = list;\n\nconsole.log(one); // 1\nconsole.log(two); // 2\nconsole.log(three); // 3\nconsole.log(list); // [1, 2, 3]</code>\n        </deckgo-highlight-code>\n<br>\n<h2 id=\"2-array-분할-할당\" style=\"position:relative;\"><a href=\"#2-array-%EB%B6%84%ED%95%A0-%ED%95%A0%EB%8B%B9\" aria-label=\"2 array 분할 할당 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Array 분할 할당</h2>\n<ul>\n<li>\n<p>배열의 엘리먼트를 분할하여 할당(인덱스에 해당하는 변수에 할당)</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">let one, two, three;\n\n[one, two, three] = [1, 2, 3];\n\nconsole.log(one); // 1\nconsole.log(two); // 2\nconsole.log(three); // 3</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>할당 받을 변수 수가 적은 경우</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">let one, two;\n\n[one, two] = [1, 2, 3];\n\nconsole.log(one); // 1\nconsole.log(two); // 2</code>\n        </deckgo-highlight-code>\n<ol>\n<li>왼쪽에 할당 받을 변수가 2개이고, 오른쪽에 분할 할당할 값이 3개 임</li>\n<li>왼쪽의 변수 인덱스에 맞추어 값을 할당하므로 3은 할당되지 않음</li>\n</ol>\n</li>\n<li>\n<p>할당 받을 변수 수가 많을 경우</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">let one, two, three, four;\n\n[one, two, three, four] = [1, 2, 3];\n\nconsole.log(three); // 3\nconsole.log(four); // undefined</code>\n        </deckgo-highlight-code>\n<ol>\n<li>왼쪽의 할당 받을 변수가 4개이고 오른쪽에 분할 할당할 값이 3개 임</li>\n<li>왼쪽에 값을 할당할 수 없는 변수에 <code class=\"language-text\">undefined</code>가 설정됨</li>\n</ol>\n</li>\n<li>\n<p>배열 차원에 맞추어 분할 할당</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">let one, two, three, four;\n\n[one, two, [three, four]] = [1, 2, [3, 4]];\n\nconsole.log([one, two, three, four]); // [1, 2, 3, 4]</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>매치되는 인덱스에 변수가 없으면 값을 할당하지 않음</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">let one, two, three, four;\n\n[one, , , four] = [1, 2, 3, 4];\n\nconsole.log([one, two, three, four]); // [1, undefined, undefined, 4]</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>Spread와 같이 사용</p>\n<ul>\n<li>나머지를 전부 할당</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">let one, rest;\n\n[one, ...rest] = [1, 2, 3, 4];\n\nconsole.log(one); // 1\nconsole.log(rest); // [2, 3, 4];</code>\n        </deckgo-highlight-code>\n<ol>\n<li><code class=\"language-text\">one</code>에 1을 할당하고</li>\n<li>나머지 2, 3, 4를 <code class=\"language-text\">rest</code>에 할당 함, <code class=\"language-text\">[2, 3, 4]</code>처럼 배열로 할당함</li>\n<li><code class=\"language-text\">rest</code> 파라미터를 호출 받는 함수의 파라미터에 작성하지만, 나머지라는 시맨틱이 강해서 코드처럼 사용하기도 함</li>\n<li>분리하지 않고 결합된 상태를 설정하므로 어긋나지 않음</li>\n</ol>\n</li>\n<li>\n<p>인덱스를 반영한 나머지 할당</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">let one, three, rest;\n\n[one, , three, ...rest] = [1, 2, 3, 4, 5];\n\nconsole.log(three); // 3\nconsole.log(rest); // [4, 5]</code>\n        </deckgo-highlight-code>\n<ol>\n<li><code class=\"language-text\">one</code>에 1을 할당함</li>\n<li>2는 건너띄고 <code class=\"language-text\">three</code>에 3을 할당</li>\n<li>나머지 <code class=\"language-text\">[4, 5]</code>를 <code class=\"language-text\">rest</code>에 할당</li>\n</ol>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","excerpt":"1. Destructuring Destructuring Assignment 사전적 의미 ~구조를 파괴하다. 파괴, 해체는 있는 것이 없어지는 뉘앙스 원 데이터는 변경되지 않음 이 관점에서 보면 분할/분리가 더 까움 2. Array 분할 할당 배열의 엘리먼트를 분할하여 할당(인덱스에 해당하는 변수에 할당) 할당 받을 변수 수가 적은 경우 왼쪽에 할당 받을 변수가 2개이고, 오른쪽에 분할 할당할 값이 3개 임 왼쪽의 변수 인덱스에 맞추어 값을 할당하므로 3은 할당되지 않음 할당 받을 변수 수가 많을 경우 왼쪽의 할당 받을 변수가 4개이고 오른쪽에 분할 할당할 값이 3개 임 왼쪽에 값을 할당할 수 없는 변수에 가 설정됨 배열 차원에 맞추어 분할 할당 매치되는 인덱스에 변수가 없으면 값을 할당하지 않음 Spread와 같이 사용 나머지를 전부 할당 에 1을 할당하고 나머지 2, 3, 4를 에 할당 함, 처럼 배열로 할당함  파라미터를 호출 받는 함수의 파라미터에 작성하지만, 나머지라는 시맨…","frontmatter":{"date":"September 08, 2021","title":"Destructuring, Array 분할 할당","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-destructuring-1/"}},"next":{"id":"a4852f34-5b20-599f-be85-bda0b982bea3","html":"<br>\n<h1 align=\"center\">\n  👋  Rest 파라미터, function spread, Array-like, rest와 arguments 차이\n</h1>\n<br>\n<h2 id=\"1-function-spread\" style=\"position:relative;\"><a href=\"#1-function-spread\" aria-label=\"1 function spread permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Function Spread</h2>\n<ul>\n<li>호출하는 함수의 파라미터에 <code class=\"language-text\">Spread</code> 대상 작성</li>\n<li>\n<p>처리 순서 및 방법</p>\n<ul>\n<li>함수가 호출되면 우선, 파라미터의 배열을 엘리먼트 단위로 전개</li>\n<li>전개한 순서대로 파라미터 값으로 넘겨 줌</li>\n<li>호출 받는 함수의 파라미터에 순서대로 매핑됨</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">function add(one, two, three) {\nconsole.log(one + two + three);\n}\n\nconst values = [10, 20, 30];\n\nadd(...values); // 60</code>\n        </deckgo-highlight-code>\n<ul>\n<li><code class=\"language-text\">one: 10</code>, <code class=\"language-text\">two: 20</code>, <code class=\"language-text\">three: 30</code>이 매핑 됨</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"2-rest-파라미터\" style=\"position:relative;\"><a href=\"#2-rest-%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0\" aria-label=\"2 rest 파라미터 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Rest 파라미터</h2>\n<ul>\n<li>Syntax: <code class=\"language-text\">function(param, paramN, ...name)</code></li>\n<li>\n<p>분리하여 받은 파라미터를 배열로 결합</p>\n<ul>\n<li><code class=\"language-text\">Spread</code> : 분리, <code class=\"language-text\">Rest</code>: 결합</li>\n</ul>\n</li>\n<li>\n<p>작성 방법</p>\n<ul>\n<li>호출받은 함수의 파라미터에</li>\n<li><code class=\"language-text\">...</code>에 이어서 파라미터 이름 작성</li>\n<li>호출한 함수에서 보낸 순서로 매핑</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">function add(...param) {\n\tconsole.log(param);\n\tconsole.log(Array.isArray(param);\n}\n\nconst values = [10, 20, 30];\n\nadd(...values);\n// [10, 20, 30]\n// true</code>\n        </deckgo-highlight-code>\n<ul>\n<li><code class=\"language-text\">one: 10</code>, <code class=\"language-text\">two: 20</code>, <code class=\"language-text\">three: 30</code>이 매핑 됨</li>\n</ul>\n<br>\n<ul>\n<li>파라미터와 <code class=\"language-text\">Rest</code> 파라미터 혼합 사용</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">function point(ten, ...rest) {\n  console.log(ten);\n  console.log(rest);\n}\n\nconst values = [10, 20, 30];\n\npoint(...values);\n\n// 10\n// [20, 30]</code>\n        </deckgo-highlight-code>\n<ol>\n<li><code class=\"language-text\">ten</code>에 10이 설정되고</li>\n<li>설정되지 않은 나머지 값 전체가 파라미터 <code class=\"language-text\">rest</code>에 설정됨 그래서 <code class=\"language-text\">rest</code> 파라미터 임</li>\n<li>나머지라는 시맨틱을 나타내기 위해 파라미터 이름을 <code class=\"language-text\">rest</code>로 사용하기도 함</li>\n</ol>\n<br>\n</li>\n</ul>\n<h2 id=\"3-array-like\" style=\"position:relative;\"><a href=\"#3-array-like\" aria-label=\"3 array like permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Array-like</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">Object</code> 타입이지만</p>\n<ul>\n<li>배열처럼 이터러블 가능한 오브젝트</li>\n<li><code class=\"language-text\">for()</code>문으로 전개할 수 있음</li>\n</ul>\n</li>\n<li>\n<p>작성 방법</p>\n<ul>\n<li>프로퍼티 <code class=\"language-text\">key</code> 값을 0부터 1씩 증가하면서 프로퍼티 값을 작성</li>\n<li><code class=\"language-text\">length</code>에 전체 프로퍼티 수 작성</li>\n<li>이렇게 작성하지 않으면 그냥 <code class=\"language-text\">Object</code>임</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const values = { 0: &#39;가&#39;, 1: &#39;나&#39;, 2: &#39;다&#39;, length: 3 };\n\nfor (let k = 0; k &lt; values.length; k++) {\nconsole.log(values[k]);\n}\n\n// 가\n// 나\n// 다</code>\n        </deckgo-highlight-code>\n<ol>\n<li><code class=\"language-text\">length</code> 프로퍼티는 전개되지 않음</li>\n<li><code class=\"language-text\">for - in</code> 문으로 전개하면 length 프로퍼티도 전개됨</li>\n</ol>\n</li>\n</ul>\n<br>\n<h2 id=\"4-rest와-arguments-차이\" style=\"position:relative;\"><a href=\"#4-rest%EC%99%80-arguments-%EC%B0%A8%EC%9D%B4\" aria-label=\"4 rest와 arguments 차이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. Rest와 Arguments 차이</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">Argument</code> 오브젝트</p>\n<ul>\n<li>파라미터 작성에 관계 없이 전체를 설정</li>\n<li><code class=\"language-text\">Array-like</code> 형태, <code class=\"language-text\">Array</code> 메소드를 사용할 수 없음</li>\n<li><code class=\"language-text\">__proto__</code>가 <code class=\"language-text\">Object</code></li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">Rest</code> 파라미터</p>\n<ul>\n<li>매핑되지 않은 나머지 파라미터만 설정</li>\n<li><code class=\"language-text\">Array</code> 오브젝트 형태, <code class=\"language-text\">Array</code> 메소드를 사용할 수 있음</li>\n<li><code class=\"language-text\">__proto__</code>가 <code class=\"language-text\">Array</code></li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">{\n  (&#39;use strict&#39;);\n\n  // Argument 오브젝트\n  function book() {\n    const param = arguments;\n  }\n\n  // arguments의 __proto__가 Object\n  book(10, 20, 30);\n\n  // rest 파라미터\n  function point(...rest) {}\n\n  // rest의 __proto__가 Array\n  point(10, 20, 30);\n}</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","frontmatter":{"date":"September 07, 2021","title":"Rest 파라미터","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-spread-2/"}},"prev":{"id":"d427dfee-9c58-5b5d-a6c4-040dede7c3a8","html":"<br>\n<h1 align=\"center\">\n  👋 Object 분할 할당, 파라미터 분할 할당\n</h1>\n<br>\n<h2 id=\"1-object-분할-할당\" style=\"position:relative;\"><a href=\"#1-object-%EB%B6%84%ED%95%A0-%ED%95%A0%EB%8B%B9\" aria-label=\"1 object 분할 할당 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Object 분할 할당</h2>\n<ul>\n<li><code class=\"language-text\">Object</code>의 프로퍼티를 분할하여 할당</li>\n<li>\n<p>프로퍼티 이름이 같은 프로퍼티에 값을 할당</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const { one, two } = { one: 10, two: 20 };\n\nconsole.log(one); // 10\nconsole.log(two); // 20</code>\n        </deckgo-highlight-code>\n<ol>\n<li>왼쪽의 <code class=\"language-text\">Object</code>가 <code class=\"language-text\">{name: value}</code> 형태가 아니라 프로퍼티 이름만 작성함</li>\n<li>프로퍼티 이름이 같은 오른쪽 프로퍼티 값을 왼쪽의 프로퍼티 값으로 할당</li>\n<li><code class=\"language-text\">one</code>에 <code class=\"language-text\">10</code>, <code class=\"language-text\">two</code>에 <code class=\"language-text\">20</code>을 할당, <code class=\"language-text\">{one: 10, two: 20}</code> 형태가 됨</li>\n</ol>\n</li>\n</ul>\n<br>\n<ul>\n<li>\n<p>프로퍼티 이름을 별도로 작성</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">let one, two;\n\n({ one, two } = { one: 10, two: 20 });\n\nconsole.log(one); // 10\nconsole.log(two); // 20</code>\n        </deckgo-highlight-code>\n<ol>\n<li><code class=\"language-text\">let one, two;</code> 프로퍼티 이름을 앞에 별도로 작성함</li>\n<li><code class=\"language-text\">({one, two} = {one: 10, two: 20});</code> 전체를 소괄호() 안에 작성해야 함</li>\n</ol>\n</li>\n</ul>\n<br>\n<ul>\n<li>\n<p>프로퍼티 값 위치에 변수 이름 작성</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">let five, six;\n\n({ one: five, two: six } = { one: 5, two: 6 });\n\nconsole.log(five); // 5\nconsole.log(six); // 6</code>\n        </deckgo-highlight-code>\n<ol>\n<li>이름을 별도로 선언하였으므로 소괄호() 안에 작성했음</li>\n<li>오른쪽 <code class=\"language-text\">one</code> 프로퍼티 값 5를 five에 할당</li>\n<li>오른쪽 <code class=\"language-text\">two</code> 프로퍼티 값 6을 six에 할당</li>\n<li><code class=\"language-text\">console.log(one)</code> 을 실행하면 <code class=\"language-text\">ReferenceError</code> 프로퍼티 이름으로 값을 구할 수 없음</li>\n<li><code class=\"language-text\">five</code>와 <code class=\"language-text\">six</code> 변숫값을 구하는 것이 목적</li>\n</ol>\n</li>\n</ul>\n<br>\n<ul>\n<li>\n<p>Object 구조에 맞추어 값 할당</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const {\none,\nplus: { two, three },\n} = { one: 10, plus: { two: 20, three: 30 } };\n\nconsole.log(one);\nconsole.log(two);\nconsole.log(three);\n// console.log(plus);</code>\n        </deckgo-highlight-code>\n<ol>\n<li><code class=\"language-text\">plus: {two, three}</code> plus는 구조(경로)를 만들기 위한 것</li>\n<li>왼쪽에 <code class=\"language-text\">plus</code>가 있고 <code class=\"language-text\">two</code>가 있으면 <code class=\"language-text\">two</code> 프로퍼티 값에 <code class=\"language-text\">20</code>을 할당함</li>\n<li>구조가 같지 않으면 실행할 때 에러 발생</li>\n<li><code class=\"language-text\">console.log(plus)</code> <code class=\"language-text\">plus</code>는 구조(경로)를 만들기 위한 것으로 실제로 존재하지 않음</li>\n<li><code class=\"language-text\">plus</code>가 없으므로 <code class=\"language-text\">RefferenceError</code> 발생</li>\n<li>할당한 후, 이름으로 값을 구할 수 있음</li>\n</ol>\n</li>\n</ul>\n<br>\n<ul>\n<li>\n<p>나머지를 Object로 할당</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const { one, ...rest } = { one: 10, two: 20, three: 30 };\n\nconsole.log(rest); // {two: 20, three: 30}</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<h2 id=\"2-파라미터-분할-할당\" style=\"position:relative;\"><a href=\"#2-%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0-%EB%B6%84%ED%95%A0-%ED%95%A0%EB%8B%B9\" aria-label=\"2 파라미터 분할 할당 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 파라미터 분할 할당</h2>\n<ul>\n<li>\n<p>호출 하는 함수에서 <code class=\"language-text\">Object</code> 형태로 넘겨준 파라미터 값을 호출받는 함수의 파라미터에 맞추어 할당</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">function add({ one, two }) {\nconsole.log(one + two);\n}\n\nadd({ one: 10, two: 20 }); // 30</code>\n        </deckgo-highlight-code>\n<ol>\n<li>호출하는 함수에서 넘겨준 <code class=\"language-text\">one</code>과 <code class=\"language-text\">two</code>를 호출받는 함수의 프로퍼티 이름에 맞추어 프로퍼티 값을 분할 할당 함</li>\n</ol>\n</li>\n<li>\n<p><code class=\"language-text\">Object</code> 구조에 맞추어 값 할당</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">function add({one, plus: {two}}) (\n\tconsole.log(one + two);\n);\n\nadd({one: 10, plus: {two: 20}});  // 30</code>\n        </deckgo-highlight-code>\n<ul>\n<li>호출하는 함수에서 넘겨준 <code class=\"language-text\">Object</code> 구조와 프로퍼티에 맞추어 프로퍼티 값을 할당</li>\n</ul>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","frontmatter":{"date":"September 09, 2021","title":"Object 분할 할당, 파라미터 분할 할당","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-destructuring-2/"}},"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":"zoomkoding/zoomkoding-gatsby-blog"}}}}},"pageContext":{"slug":"/study-js-es6-destructuring-1/","nextSlug":"/study-js-es6-spread-2/","prevSlug":"/study-js-es6-destructuring-2/"}},"staticQueryHashes":["1073350324","2938748437"]}