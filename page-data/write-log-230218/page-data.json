{"componentChunkName":"component---src-templates-blog-template-js","path":"/write-log-230218/","result":{"data":{"cur":{"id":"6c88830b-a912-51fc-a343-744ba622f437","html":"<h1 id=\"️-배운-내용\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%EB%B0%B0%EC%9A%B4-%EB%82%B4%EC%9A%A9\" aria-label=\"️ 배운 내용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️ 배운 내용</h1>\n<ul>\n<li>\n<p>리팩토링에 대한 개념을 다른 팀원분에게 물어보았고, 내가 놓치고 있던 부분을 밑에 정리 했다.</p>\n<ul>\n<li>기능은 변하지 않지만, 코드 구조가 변하는 것(불필요한 코드 제거, 유지 보수성에 용이한 코드)</li>\n<li>리팩토링 하기 전에 테스트 코드를 먼저 작성하는 것이 안전(테스트 코드 작성하지 못하는 상황에 자체 QA를 돌리면서 유연하게 리팩토링 하는 것도 방법)</li>\n<li>리팩토링을 진행하는 과정에서 코드를 고칠 때마다 더욱 이상해진다고 판단되면, 다른 사람들이 개발한 라이브러리 코드를 보거나, 리팩토링 책, 함수형 프로그래밍 책, OOP 관련 책을 보면 좋음</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">section</code> 태그</p>\n<ul>\n<li>내용이 서로 관계가 있는 경우 사용</li>\n<li>section 태그 안에 article 태그가 여러개 들어 갈 수 있음</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">article</code> 태그</p>\n<ul>\n<li>내용이 독립적이고 스스로 설 수 있는 내용</li>\n<li>article 태그 안에 관련 없는 article 태그가 올 수 없음</li>\n<li>SEO 접근 향상에 <code class=\"language-text\">article</code> 태그가 영향을 줌</li>\n</ul>\n</li>\n<li><code class=\"language-text\">div</code> 태그 : 의미없는 태그</li>\n<li>\n<p>SEO 측면에서 HTML 속성에 <code class=\"language-text\">lang=\"ko\"</code>를 적용하는 것이 좋다.</p>\n<ul>\n<li>lang 속성은 검색엔진이 특정 언어의 웹페이지를 검색할때 도움을 줌</li>\n<li>스크린리더기 사용자들이 어떤 음성 엔진을 선택해야 하는지 도움을 줌</li>\n</ul>\n</li>\n<li>\n<p>공통적인 스타일을 밖으로 빼서 적용하는 방법</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">  <span class=\"token keyword\">import</span> styled <span class=\"token keyword\">from</span> <span class=\"token string\">'@emotion/styled'</span>\n  <span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> css <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@emotion/react'</span>\n\n  <span class=\"token keyword\">const</span> Divide <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>div<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n    width: 100%;\n    height: auto;\n  </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>  \n\n  <span class=\"token comment\">// 이렇게 공통 스타일을 적용하면, LoginDivide가 어떤 태그인지 알 수 없음.</span>\n  <span class=\"token keyword\">const</span> LoginDivide <span class=\"token operator\">=</span> <span class=\"token function\">stylde</span><span class=\"token punctuation\">(</span>Divid<span class=\"token punctuation\">)</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n    color: 'blue';\n  </span><span class=\"token template-punctuation string\">`</span></span> \n\n  <span class=\"token keyword\">const</span> Text <span class=\"token operator\">=</span> css<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n    font-size: 10px;\n    font-weight: 'bold';\n  </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 이렇게 작성하게 되면 LoginText가 h1 태그라는 사실을 알 수 있음.</span>\n  <span class=\"token keyword\">const</span> LoginText <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>h1<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n    </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Text<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">;\n    color: 'blue';\n  </span><span class=\"token template-punctuation string\">`</span></span>    </code></pre></div>\n</li>\n<li>\n<p>계산에 따라 디바이스벼로 스타일 컴포넌트를 적용하는 방법</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">calcAttr</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">sizeProp<span class=\"token punctuation\">,</span> attribute</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> css<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>attribute<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>sizeProp<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> sizeProp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> sizeProp<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px;\n\n@media (max-width: 767px) {\n  </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>sizeProp<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> sizeProp<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>attribute<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>sizeProp<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\n} \n\n@media (max-width: 1207px) {\n  </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>sizeProp<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> sizeProp<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>attribute<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>sizeProp<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\n}\n</span><span class=\"token template-punctuation string\">`</span></span>\n\n<span class=\"token comment\">// 사용 부</span>\n<span class=\"token keyword\">const</span> MarqueeWrapper <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>article<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  overflow: hidden;\n  text-align: center;\n\n  </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> $width <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">calcAttr</span><span class=\"token punctuation\">(</span>$width<span class=\"token punctuation\">,</span> <span class=\"token string\">'width'</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">;\n  </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> $height <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">calcAttr</span><span class=\"token punctuation\">(</span>$height<span class=\"token punctuation\">,</span> <span class=\"token string\">'height'</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">;\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">&lt;</span>MarqueeWrapper $width<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">80</span><span class=\"token punctuation\">,</span><span class=\"token number\">60</span><span class=\"token punctuation\">]</span> $height<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">80</span><span class=\"token punctuation\">,</span><span class=\"token number\">60</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n</li>\n<li>\n<p>추상화 수준이 낮은 곳에 높은 것을 가져다가 사용해야 참조 순서를 지킬 수 있음 </p>\n<ul>\n<li>ex) types 폴더는 추상화 수준이 매우 높기때문에 types 폴더보다 낮은 UIComponent 폴더에서 types 폴더를 가져다가 사용해야 함</li>\n<li>\n<p>eslint로 폴더 역참조 하지 못하게 막는 방법</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token string\">'import/no-restricted-paths'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n <span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">{</span>\n   basePath<span class=\"token operator\">:</span> <span class=\"token string\">'./src'</span><span class=\"token punctuation\">,</span>\n   zones<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n     <span class=\"token punctuation\">{</span> target<span class=\"token operator\">:</span><span class=\"token string\">'./types'</span><span class=\"token punctuation\">,</span> from<span class=\"token operator\">:</span> <span class=\"token string\">'./UIComponents'</span> <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">cacheTime</code></p>\n<ul>\n<li>특정 값의 만료와 관련된 것</li>\n<li>새로고침 했을 때, 서버에 Refetch 해야하는 시간 ex) cacheTime: 1000의 의미는 1초 후, 새로고침 진행시 서버에 refetch 진행</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">staleTime</code></p>\n<ul>\n<li>특정 쿼리의 유효기간 만료와 관련된 것</li>\n<li>query 결과를 stale 상태까지(기본 5초) cache로 유지하는 시간, 쿼리 결과가 stale 상태가 되어도 여전히 캐시 값을 리턴함 만약에 쿼리가 자동적으로 refetche 되었다면, 캐시 안에 있는 새로운 데이터를 리턴함</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">query instance</code></p>\n<ul>\n<li>query instance를 성생했다는 것은 useQuery 훅을 사용했다는 것</li>\n<li>query instance는 React Query의 Cache에 의해 관리됨</li>\n<li>query instance를 <strong>Unmounting</strong> 의 의미</li>\n<li>query instance가 더 이상 컴포넌트에서 사용되어지 않을 때</li>\n<li>Cache로 부터 제거 되었을 때 ex) <code class=\"language-text\">queryClient.removeQueries</code>(쿼리 키를 통해, 쿼리 인스턴스를 캐시에서 제거)로 쿼리 인스턴스를 수동으로 제거할 때</li>\n</ul>\n</li>\n<li>Next.js에서 <code class=\"language-text\">pages/posts/[...all].tsx</code>는 /posts/1, /posts/1/2, /posts/1/2/3 와 같은 URL로 이동됨</li>\n</ul>\n<br>\n<h1 id=\"-마무리\" style=\"position:relative;\"><a href=\"#-%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\" 마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👍 마무리</h1>\n<p>이번 주는 리팩토링에 대한 작업을 했습니다. 이 과정에서 팀원분들과 프로젝트 전반의 폴더 구조에 대해 논의 하면서, 프로젝트에 관한 전반적인 이해도를 높일 수 있었습니다.\n또한 어떻게 하면 좋은 폴더 구조를 통해 팀원분들과 좋은 협업을 할 수 있을지 고민도 해보았습니다. 이 부분은 아직 까지 정답은 없다고 생각합니다. 지속적인 고민과 노력이 필요할 것 같습니다.</p>\n<p>이번 한 주를 돌이켜 보았을 때, 여전히 배울 것이 많다고 생각됩니다. 다만 생각으로 그치지 않고 잘 정리해서 습득하는 연습에 노력을 해야 할 것 같습니다.</p>\n<br>\n<h3 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h3>\n<ul>\n<li><a href=\"https:velog.io/@jtwjs/SEO\">SEO를 알아보자</a></li>\n<li><a href=\"https://emotion.sh/docs/introduction\">Emotion Introduction</a></li>\n<li><a href=\"https://github.com/import-js/eslint-plugin-import/blob/main/docs/rules/no-restricted-paths.md\">eslint 폴더 역참조 제어 설정</a></li>\n<li>\n<p>React Query관련 참고 자료</p>\n<ul>\n<li><a href=\"https://react-query-v3.tanstack.com/guides/caching\">https://react-query-v3.tanstack.com/guides/caching</a></li>\n<li><a href=\"https://medium.com/doctolib/react-query-cachetime-vs-staletime-ec74defc483e\">https://medium.com/doctolib/react-query-cachetime-vs-staletime-ec74defc483e</a></li>\n<li><a href=\"https://velog.io/@yrnana/React-Query%EC%97%90%EC%84%9C-staleTime%EA%B3%BC-cacheTime%EC%9D%98-%EC%B0%A8%EC%9D%B4\">https://velog.io/@yrnana/React-Query%EC%97%90%EC%84%9C-staleTime%EA%B3%BC-cacheTime%EC%9D%98-%EC%B0%A8%EC%9D%B4</a></li>\n<li><a href=\"https://devkkiri.com/post/e2b6fe00-df76-4b97-af2a-65bd3c79021b\">https://devkkiri.com/post/e2b6fe00-df76-4b97-af2a-65bd3c79021b</a></li>\n<li><a href=\"https://blog.getliner.com/front-react-query-quiz/\">https://blog.getliner.com/front-react-query-quiz/</a></li>\n<li><a href=\"https://2ham-s.tistory.com/407\">https://2ham-s.tistory.com/407</a></li>\n</ul>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>\n</div>","excerpt":"✏️ 배운 내용 리팩토링에 대한 개념을 다른 팀원분에게 물어보았고, 내가 놓치고 있던 부분을 밑에 정리 했다. 기능은 변하지 않지만, 코드 구조가 변하는 것(불필요한 코드 제거, 유지 보수성에 용이한 코드) 리팩토링 하기 전에 테스트 코드를 먼저 작성하는 것이 안전(테스트 코드 작성하지 못하는 상황에 자체 QA를 돌리면서 유연하게 리팩토링 하는 것도 방법) 리팩토링을 진행하는 과정에서 코드를 고칠 때마다 더욱 이상해진다고 판단되면, 다른 사람들이 개발한 라이브러리 코드를 보거나, 리팩토링 책, 함수형 프로그래밍 책, OOP 관련 책을 보면 좋음  태그 내용이 서로 관계가 있는 경우 사용 section 태그 안에 article 태그가 여러개 들어 갈 수 있음  태그 내용이 독립적이고 스스로 설 수 있는 내용 article 태그 안에 관련 없는 article 태그가 올 수 없음 SEO 접근 향상에  태그가 영향을 줌  태그 : 의미없는 태그 SEO 측면에서 HTML 속성에 를 적용하는 …","frontmatter":{"date":"February 18, 2023","title":"2월 3주 회고","categories":"Log","author":"Kay","emoji":"👋"},"fields":{"slug":"/write-log-230218/"}},"next":{"id":"3a418ae6-5ea3-55cc-820d-bbb46932d243","html":"<h1 id=\"️-배운-내용\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%EB%B0%B0%EC%9A%B4-%EB%82%B4%EC%9A%A9\" aria-label=\"️ 배운 내용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️ 배운 내용</h1>\n<ul>\n<li>\n<p>외부<code class=\"language-text\">ReactSearchAutoComplete</code>를 리팩터링 및 테스트 코드 작성을 했습니다. 그리고 작성한 이 코드가 위치한 폴더는 <code class=\"language-text\">libs</code>입니다. </p>\n<ul>\n<li>libs의 역할은 외부 라이브러리를 관리하거나, 사내 프로젝트 사용에 용이하기 위해 랩핑을 통해 인터페이스를 제공하기 위한 장소입니다.(여기서 중요한 점은 libs의 해당 라이브러리를\n이해 하지 못한 채, 랩핑을 통해 인터페이스를 제공하게 된다면, 오히려 다른 팀원분들에게 혼란을 줄 수 있어 적절한 회의를 가진 후, 개발해야합니다.)</li>\n<li>만약에 사내에 사용하기 위한 라이브러리로 리팩토링 되어진다면 즉, 외부 라이브러리의 의존성이 사라지고 다른 팀원분이 사용하는 순간 <code class=\"language-text\">components</code>\n폴더로 이동되어 사용되어진다는 사실에 대해 알게 되었습니다.</li>\n<li>이 과정에서 많은 사람과 개발을 하기 위해서는 폴더의 이름 및 역할이 분명해야 개발의 혼란을 줄일 수 있음을 알게 되었습니다.</li>\n</ul>\n</li>\n<li>추가로 <code class=\"language-text\">modules</code> 폴더는 서버의 데이터 스키마와 필드에 의존하는 폴더라는 사실도 알게 되었습니다.</li>\n<li>\n<p><a href=\"https://schema.org/\">Schema.org</a> 규격에 맞게 검색엔진에서 해당 규격에 맞는 구조화 데이터를 크롤링 합니다. 그렇기 때문에 우리가 개발하는 사이트에 구조화된 데이터를 셋팅해야 검색 엔진에 제대로 노출이 된다는 사실을 알게되었습니다. <a href=\"https://github.com/garmeeh/next-seo\">Next-SEO</a>에서 제공해주는 <code class=\"language-text\">ArticleJsonLd</code>를 통해(구조화 데이터 타입 중 Article) 구조화 데이터 셋팅을 진행할 수 있었습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ArticleJsonLd <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'next-seo'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Page</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Article JSON-LD</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ArticleJsonLd</span></span>\n<span class=\"token attr-name\">url</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://example.com/article<span class=\"token punctuation\">\"</span></span>\n<span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Article headline<span class=\"token punctuation\">\"</span></span>\n<span class=\"token attr-name\">images</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span>\n<span class=\"token string\">'https://example.com/photos/1x1/photo.jpg'</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">'https://example.com/photos/4x3/photo.jpg'</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">'https://example.com/photos/16x9/photo.jpg'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span>\n<span class=\"token attr-name\">datePublished</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2015-02-05T08:00:00+08:00<span class=\"token punctuation\">\"</span></span>\n<span class=\"token attr-name\">dateModified</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2015-02-05T09:00:00+08:00<span class=\"token punctuation\">\"</span></span>\n<span class=\"token attr-name\">authorName</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span>\n<span class=\"token punctuation\">{</span>\nname<span class=\"token operator\">:</span> <span class=\"token string\">'Jane Blogs'</span><span class=\"token punctuation\">,</span>\nurl<span class=\"token operator\">:</span> <span class=\"token string\">'https://example.com'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">{</span>\nname<span class=\"token operator\">:</span> <span class=\"token string\">'Mary Stone'</span><span class=\"token punctuation\">,</span>\nurl<span class=\"token operator\">:</span> <span class=\"token string\">'https://example.com'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span>\n<span class=\"token attr-name\">publisherName</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Gary Meehan<span class=\"token punctuation\">\"</span></span>\n<span class=\"token attr-name\">publisherLogo</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://www.example.com/photos/logo.jpg<span class=\"token punctuation\">\"</span></span>\n<span class=\"token attr-name\">description</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>This is a good description of this article.<span class=\"token punctuation\">\"</span></span>\n<span class=\"token attr-name\">isAccessibleForFree</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span></span>\n<span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Page<span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>React에서 구조화 데이터를 셋팅할 때에는 <code class=\"language-text\">React-Helemt</code> 컴포넌트 내부에 작성해서 진행했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Helmet<span class=\"token operator\">></span>\n <span class=\"token operator\">&lt;</span>script type<span class=\"token operator\">=</span><span class=\"token string\">\"application/ld+json\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n   {\n     \"@type\": \"WebSite\",\n     \"@context\": \"http://schema.org\",\n     \"name\": \"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>title<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\"\n   }\n </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Helmet<span class=\"token operator\">></span></code></pre></div>\n</li>\n<li>개발을 할 때, <code class=\"language-text\">타입을 먼저 잡고 개발</code>을 시작해야 함. 예를 들어 Props가 어떤 값이 들어올지 모르는 상황에서 타입을 먼저 설계하고 있지 않다가 Props가 많아 지게 된다면, 기존에 Props가 어떤 타입을 지정해야할지 모르게 됨. 또한 팀원분과 타입을 먼저 설계하고 개발을 진행하자는 코드 얼라인을 맞췄는데, 그렇게 개발을 하지 않는 것은 서로의 신뢰를 깨는 행위라는 사실을 배움.</li>\n<li>\n<p>재사용가능한 컴포넌트를 개발하는 과정에서 혼자서 개발하기 보다는 디자이너와 협의를 통해, 어떤 디자인이 지속적으로 유지되는 건지 또는 어떤 디자인은 변경 가능성이 많은지를 확인하면서 컴포넌트 내부의 <code class=\"language-text\">Default</code>로 제공하는 디자인을 지정해야 함</p>\n<ul>\n<li>ex) ReactAutoCompleteSearch 컴포넌트를 제공할 때, 결과 UI(결과가 없을 때 = noResultRenderProps, 결과가 있을 때 = resultRenderProps, 로딩 중일 때 = loadingRenderProps) 중 어느정도 자유도를 줘야 할지 판단을 해야 합니다.</li>\n<li>\n<p>컴포넌트를 나누는 이유는 각 컴포넌트의 관심사를 분리해야 하는 것. 그 중 <code class=\"language-text\">커링</code>을 통해, 컴포넌트 관심사를 분리하고 <code class=\"language-text\">Props 드릴링</code>을 방지하는 방법이 있음. 즉, 사용하는 쪽에서 굳이 알 필요 없는 값을 제거하는 방법</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// A Component</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">A</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">,</span> setIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">calClassName</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">currentIdx</span><span class=\"token punctuation\">)</span> \n    <span class=\"token operator\">=></span> index <span class=\"token operator\">===</span> currentIdx <span class=\"token operator\">?</span> <span class=\"token string\">'selected'</span> <span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">B</span></span> <span class=\"token attr-name\">handleClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  )\n}\n\n// B Component\nconst B = ({ handleClick }) => </span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span>\n              <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n          <span class=\"token punctuation\">/></span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n<br>\n<h1 id=\"-마무리\" style=\"position:relative;\"><a href=\"#-%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\" 마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👍 마무리</h1>\n<p>개발을 한 다는 것은 단순히 코드를 많이 작성하는 것이 아니라, 갸벌운 80% 고민과 20% 코드가 개발임을 다시 한번 느낀다.</p>\n<p>80% 고민 속에, <b>어떻게하면 재사용 가능하게 개발 할 수 있을까?, 어떻게 하면 팀원분들이 내 코드를 잘 읽히도록 할 수 있을까?, 이 코드가 과연 최선일까?\n이 코드가 사용자에게 최적화 된 코드일까??, 내가 지금 막코딩하는 것은 아닐까?, 놓치고 있는 기획 요구 사항은 없나?</b> 등의 수만가지의 고민 끝에 나온 것이 코드여야 하는데,\n자꾸만 고민보다는 손이 먼저 간 것 같다. </p>\n<p>물로 먼저 개발하고 다른 팀원분에게 빠르게 피드백 받는 것도 중요하다고 말씀해주신 팀원분도 있었다. 그것도 맞는 것 같다.\n하지만 빠르게 피드백 받기 전에 최소한의 고민과 노력은 있어야 한다고 본다. 아무런 고민과 노력없이 피드백 받는 것, 피드백을 주는 사람과 피드백을 받는 사람에게 아무런 도움이 되지 못하는 행동인 것 같다.</p>\n<p>그렇기 때문에 조급함 속에서도 차분히 고민과 노력을 하면서 개발을 진행하자. 다시 한번 고민 없는 코드는 그냥 죽은 텍스트에 불과하다는 사실을 다시 한번 깨닫는다.  </p>\n<br>\n<h3 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h3>\n<p><a href=\"https://schema.org/\">Schema.org</a></p>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>\n</div>","frontmatter":{"date":"February 11, 2023","title":"2월 2주 회고","categories":"Log","author":"Kay","emoji":"👋"},"fields":{"slug":"/write-log-230211/"}},"prev":{"id":"36c04e05-5bf6-5d24-ac11-23b277c29325","html":"<h1 id=\"글-작성-회고\" style=\"position:relative;\"><a href=\"#%EA%B8%80-%EC%9E%91%EC%84%B1-%ED%9A%8C%EA%B3%A0\" aria-label=\"글 작성 회고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>글 작성 회고</h1>\n<p>오늘은 제가 글또에 제출한 글들에 대한 회고하는 시간을 가져보고자 합니다. 문득 <b>반성(회고)하지 않은 사람은 발전이 없다</b>는 이야기가 생각이 났습니다.\n저도 사실 최근에 회고하기보다는 매일 매일 새로운 것을 알아가는 것에 집중했던 것 같습니다. 이번 글을 작성하면서 지금까지 글을 작성하면서 스스로 질문하고\n답변하는 시간을 가져보았습니다.</p>\n<br/>\n<h2 id=\"처음-글이-마음에-들었나요\" style=\"position:relative;\"><a href=\"#%EC%B2%98%EC%9D%8C-%EA%B8%80%EC%9D%B4-%EB%A7%88%EC%9D%8C%EC%97%90-%EB%93%A4%EC%97%88%EB%82%98%EC%9A%94\" aria-label=\"처음 글이 마음에 들었나요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>처음 글이 마음에 들었나요??</h2>\n<p>글또 스터디를 시작하고 자연스럽게 글 소재에 대해 고민을 하게 되었습니다. 개인적으로 좋은 해외 개발 아티클을 번역하고 싶어 시도했지만,\n정말 어려웠습니다. 마음처럼 빠르게 글도 안 써지고 내가 알고 있는 단어의 뜻이 문장에서 어색함이 너무나 많았습니다. 또한 이 글을 읽었을 때 과연 잘 이해가 될까?\n라는 의심도 많았습니다. 그래서 솔직히 100% 마음에 들지는 않아, 다음 번역을 할 때는 문장이 적은 것을 선택해야겠습니다.</p>\n<br/>\n<h2 id=\"글을-작성할-때-나의-감정은-어땠나요\" style=\"position:relative;\"><a href=\"#%EA%B8%80%EC%9D%84-%EC%9E%91%EC%84%B1%ED%95%A0-%EB%95%8C-%EB%82%98%EC%9D%98-%EA%B0%90%EC%A0%95%EC%9D%80-%EC%96%B4%EB%95%A0%EB%82%98%EC%9A%94\" aria-label=\"글을 작성할 때 나의 감정은 어땠나요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>글을 작성할 때 나의 감정은 어땠나요?</h2>\n<p>아주 답답했습니다. 위에도 작성했지만, 알고 있는 단어의 뜻으로 번역했지만, 문장이 너무나 어색해 번역했어도 번역이 안 된 이 느낌이 좋지 않았습니다.\n그래도 묵묵히 문장을 여러 번 읽고 가다듬었습니다. 그리고 글을 다 작성했을 때 너무나 뿌듯했습니다. </p>\n<br/>\n<h2 id=\"앞으로-글을-쓸-때-어떻게-하고-싶나요\" style=\"position:relative;\"><a href=\"#%EC%95%9E%EC%9C%BC%EB%A1%9C-%EA%B8%80%EC%9D%84-%EC%93%B8-%EB%95%8C-%EC%96%B4%EB%96%BB%EA%B2%8C-%ED%95%98%EA%B3%A0-%EC%8B%B6%EB%82%98%EC%9A%94\" aria-label=\"앞으로 글을 쓸 때 어떻게 하고 싶나요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>앞으로 글을 쓸 때 어떻게 하고 싶나요??</h2>\n<p>타임라인에 맞추어서 글을 쓰는 데 급급했던 것 같습니다. 정말로 내가 다시 이 글을 보고 이해한다는 생각으로 글을 작성해야겠습니다. 또한 다른 사람들이 작성한 글을\n많이 참고해서 글의 퀄리티를 높일 수 있도록 노력해야겠습니다.</p>\n<br/>\n<h3 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h3>\n<p><a href=\"https://www.notion.so/ac5b18a482fb4df497d4e8257ad4d516\">글또 소개</a></p>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EC%B2%98%EC%9D%8C-%EA%B8%80%EC%9D%B4-%EB%A7%88%EC%9D%8C%EC%97%90-%EB%93%A4%EC%97%88%EB%82%98%EC%9A%94\">처음 글이 마음에 들었나요??</a></li>\n<li><a href=\"#%EA%B8%80%EC%9D%84-%EC%9E%91%EC%84%B1%ED%95%A0-%EB%95%8C-%EB%82%98%EC%9D%98-%EA%B0%90%EC%A0%95%EC%9D%80-%EC%96%B4%EB%95%A0%EB%82%98%EC%9A%94\">글을 작성할 때 나의 감정은 어땠나요?</a></li>\n<li>\n<p><a href=\"#%EC%95%9E%EC%9C%BC%EB%A1%9C-%EA%B8%80%EC%9D%84-%EC%93%B8-%EB%95%8C-%EC%96%B4%EB%96%BB%EA%B2%8C-%ED%95%98%EA%B3%A0-%EC%8B%B6%EB%82%98%EC%9A%94\">앞으로 글을 쓸 때 어떻게 하고 싶나요??</a></p>\n<ul>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"February 19, 2023","title":"글또 8기 - 1회차 글작성 회고","categories":"Study","author":"Kay","emoji":"✍️"},"fields":{"slug":"/study-write-2/"}},"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":"zoomkoding/zoomkoding-gatsby-blog"}}}}},"pageContext":{"slug":"/write-log-230218/","nextSlug":"/write-log-230211/","prevSlug":"/study-write-2/"}},"staticQueryHashes":["1073350324","2938748437"]}