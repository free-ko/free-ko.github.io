{"componentChunkName":"component---src-templates-blog-template-js","path":"/refactoring-1-2/","result":{"data":{"cur":{"id":"2c73933d-b533-5138-b759-a56f9cd8e2e1","html":"<h2 id=\"16-계산-단계와-포맷팅-단계-분리하기\" style=\"position:relative;\"><a href=\"#16-%EA%B3%84%EC%82%B0-%EB%8B%A8%EA%B3%84%EC%99%80-%ED%8F%AC%EB%A7%B7%ED%8C%85-%EB%8B%A8%EA%B3%84-%EB%B6%84%EB%A6%AC%ED%95%98%EA%B8%B0\" aria-label=\"16 계산 단계와 포맷팅 단계 분리하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.6 계산 단계와 포맷팅 단계 분리하기</h2>\n<ol>\n<li>\n<p>앞서 작성한 코드를 두 단계로 나눔</p>\n<ul>\n<li><code class=\"language-text\">statement()</code>에 필요한 데이터를 처리</li>\n<li>앞서 처리한 결과를 텍스트나 HTML로 표현</li>\n</ul>\n</li>\n<li>\n<p>그 다음 함수를 추출 이때 계산 관련 코드는 전부 <code class=\"language-text\">statement()</code> 함수로 모으고 <code class=\"language-text\">renderPlainText()</code>는 `data<code class=\"language-text\"></code> 매개변수로 전달된 데이터만 처리하게 만듦</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">statement</span><span class=\"token punctuation\">(</span>invoice<span class=\"token punctuation\">,</span> plays<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">const</span> statementData <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 고객 데이터, 공연 정보를 중간 데이터로 옮김</span>\nstatementData<span class=\"token punctuation\">.</span>customer <span class=\"token operator\">=</span> invoice<span class=\"token punctuation\">.</span>customer<span class=\"token punctuation\">;</span>\nstatementData<span class=\"token punctuation\">.</span>performances <span class=\"token operator\">=</span> invoice<span class=\"token punctuation\">.</span>performances<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 필요 없어진 인수 삭제</span>\n<span class=\"token keyword\">return</span> <span class=\"token function\">renderPlainText</span><span class=\"token punctuation\">(</span>statementData<span class=\"token punctuation\">,</span> plays<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">renderPlainText</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> plays<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">totalAmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">totalVolumeCredits</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">usd</span><span class=\"token punctuation\">(</span>aNumber<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">volumeCreditsFor</span><span class=\"token punctuation\">(</span>aPerformance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">playFor</span><span class=\"token punctuation\">(</span>aPerformance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">amountFor</span><span class=\"token punctuation\">(</span>aPerformance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>연극 제목도 중간 데이터 구조에서 가져옴</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">statement</span><span class=\"token punctuation\">(</span>invoice<span class=\"token punctuation\">,</span> plays<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> statementData <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  statementData<span class=\"token punctuation\">.</span>customer <span class=\"token operator\">=</span> invoice<span class=\"token punctuation\">.</span>customer<span class=\"token punctuation\">;</span>\n  statementData<span class=\"token punctuation\">.</span>performances <span class=\"token operator\">=</span> invoice<span class=\"token punctuation\">.</span>performances<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>enrichPerformances<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token function\">renderPlainText</span><span class=\"token punctuation\">(</span>statementData<span class=\"token punctuation\">,</span> plays<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">enrichPerformance</span><span class=\"token punctuation\">(</span>aPerformance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> aPerformance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>이제 <code class=\"language-text\">playFor()</code> 함수와 <code class=\"language-text\">amountFor()</code> 함수를 <code class=\"language-text\">statement()</code>로 옮겨줌</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">statement</span><span class=\"token punctuation\">(</span>invoice<span class=\"token punctuation\">,</span> plays<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// ...</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">enrichPerformance</span><span class=\"token punctuation\">(</span>aPerformance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> aPerformance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 중간 데이터에 연극 정보를 저장</span>\n  result<span class=\"token punctuation\">.</span>play <span class=\"token operator\">=</span> <span class=\"token function\">playFor</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  result<span class=\"token punctuation\">.</span>amount <span class=\"token operator\">=</span> <span class=\"token function\">amountFor</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// renderPlainText()의 중첩 함수였던 playFor()를 statement()로 옮김</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">playFor</span><span class=\"token punctuation\">(</span>aPerformance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> plays<span class=\"token punctuation\">[</span>aPerformance<span class=\"token punctuation\">.</span>playID<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">amountFor</span><span class=\"token punctuation\">(</span>aPerformance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">renderPlainText()</code> 안에서 <code class=\"language-text\">playFor()</code>와 <code class=\"language-text\">amountFor()</code>를 호출하던 부분을 중간 데이터를 사용하도록 바꿔주고, 같은 방식으로 다른 중첩 함수들도 옮겨주었음</li>\n</ul>\n</li>\n<li>\n<p>다음으로는 반복문을 파이프라인으로 바꿈</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">totalAmount</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// for 반복문을 파이프라인으로 바꿈</span>\n  <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">.</span>performances<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>total<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> total <span class=\"token operator\">+</span> p<span class=\"token punctuation\">.</span>amount<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">totalVolumeCredits</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// for 반복문을 파이프라인으로 바꿈</span>\n  <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">.</span>performances<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>total<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> total <span class=\"token operator\">+</span> p<span class=\"token punctuation\">.</span>volumeCredits<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>이제 <code class=\"language-text\">statement()</code>에 필요한 데이터 처리에 해당하는 코드를 모두 별도 함수로 빼냄</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">  <span class=\"token keyword\">function</span> <span class=\"token function\">statement</span><span class=\"token punctuation\">(</span>invoice<span class=\"token punctuation\">,</span> plays<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">renderPlainText</span><span class=\"token punctuation\">(</span><span class=\"token function\">createStatementData</span><span class=\"token punctuation\">(</span>invoice<span class=\"token punctuation\">,</span> plays<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 중간 데이터 생성을 전담</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">createStatementData</span><span class=\"token punctuation\">(</span>invoice<span class=\"token punctuation\">,</span> plays<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    result<span class=\"token punctuation\">.</span>customer <span class=\"token operator\">=</span> invoice<span class=\"token punctuation\">.</span>customer<span class=\"token punctuation\">;</span>\n    result<span class=\"token punctuation\">.</span>performances <span class=\"token operator\">=</span> invoice<span class=\"token punctuation\">.</span>performances<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>enrichPerformance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    result<span class=\"token punctuation\">.</span>totalAmount <span class=\"token operator\">=</span> <span class=\"token function\">totalAmount</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    result<span class=\"token punctuation\">.</span>totalVolumeCredits <span class=\"token operator\">=</span> <span class=\"token function\">totalVolumeCredits</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">enrichPerformance</span><span class=\"token punctuation\">(</span>aPerformance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">playFor</span><span class=\"token punctuation\">(</span>aPerformance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">amountFor</span><span class=\"token punctuation\">(</span>aPerformance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">volumeCreditsFor</span><span class=\"token punctuation\">(</span>aPerformance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">totalAmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">totalVolumeCredits</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>마지막으로, 단계별로 분리한 코드를 별도 파일에 저장한 후 HTML 버전을 작성 함</li>\n</ol>\n<br>\n<h2 id=\"17-중간-점검-두-파일과-두-단계로-분리됨\" style=\"position:relative;\"><a href=\"#17-%EC%A4%91%EA%B0%84-%EC%A0%90%EA%B2%80-%EB%91%90-%ED%8C%8C%EC%9D%BC%EA%B3%BC-%EB%91%90-%EB%8B%A8%EA%B3%84%EB%A1%9C-%EB%B6%84%EB%A6%AC%EB%90%A8\" aria-label=\"17 중간 점검 두 파일과 두 단계로 분리됨 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.7 중간 점검: 두 파일(과 두 단계)로 분리됨</h2>\n<ol>\n<li>\n<p>statement.js</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> createStatementData <span class=\"token keyword\">from</span> <span class=\"token string\">'./createStatementData.js'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">statement</span><span class=\"token punctuation\">(</span>invoice<span class=\"token punctuation\">,</span> plays<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">return</span> <span class=\"token function\">renderPlainText</span><span class=\"token punctuation\">(</span><span class=\"token function\">createStatementData</span><span class=\"token punctuation\">(</span>invoice<span class=\"token punctuation\">,</span> plays<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">renderPlainText</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> plays<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">htmlStatement</span><span class=\"token punctuation\">(</span>invoice<span class=\"token punctuation\">,</span> plays<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">return</span> <span class=\"token function\">renderHtml</span><span class=\"token punctuation\">(</span><span class=\"token function\">createStatementData</span><span class=\"token punctuation\">(</span>invoice<span class=\"token punctuation\">,</span> plays<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">renderHtml</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">usd</span><span class=\"token punctuation\">(</span>aNumber<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>createStatementData.js</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">createStatementData</span><span class=\"token punctuation\">(</span>invoice<span class=\"token punctuation\">,</span> plays<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n result<span class=\"token punctuation\">.</span>customer <span class=\"token operator\">=</span> invoice<span class=\"token punctuation\">.</span>customer<span class=\"token punctuation\">;</span>\n result<span class=\"token punctuation\">.</span>performances <span class=\"token operator\">=</span> invoice<span class=\"token punctuation\">.</span>performances<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>enrichPerformance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n result<span class=\"token punctuation\">.</span>totalAmount <span class=\"token operator\">=</span> <span class=\"token function\">totalAmount</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n result<span class=\"token punctuation\">.</span>totalVolumeCredits <span class=\"token operator\">=</span> <span class=\"token function\">totalVolumeCredits</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">function</span> <span class=\"token function\">enrichPerformance</span><span class=\"token punctuation\">(</span>aPerformance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n <span class=\"token keyword\">function</span> <span class=\"token function\">playFor</span><span class=\"token punctuation\">(</span>aPerformance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n <span class=\"token keyword\">function</span> <span class=\"token function\">amountFor</span><span class=\"token punctuation\">(</span>aPerformance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n <span class=\"token keyword\">function</span> <span class=\"token function\">volumeCreditsFor</span><span class=\"token punctuation\">(</span>aPerformance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n <span class=\"token keyword\">function</span> <span class=\"token function\">totalAmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n <span class=\"token keyword\">function</span> <span class=\"token function\">totalVolumeCredits</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>함수를 추출하면서 코드량은 많이 늘었지만, 모듈화를 통해 전체 로직을 구성하는 요소 각각이 더 뚜렷해지고 계산하는 부분과 출력 형식을 다루는 부분이 분리됨</li>\n</ul>\n</li>\n</ol>\n<br>\n<h2 id=\"18-다형성을-활용해-계산-코드-재구성하기\" style=\"position:relative;\"><a href=\"#18-%EB%8B%A4%ED%98%95%EC%84%B1%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%B4-%EA%B3%84%EC%82%B0-%EC%BD%94%EB%93%9C-%EC%9E%AC%EA%B5%AC%EC%84%B1%ED%95%98%EA%B8%B0\" aria-label=\"18 다형성을 활용해 계산 코드 재구성하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.8 다형성을 활용해 계산 코드 재구성하기</h2>\n<ol>\n<li>\n<p>조건부 로직을 다형성으로 바꿀 수 있음. 여기서는 공연료 계산기를 만들고, 공연 관련 데이터를 계산하는 함수들로 구성된 클래스를 만들어 상속 계층을 정의함</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">enrichPerformance</span><span class=\"token punctuation\">(</span>aPerformance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">const</span> calculator <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PerformanceCalculator</span><span class=\"token punctuation\">(</span>aPerformance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> aPerformance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n result<span class=\"token punctuation\">.</span>play <span class=\"token operator\">=</span> <span class=\"token function\">playFor</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PerformanceCalculator</span> <span class=\"token punctuation\">{</span>\n <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>aPerformance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>performance <span class=\"token operator\">=</span> aPerformance<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>그리고 계산기 클래스의 생성자에 함수 선언 바꾸기를 적용하여 연극의 레코드를 계산기로 전달함</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">PerformanceCalculator</span> <span class=\"token punctuation\">{</span>\n <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>aPerformance<span class=\"token punctuation\">,</span> aPlay<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>performance <span class=\"token operator\">=</span> aPerformance<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>play <span class=\"token operator\">=</span> aPlay<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>이제 함수들을 계산기로 옮겨줌</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">enrichPerformance</span><span class=\"token punctuation\">(</span>aPerformance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">const</span> calculator <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PerformanceCalculator</span><span class=\"token punctuation\">(</span>aPerformance<span class=\"token punctuation\">,</span> <span class=\"token function\">playFor</span><span class=\"token punctuation\">(</span>aPerformance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> aPerformance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nresult<span class=\"token punctuation\">.</span>play <span class=\"token operator\">=</span> <span class=\"token function\">playFor</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// amountFor() 대신 계산기의 함수 이용</span>\nresult<span class=\"token punctuation\">.</span>amount <span class=\"token operator\">=</span> calculator<span class=\"token punctuation\">.</span>amount<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// volumeCreditsFor() 대신 계산기의 함수 이용</span>\nresult<span class=\"token punctuation\">.</span>volumeCredits <span class=\"token operator\">=</span> calculator<span class=\"token punctuation\">.</span>volumeCredits<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PerformanceCalculator</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// amountFor() 함수의 코드를 계산기 클래스로 복사</span>\n<span class=\"token keyword\">get</span> <span class=\"token function\">amount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>play<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">case</span> <span class=\"token string\">\"tragedy\"</span><span class=\"token operator\">:</span>\n   <span class=\"token comment\">// ...</span>\n\n <span class=\"token punctuation\">}</span>\n <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// volumeCreditsFor() 함수의 코드를 계산기 클래스로 복사</span>\n<span class=\"token keyword\">get</span> <span class=\"token function\">volumeCredits</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>상속 받은 서브클래스들을 활용하여 공연료 계산기를 다형성 버전으로 만들어 주고, 타입 코드를 서브클래스로 바꾸고, 생성자를 팩터리 함수로 바꿈</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">enrichPerformance</span><span class=\"token punctuation\">(</span>aPerformance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">// 생성자 대신 팩터리 함수 이용</span>\n <span class=\"token keyword\">const</span> calculator <span class=\"token operator\">=</span> <span class=\"token function\">createPerformanceCalculator</span><span class=\"token punctuation\">(</span>aPerformance<span class=\"token punctuation\">,</span> <span class=\"token function\">playFor</span><span class=\"token punctuation\">(</span>aPerformance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">createPerformanceCalculator</span><span class=\"token punctuation\">(</span>aPerformance<span class=\"token punctuation\">,</span> aPlay<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>aPlay<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">case</span> <span class=\"token string\">\"tragedy\"</span><span class=\"token operator\">:</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TragedyCalculator</span><span class=\"token punctuation\">(</span>aPerformance<span class=\"token punctuation\">,</span> aPlay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">case</span> <span class=\"token string\">\"comedy\"</span><span class=\"token operator\">:</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ComedyCalculator</span><span class=\"token punctuation\">(</span>aPerformance<span class=\"token punctuation\">,</span> aPlay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n     <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'...'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TragedyCalculator</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">PerformanceCalculator</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ComedyCalculator</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">PerformanceCalculator</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>그러면 조건부 로직을 다형성으로 바꿔줄 수 있음</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">TragedyCalculator</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">get</span> <span class=\"token function\">amount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token comment\">// ...</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PerformanceCalculator</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">get</span> <span class=\"token function\">amount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>play<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">case</span> <span class=\"token string\">'tragedy'</span><span class=\"token operator\">:</span>\n       <span class=\"token keyword\">throw</span> <span class=\"token string\">'오류 발생'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 비극 공연료는 TragedyCalculator를 이용하도록 유도</span>\n     <span class=\"token keyword\">case</span> <span class=\"token string\">'comedy'</span><span class=\"token operator\">:</span>\n     <span class=\"token comment\">// ...</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>장르를 통틀어서 공통되는 부분은 일반적인 경우를 기본으로 삼아 슈퍼클래스에 남겨두고, 장르마다 달라지는 부분은 필요할 때 오버라이드하게 만들어줌</li>\n</ol>\n<br>\n<h2 id=\"19-상태-점검-다형성을-활용하여-데이터-생성하기\" style=\"position:relative;\"><a href=\"#19-%EC%83%81%ED%83%9C-%EC%A0%90%EA%B2%80-%EB%8B%A4%ED%98%95%EC%84%B1%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%98%EC%97%AC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0\" aria-label=\"19 상태 점검 다형성을 활용하여 데이터 생성하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.9 상태 점검: 다형성을 활용하여 데이터 생성하기</h2>\n<ol>\n<li>두 개의 함수 <code class=\"language-text\">amountFor()</code>와 <code class=\"language-text\">volumeCreditsFor()</code>의 조건부 로직을 생성 함수 하나로 옮겨 같은 타입의 다형성을 기반으로 실행되는 함수를 모듈화했음</li>\n<li>계산기가 중간 데이터 구조를 채우게 한 지금의 코드와 달리 <code class=\"language-text\">createStatementData()</code>가 계산기 자체를 반환하게 구현해도 되지만, 여기서는 다형성 계산기를 사용한다는 사실을 숨기기보다는 중간 데이터 구조를 이용하는 방법을 보여주는 방식으로 작성했음</li>\n</ol>\n<br>\n<h2 id=\"110-마치며\" style=\"position:relative;\"><a href=\"#110-%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-label=\"110 마치며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.10 마치며</h2>\n<ol>\n<li>\n<p>이번 장에서 살펴본 리팩터링 기법들은 다음과 같음</p>\n<ul>\n<li>함수 추출</li>\n<li>변수 인라인</li>\n<li>함수 옮김</li>\n<li>조건부 로직을 다형성으로 바꿈</li>\n</ul>\n</li>\n<li>\n<p>이번 장의 예제에서는 리팩터링을 크게 세 단계로 진행 함</p>\n<ul>\n<li>원본 함수를 중첩 함수 여러 개로 나눔</li>\n<li>단계 쪼개기(계산 코드와 출력 코드를 분리함)</li>\n<li>계산 로직을 다형성으로 표현함</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>💡 좋은 코드를 가늠하는 확실한 방법은 ‘얼마나 수정하기 쉬운가’다.</p>\n</blockquote>\n<ul>\n<li>리팩터링을 효과적으로 하는 핵심은, 단계를 잘게 나눠야 더 빠르게 처리할 수 있고, 코드는 절대 깨지지 않으며, 이러한 작은 단계들이 모여서 상당히 큰 변화를 이룰 수 있다는 사실을 깨닫는 것</li>\n</ul>\n<br>\n<h3 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h3>\n<ul>\n<li><a href=\"https://www.yes24.com/Product/Goods/89649360\">리팩터링 2판 책</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#16-%EA%B3%84%EC%82%B0-%EB%8B%A8%EA%B3%84%EC%99%80-%ED%8F%AC%EB%A7%B7%ED%8C%85-%EB%8B%A8%EA%B3%84-%EB%B6%84%EB%A6%AC%ED%95%98%EA%B8%B0\">1.6 계산 단계와 포맷팅 단계 분리하기</a></li>\n<li><a href=\"#17-%EC%A4%91%EA%B0%84-%EC%A0%90%EA%B2%80-%EB%91%90-%ED%8C%8C%EC%9D%BC%EA%B3%BC-%EB%91%90-%EB%8B%A8%EA%B3%84%EB%A1%9C-%EB%B6%84%EB%A6%AC%EB%90%A8\">1.7 중간 점검: 두 파일(과 두 단계)로 분리됨</a></li>\n<li><a href=\"#18-%EB%8B%A4%ED%98%95%EC%84%B1%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%B4-%EA%B3%84%EC%82%B0-%EC%BD%94%EB%93%9C-%EC%9E%AC%EA%B5%AC%EC%84%B1%ED%95%98%EA%B8%B0\">1.8 다형성을 활용해 계산 코드 재구성하기</a></li>\n<li><a href=\"#19-%EC%83%81%ED%83%9C-%EC%A0%90%EA%B2%80-%EB%8B%A4%ED%98%95%EC%84%B1%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%98%EC%97%AC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0\">1.9 상태 점검: 다형성을 활용하여 데이터 생성하기</a></li>\n<li>\n<p><a href=\"#110-%EB%A7%88%EC%B9%98%EB%A9%B0\">1.10 마치며</a></p>\n<ul>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"1.6 계산 단계와 포맷팅 단계 분리하기 앞서 작성한 코드를 두 단계로 나눔 에 필요한 데이터를 처리 앞서 처리한 결과를 텍스트나 HTML로 표현 그 다음 함수를 추출 이때 계산 관련 코드는 전부  함수로 모으고 는 `data 매개변수로 전달된 데이터만 처리하게 만듦 연극 제목도 중간 데이터 구조에서 가져옴 이제  함수와  함수를 로 옮겨줌  안에서 와 를 호출하던 부분을 중간 데이터를 사용하도록 바꿔주고, 같은 방식으로 다른 중첩 함수들도 옮겨주었음 다음으로는 반복문을 파이프라인으로 바꿈 이제 에 필요한 데이터 처리에 해당하는 코드를 모두 별도 함수로 빼냄 마지막으로, 단계별로 분리한 코드를 별도 파일에 저장한 후 HTML 버전을 작성 함 1.7 중간 점검: 두 파일(과 두 단계)로 분리됨 statement.js createStatementData.js 함수를 추출하면서 코드량은 많이 늘었지만, 모듈화를 통해 전체 로직을 구성하는 요소 각각이 더 뚜렷해지고 계산하는 부분과 출력 …","frontmatter":{"date":"July 10, 2023","title":"리팩터링 1장-2","categories":"Study","author":"Kay","emoji":"👋"},"fields":{"slug":"/refactoring-1-2/"}},"next":{"id":"5346204c-0c4a-50e4-a974-b2a776df6d29","html":"<h2 id=\"한-주-회고\" style=\"position:relative;\"><a href=\"#%ED%95%9C-%EC%A3%BC-%ED%9A%8C%EA%B3%A0\" aria-label=\"한 주 회고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>한 주 회고</h2>\n<h3 id=\"협업\" style=\"position:relative;\"><a href=\"#%ED%98%91%EC%97%85\" aria-label=\"협업 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>협업</h3>\n<p>언제 다른 팀원분들과 협업하는 과정은 힘들면서도 많은 것을 배우는 것 같습니다. 이번 Sprint에서는 BE분들과 API 명세를 논의하는 회의에 참여하게 되었습니다. FE에서는 어떤 값들이 필요한지, 더 나아가 어떤 타입의 값들이 필요한지 명확하고 구체적으로 요구사항을 BE에게 확실하게 전달하는 모습을 보면서 단순히 UI를 그리기위한 API 명세 논의를 넘어 서비스 전반적으로 사용되어야 하는 데이터 값과 타입을 고려하면서 명세 논의하는 부분이 인상 깊었습니다.</p>\n<p>그리고 협업은 나 뿐만아니라 상대방의 상황을 고려하고 더 나아가 서비스 전반적인 상황을 생각해야 한다는 것을 이번 시간을 통해 다시 한번 생각해 보게 되었습니다. 리소스는 한정적인 상황에서 최대한 리소스를 효율적으로 사용하기 위해서는 좋은 협업을 통해 서비스 개발을 해야 한다는 것은 당연하면서도 중요하다는 것을 다시 한번 되내어 보았습니다.</p>\n<p>마지막으로 협업이라는 것 다른 팀원분들에게 영향을 주기 때문에 항상 내가 하는 업무를 꼼꼼히 다양한 경우를 고려해 개발을 완료해야, 다른 팀원분들의 업무 효율을 늘릴 수 있다는 것도 알게 되었습니다.</p>\n<br>\n<h3 id=\"tailwindcss-동적-스타일-적용\" style=\"position:relative;\"><a href=\"#tailwindcss-%EB%8F%99%EC%A0%81-%EC%8A%A4%ED%83%80%EC%9D%BC-%EC%A0%81%EC%9A%A9\" aria-label=\"tailwindcss 동적 스타일 적용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TailwindCSS 동적 스타일 적용</h3>\n<p>이번 스프린트 개발 도중에 동적으로 TailwindCSS를 적용하는 부분이 간혈적으로 되었다가 안 되는 문제가 발생했습니다.\n알고보니, TailwindCSS는 이미 지정된 ClassName이 있기 때문에 동적으로 ClassName을 만들어서 적용하게 되면 Style은 적용되지 않지만, HTML에 ClassName은 들어간다는 것을 확인하였습니다. 또한 TailwindCSS 공식 문서에서도 동적으로 ClassName을 사용하지 않고 이미 완성된 Style ClassName을 만들어 놓은 Mapping 함수를 만들어서 사용하라는 것도 알게 되었습니다.</p>\n<p>그리고 TailwindCSS가 동적으로 Style을 적용하는 사례로 있다고 해서 아래 참고 문서를 통해 알게 되었습니다.</p>\n<br>\n<h3 id=\"storybook\" style=\"position:relative;\"><a href=\"#storybook\" aria-label=\"storybook permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>StoryBook</h3>\n<p>디자인 QA를 위해 컴포넌트를 개발 후에 StoryBook으로 개발한 컴포넌트를 적용하는 과정을 진행했습니다. 이 과정 속에서 디자이너분들이 조금 더 손 쉽게 QA를 확인하는 방법에 대해 알게 되었고, UI와 UI가 아닌 비즈니스 로직을 의식적으로 분리시킬 수 있다는 사실도 알게 되었습니다.</p>\n<p>아직 StoryBook에 대해 깊게 학습하지 않았지만, 학습을 통해 더욱 효율적으로 디자이너분들과 빠르게 QA하고 개발할 수 있는 방법을 찾아 적용하면 재밋을 것 같다는 생각을 했습니다.</p>\n<br>\n<h3 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리</h3>\n<p>2023년 상반기가 지나가고 하반기가 시작되었습니다. 더욱 더 몸과 마음을 의식적으로 잘 관리해 더 나은 삶을 만들어 가고 싶은 생각이 드는 요즘입니다.</p>\n<p>잊고 있었던 꿈의 목록들을 펼쳐보며, 다시 한번 내가 원하는 것이 무엇인지 되내어보았습니다.</p>\n<p>흐르는 대로 삶을 사는 것이 아닌, 주체적으로 삶을 살아가고 싶은 생각이 많이 드는 여름입니다.</p>\n<p>생각에서 멈추는 것이 아닌, 작은 행동을 시작해 조금은 주체적인 삶을 살 수 있도록 다짐해봅니다.</p>\n<p>어쨋든 이번 한 주도 수고했습니다.</p>\n<br>\n<h3 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h3>\n<ul>\n<li><a href=\"https://tailwindcss.com/docs/content-configuration#dynamic-class-names\">공식문서</a></li>\n<li><a href=\"https://fe-developers.kakaoent.com/2022/220303-tailwind-tips\">카카오 TailwindCSS 적용 사례</a></li>\n<li><a href=\"https://www.yes24.com/Product/Goods/67211854\">책 - 유연함의 힘</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%ED%95%9C-%EC%A3%BC-%ED%9A%8C%EA%B3%A0\">한 주 회고</a></p>\n<ul>\n<li><a href=\"#%ED%98%91%EC%97%85\">협업</a></li>\n<li><a href=\"#tailwindcss-%EB%8F%99%EC%A0%81-%EC%8A%A4%ED%83%80%EC%9D%BC-%EC%A0%81%EC%9A%A9\">TailwindCSS 동적 스타일 적용</a></li>\n<li><a href=\"#storybook\">StoryBook</a></li>\n<li><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\">마무리</a></li>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"July 09, 2023","title":"7월 2주 회고","categories":"Log","author":"Kay","emoji":"👋"},"fields":{"slug":"/write-log-230709/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/refactoring-1-2/","nextSlug":"/write-log-230709/","prevSlug":""}},"staticQueryHashes":["1073350324","2938748437"]}