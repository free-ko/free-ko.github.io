{"componentChunkName":"component---src-templates-blog-template-js","path":"/study-js-functionalProgramming-7/","result":{"data":{"cur":{"id":"f93fe709-ac41-50f1-9524-01d1d8d1be24","html":"<h1 id=\"-복습\" style=\"position:relative;\"><a href=\"#-%EB%B3%B5%EC%8A%B5\" aria-label=\" 복습 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✅ 복습</h1>\n<h3 id=\"1부\" style=\"position:relative;\"><a href=\"#1%EB%B6%80\" aria-label=\"1부 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1부</h3>\n<ol>\n<li><b>액션, 계산, 데이터</b>로 나누는 것이 중요</li>\n<li>함수형 프로그래밍의 기본은 데이터를 변하는 것과 변하지 않는 것을 나뉘어서 구분하는 것</li>\n<li>명시적 입력과 출력을 만들자(불변성) Ex) <code class=\"language-text\">const</code> 를 통해서, 카피온라이트를 사용할 수 있다.</li>\n<li>계층적 구조 : 계산(스키마, 비즈니스로직, 유틸)</li>\n<li>\n<p><code class=\"language-text\">PipeLine</code>의 개념을 이해하는 것이 중요</p>\n<ul>\n<li><code class=\"language-text\">Data → Action → Action → Data -> ...</code> 의 구조를 아는 것이 중요</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"2부\" style=\"position:relative;\"><a href=\"#2%EB%B6%80\" aria-label=\"2부 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2부</h3>\n<ol>\n<li>\n<p>함수형 기법</p>\n<ul>\n<li>1급 함수 : 함수로 인자를 받고 반환하는 것</li>\n</ul>\n</li>\n<li>계산을 다시 비지니스 로직과 유틸로 구분하는 법을 배우면서 동시에 “함수형 언어가 가지고 있는 1급이라는 개념과 함수형 유틸성” 을 이해하기 위한 “기초”를 배우는 것</li>\n<li>\n<p>Iterator와 Generator는 실무 자바스크립트에서는 잘 쓰이지 않음</p>\n<ul>\n<li><code class=\"language-text\">액션 / 계산 / 데이터</code> 와 <code class=\"language-text\">파이프라인 아키텍쳐</code> 는 함수형 프로그래밍에서 중요</li>\n</ul>\n</li>\n<li>함수형 프로그래밍은 “유틸리티 함수들의 모음집” 같은 것이 아님</li>\n<li><strong>“함수형 프로그래밍이란 단방향 데이터 처리의 파이프라인”</strong> 이라는 감각이 이해가 된다면, Array의 map, filter, reduce를 그저 유틸리티 함수가 아니라, 함수형 프로그래밍의 관점에서 전혀 다른 시각으로 위 method들을 바라 볼 수 있음</li>\n</ol>\n<br/>\n<h1 id=\"️-배운-내용\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%EB%B0%B0%EC%9A%B4-%EB%82%B4%EC%9A%A9\" aria-label=\"️ 배운 내용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️ 배운 내용</h1>\n<ul>\n<li>\n<p>제너레이터를 통해 파이프라인 개념을 확장하는 유틸 개발</p>\n<ul>\n<li>불필요한 동작 없애기</li>\n</ul>\n</li>\n<li>지연평가와 파이프 라인 함수 만들기</li>\n<li>Util 함수들을 <code class=\"language-text\">Symbol.iterator</code>를 사용해서 <code class=\"language-text\">for - of</code>문 적용(map, filter, reduce)</li>\n<li>function의 최상위 타입은(Function → Object) Object가 최상위 타입이기 때문에, Arrow 함수에서 제너레이터를 사용할 수 없음</li>\n<li>\n<p>만약에 <code class=\"language-text\">forEach</code> Arr에 <strong>객체</strong>가 들어간다면??(이것을 고민하는 것이 성장을 합니다.)</p>\n<ul>\n<li>\n<p>함수 확장을 어떻게 할까? → 결국 지연평가인 iterable한것을 만든다.</p>\n<ul>\n<li>\n<p>조건문 처리(분기 처리) : array, obj</p>\n<ul>\n<li><code class=\"language-text\">if(Array instaneof obj)</code> 분기 처리 → <code class=\"language-text\">Iterable</code>로 만들기</li>\n</ul>\n</li>\n<li>조건문 축약 &#x26; 변수 합치기</li>\n<li>전역변수 반환</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h1 id=\"️-질문--대답\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%EC%A7%88%EB%AC%B8--%EB%8C%80%EB%8B%B5\" aria-label=\"️ 질문  대답 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>⭐️ 질문 &#x26; 대답</h1>\n<ul>\n<li>에로우 함수 특징 : this가 undfeind이여서 사용 하지 않음, arg 없음</li>\n<li>\n<p>지연 평가를 사용하는 이유</p>\n<ul>\n<li>ES6, 이터레이터가 V8엔진에서 최적화 작업을 해 놓았기 때문에 일반 map 보다 거의 30배 가량 빠름</li>\n</ul>\n</li>\n<li><code class=\"language-text\">맞는가?</code> 가를 고민하기 보다는 <code class=\"language-text\">최선인가?</code> 라는 질문이 더 좋다. ex) lodash가 그만큼 고민을 해서 만들어졌기 때문에 우리가 따라가면서 ‘왜’이렇게 작성했는지 고민해보자.</li>\n</ul>\n<br/>\n<h3 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h3>\n<ul>\n<li><a href=\"https://github.com/FECrash/FunctionalProgramming\">함수형 프로그래밍 스터디</a></li>\n<li><a href=\"https://armadillo-dev.github.io/javascript/whit-is-lazy-evaluation/\">지연평가를 통한 성능 개선</a></li>\n<li>\n<p>유인동님 강의</p>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=Y8d5P9M51xs\">https://www.youtube.com/watch?v=Y8d5P9M51xs</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=4sO0aWTd3yc\">https://www.youtube.com/watch?v=4sO0aWTd3yc</a></li>\n</ul>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1%EB%B6%80\">1부</a></li>\n<li><a href=\"#2%EB%B6%80\">2부</a></li>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>\n</div>","excerpt":"✅ 복습 1부 액션, 계산, 데이터로 나누는 것이 중요 함수형 프로그래밍의 기본은 데이터를 변하는 것과 변하지 않는 것을 나뉘어서 구분하는 것 명시적 입력과 출력을 만들자(불변성) Ex)  를 통해서, 카피온라이트를 사용할 수 있다. 계층적 구조 : 계산(스키마, 비즈니스로직, 유틸) 의 개념을 이해하는 것이 중요  의 구조를 아는 것이 중요 2부 함수형 기법 1급 함수 : 함수로 인자를 받고 반환하는 것 계산을 다시 비지니스 로직과 유틸로 구분하는 법을 배우면서 동시에 “함수형 언어가 가지고 있는 1급이라는 개념과 함수형 유틸성” 을 이해하기 위한 “기초”를 배우는 것 Iterator와 Generator는 실무 자바스크립트에서는 잘 쓰이지 않음  와  는 함수형 프로그래밍에서 중요 함수형 프로그래밍은 “유틸리티 함수들의 모음집” 같은 것이 아님 “함수형 프로그래밍이란 단방향 데이터 처리의 파이프라인” 이라는 감각이 이해가 된다면, Array의 map, filter, reduce를…","frontmatter":{"date":"February 01, 2023","title":"함수형 프로그래밍 - 스터디 7주차","categories":"Study","author":"Kay","emoji":"👨‍💻"},"fields":{"slug":"/study-js-functionalProgramming-7/"}},"next":{"id":"e75fcbe5-f1dc-5627-b6b2-0900caffc6b5","html":"<h1 id=\"-함수형-프로그래밍-복습\" style=\"position:relative;\"><a href=\"#-%ED%95%A8%EC%88%98%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EB%B3%B5%EC%8A%B5\" aria-label=\" 함수형 프로그래밍 복습 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💻 함수형 프로그래밍 복습</h1>\n<ol>\n<li>\n<p>프로그래밍</p>\n<ul>\n<li>데이터 = State</li>\n<li>데이터 → 데이터 → …(반복)</li>\n<li>데이터(State)를 관리하는 것</li>\n</ul>\n</li>\n<li>\n<p>함수형 프로그래밍</p>\n<ul>\n<li>상태의 변화를 바라보는 즉 변화시키는 함수를 분리</li>\n<li>상태를 변화시키는 것 = 액션</li>\n<li>\n<p>상태를 변화시키지 않은 것 = 계산(계층을 나눔 - <code class=\"language-text\">비즈니스, 스키마, 유틸</code>)</p>\n<ul>\n<li>비즈니스, 스키마는 해당 도메인과 연관됨 즉, 좋은 유틸을 많이 만들어서 수정을 최소화 시켜서 개발을 진행해야 합니다.</li>\n<li>스키마 : 데이터 구조 ex) <code class=\"language-text\">TS, caclutateArg</code></li>\n<li>비즈니스 : 요구사항 ex) 가격 15,000원 이하 상품을 찾아주세요.</li>\n<li>ex) 좋은 유틸 - <code class=\"language-text\">reduce, filter, map</code> 등</li>\n</ul>\n</li>\n<li>JS가 함수형프로그래밍을 지원하는 것 중 하나는 <code class=\"language-text\">일급개념</code>(인자로 함수를 넣을 수 있고, 리턴을 함수로 할 수 있는 것)</li>\n<li>DRY → 함수형프로그래밍에서 <b>반복적인 코드</b>를 어떻게 제거하는지 기법을 알아보자</li>\n</ul>\n</li>\n<li>\n<p>일급 함수(JS가 지원)</p>\n<ul>\n<li>입력값과, 반환값이 모두 들어올 수 있다는 것이 <code class=\"language-text\">일급</code> 입니다.(즉, 함수도 포함)</li>\n</ul>\n</li>\n<li>불변성(JS는 지원해주지 않음)</li>\n<li>결국 <code class=\"language-text\">for, if</code>문을 쓰지 않고, 계산 함수를 사용</li>\n</ol>\n<br/>\n<h1 id=\"️-배운-내용\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%EB%B0%B0%EC%9A%B4-%EB%82%B4%EC%9A%A9\" aria-label=\"️ 배운 내용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️ 배운 내용</h1>\n<ul>\n<li>\n<p>커링</p>\n<ul>\n<li>함수로 반환해서, 나중에 얻어지는 값을 나중에 인자로 넣을 수 있음</li>\n<li>\n<p>지연평가를 가능함 <code class=\"language-text\">Redux MiddleWare</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sum</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">+</span> b\n<span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ul>\n<p>const sum = (a) => (b) => a + b\nsum(3)(5)</p>\n<p>const sum3 = sum(3);\nsum3(5);</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>\n</li>\n<li>\n<p>함수의 합성(체이닝 - Pipe)</p>\n<ul>\n<li>\n<p>Pipe와 커링이 합쳐진 형태</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 데이터를 먼저 넣지 않고 원하는 동작을 먼저 만들 수 있습니다.</span>\n<span class=\"token keyword\">const</span> fgz <span class=\"token operator\">=</span> <span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span>g<span class=\"token punctuation\">,</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n<p>// 나중에 데이터를 사용할 수 있습니다.\nconst result = fgz(data);</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>\n</li>\n<li>\n<p>커링과 함수의 합성을 통해, 유틸 함수를 만들어서 계산만 뽑아서 사용하는 계산 함수를 만들 수 있음</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">add5</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">+</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">dobule</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">*</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> actions <span class=\"token operator\">=</span> <span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>add5<span class=\"token punctuation\">,</span> dobule<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">actions</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 100</span></code></pre></div>\n</li>\n</ul>\n<br/>\n<h3 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h3>\n<ul>\n<li><a href=\"https://github.com/FECrash/FunctionalProgramming\">함수형 프로그래밍 스터디</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>\n</div>","frontmatter":{"date":"January 31, 2023","title":"함수형 프로그래밍 - 스터디 6주차","categories":"Study","author":"Kay","emoji":"👨‍💻"},"fields":{"slug":"/study-js-functionalProgramming-6/"}},"prev":{"id":"a85a2519-fa47-5de3-a6e6-2c0cb9f7f33c","html":"<h1 id=\"-배운-내용\" style=\"position:relative;\"><a href=\"#-%EB%B0%B0%EC%9A%B4-%EB%82%B4%EC%9A%A9\" aria-label=\" 배운 내용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💪 배운 내용</h1>\n<h3 id=\"함수형-관점에서-시간비동기-바라보기\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98%ED%98%95-%EA%B4%80%EC%A0%90%EC%97%90%EC%84%9C-%EC%8B%9C%EA%B0%84%EB%B9%84%EB%8F%99%EA%B8%B0-%EB%B0%94%EB%9D%BC%EB%B3%B4%EA%B8%B0\" aria-label=\"함수형 관점에서 시간비동기 바라보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수형 관점에서 시간(비동기) 바라보기</h3>\n<p>시간(액션) → 데이터로 생각해보기 → 중간에 분기 역할을 하는 것이 존재 하고 이러한 것을 모나드라고 한다. Promise의 구현된 코드를 파악해보자</p>\n<ol>\n<li>\n<p><code class=\"language-text\">callback</code></p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>\n<p>함수형 관점에서 callback의 문제점은?</p>\n<ul>\n<li>위의 코드는 명시적 출력이 없기 때문에 액션임</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">promise</code>로 만들게 되면 명시적 출력을 통해 값을 만들 수 있음</p>\n<ul>\n<li>액션(동작)을 값(데이터)로 만들 수 있음</li>\n<li>즉, 액션을 계산으로 그리고 계산으로 생각하는 것이 모나드 개념</li>\n</ul>\n</li>\n<li><strong>액션 → 계산 → 액션 → 계산 → 액션 → 데이터</strong>와 같은 과정에성 중간에 시간과 같은 액션이 들어올 때 처리 하는 방법 중 하나가 <code class=\"language-text\">Promise</code>이다.(<code class=\"language-text\">try - catch</code>)</li>\n</ol>\n<br/>\n<h1 id=\"️-실습\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%EC%8B%A4%EC%8A%B5\" aria-label=\"️ 실습 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>⭐️ 실습</h1>\n<ol>\n<li>\n<p><code class=\"language-text\">Promise</code> 구현하기</p>\n<ul>\n<li>성공 Case와 실패 Case를 구분</li>\n</ul>\n</li>\n</ol>\n <br/>\n<h1 id=\"-정리\" style=\"position:relative;\"><a href=\"#-%EC%A0%95%EB%A6%AC\" aria-label=\" 정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌈 정리</h1>\n<ol>\n<li>우리는 액션을 계산으로 분리시키는 작업을 진행</li>\n<li>계산을 명시적 입력과 출력으로 바꾸는 리팩토링 과정을 진행</li>\n<li>계산들을 모아서 하나의 계산으로 만들고 나중에 인자를 넣는 Pipe 함수를 실습함</li>\n<li>제너레이터를 만들어서 순차적인 계산 함수를 실행하는 것이 아니라, 병렬적으로 계산 함수들을 실행시켜 실행 속도를 급격히 증가시키는 실습을 함</li>\n<li>\n<p>계산들 안에서 시간(Promise)의 개념이 존재하는 Obserable(Array, Iterator, Promise)를 통해 3번의 Click 이벤트를 실행할 수 있음\n—> <code class=\"language-text\">Obserable</code>를 통해 실무에 적용할 수 있도록 하는 것이 우리의 목표</p>\n<ul>\n<li>ex) 백엔드로 부터 8초 이내의 데이터를 가져오지 못할 경우 retry를 3회 하고 데이터가 진짜 안오면 특정 데이터를 셋팅한다</li>\n<li>ex) React Query - retry</li>\n</ul>\n</li>\n<li>백엔드는 하나의 인풋이 존재하지만, 프론트 엔드 유저의 행동에 따라 다양한 인풋이 존재 하게 된다. 그러면 시간의 개념이 들어가게되면 이 때, <code class=\"language-text\">Obserable</code> 를 통해 처리 가능</li>\n</ol>\n<br/>\n<h3 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h3>\n<ul>\n<li><a href=\"https://github.com/FECrash/FunctionalProgramming\">함수형 프로그래밍 스터디</a></li>\n<li><a href=\"https://teamdable.github.io/techblog/Moand-and-Functional-Architecture\">모나드와 함수형 아키텍처</a></li>\n<li><a href=\"https://medium.com/@linlinghao/async-code-from-vanilla-javascript-to-promises-to-async-await-fc440d9818dd\">JS에서 Promise 관련 자료</a></li>\n<li><a href=\"https://p-iknow.netlify.app/js/custom-promise\">Custom Promise 구현으로 프로미스 파혜치기</a></li>\n<li><a href=\"https://blog.hyunmin.dev/14\">자바스크립트의 Promise 직접 구현하기</a></li>\n<li><a href=\"https://velog.io/@turtle601/JS-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-Promise-%EA%B0%9D%EC%B2%B4-%EC%A7%81%EC%A0%91-%EA%B5%AC%ED%98%84%ED%95%B4%EB%B3%B4%EA%B8%B0\">[JS] 자바스크립트 Promise 객체 직접 구현해보기</a></li>\n<li><a href=\"https://github.com/tc39/proposal-observable/blob/master/src/Observable.js\">Oberable</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%ED%95%A8%EC%88%98%ED%98%95-%EA%B4%80%EC%A0%90%EC%97%90%EC%84%9C-%EC%8B%9C%EA%B0%84%EB%B9%84%EB%8F%99%EA%B8%B0-%EB%B0%94%EB%9D%BC%EB%B3%B4%EA%B8%B0\">함수형 관점에서 시간(비동기) 바라보기</a></li>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>\n</div>","frontmatter":{"date":"February 02, 2023","title":"함수형 프로그래밍 - 스터디 8주차","categories":"Study","author":"Kay","emoji":"👨‍💻"},"fields":{"slug":"/study-js-functionalProgramming-8/"}},"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":"zoomkoding/zoomkoding-gatsby-blog"}}}}},"pageContext":{"slug":"/study-js-functionalProgramming-7/","nextSlug":"/study-js-functionalProgramming-6/","prevSlug":"/study-js-functionalProgramming-8/"}},"staticQueryHashes":["1073350324","2938748437"]}