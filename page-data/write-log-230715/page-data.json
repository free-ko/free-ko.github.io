{"componentChunkName":"component---src-templates-blog-template-js","path":"/write-log-230715/","result":{"data":{"cur":{"id":"6e0d926f-7e9f-52b0-ba52-586a119d8fbf","html":"<h2 id=\"한-주-회고\" style=\"position:relative;\"><a href=\"#%ED%95%9C-%EC%A3%BC-%ED%9A%8C%EA%B3%A0\" aria-label=\"한 주 회고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>한 주 회고</h2>\n<h2 id=\"error-boundary--suspense\" style=\"position:relative;\"><a href=\"#error-boundary--suspense\" aria-label=\"error boundary  suspense permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Error Boundary &#x26; Suspense</h2>\n<p>이번 스프린트에서는 하나의 컴포넌트 안에 Error Boundary와 Suspense를 감싸는 구조로 만드는 작업을 함께 진행했습니다.\n이렇게 하게 되면, 컴포넌트 안에서 API 실패 및 로딩을 컴포넌트 마다 커스텀하게 관리할 수 있는 장점과 이번 스프린트의 요구사항에 적합했기에 적용하게 되었습니다. 이 과정에서 <code class=\"language-text\">react-error-boundary</code>외부 라이브러와 React 18버젼부터 제공하는 <code class=\"language-text\">Suspense</code> 기능을 함께 도입해 적용하게 되었습니다.</p>\n<p><code class=\"language-text\">react-error-boundary</code>의 가장 큰 장점은 React에서 Error Boundary를 재사용과 커스텀하게 관리 할 수 있다는 점입니다.\nfallback 구조가 Suspense와 비슷해서 사용하기 편리 했습니다.</p>\n<p>또한 useQuery와 함께 사용할 때 <code class=\"language-text\">useQueryErrorResetBoundary</code>를 통해 API를 재호출 할 때 함께 사용할 수 있어서 너무 좋았습니다.\n참고로 useQuery를 작성할 때, 옵션으로 <code class=\"language-text\">useErrorBoundary: true &amp; suspense: true</code>로 지정해야 아래와 같이 사용할 수 있습니다.</p>\n<p>즉, 아래와 같이 코드를 작성함으로써 API 호출 상태에 따른 UI를 제공해서 사용자의 경험을 해치지 않도록 할 수 있었습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token string\">'use client'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ErrorBoundary <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-error-boundary'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useQueryErrorResetBoundary <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@tanstack/react-query'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> reset <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useQueryErrorResetBoundary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">UIComponent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ErrorBoundary</span></span> <span class=\"token attr-name\">onReset</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>reset<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">fallback</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token constant\">UI</span><span class=\"token punctuation\">.</span>ErrorFallbackUI<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Suspense</span></span> <span class=\"token attr-name\">fallback</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">UI.Skeleton</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">UI</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Suspense</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ErrorBoundary</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<h2 id=\"생각\" style=\"position:relative;\"><a href=\"#%EC%83%9D%EA%B0%81\" aria-label=\"생각 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생각</h2>\n<p>사는대로 생각하는 것이 아니라, 생각한 대로 살 수 있도록 의식적으로 연습하자.</p>\n<p>삶을 만들어 가는 것이다.</p>\n<p>주어진 환경 속에서도 어떻게든 배울 수 있는 것들을 배워서 내것으로 만들어 나만의 삶을 만들어 가자.</p>\n<p>비가 와서 그런가 생각이 많아지는 날들이 많다.</p>\n<br>\n<h3 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h3>\n<ul>\n<li><a href=\"https://www.daleseo.com/react-suspense/\">React Suspense 소개</a></li>\n<li><a href=\"https://www.npmjs.com/package/react-error-boundary\">React-Error-Boundary</a></li>\n<li><a href=\"https://tanstack.com/query/v4/docs/react/reference/useQueryErrorResetBoundary\">useQueryErrorResetBoundary</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%ED%95%9C-%EC%A3%BC-%ED%9A%8C%EA%B3%A0\">한 주 회고</a></li>\n<li><a href=\"#error-boundary--suspense\">Error Boundary &#x26; Suspense</a></li>\n<li>\n<p><a href=\"#%EC%83%9D%EA%B0%81\">생각</a></p>\n<ul>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"한 주 회고 Error Boundary & Suspense 이번 스프린트에서는 하나의 컴포넌트 안에 Error Boundary와 Suspense를 감싸는 구조로 만드는 작업을 함께 진행했습니다.\n이렇게 하게 되면, 컴포넌트 안에서 API 실패 및 로딩을 컴포넌트 마다 커스텀하게 관리할 수 있는 장점과 이번 스프린트의 요구사항에 적합했기에 적용하게 되었습니다. 이 과정에서 외부 라이브러와 React 18버젼부터 제공하는  기능을 함께 도입해 적용하게 되었습니다. 의 가장 큰 장점은 React에서 Error Boundary를 재사용과 커스텀하게 관리 할 수 있다는 점입니다.\nfallback 구조가 Suspense와 비슷해서 사용하기 편리 했습니다. 또한 useQuery와 함께 사용할 때 를 통해 API를 재호출 할 때 함께 사용할 수 있어서 너무 좋았습니다.\n참고로 useQuery를 작성할 때, 옵션으로 로 지정해야 아래와 같이 사용할 수 있습니다. 즉, 아래와 같이 코드를 작성함으로…","frontmatter":{"date":"July 15, 2023","title":"7월 3주 회고","categories":"Log","author":"Kay","emoji":"👋"},"fields":{"slug":"/write-log-230715/"}},"next":{"id":"a14fd003-4479-5ae7-94be-6e6ad1eb9022","html":"<h2 id=\"21-리팩터링-정의\" style=\"position:relative;\"><a href=\"#21-%EB%A6%AC%ED%8C%A9%ED%84%B0%EB%A7%81-%EC%A0%95%EC%9D%98\" aria-label=\"21 리팩터링 정의 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.1 리팩터링 정의</h2>\n<ol>\n<li>리팩터링의 사전적 정의</li>\n</ol>\n<blockquote>\n<p>소프트웨어의 겉보기 동작은 그대로 유지한 채, 코드를 이해하고 수정하기 쉽도록 내부 구조를 변경하는 기법</p>\n</blockquote>\n<ol start=\"2\">\n<li>\n<p>리팩터링 이란</p>\n<ul>\n<li>동작을 보존하는 작은 단계들을 거쳐 코드를 수정하고, 이러한 단계들을 순차적으로 연결하여 큰 변화를 만들어내는 일</li>\n<li>“재구성” 의 특수한 한 형태</li>\n<li>단계를 작게 나눔으로써 구성을 체계화할 수 있고, 디버깅 시간을 단축할 수 있음</li>\n<li>사용자 관점에서는 달라지는 점이 없음</li>\n<li>리팩터링 과정에서 발견된 버그는 리팩터링 후에도 그대로 남아 있어야 함</li>\n<li>성능 최적화와 비슷</li>\n<li>코드를 이해하고 수정하기 쉽게 만드는 것</li>\n</ul>\n</li>\n</ol>\n<br>\n<h2 id=\"22-두-개의-모자\" style=\"position:relative;\"><a href=\"#22-%EB%91%90-%EA%B0%9C%EC%9D%98-%EB%AA%A8%EC%9E%90\" aria-label=\"22 두 개의 모자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.2 두 개의 모자</h2>\n<ol>\n<li>켄트 백은 소프트웨어 개발의 목적을 <code class=\"language-text\">기능 추가</code> 또는 <code class=\"language-text\">리팩터링</code> 으로 나누고, 이를 두 개의 모자라고 명명한다.</li>\n<li><code class=\"language-text\">기능 추가</code> 시에는 기존 코드는 절대 건드리지 않고 새 기능을 추가하기만 한다.</li>\n<li>반면 <code class=\"language-text\">리팩터링</code> 시에는 기능 추가는 절대 하지 말아야 한다. (테스트도 새로 만들지 않는다)</li>\n</ol>\n<br>\n<h2 id=\"23-리팩터링하는-이유\" style=\"position:relative;\"><a href=\"#23-%EB%A6%AC%ED%8C%A9%ED%84%B0%EB%A7%81%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0\" aria-label=\"23 리팩터링하는 이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.3 리팩터링하는 이유</h2>\n<ol>\n<li>\n<p>리팩터링하면 소프트웨어 설계가 좋아짐</p>\n<ul>\n<li>리팩터링하지 않으면 코드 구조가 무너지고, 설계를 유지하기 어려워지고, 더욱 빨리 부패함</li>\n<li>중복 코드를 제거하여 코드량을 줄인다고 시스템이 빨라지는 것은 않지만, 수정하는 데 드는 노력과 이해해야할 코드량이 크게 줄어듬</li>\n</ul>\n</li>\n<li>\n<p>리팩터링하면 소프트웨어를 이해하기 쉬워짐</p>\n<ul>\n<li>다른 사람이 내 코드를 이해할 수 있도록 작성해야 함</li>\n<li>리팩터링은 코드가 더 잘 읽히게 도와줌</li>\n<li>코드의 목적이 더 잘 드러나게, 내 의도를 더 명확하게 전달하도록 개선할 수 있음</li>\n<li>추후에 나 자신이 코드를 다시 봤을 때 이해하기도 쉬워 짐</li>\n</ul>\n</li>\n<li>\n<p>리팩터링하면 프로그래밍 속도를 높일 수 있음</p>\n<ul>\n<li>내부 설계가 잘 된 소프트웨어는 새로운 기능을 추가할 지점과 어떻게 고칠지를 쉽게 찾을 수 있음</li>\n<li>모듈화가 잘 되어 있으면 전체 코드베이스 중 작은 일부만 이해하면 됨</li>\n<li>저자는 이를 ‘지구력 가설’ 이라고 부름</li>\n<li>내부 설계에 심혈을 기울이면 소프트웨어의 지구력이 높아져서 빠르게 개발할 수 있는 상태를 더 오래 지속할 수 있음</li>\n</ul>\n</li>\n</ol>\n<br>\n<h2 id=\"24-리팩터링-해야-하는-시기\" style=\"position:relative;\"><a href=\"#24-%EB%A6%AC%ED%8C%A9%ED%84%B0%EB%A7%81-%ED%95%B4%EC%95%BC-%ED%95%98%EB%8A%94-%EC%8B%9C%EA%B8%B0\" aria-label=\"24 리팩터링 해야 하는 시기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.4 리팩터링 해야 하는 시기</h2>\n<ol>\n<li>\n<p>3의 법칙</p>\n<ul>\n<li>처음에 그냥 진행</li>\n<li>비슷한 일을 두 번째로 하게 되면, 일단 계속 진행</li>\n<li>비슷한 일을 세 번째 하게 되면 리팩터링 진행</li>\n</ul>\n</li>\n<li>\n<p>준비를 위한 리팩터링(기능을 쉽게 추가하게 만들기)</p>\n<ul>\n<li>리팩터링하기 가장 좋은 시점은 코드베이스에 기능을 새로 추가하기 직전</li>\n<li>이 시점에 현재 코드를 살펴보면서, 구조를 살짝 바꾸면 다른 작업을 하기가 훨씬 쉬워질 만한 부분을 찾음</li>\n<li>버그를 잡을 때도 마찬가지</li>\n<li>상황을 개선해놓으면 버그가 수정된 상태가 오래 지속될 가능성을 높이는 동시에, 같은 곳에서 다른 버그가 발생할 가능성을 줄여 줌</li>\n</ul>\n</li>\n<li>\n<p>이해를 위한 리팩터링(코드를 이해하기 쉽게 만들기)</p>\n<ul>\n<li>코드를 수정하려면 먼저 그 코드가 하는 일을 파악해야 함</li>\n<li>그 코드의 의도가 더 명확하게 드러나도록 리팩터링할 여지는 없는지 찾아봐야 함</li>\n</ul>\n</li>\n<li>\n<p>쓰레기 줍기 리팩터링</p>\n<ul>\n<li>간단히 수정할 수 있는 것은 즉시 고치고, 시간이 좀 걸리는 일은 짧은 메모만 남긴 다음, 하던 일을 끝내고 나서 처리 함</li>\n</ul>\n</li>\n<li>\n<p>코드 리뷰에 리팩터링 활용</p>\n<ul>\n<li>코드 리뷰는 개발팀 전체에 지식을 전파하는 데 좋으며, 다른 사람의 아이디어를 얻을 수 있음</li>\n<li>리팩터링은 다른 이의 코드를 리뷰하는 데도 도움이 됨</li>\n<li>리팩터링은 코드 리뷰의 결과를 더 구체적으로 도출하는 데에도 도움</li>\n<li>내가 떠올린 아이디어를 실제로 적용했을 때의 모습을 더 명확하게 볼 수 있음 cf) 짝 프로그래밍</li>\n</ul>\n</li>\n<li>\n<p>관리자에게는 뭐라고 말해야 할까?</p>\n<ul>\n<li>“리팩터링한다고 말하지 말라”. 구체적인 방법은 개발자가 판단해야 함</li>\n<li>프로 개발자에게 주어진 임무는 새로운 기능을 빠르게 구현하는 것이고, 가장 빠른 방법은 리팩터링 임</li>\n</ul>\n</li>\n<li>\n<p>리팩터링하지 말아야 할 때</p>\n<ul>\n<li>지저분한 코드를 발견해도 굳이 수정할 필요가 없다면 리팩터링하지 않음</li>\n<li>내부 동작을 이해해야 할 시점에 리팩터링해야 효과를 제대로 볼 수 있음</li>\n<li>리팩터링하는 것보다 처음부터 새로 작성하는 게 쉬울 때도 리팩터링하지 않음</li>\n<li>이 결정에는 뛰어난 판단력과 경험이 뒷받침되어야 함</li>\n</ul>\n</li>\n</ol>\n<br>\n<h2 id=\"25-리팩터링-시-고려할-문제\" style=\"position:relative;\"><a href=\"#25-%EB%A6%AC%ED%8C%A9%ED%84%B0%EB%A7%81-%EC%8B%9C-%EA%B3%A0%EB%A0%A4%ED%95%A0-%EB%AC%B8%EC%A0%9C\" aria-label=\"25 리팩터링 시 고려할 문제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.5 리팩터링 시 고려할 문제</h2>\n<ol>\n<li>\n<p>새 기능 개발 속도 저하</p>\n<blockquote>\n<p>리팩터링의 궁극적인 목적은 개발 속도를 높여서, 더 적은 노력으로 더 많은 가치를 창출하는 것</p>\n</blockquote>\n<ul>\n<li>균형점을 잡아야 함</li>\n<li>준비를 위한 리팩터링이라면 주저하지 않고 시작함</li>\n<li>반면 내가 직접 건드릴 일이 거의 없거나, 불편한 정도가 그리 심하지 않다고 판단되면 리팩터링하지 않음</li>\n<li>코드베이스를 건강하게 만드는 것에 대해 팀원들에게 공감대를 형성해야 함</li>\n<li>그러나 리팩터링의 본질은 코드베이스를 예쁘게 꾸미는 것이 아니며, 오로지 경제적인 이유</li>\n<li>리팩터링은 개발 기간을 단축하고자 하는 것</li>\n</ul>\n</li>\n<li>\n<p>코드 소유권</p>\n<ul>\n<li>리팩터링하다 보면 모듈의 내부뿐 아니라 시스템의 다른 부분과 연동하는 방식에도 영향을 주는 경우가 많음</li>\n<li>코드 소유권이 나뉘어 있으면 리팩터링에 방해가 됨</li>\n<li>하지만 제약이 따르더라도 리팩터링을 해야 함</li>\n<li>저자가 선호하는 방식은 코드의 소유권을 팀에 두는 것</li>\n<li>그래서 팀원이라면 누구나 팀이 소유한 코드를 수정할 수 있게 해야 함</li>\n</ul>\n</li>\n<li>\n<p>브랜치</p>\n<ul>\n<li>브랜치-마스터를 사용하는 방식은 독립 브랜치로 작업하는 기간이 길어질수록 작업 결과를 마스터로 통합하기가 어려워진다는 단점이 있음</li>\n<li>기능별 브랜치의 통합 주기는 짧게 관리해야 함</li>\n<li>이 방식을 지속적 통합(CI; Continuous Integration), 또는 트렁크 기반 개발(TBD; Trunk-Based Development)이라 함</li>\n<li>CI는 코드 전반에 거쳐 자잘하게 수정해야 하는 경우가 많을 때 도움이 됨</li>\n</ul>\n</li>\n<li>\n<p>테스팅</p>\n<ul>\n<li>리팩터링을 하면서 프로그램의 겉보기 동작은 똑같이 유지해야 함</li>\n<li>실수하여 동작이 깨지더라도 오류를 재빨리 해결할 수 있어야 함</li>\n<li>리팩터링하기 위해서는 자가 테스트 코드를 마련해야 함</li>\n<li>자가 테스트 코드는 리팩터링을 할 수 있게 해줄 뿐만 아니라, 새 기능 추가도 훨씬 안전하게 진행할 수 있도록 도와줌</li>\n<li>또한 리팩터링 과정에서 버그가 생길 위험이 아주 크다는 불안감을 해소할 수 있음</li>\n<li>자가 테스트 코드는 통합 과정에서 발생하는 의미 충돌을 잡는 메커니즘으로 활용할 수 있어서 자연스럽게 CI와도 밀접하게 연관됨</li>\n</ul>\n</li>\n<li>\n<p>레거시 코드</p>\n<ul>\n<li>레거시 시스템을 파악할 때 리팩터링이 굉장히 도움됨</li>\n<li>대규모 레거시 시스템에는 테스트를 보강해야 함</li>\n<li>프로그램에서 테스트를 추가할 틈새를 찾아서 시스템을 테스트해야 함</li>\n<li>이러한 틈새를 만들 때 리팩터링이 활용됨</li>\n<li>서로 관련된 부분끼리 나눠서 하나씩 공략하는 것이 좋음</li>\n<li>코드의 한 부분을 훑고 넘어갈 때마다 예전보다 조금이라도 개선하려고 노력하며, 레거시 시스템의 규모가 크다면 자주 보는 부분을 더 많이 리팩터링 해 함</li>\n</ul>\n</li>\n<li>\n<p>데이터베이스</p>\n<ul>\n<li>데이터베이스의 변경도 다른 리팩터링과 마찬가지로 전체 변경 과정을 작고 독립된 단계들로 쪼개는 것이 핵심</li>\n<li>그러나 데이터베이스 리팩터링은 프로덕션 환경에 여러 단계로 나눠서 릴리스하는 것이 대체로 좋다는 점에서 다른 리팩터링과 다름</li>\n<li>이렇게 하면 프로덕션 환경에서 문제가 생겼을 때 변경을 되돌리기 쉬움</li>\n</ul>\n</li>\n</ol>\n<br>\n<h2 id=\"26-리팩터링-아키텍쳐-애그니yagni\" style=\"position:relative;\"><a href=\"#26-%EB%A6%AC%ED%8C%A9%ED%84%B0%EB%A7%81-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90-%EC%95%A0%EA%B7%B8%EB%8B%88yagni\" aria-label=\"26 리팩터링 아키텍쳐 애그니yagni permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.6 리팩터링, 아키텍쳐, 애그니(YAGNI)</h2>\n<ul>\n<li>리팩터링은 소프트웨어 아키텍처를 바라보는 관점을 완전히 바꿔놓음</li>\n<li>리팩터링은 요구사항 변화에 자연스럽게 대응하도록 코드베이스를 잘 설계해 줌</li>\n<li>향후 변경에 유연하게 대처할 수 있는 유연성 메커니즘을 소프트웨어에 심어둘 수 있음</li>\n<li>함수 정의 시 다양한 예상 시나리오에 대응하기 위한 매개변수들을 추가하는 것이 그 예</li>\n<li>유연성 메커니즘을 구현하는 데 추가적으로 치러야 할 비용들이 있지만, 리팩터링을 활용하면 다르게 접근할 수 있음</li>\n<li>미래에 필요해질 유연성과 그 변화에 가장 잘 대응할 수 있는 추측 대신, 그저 현재까지 파악한 요구사항만을 해결하는 소프트웨어를 구축하고 진행하면서 아키텍처도 그에 맞게 리팩터링해서 바꿈</li>\n<li>이런 식의 설계 방식을 ‘간결한 설계’, ‘점진적 설계’, ‘YAGNI(you aren’t going to need it’) 등으로 부름ㅁ</li>\n<li>나중에 문제를 더 깊이 이해하게 됐을 때 처리하는 쪽이 훨씬 나을 수도 있음</li>\n</ul>\n<br>\n<h2 id=\"27-리팩터링과-소프트웨어-개발-프로세스\" style=\"position:relative;\"><a href=\"#27-%EB%A6%AC%ED%8C%A9%ED%84%B0%EB%A7%81%EA%B3%BC-%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4-%EA%B0%9C%EB%B0%9C-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4\" aria-label=\"27 리팩터링과 소프트웨어 개발 프로세스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.7 리팩터링과 소프트웨어 개발 프로세스</h2>\n<ul>\n<li>리팩터링과 함께 퍼지기 시작한 XP(익스트림 프로그래밍)의 특징은 지속적 통합, 자가 테스트 코드 리팩터링 등의 개성이 강하면서 상호 의존하는 기법들을 하나로 묶은 프로세스</li>\n<li>XP는 수 년에 걸쳐 애자일의 부흥을 이끌음</li>\n<li>애자일을 제대로 적용하기 위해서는 리팩터링이 필수</li>\n<li>자가 테스트 코드, 지속적 통합, 리팩터링의 세 기법은 서로 강력한 상승효과를 발휘함</li>\n<li>지속적 배포는 소프트웨어를 언제든 릴리스할 수 있는 상태로 유지해줌</li>\n<li>게다가 위험요소도 줄이고, 비즈니스 요구에 맞춰 릴리스 일정을 계획할 수 있음</li>\n<li>이처럼 견고한 기술적 토대를 바탕으로 프로덕션 코드 반영까지의 시간을 단축하고 버그를 줄여줘 소프트웨어의 신뢰성도 높일 수 있음</li>\n</ul>\n<br>\n<h2 id=\"28-리팩터링과-성능\" style=\"position:relative;\"><a href=\"#28-%EB%A6%AC%ED%8C%A9%ED%84%B0%EB%A7%81%EA%B3%BC-%EC%84%B1%EB%8A%A5\" aria-label=\"28 리팩터링과 성능 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.8 리팩터링과 성능</h2>\n<ul>\n<li>리팩터링하면 소프트웨어가 느려질 수도 있는 건 사실이지만, 그와 동시에 성능을 튜닝하기는 더 쉬워짐</li>\n<li>소프트웨어를 빠르게 만드는 비결은, 먼저 튜닝하기 쉽게 만들고 나서 원하는 속도가 나게끔 튜닝하는 것</li>\n</ul>\n<p>빠른 소프트웨어를 작성하는 방법 세 가지</p>\n<ol>\n<li>\n<p>시간 예산 분배 방식</p>\n<ul>\n<li>설계를 여러 컴포넌트로 나눠서 컴포넌트마다 자원(시간과 공간) 예산을 할당</li>\n<li>컴포넌트는 할당된 자원 예산을 초과할 수 없음</li>\n<li>시간 예산 분배 방식은 멍격한 시간 엄수를 강조 함</li>\n</ul>\n</li>\n<li>\n<p>끊임없이 관심을 기울이는 것</p>\n<ul>\n<li>대부분 프로그램은 전체 코드 중 극히 일부에서 대부분의 시간을 소비 함</li>\n</ul>\n</li>\n<li>\n<p>의도적으로 성능 최적화에 돌입하기 전까지는 성능에 신경 쓰지 않고 코드를 다루기 쉽게 만드는 데 집중함</p>\n<ul>\n<li>먼저 프로그램을 분석하여 시간과 공간을 많이 잡아먹는 지점을 알아내고, 그 부분들을 개선</li>\n<li>최적화를 위한 수정도 작은 단계로 나눠서 진행하며, 사용자가 만족하는 성능에 도달할 때까지 최적화 대상을 찾아서 제거하는 일을 계속 진행</li>\n</ul>\n</li>\n</ol>\n<p>프로그램을 잘 리팩터링해 두면 성능에 투입할 시간을 벌 수 있으며, 리팩터링이 잘 되어 있는 프로그램은 성능을 더 세밀하게 분석할 수 있음\n단기적으로 보면 리팩터링 단계에서는 성능이 느려질 수도 있지만, 최적화 단계에서 코드를 튜닝하기 훨씬 쉬워지기 때문에 결국 더 빠른 소프트웨어를 얻게 됨</p>\n<br>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<ul>\n<li><a href=\"https://www.yes24.com/Product/Goods/89649360\">리팩터링 2판 책</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#21-%EB%A6%AC%ED%8C%A9%ED%84%B0%EB%A7%81-%EC%A0%95%EC%9D%98\">2.1 리팩터링 정의</a></li>\n<li><a href=\"#22-%EB%91%90-%EA%B0%9C%EC%9D%98-%EB%AA%A8%EC%9E%90\">2.2 두 개의 모자</a></li>\n<li><a href=\"#23-%EB%A6%AC%ED%8C%A9%ED%84%B0%EB%A7%81%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0\">2.3 리팩터링하는 이유</a></li>\n<li><a href=\"#24-%EB%A6%AC%ED%8C%A9%ED%84%B0%EB%A7%81-%ED%95%B4%EC%95%BC-%ED%95%98%EB%8A%94-%EC%8B%9C%EA%B8%B0\">2.4 리팩터링 해야 하는 시기</a></li>\n<li><a href=\"#25-%EB%A6%AC%ED%8C%A9%ED%84%B0%EB%A7%81-%EC%8B%9C-%EA%B3%A0%EB%A0%A4%ED%95%A0-%EB%AC%B8%EC%A0%9C\">2.5 리팩터링 시 고려할 문제</a></li>\n<li><a href=\"#26-%EB%A6%AC%ED%8C%A9%ED%84%B0%EB%A7%81-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90-%EC%95%A0%EA%B7%B8%EB%8B%88yagni\">2.6 리팩터링, 아키텍쳐, 애그니(YAGNI)</a></li>\n<li><a href=\"#27-%EB%A6%AC%ED%8C%A9%ED%84%B0%EB%A7%81%EA%B3%BC-%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4-%EA%B0%9C%EB%B0%9C-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4\">2.7 리팩터링과 소프트웨어 개발 프로세스</a></li>\n<li><a href=\"#28-%EB%A6%AC%ED%8C%A9%ED%84%B0%EB%A7%81%EA%B3%BC-%EC%84%B1%EB%8A%A5\">2.8 리팩터링과 성능</a></li>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>\n</div>","frontmatter":{"date":"July 14, 2023","title":"리팩터링 2장","categories":"Study","author":"Kay","emoji":"👋"},"fields":{"slug":"/refactoring-2/"}},"prev":{"id":"741e0223-a912-5245-8531-a3209c798213","html":"<h2 id=\"글또-8기-회고\" style=\"position:relative;\"><a href=\"#%EA%B8%80%EB%98%90-8%EA%B8%B0-%ED%9A%8C%EA%B3%A0\" aria-label=\"글또 8기 회고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>글또 8기 회고</h2>\n<p>결론 부터 말씀드리면 글또를 시작 이후, 매주 마다 개인적으로 주간회고 글을 작성하는 습관을 갖게 되었습니다.\n물론 주간 회고 글내용이 많이 빈약하다고 느끼지만, 글을 작성하면서 느끼는 감정들 그리고 조금이라도 배운 내용을 적는 노력을 하면서 내심 뿌듯함도 느끼는 시간을 의식적으로 갖게 되었습니다.</p>\n<p>또한 글또를 시작하면서 다양한 개발자 분들의 좋은 글들을 읽을 수 있었습니다. 수준 높은 퀄리티 글을 통해 저의 식격을 더욱 넓히게 된 시간이 었던 것 같습니다.</p>\n<p>개인적으로 많이 아쉬운 것은 오프라인으로 글또에 참여하시는 개발자 분들을 만나서 대화를 하지 못했다는 것 입니다. 다음에 기회가 된다고 꼭 참여해 이런저런 이야기를 해보고 싶습니다.</p>\n<p>마지막으로 글을 작성할 때, 조금 더 깊이 생각하고 저를 위한 글이 아닌 타인을 위한 글을 작성하기 위해 노력하고 싶습니다.</p>\n<p>개인적으로 배운 내용들을 잘 정리하는 것을 타인에게 도움이 될 정도의 수준으로 글을 잘 작성하고 싶은 욕심이 글또를 하면서 많이 생겼습니다.\n(너무나 글을 잘쓰시는 글또 참여분들을 통해 동기부여를 얻었습니다.)</p>\n<p>아직 갈 길이 멀지만, 글또를 통해 좋은 글쓰기 습관과 퀄리티 높은 글들을 볼 수 있는 좋은 경험이었습니다.</p>\n<p>앞으로도 좋은 글을 작성해 많은 사람들에게 선한 영향력을 줄 수 있는 사람이 되고 싶습니다.</p>\n<p>감사합니다.</p>\n<br/>\n<h3 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h3>\n<p><a href=\"https://www.notion.so/ac5b18a482fb4df497d4e8257ad4d516\">글또 소개</a></p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EA%B8%80%EB%98%90-8%EA%B8%B0-%ED%9A%8C%EA%B3%A0\">글또 8기 회고</a></p>\n<ul>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"July 16, 2023","title":"글또 8기 - 회고","categories":"Study","author":"Kay","emoji":"✍️"},"fields":{"slug":"/study-write-last/"}},"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/write-log-230715/","nextSlug":"/refactoring-2/","prevSlug":"/study-write-last/"}},"staticQueryHashes":["1073350324","2938748437"]}