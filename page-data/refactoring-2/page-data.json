{"componentChunkName":"component---src-templates-blog-template-js","path":"/refactoring-2/","result":{"data":{"cur":{"id":"a14fd003-4479-5ae7-94be-6e6ad1eb9022","html":"<h2 id=\"21-리팩터링-정의\" style=\"position:relative;\"><a href=\"#21-%EB%A6%AC%ED%8C%A9%ED%84%B0%EB%A7%81-%EC%A0%95%EC%9D%98\" aria-label=\"21 리팩터링 정의 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.1 리팩터링 정의</h2>\n<ol>\n<li>리팩터링의 사전적 정의</li>\n</ol>\n<blockquote>\n<p>소프트웨어의 겉보기 동작은 그대로 유지한 채, 코드를 이해하고 수정하기 쉽도록 내부 구조를 변경하는 기법</p>\n</blockquote>\n<ol start=\"2\">\n<li>\n<p>리팩터링 이란</p>\n<ul>\n<li>동작을 보존하는 작은 단계들을 거쳐 코드를 수정하고, 이러한 단계들을 순차적으로 연결하여 큰 변화를 만들어내는 일</li>\n<li>“재구성” 의 특수한 한 형태</li>\n<li>단계를 작게 나눔으로써 구성을 체계화할 수 있고, 디버깅 시간을 단축할 수 있음</li>\n<li>사용자 관점에서는 달라지는 점이 없음</li>\n<li>리팩터링 과정에서 발견된 버그는 리팩터링 후에도 그대로 남아 있어야 함</li>\n<li>성능 최적화와 비슷</li>\n<li>코드를 이해하고 수정하기 쉽게 만드는 것</li>\n</ul>\n</li>\n</ol>\n<br>\n<h3 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h3>\n<ul>\n<li><a href=\"https://www.yes24.com/Product/Goods/89649360\">리팩터링 2판 책</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#21-%EB%A6%AC%ED%8C%A9%ED%84%B0%EB%A7%81-%EC%A0%95%EC%9D%98\">2.1 리팩터링 정의</a></p>\n<ul>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"2.1 리팩터링 정의 리팩터링의 사전적 정의 소프트웨어의 겉보기 동작은 그대로 유지한 채, 코드를 이해하고 수정하기 쉽도록 내부 구조를 변경하는 기법 리팩터링 이란 동작을 보존하는 작은 단계들을 거쳐 코드를 수정하고, 이러한 단계들을 순차적으로 연결하여 큰 변화를 만들어내는 일 “재구성” 의 특수한 한 형태 단계를 작게 나눔으로써 구성을 체계화할 수 있고, 디버깅 시간을 단축할 수 있음 사용자 관점에서는 달라지는 점이 없음 리팩터링 과정에서 발견된 버그는 리팩터링 후에도 그대로 남아 있어야 함 성능 최적화와 비슷 코드를 이해하고 수정하기 쉽게 만드는 것 참고 리팩터링 2판 책 2.1 리팩터링 정의 참고","frontmatter":{"date":"July 14, 2023","title":"리팩터링 2장","categories":"Study","author":"Kay","emoji":"👋"},"fields":{"slug":"/refactoring-2/"}},"next":{"id":"2c73933d-b533-5138-b759-a56f9cd8e2e1","html":"<h2 id=\"16-계산-단계와-포맷팅-단계-분리하기\" style=\"position:relative;\"><a href=\"#16-%EA%B3%84%EC%82%B0-%EB%8B%A8%EA%B3%84%EC%99%80-%ED%8F%AC%EB%A7%B7%ED%8C%85-%EB%8B%A8%EA%B3%84-%EB%B6%84%EB%A6%AC%ED%95%98%EA%B8%B0\" aria-label=\"16 계산 단계와 포맷팅 단계 분리하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.6 계산 단계와 포맷팅 단계 분리하기</h2>\n<ol>\n<li>\n<p>앞서 작성한 코드를 두 단계로 나눔</p>\n<ul>\n<li><code class=\"language-text\">statement()</code>에 필요한 데이터를 처리</li>\n<li>앞서 처리한 결과를 텍스트나 HTML로 표현</li>\n</ul>\n</li>\n<li>\n<p>그 다음 함수를 추출 이때 계산 관련 코드는 전부 <code class=\"language-text\">statement()</code> 함수로 모으고 <code class=\"language-text\">renderPlainText()</code>는 `data<code class=\"language-text\"></code> 매개변수로 전달된 데이터만 처리하게 만듦</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">statement</span><span class=\"token punctuation\">(</span>invoice<span class=\"token punctuation\">,</span> plays<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">const</span> statementData <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 고객 데이터, 공연 정보를 중간 데이터로 옮김</span>\nstatementData<span class=\"token punctuation\">.</span>customer <span class=\"token operator\">=</span> invoice<span class=\"token punctuation\">.</span>customer<span class=\"token punctuation\">;</span>\nstatementData<span class=\"token punctuation\">.</span>performances <span class=\"token operator\">=</span> invoice<span class=\"token punctuation\">.</span>performances<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 필요 없어진 인수 삭제</span>\n<span class=\"token keyword\">return</span> <span class=\"token function\">renderPlainText</span><span class=\"token punctuation\">(</span>statementData<span class=\"token punctuation\">,</span> plays<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">renderPlainText</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> plays<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">totalAmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">totalVolumeCredits</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">usd</span><span class=\"token punctuation\">(</span>aNumber<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">volumeCreditsFor</span><span class=\"token punctuation\">(</span>aPerformance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">playFor</span><span class=\"token punctuation\">(</span>aPerformance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">amountFor</span><span class=\"token punctuation\">(</span>aPerformance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>연극 제목도 중간 데이터 구조에서 가져옴</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">statement</span><span class=\"token punctuation\">(</span>invoice<span class=\"token punctuation\">,</span> plays<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> statementData <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  statementData<span class=\"token punctuation\">.</span>customer <span class=\"token operator\">=</span> invoice<span class=\"token punctuation\">.</span>customer<span class=\"token punctuation\">;</span>\n  statementData<span class=\"token punctuation\">.</span>performances <span class=\"token operator\">=</span> invoice<span class=\"token punctuation\">.</span>performances<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>enrichPerformances<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token function\">renderPlainText</span><span class=\"token punctuation\">(</span>statementData<span class=\"token punctuation\">,</span> plays<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">enrichPerformance</span><span class=\"token punctuation\">(</span>aPerformance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> aPerformance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>이제 <code class=\"language-text\">playFor()</code> 함수와 <code class=\"language-text\">amountFor()</code> 함수를 <code class=\"language-text\">statement()</code>로 옮겨줌</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">statement</span><span class=\"token punctuation\">(</span>invoice<span class=\"token punctuation\">,</span> plays<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// ...</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">enrichPerformance</span><span class=\"token punctuation\">(</span>aPerformance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> aPerformance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 중간 데이터에 연극 정보를 저장</span>\n  result<span class=\"token punctuation\">.</span>play <span class=\"token operator\">=</span> <span class=\"token function\">playFor</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  result<span class=\"token punctuation\">.</span>amount <span class=\"token operator\">=</span> <span class=\"token function\">amountFor</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// renderPlainText()의 중첩 함수였던 playFor()를 statement()로 옮김</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">playFor</span><span class=\"token punctuation\">(</span>aPerformance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> plays<span class=\"token punctuation\">[</span>aPerformance<span class=\"token punctuation\">.</span>playID<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">amountFor</span><span class=\"token punctuation\">(</span>aPerformance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">renderPlainText()</code> 안에서 <code class=\"language-text\">playFor()</code>와 <code class=\"language-text\">amountFor()</code>를 호출하던 부분을 중간 데이터를 사용하도록 바꿔주고, 같은 방식으로 다른 중첩 함수들도 옮겨주었음</li>\n</ul>\n</li>\n<li>\n<p>다음으로는 반복문을 파이프라인으로 바꿈</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">totalAmount</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// for 반복문을 파이프라인으로 바꿈</span>\n  <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">.</span>performances<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>total<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> total <span class=\"token operator\">+</span> p<span class=\"token punctuation\">.</span>amount<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">totalVolumeCredits</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// for 반복문을 파이프라인으로 바꿈</span>\n  <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">.</span>performances<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>total<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> total <span class=\"token operator\">+</span> p<span class=\"token punctuation\">.</span>volumeCredits<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>이제 <code class=\"language-text\">statement()</code>에 필요한 데이터 처리에 해당하는 코드를 모두 별도 함수로 빼냄</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">  <span class=\"token keyword\">function</span> <span class=\"token function\">statement</span><span class=\"token punctuation\">(</span>invoice<span class=\"token punctuation\">,</span> plays<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">renderPlainText</span><span class=\"token punctuation\">(</span><span class=\"token function\">createStatementData</span><span class=\"token punctuation\">(</span>invoice<span class=\"token punctuation\">,</span> plays<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 중간 데이터 생성을 전담</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">createStatementData</span><span class=\"token punctuation\">(</span>invoice<span class=\"token punctuation\">,</span> plays<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    result<span class=\"token punctuation\">.</span>customer <span class=\"token operator\">=</span> invoice<span class=\"token punctuation\">.</span>customer<span class=\"token punctuation\">;</span>\n    result<span class=\"token punctuation\">.</span>performances <span class=\"token operator\">=</span> invoice<span class=\"token punctuation\">.</span>performances<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>enrichPerformance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    result<span class=\"token punctuation\">.</span>totalAmount <span class=\"token operator\">=</span> <span class=\"token function\">totalAmount</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    result<span class=\"token punctuation\">.</span>totalVolumeCredits <span class=\"token operator\">=</span> <span class=\"token function\">totalVolumeCredits</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">enrichPerformance</span><span class=\"token punctuation\">(</span>aPerformance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">playFor</span><span class=\"token punctuation\">(</span>aPerformance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">amountFor</span><span class=\"token punctuation\">(</span>aPerformance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">volumeCreditsFor</span><span class=\"token punctuation\">(</span>aPerformance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">totalAmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">totalVolumeCredits</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>마지막으로, 단계별로 분리한 코드를 별도 파일에 저장한 후 HTML 버전을 작성 함</li>\n</ol>\n<br>\n<h2 id=\"17-중간-점검-두-파일과-두-단계로-분리됨\" style=\"position:relative;\"><a href=\"#17-%EC%A4%91%EA%B0%84-%EC%A0%90%EA%B2%80-%EB%91%90-%ED%8C%8C%EC%9D%BC%EA%B3%BC-%EB%91%90-%EB%8B%A8%EA%B3%84%EB%A1%9C-%EB%B6%84%EB%A6%AC%EB%90%A8\" aria-label=\"17 중간 점검 두 파일과 두 단계로 분리됨 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.7 중간 점검: 두 파일(과 두 단계)로 분리됨</h2>\n<ol>\n<li>\n<p>statement.js</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> createStatementData <span class=\"token keyword\">from</span> <span class=\"token string\">'./createStatementData.js'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">statement</span><span class=\"token punctuation\">(</span>invoice<span class=\"token punctuation\">,</span> plays<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">return</span> <span class=\"token function\">renderPlainText</span><span class=\"token punctuation\">(</span><span class=\"token function\">createStatementData</span><span class=\"token punctuation\">(</span>invoice<span class=\"token punctuation\">,</span> plays<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">renderPlainText</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> plays<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">htmlStatement</span><span class=\"token punctuation\">(</span>invoice<span class=\"token punctuation\">,</span> plays<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">return</span> <span class=\"token function\">renderHtml</span><span class=\"token punctuation\">(</span><span class=\"token function\">createStatementData</span><span class=\"token punctuation\">(</span>invoice<span class=\"token punctuation\">,</span> plays<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">renderHtml</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">usd</span><span class=\"token punctuation\">(</span>aNumber<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>createStatementData.js</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">createStatementData</span><span class=\"token punctuation\">(</span>invoice<span class=\"token punctuation\">,</span> plays<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n result<span class=\"token punctuation\">.</span>customer <span class=\"token operator\">=</span> invoice<span class=\"token punctuation\">.</span>customer<span class=\"token punctuation\">;</span>\n result<span class=\"token punctuation\">.</span>performances <span class=\"token operator\">=</span> invoice<span class=\"token punctuation\">.</span>performances<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>enrichPerformance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n result<span class=\"token punctuation\">.</span>totalAmount <span class=\"token operator\">=</span> <span class=\"token function\">totalAmount</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n result<span class=\"token punctuation\">.</span>totalVolumeCredits <span class=\"token operator\">=</span> <span class=\"token function\">totalVolumeCredits</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">function</span> <span class=\"token function\">enrichPerformance</span><span class=\"token punctuation\">(</span>aPerformance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n <span class=\"token keyword\">function</span> <span class=\"token function\">playFor</span><span class=\"token punctuation\">(</span>aPerformance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n <span class=\"token keyword\">function</span> <span class=\"token function\">amountFor</span><span class=\"token punctuation\">(</span>aPerformance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n <span class=\"token keyword\">function</span> <span class=\"token function\">volumeCreditsFor</span><span class=\"token punctuation\">(</span>aPerformance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n <span class=\"token keyword\">function</span> <span class=\"token function\">totalAmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n <span class=\"token keyword\">function</span> <span class=\"token function\">totalVolumeCredits</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>함수를 추출하면서 코드량은 많이 늘었지만, 모듈화를 통해 전체 로직을 구성하는 요소 각각이 더 뚜렷해지고 계산하는 부분과 출력 형식을 다루는 부분이 분리됨</li>\n</ul>\n</li>\n</ol>\n<br>\n<h2 id=\"18-다형성을-활용해-계산-코드-재구성하기\" style=\"position:relative;\"><a href=\"#18-%EB%8B%A4%ED%98%95%EC%84%B1%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%B4-%EA%B3%84%EC%82%B0-%EC%BD%94%EB%93%9C-%EC%9E%AC%EA%B5%AC%EC%84%B1%ED%95%98%EA%B8%B0\" aria-label=\"18 다형성을 활용해 계산 코드 재구성하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.8 다형성을 활용해 계산 코드 재구성하기</h2>\n<ol>\n<li>\n<p>조건부 로직을 다형성으로 바꿀 수 있음. 여기서는 공연료 계산기를 만들고, 공연 관련 데이터를 계산하는 함수들로 구성된 클래스를 만들어 상속 계층을 정의함</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">enrichPerformance</span><span class=\"token punctuation\">(</span>aPerformance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">const</span> calculator <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PerformanceCalculator</span><span class=\"token punctuation\">(</span>aPerformance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> aPerformance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n result<span class=\"token punctuation\">.</span>play <span class=\"token operator\">=</span> <span class=\"token function\">playFor</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PerformanceCalculator</span> <span class=\"token punctuation\">{</span>\n <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>aPerformance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>performance <span class=\"token operator\">=</span> aPerformance<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>그리고 계산기 클래스의 생성자에 함수 선언 바꾸기를 적용하여 연극의 레코드를 계산기로 전달함</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">PerformanceCalculator</span> <span class=\"token punctuation\">{</span>\n <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>aPerformance<span class=\"token punctuation\">,</span> aPlay<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>performance <span class=\"token operator\">=</span> aPerformance<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>play <span class=\"token operator\">=</span> aPlay<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>이제 함수들을 계산기로 옮겨줌</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">enrichPerformance</span><span class=\"token punctuation\">(</span>aPerformance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">const</span> calculator <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PerformanceCalculator</span><span class=\"token punctuation\">(</span>aPerformance<span class=\"token punctuation\">,</span> <span class=\"token function\">playFor</span><span class=\"token punctuation\">(</span>aPerformance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> aPerformance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nresult<span class=\"token punctuation\">.</span>play <span class=\"token operator\">=</span> <span class=\"token function\">playFor</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// amountFor() 대신 계산기의 함수 이용</span>\nresult<span class=\"token punctuation\">.</span>amount <span class=\"token operator\">=</span> calculator<span class=\"token punctuation\">.</span>amount<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// volumeCreditsFor() 대신 계산기의 함수 이용</span>\nresult<span class=\"token punctuation\">.</span>volumeCredits <span class=\"token operator\">=</span> calculator<span class=\"token punctuation\">.</span>volumeCredits<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PerformanceCalculator</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// amountFor() 함수의 코드를 계산기 클래스로 복사</span>\n<span class=\"token keyword\">get</span> <span class=\"token function\">amount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>play<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">case</span> <span class=\"token string\">\"tragedy\"</span><span class=\"token operator\">:</span>\n   <span class=\"token comment\">// ...</span>\n\n <span class=\"token punctuation\">}</span>\n <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// volumeCreditsFor() 함수의 코드를 계산기 클래스로 복사</span>\n<span class=\"token keyword\">get</span> <span class=\"token function\">volumeCredits</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>상속 받은 서브클래스들을 활용하여 공연료 계산기를 다형성 버전으로 만들어 주고, 타입 코드를 서브클래스로 바꾸고, 생성자를 팩터리 함수로 바꿈</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">enrichPerformance</span><span class=\"token punctuation\">(</span>aPerformance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">// 생성자 대신 팩터리 함수 이용</span>\n <span class=\"token keyword\">const</span> calculator <span class=\"token operator\">=</span> <span class=\"token function\">createPerformanceCalculator</span><span class=\"token punctuation\">(</span>aPerformance<span class=\"token punctuation\">,</span> <span class=\"token function\">playFor</span><span class=\"token punctuation\">(</span>aPerformance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">createPerformanceCalculator</span><span class=\"token punctuation\">(</span>aPerformance<span class=\"token punctuation\">,</span> aPlay<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>aPlay<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">case</span> <span class=\"token string\">\"tragedy\"</span><span class=\"token operator\">:</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TragedyCalculator</span><span class=\"token punctuation\">(</span>aPerformance<span class=\"token punctuation\">,</span> aPlay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">case</span> <span class=\"token string\">\"comedy\"</span><span class=\"token operator\">:</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ComedyCalculator</span><span class=\"token punctuation\">(</span>aPerformance<span class=\"token punctuation\">,</span> aPlay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n     <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'...'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TragedyCalculator</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">PerformanceCalculator</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ComedyCalculator</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">PerformanceCalculator</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>그러면 조건부 로직을 다형성으로 바꿔줄 수 있음</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">TragedyCalculator</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">get</span> <span class=\"token function\">amount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token comment\">// ...</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PerformanceCalculator</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">get</span> <span class=\"token function\">amount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>play<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">case</span> <span class=\"token string\">'tragedy'</span><span class=\"token operator\">:</span>\n       <span class=\"token keyword\">throw</span> <span class=\"token string\">'오류 발생'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 비극 공연료는 TragedyCalculator를 이용하도록 유도</span>\n     <span class=\"token keyword\">case</span> <span class=\"token string\">'comedy'</span><span class=\"token operator\">:</span>\n     <span class=\"token comment\">// ...</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>장르를 통틀어서 공통되는 부분은 일반적인 경우를 기본으로 삼아 슈퍼클래스에 남겨두고, 장르마다 달라지는 부분은 필요할 때 오버라이드하게 만들어줌</li>\n</ol>\n<br>\n<h2 id=\"19-상태-점검-다형성을-활용하여-데이터-생성하기\" style=\"position:relative;\"><a href=\"#19-%EC%83%81%ED%83%9C-%EC%A0%90%EA%B2%80-%EB%8B%A4%ED%98%95%EC%84%B1%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%98%EC%97%AC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0\" aria-label=\"19 상태 점검 다형성을 활용하여 데이터 생성하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.9 상태 점검: 다형성을 활용하여 데이터 생성하기</h2>\n<ol>\n<li>두 개의 함수 <code class=\"language-text\">amountFor()</code>와 <code class=\"language-text\">volumeCreditsFor()</code>의 조건부 로직을 생성 함수 하나로 옮겨 같은 타입의 다형성을 기반으로 실행되는 함수를 모듈화했음</li>\n<li>계산기가 중간 데이터 구조를 채우게 한 지금의 코드와 달리 <code class=\"language-text\">createStatementData()</code>가 계산기 자체를 반환하게 구현해도 되지만, 여기서는 다형성 계산기를 사용한다는 사실을 숨기기보다는 중간 데이터 구조를 이용하는 방법을 보여주는 방식으로 작성했음</li>\n</ol>\n<br>\n<h2 id=\"110-마치며\" style=\"position:relative;\"><a href=\"#110-%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-label=\"110 마치며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.10 마치며</h2>\n<ol>\n<li>\n<p>이번 장에서 살펴본 리팩터링 기법들은 다음과 같음</p>\n<ul>\n<li>함수 추출</li>\n<li>변수 인라인</li>\n<li>함수 옮김</li>\n<li>조건부 로직을 다형성으로 바꿈</li>\n</ul>\n</li>\n<li>\n<p>이번 장의 예제에서는 리팩터링을 크게 세 단계로 진행 함</p>\n<ul>\n<li>원본 함수를 중첩 함수 여러 개로 나눔</li>\n<li>단계 쪼개기(계산 코드와 출력 코드를 분리함)</li>\n<li>계산 로직을 다형성으로 표현함</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>💡 좋은 코드를 가늠하는 확실한 방법은 ‘얼마나 수정하기 쉬운가’다.</p>\n</blockquote>\n<ul>\n<li>리팩터링을 효과적으로 하는 핵심은, 단계를 잘게 나눠야 더 빠르게 처리할 수 있고, 코드는 절대 깨지지 않으며, 이러한 작은 단계들이 모여서 상당히 큰 변화를 이룰 수 있다는 사실을 깨닫는 것</li>\n</ul>\n<br>\n<h3 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h3>\n<ul>\n<li><a href=\"https://www.yes24.com/Product/Goods/89649360\">리팩터링 2판 책</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#16-%EA%B3%84%EC%82%B0-%EB%8B%A8%EA%B3%84%EC%99%80-%ED%8F%AC%EB%A7%B7%ED%8C%85-%EB%8B%A8%EA%B3%84-%EB%B6%84%EB%A6%AC%ED%95%98%EA%B8%B0\">1.6 계산 단계와 포맷팅 단계 분리하기</a></li>\n<li><a href=\"#17-%EC%A4%91%EA%B0%84-%EC%A0%90%EA%B2%80-%EB%91%90-%ED%8C%8C%EC%9D%BC%EA%B3%BC-%EB%91%90-%EB%8B%A8%EA%B3%84%EB%A1%9C-%EB%B6%84%EB%A6%AC%EB%90%A8\">1.7 중간 점검: 두 파일(과 두 단계)로 분리됨</a></li>\n<li><a href=\"#18-%EB%8B%A4%ED%98%95%EC%84%B1%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%B4-%EA%B3%84%EC%82%B0-%EC%BD%94%EB%93%9C-%EC%9E%AC%EA%B5%AC%EC%84%B1%ED%95%98%EA%B8%B0\">1.8 다형성을 활용해 계산 코드 재구성하기</a></li>\n<li><a href=\"#19-%EC%83%81%ED%83%9C-%EC%A0%90%EA%B2%80-%EB%8B%A4%ED%98%95%EC%84%B1%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%98%EC%97%AC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0\">1.9 상태 점검: 다형성을 활용하여 데이터 생성하기</a></li>\n<li>\n<p><a href=\"#110-%EB%A7%88%EC%B9%98%EB%A9%B0\">1.10 마치며</a></p>\n<ul>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"July 10, 2023","title":"리팩터링 1장-2","categories":"Study","author":"Kay","emoji":"👋"},"fields":{"slug":"/refactoring-1-2/"}},"prev":{"id":"6e0d926f-7e9f-52b0-ba52-586a119d8fbf","html":"<h2 id=\"한-주-회고\" style=\"position:relative;\"><a href=\"#%ED%95%9C-%EC%A3%BC-%ED%9A%8C%EA%B3%A0\" aria-label=\"한 주 회고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>한 주 회고</h2>\n<h2 id=\"error-boundary--suspense\" style=\"position:relative;\"><a href=\"#error-boundary--suspense\" aria-label=\"error boundary  suspense permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Error Boundary &#x26; Suspense</h2>\n<p>이번 스프린트에서는 하나의 컴포넌트 안에 Error Boundary와 Suspense를 감싸는 구조로 만드는 작업을 함께 진행했습니다.\n이렇게 하게 되면, 컴포넌트 안에서 API 실패 및 로딩을 컴포넌트 마다 커스텀하게 관리할 수 있는 장점과 이번 스프린트의 요구사항에 적합했기에 적용하게 되었습니다. 이 과정에서 <code class=\"language-text\">react-error-boundary</code>외부 라이브러와 React 18버젼부터 제공하는 <code class=\"language-text\">Suspense</code> 기능을 함께 도입해 적용하게 되었습니다.</p>\n<p><code class=\"language-text\">react-error-boundary</code>의 가장 큰 장점은 React에서 Error Boundary를 재사용과 커스텀하게 관리 할 수 있다는 점입니다.\nfallback 구조가 Suspense와 비슷해서 사용하기 편리 했습니다.</p>\n<p>또한 useQuery와 함께 사용할 때 <code class=\"language-text\">useQueryErrorResetBoundary</code>를 통해 API를 재호출 할 때 함께 사용할 수 있어서 너무 좋았습니다.\n참고로 useQuery를 작성할 때, 옵션으로 <code class=\"language-text\">useErrorBoundary: true &amp; suspense: true</code>로 지정해야 아래와 같이 사용할 수 있습니다.</p>\n<p>즉, 아래와 같이 코드를 작성함으로써 API 호출 상태에 따른 UI를 제공해서 사용자의 경험을 해치지 않도록 할 수 있었습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token string\">'use client'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ErrorBoundary <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-error-boundary'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useQueryErrorResetBoundary <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@tanstack/react-query'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> reset <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useQueryErrorResetBoundary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">UIComponent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ErrorBoundary</span></span> <span class=\"token attr-name\">onReset</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>reset<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">fallback</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token constant\">UI</span><span class=\"token punctuation\">.</span>ErrorFallbackUI<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Suspense</span></span> <span class=\"token attr-name\">fallback</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">UI.Skeleton</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">UI</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Suspense</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ErrorBoundary</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<h2 id=\"생각\" style=\"position:relative;\"><a href=\"#%EC%83%9D%EA%B0%81\" aria-label=\"생각 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생각</h2>\n<p>사는대로 생각하는 것이 아니라, 생각한 대로 살 수 있도록 의식적으로 연습하자.</p>\n<p>삶을 만들어 가는 것이다.</p>\n<p>주어진 환경 속에서도 어떻게든 배울 수 있는 것들을 배워서 내것으로 만들어 나만의 삶을 만들어 가자.</p>\n<p>비가 와서 그런가 생각이 많아지는 날들이 많다.</p>\n<br>\n<h3 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h3>\n<ul>\n<li><a href=\"https://www.daleseo.com/react-suspense/\">React Suspense 소개</a></li>\n<li><a href=\"https://www.npmjs.com/package/react-error-boundary\">React-Error-Boundary</a></li>\n<li><a href=\"https://tanstack.com/query/v4/docs/react/reference/useQueryErrorResetBoundary\">useQueryErrorResetBoundary</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%ED%95%9C-%EC%A3%BC-%ED%9A%8C%EA%B3%A0\">한 주 회고</a></li>\n<li><a href=\"#error-boundary--suspense\">Error Boundary &#x26; Suspense</a></li>\n<li>\n<p><a href=\"#%EC%83%9D%EA%B0%81\">생각</a></p>\n<ul>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"July 15, 2023","title":"7월 3주 회고","categories":"Log","author":"Kay","emoji":"👋"},"fields":{"slug":"/write-log-230715/"}},"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/refactoring-2/","nextSlug":"/refactoring-1-2/","prevSlug":"/write-log-230715/"}},"staticQueryHashes":["1073350324","2938748437"]}