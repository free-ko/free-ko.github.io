{"componentChunkName":"component---src-templates-blog-template-js","path":"/write-log-230402/","result":{"data":{"cur":{"id":"70e639ad-94cd-58f1-b5de-2816f3a5bd02","html":"<h2 id=\"한-주-느낀점\" style=\"position:relative;\"><a href=\"#%ED%95%9C-%EC%A3%BC-%EB%8A%90%EB%82%80%EC%A0%90\" aria-label=\"한 주 느낀점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>한 주 느낀점</h2>\n<p>혼자서 사이드 프로젝트를 진행하면서, 회사에서 제공하는 디자인 시스템, 패키지, 그리고 모듈들의 가치를 깨달았습니다.\n이 과정에서, 회사에서 제공해주는 코드 덕분에 빠른 개발을 할 수 있었다는 것을 깨닫게 되었습니다. 이에 대해 감사한 마음을 팀원들에게 전합니다.</p>\n<p>프로젝트를 시작하기 전, ESLint, Husky, tsconfig 설정, 그리고 디자인 시스템 개발 등을 직접 셋팅하고 개발하는 과정에서,\n당연하게 여겼던 코드들을 의심하고 이해하는 시간을 가졌습니다. </p>\n<p>혼자서 하나씩 이해하면서 고민하는 행위가 중요하다는 것을 깨달았습니다.\n앞으로도, 당연하다고 생각하는 코드들에 대해서도 의심하는 습관을 가지도록 노력하겠습니다.</p>\n<br>\n<h2 id=\"새로-알게된-내용-및-더-고민해야-할-부분\" style=\"position:relative;\"><a href=\"#%EC%83%88%EB%A1%9C-%EC%95%8C%EA%B2%8C%EB%90%9C-%EB%82%B4%EC%9A%A9-%EB%B0%8F-%EB%8D%94-%EA%B3%A0%EB%AF%BC%ED%95%B4%EC%95%BC-%ED%95%A0-%EB%B6%80%EB%B6%84\" aria-label=\"새로 알게된 내용 및 더 고민해야 할 부분 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>새로 알게된 내용 및 더 고민해야 할 부분</h2>\n<ol>\n<li>\n<p>구글 개발자 도구에서 Network 탭에 이미지가 있는 이유는, 브라우저가 API에서 가져온 데이터 중 이미지가 있다면, 이미지를 렌더링 하기 위해 해당 이미지 URL로 요청해서 데이터를 가져오는 것이지 React Query가 이미지를 캐싱하는 것이 아님</p>\n<ul>\n<li>\n<p>이 때, Image URL의 유효성을 처리하는 로직을 따로 만들어야 한다는 것을 알게 됨</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Image</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>url<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>error<span class=\"token punctuation\">,</span> setError<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setError</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>    \n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">{</span>error <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">DefaultImg</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> \n        <span class=\"token attr-name\">src</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>url<span class=\"token punctuation\">}</span></span> \n        <span class=\"token attr-name\">onerror</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span></span>\n      <span class=\"token punctuation\">/></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> \n    \n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> </code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">CallBackRef</code> 사용법</p>\n<ul>\n<li>React에서 사용되는 콜백 함수를 전달하여 DOM 요소에 접근하는 기술</li>\n<li>일반적으로 React에서는 <code class=\"language-text\">useState</code>와 같은 훅을 사용하여 상태 값을 관리하고, <code class=\"language-text\">useEffect</code> 훅을 사용하여 컴포넌트가 마운트/언마운트/업데이트될 때 일부 로직을 수행.</li>\n<li>외부 라이브러리를 사용해서 특정 DOM 요소를 조작해야 하는 경우 DOM 요소에 직접 접근해야 하는데, 이 때 <code class=\"language-text\">CallBackRef</code>를 사용하면 해당 DOM 요소에 접근할 수 있음.</li>\n<li><code class=\"language-text\">CallBackRef</code>는 <code class=\"language-text\">useRef</code>와 달리, DOM 요소에 직접 접근하기 위한 참조를 생성하는 것이 아니라, 콜백 함수를 전달하여 해당 요소에 접근함.</li>\n<li>\n<p>스크롤 위치를 조작해야 하는 경우 <code class=\"language-text\">useEffect</code> 훅에서 콜백 함수를 호출하여 스크롤 위치를 조작할 수 있음(DOM 요소 조작)</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> callBackref <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// node는 div 요소를 가리킴.</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 스크롤 위치를 200으로 설정.</span>\n  node<span class=\"token punctuation\">.</span><span class=\"token function\">scrollTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>callBackref<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* 내용 */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">useInfiniteQuery</code>와 <code class=\"language-text\">useQuery</code>의 차이점</p>\n<ul>\n<li>\n<p><code class=\"language-text\">useInfiniteQuery</code></p>\n<ul>\n<li>무한 스크롤 또는 페이지네이션과 같이 페이지가 존재하는 경우 사용(순서와 페이지가 보장된 데이터)</li>\n<li>호출에서 반환된 데이터를 이전 호출에서 반환된 데이터와 연결하여 단일 배열로 반환</li>\n<li>이전에 캐시된 데이터가 있는 경우, 이를 사용하여 요청을 수행하지 않고 캐시된 데이터를 반환</li>\n<li>엘라스틱 서치의 리턴 데이터 타입(표준)에 관한 처리와 비슷</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>useErrorBoundary와 ErrorBoundary 개발 고민</p>\n<ul>\n<li>QueryClient 기본 디폴트 옵션을 <code class=\"language-text\">useErrorBoundary=true</code>로 잡아 놓고 개발하면 useQuery를 통해 Fetch한 경우 에러가 발생했을 때, 최상한 ErrorBoundary에서 에러가 잡힘</li>\n<li>만약에 외부 에러 바운더리에서 에러를 공용으로 처리하는 경우가 아니라면, 개별적으로 <code class=\"language-text\">useErrorBoudary=false</code>를 해서 onError로 에러 처리 진행</li>\n</ul>\n</li>\n</ol>\n<br>\n<h3 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h3>\n<ul>\n<li><a href=\"https://legacy.reactjs.org/docs/refs-and-the-dom.html#callback-refs\">CallBackRef</a></li>\n<li><a href=\"https://velog.io/@cnsrn1874/%EB%B2%88%EC%97%AD-callback-refs-%EC%82%AC%EC%9A%A9%EC%9C%BC%EB%A1%9C-useEffect-%EB%B0%A9%EC%A7%80%ED%95%98%EA%B8%B0\">CallBackRef 관련 글</a></li>\n<li><a href=\"https://velog.io/@vanillovin/react-query-infinite-scroll\">useInfiniteQuery 관련 글</a></li>\n<li><a href=\"https://velog.io/@suyeon9456/React-Query-Error-Boundary-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0\">에러 바운더리 관련 글</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%ED%95%9C-%EC%A3%BC-%EB%8A%90%EB%82%80%EC%A0%90\">한 주 느낀점</a></li>\n<li>\n<p><a href=\"#%EC%83%88%EB%A1%9C-%EC%95%8C%EA%B2%8C%EB%90%9C-%EB%82%B4%EC%9A%A9-%EB%B0%8F-%EB%8D%94-%EA%B3%A0%EB%AF%BC%ED%95%B4%EC%95%BC-%ED%95%A0-%EB%B6%80%EB%B6%84\">새로 알게된 내용 및 더 고민해야 할 부분</a></p>\n<ul>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"한 주 느낀점 혼자서 사이드 프로젝트를 진행하면서, 회사에서 제공하는 디자인 시스템, 패키지, 그리고 모듈들의 가치를 깨달았습니다.\n이 과정에서, 회사에서 제공해주는 코드 덕분에 빠른 개발을 할 수 있었다는 것을 깨닫게 되었습니다. 이에 대해 감사한 마음을 팀원들에게 전합니다. 프로젝트를 시작하기 전, ESLint, Husky, tsconfig 설정, 그리고 디자인 시스템 개발 등을 직접 셋팅하고 개발하는 과정에서,\n당연하게 여겼던 코드들을 의심하고 이해하는 시간을 가졌습니다.  혼자서 하나씩 이해하면서 고민하는 행위가 중요하다는 것을 깨달았습니다.\n앞으로도, 당연하다고 생각하는 코드들에 대해서도 의심하는 습관을 가지도록 노력하겠습니다. 새로 알게된 내용 및 더 고민해야 할 부분 구글 개발자 도구에서 Network 탭에 이미지가 있는 이유는, 브라우저가 API에서 가져온 데이터 중 이미지가 있다면, 이미지를 렌더링 하기 위해 해당 이미지 URL로 요청해서 데이터를 가져오는 것이지 …","frontmatter":{"date":"April 02, 2023","title":"4월 1주 회고","categories":"Log","author":"Kay","emoji":"👋"},"fields":{"slug":"/write-log-230402/"}},"next":{"id":"c6bedf24-b46c-5942-bc6f-5fb8951cfe29","html":"<h2 id=\"외부-라이브러리를-관리-하는-방법\" style=\"position:relative;\"><a href=\"#%EC%99%B8%EB%B6%80-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC%EB%A5%BC-%EA%B4%80%EB%A6%AC-%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"외부 라이브러리를 관리 하는 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>외부 라이브러리를 관리 하는 방법</h2>\n<h3 id=\"왜-의존성을-줄여야-할까요\" style=\"position:relative;\"><a href=\"#%EC%99%9C-%EC%9D%98%EC%A1%B4%EC%84%B1%EC%9D%84-%EC%A4%84%EC%97%AC%EC%95%BC-%ED%95%A0%EA%B9%8C%EC%9A%94\" aria-label=\"왜 의존성을 줄여야 할까요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>왜 의존성을 줄여야 할까요?</h3>\n<p>외부 라이브러리를 사용할 때 최대한 의존성을 줄이는 것이 중요합니다.\n외부 라이브러리가 업데이트되거나 문제가 생기면, 우리 프로젝트에도 영향을 끼칠 수 있기 때문입니다.\n그렇다면 외부 라이브러리와의 의존성을 최소화하는 방법은 무엇일까요?</p>\n<br>\n<h3 id=\"의존성-줄이는-방법\" style=\"position:relative;\"><a href=\"#%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%A4%84%EC%9D%B4%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"의존성 줄이는 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>의존성 줄이는 방법</h3>\n<p>최근 <a href=\"http://www.yes24.com/Product/Goods/108748841\">쏙쏙 들어오는 함수형 코딩</a>책을 가지고하는 <a href=\"https://free-ko.github.io/study-js-functionalProgramming-1/\">함수형 프로그래밍 스터디</a>에 참여해서 많은 것을 배울 수 있었습니다.\n그 중에서도 <code class=\"language-text\">추상화 벽</code>을 이용하여 외부 라이브러리의 의존성을 줄이는 방법을 배웠습니다.</p>\n<p><code class=\"language-text\">추상화 벽</code>은 우리가 필요한 인터페이스만을 노출시키고, 그 외의 기능들은 Wrapping 함수로 가려놓는 것입니다.\n이렇게 하면 외부 라이브러리와의 의존성을 최소화할 수 있어서 유지보수성을 높일 수 있습니다.</p>\n<br>\n<h3 id=\"추상화-벽-사용시-장점\" style=\"position:relative;\"><a href=\"#%EC%B6%94%EC%83%81%ED%99%94-%EB%B2%BD-%EC%82%AC%EC%9A%A9%EC%8B%9C-%EC%9E%A5%EC%A0%90\" aria-label=\"추상화 벽 사용시 장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>추상화 벽 사용시, 장점</h3>\n<p>추상화 벽을 사용하면 여러 가지 장점이 있습니다.</p>\n<ul>\n<li>외부 라이브러리와의 관리 포인트를 줄일 수 있습니다.</li>\n<li>외부 라이브러리의 변경사항이 생기면, 해당 추상화 벽 코드만 수정하면 자동으로 사용하는 코드도 자연스럽게 반영이됩니다. 이렇게 하면 외부 라이브러리의 변경사항에 대해 사용하는 모든 코드를 다 고칠 필요가 없어서 유지보수성이 높아집니다.</li>\n<li>추상화 벽은 외부 라이브러리의 복잡한 내부 구조를 사용하는 코드로부터 감춰줄 수 있어서 코드 의존성을 최소화할 수 있습니다. 이렇게 해서 코드의 가독성도 높아지고, 코드를 유연하게 변경할 수 있습니다.</li>\n</ul>\n<br>\n<h3 id=\"추상화-벽-사용-예시\" style=\"position:relative;\"><a href=\"#%EC%B6%94%EC%83%81%ED%99%94-%EB%B2%BD-%EC%82%AC%EC%9A%A9-%EC%98%88%EC%8B%9C\" aria-label=\"추상화 벽 사용 예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>추상화 벽 사용 예시</h3>\n<p>아래 코드는 카카오톡 공유하기 기능을 사용하기 위해 작성된 코드입니다.\n이 코드에서는 추상화 벽을 세워서 우리가 필요한 인터페이스만 노출시키고, 그 외의 기능들은 Wrapping 함수로 가려놓았습니다.</p>\n<p>따라서, 카카오톡 공유하기 기능에 대한 문제가 생기거나 변경사항이 있을 때, 아래의 코드를 수정하게 되면\n자연스럽게 사용하는 쪽 코드에 모두 반영이 됩니다. 이렇게 해서 외부 라이브러리와의 의존성을 최소화하고 유지보수성을 높일 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">shareKakao</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>\n    title<span class=\"token punctuation\">,</span>\n    description<span class=\"token punctuation\">,</span>\n    imageUrl<span class=\"token punctuation\">,</span>\n    url<span class=\"token punctuation\">,</span>\n    campaign\n<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> window<span class=\"token punctuation\">.</span>Kakao <span class=\"token operator\">!==</span> <span class=\"token string\">'undefined'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    window<span class=\"token punctuation\">.</span>Kakao<span class=\"token punctuation\">.</span>Share<span class=\"token punctuation\">.</span><span class=\"token function\">sendDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      objectType<span class=\"token operator\">:</span> <span class=\"token string\">'feed'</span><span class=\"token punctuation\">,</span>\n      content<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        title<span class=\"token punctuation\">,</span>\n        description<span class=\"token punctuation\">,</span>\n        imageUrl<span class=\"token punctuation\">,</span>\n        link<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          webUrl<span class=\"token operator\">:</span> url<span class=\"token punctuation\">,</span>\n          mobileWebUrl<span class=\"token operator\">:</span> url<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> shareKakao<span class=\"token punctuation\">;</span></code></pre></div>\n<br/>\n<h2 id=\"이외에-다른-예시\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EC%99%B8%EC%97%90-%EB%8B%A4%EB%A5%B8-%EC%98%88%EC%8B%9C\" aria-label=\"이외에 다른 예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이외에 다른 예시</h2>\n<ol>\n<li>\n<p>React에서는 Virtual DOM을 사용하여 추상화 벽을 만들어 놓았습니다. 이렇게 하면, 개발자들은 실제 DOM을 조작하지 않고, Virtual DOM을 조작함으로써 UI를 업데이트할 수 있습니다.</p>\n<ul>\n<li>useState의 setState 등</li>\n</ul>\n</li>\n<li>\n<p>Redux는 상태 관리 라이브러리로서, 상태 변경을 위한 특정 함수들만 노출시켜 추상화 벽을 만들어 놓았습니다. 이렇게 하면, 애플리케이션 전체에서 상태 변경 함수들을 이용하여 상태를 변경할 수 있으며, 이를 통해 상태의 일관성을 유지할 수 있습니다.</p>\n<ul>\n<li>createStore, dispatch 등</li>\n</ul>\n</li>\n</ol>\n<br/>\n<h2 id=\"느낀점\" style=\"position:relative;\"><a href=\"#%EB%8A%90%EB%82%80%EC%A0%90\" aria-label=\"느낀점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>느낀점</h2>\n<p>이번 개발을 통해, 일상적으로 사용하던 메서드들이 추상화 벽을 통해 관리하고 있다는 것을 깨달았습니다.\n앞으로는 다른 사람의 코드를 볼 때, 작성 의도를 고려하고 특히 프레임워크나 라이브러리 메서드를 사용할 때, 문서에서 그 목적과 개발 패턴을 잘 파악해야 겠습니다.</p>\n<p>그리고 이젠, 당연하게 받아들였던 것들이 이제는 당연하지 않게 느껴집니다.</p>\n<br/>\n<h3 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h3>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EC%99%B8%EB%B6%80-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC%EB%A5%BC-%EA%B4%80%EB%A6%AC-%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\">외부 라이브러리를 관리 하는 방법</a></p>\n<ul>\n<li><a href=\"#%EC%99%9C-%EC%9D%98%EC%A1%B4%EC%84%B1%EC%9D%84-%EC%A4%84%EC%97%AC%EC%95%BC-%ED%95%A0%EA%B9%8C%EC%9A%94\">왜 의존성을 줄여야 할까요?</a></li>\n<li><a href=\"#%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%A4%84%EC%9D%B4%EB%8A%94-%EB%B0%A9%EB%B2%95\">의존성 줄이는 방법</a></li>\n<li><a href=\"#%EC%B6%94%EC%83%81%ED%99%94-%EB%B2%BD-%EC%82%AC%EC%9A%A9%EC%8B%9C-%EC%9E%A5%EC%A0%90\">추상화 벽 사용시, 장점</a></li>\n<li><a href=\"#%EC%B6%94%EC%83%81%ED%99%94-%EB%B2%BD-%EC%82%AC%EC%9A%A9-%EC%98%88%EC%8B%9C\">추상화 벽 사용 예시</a></li>\n</ul>\n</li>\n<li><a href=\"#%EC%9D%B4%EC%99%B8%EC%97%90-%EB%8B%A4%EB%A5%B8-%EC%98%88%EC%8B%9C\">이외에 다른 예시</a></li>\n<li>\n<p><a href=\"#%EB%8A%90%EB%82%80%EC%A0%90\">느낀점</a></p>\n<ul>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"March 25, 2023","title":"외부 라이브러리를 관리하는 방법","categories":"TIL","author":"Kay","emoji":"👋"},"fields":{"slug":"/3rd-party-management/"}},"prev":{"id":"def98fb1-4351-510e-a783-16328fad38d9","html":"<h2 id=\"한-주-회고\" style=\"position:relative;\"><a href=\"#%ED%95%9C-%EC%A3%BC-%ED%9A%8C%EA%B3%A0\" aria-label=\"한 주 회고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>한 주 회고</h2>\n<p>한 달 만에 본가인 전주에 내려가서 휴식을 취했습니다. 오랜만에 자주 갔던 국밥집을 찾아가 보니, 사람들이 왜 이곳을 소울푸드라고 부르는지 이제서야 이해가 가더군요. 매일 먹던 음식을 오랜만에 먹으니, 몸이 살아나고 에너지가 넘쳐나는 기분을 느낄 수 있었습니다. 또한, 친구와 함께 사우나에 가서 이야기도 나누고 몸을 개운하게 씻고 나와서는 기분이 너무 좋았습니다.</p>\n<p>이번 경험으로, 매일 당연하게 느껴왔던 것들이 이제는 당연하지 않다는 것과 행복이 멀리 떨어져 있지 않고, 일상 속에 가깝게 있다는 사실을 다시 한번 깨달았습니다.</p>\n<p>너무나도 쉽게 일상의 소중함을 잊어버리곤 하지만, 이러한 소중한 순간들이 삶의 큰 힘이 되어주는 것 같습니다.\n누구보다도 자신의 삶을 살아가며, 그 속에서 소중한 것들을 찾아내어야 한다는 것도 잘 알고 있습니다.\n매일이 단조롭고 지루해보이더라도, 그 안에는 놓치기 쉬운 소중한 순간들을 느낄 수 있도록 노력해야겠습니다.</p>\n<p>이번 주도 수고많았습니다.</p>\n<br>\n<h3 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h3>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%ED%95%9C-%EC%A3%BC-%ED%9A%8C%EA%B3%A0\">한 주 회고</a></p>\n<ul>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"April 09, 2023","title":"4월 2주 회고","categories":"Log","author":"Kay","emoji":"👋"},"fields":{"slug":"/write-log-230409/"}},"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":"zoomkoding/zoomkoding-gatsby-blog"}}}}},"pageContext":{"slug":"/write-log-230402/","nextSlug":"/3rd-party-management/","prevSlug":"/write-log-230409/"}},"staticQueryHashes":["1073350324","2938748437"]}