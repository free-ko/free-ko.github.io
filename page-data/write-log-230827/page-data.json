{"componentChunkName":"component---src-templates-blog-template-js","path":"/write-log-230827/","result":{"data":{"cur":{"id":"b07de716-32ae-5262-aaca-c573928c15bc","html":"<h2 id=\"한-주-회고\" style=\"position:relative;\"><a href=\"#%ED%95%9C-%EC%A3%BC-%ED%9A%8C%EA%B3%A0\" aria-label=\"한 주 회고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>한 주 회고</h2>\n<p>개발자로써 가장 중요한 <code class=\"language-text\">문제 해결력</code>의 중요성을 잊고, 그 너머의 방법론에 대해서만 집중 했던 것 같다.\n예를 들어 디자인 시스템, 다양한 아키텍처 등의 핵심은 문제 해결을 하기 위한 다양한 방법중 하나인데 너무 방법론에 대해서만 집중을 했던 것 같다.</p>\n<p>정말 본질적인 <code class=\"language-text\">문제 해결력</code>력을 키우기위해 기본에 집중하자.</p>\n<p>다시 기본으로 돌아가 중심을 잘 잡자.</p>\n<br>\n<h3 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h3>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=vutA66CGm4c\">직장인 개발자의 업무 생산성을 높이는 방법</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%ED%95%9C-%EC%A3%BC-%ED%9A%8C%EA%B3%A0\">한 주 회고</a></p>\n<ul>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"한 주 회고 개발자로써 가장 중요한 의 중요성을 잊고, 그 너머의 방법론에 대해서만 집중 했던 것 같다.\n예를 들어 디자인 시스템, 다양한 아키텍처 등의 핵심은 문제 해결을 하기 위한 다양한 방법중 하나인데 너무 방법론에 대해서만 집중을 했던 것 같다. 정말 본질적인 력을 키우기위해 기본에 집중하자. 다시 기본으로 돌아가 중심을 잘 잡자. 참고 직장인 개발자의 업무 생산성을 높이는 방법 한 주 회고 참고","frontmatter":{"date":"August 27, 2023","title":"8월 4주 회고","categories":"Log","author":"Kay","emoji":"👋"},"fields":{"slug":"/write-log-230827/"}},"next":{"id":"ce7f43f9-2575-52b8-b489-091b5c62b0c9","html":"<h2 id=\"41-자가-테스트-코드의-가치\" style=\"position:relative;\"><a href=\"#41-%EC%9E%90%EA%B0%80-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BD%94%EB%93%9C%EC%9D%98-%EA%B0%80%EC%B9%98\" aria-label=\"41 자가 테스트 코드의 가치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.1 자가 테스트 코드의 가치</h2>\n<blockquote>\n<p>리팩터링을 제대로 하기 위해서는 실수를 잡아주는 견고한 테스트가 뒷받침돼야 한다.</p>\n</blockquote>\n<ol>\n<li>모든 테스트를 완전히 자동화하고 그 결과까지 스스로 검사하게 만들자</li>\n<li>컴파일할 때마다 테스트도 함께 하면 생산성을 높일 수 있음</li>\n<li>자가 테스트 코드 자체뿐 아니라 테스트를 자주 수행하는 습관도 버그를 찾는 강력한 도구가 됨</li>\n<li>테스트 스위트는 강력한 버그 검출 도구로, 버그를 찾는 데 걸리는 시간을 대폭 줄여줌</li>\n<li>테스트를 작성하기 가장 좋은 시점은 프로그래밍을 시작하기 전</li>\n<li>기능을 추가해야 할 때 테스트부터 작성 함</li>\n<li>이로부터 켄트 벡의 ‘테스트 주도 개발(TDD)’ 기법이 탄생</li>\n<li>TDD에서는 테스트를 작성하고, 이 테스트를 통과하게끔 코드를 작성하고, 결과 코드를 최대한 깔끔하게 리팩터링하는 과정을 짧은 주기로 반복</li>\n</ol>\n<br>\n<h2 id=\"42-테스트할-샘플-코드\" style=\"position:relative;\"><a href=\"#42-%ED%85%8C%EC%8A%A4%ED%8A%B8%ED%95%A0-%EC%83%98%ED%94%8C-%EC%BD%94%EB%93%9C\" aria-label=\"42 테스트할 샘플 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.2 테스트할 샘플 코드</h2>\n<p>비즈니스 로직 코드를 UI와 분리하여 코드를 파악하고 테스트하기 편하게 만들어줄 수 있음</p>\n<h2 id=\"43-첫-번째-테스트\" style=\"position:relative;\"><a href=\"#43-%EC%B2%AB-%EB%B2%88%EC%A7%B8-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\"43 첫 번째 테스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.3 첫 번째 테스트</h2>\n<p>테스트를 두 단계로 진행</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// 1. 테스트에 필요한 데이터와 객체를 뜻하는 픽스처를 설정</span>\n<span class=\"token comment\">// 2. 이 픽스처의 속성들을 검증</span>\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'province'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'shortfall'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> asia <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Province</span><span class=\"token punctuation\">(</span><span class=\"token function\">sampleProvinceData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1. 픽스처 설정</span>\n    assert<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span>asia<span class=\"token punctuation\">.</span>shortfall<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2. 검증</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p>실패해야 할 상황에서는 반드시 실패하게 만들</p>\n</blockquote>\n<ul>\n<li>일시적으로 코드에 오류를 주입하여 각 테스트가 실패하는 모습을 한 번씩 보는 것도 좋은 방법임</li>\n</ul>\n<blockquote>\n<p>자주 테스트하라. 작성 중인 코드는 최소한 몇 분 간격으로 테스트하고, 적어도 하루에 한 번은 전체 테스트를 돌림</p>\n</blockquote>\n<ul>\n<li>차이(chai) 라이브러리의 assert문 또는 expect문을 이용해 코드를 검증할 수 있음</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'province'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'shortfall'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> asia <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Province</span><span class=\"token punctuation\">(</span><span class=\"token function\">sampleProvinceData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    assert<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span>asia<span class=\"token punctuation\">.</span>shortfall<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'province'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'shortfall'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> asia <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Province</span><span class=\"token punctuation\">(</span><span class=\"token function\">sampleProvinceData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>asia<span class=\"token punctuation\">.</span>shortfall<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>실패한 테스트가 하나라도 있으면 리팩터링하면 안 됨</li>\n</ul>\n<br>\n<h2 id=\"44-테스트-추가하기\" style=\"position:relative;\"><a href=\"#44-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0\" aria-label=\"44 테스트 추가하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.4 테스트 추가하기</h2>\n<ul>\n<li>테스트는 위험 요인을 중심으로 작성</li>\n<li>테스트의 목적은 어디까지나 현재 혹은 향후에 발생하는 버그를 찾는 데 있기에 단순히 필드를 읽고 쓰기만 하는 접근자는 테스트할 필요가 없음</li>\n</ul>\n<blockquote>\n<p>완벽하게 만드느라 테스트를 수행하지 못하느니, 불완전한 테스트라도 작성해 실행하는 게 낫다</p>\n</blockquote>\n<ul>\n<li>아래처럼 똑같은 픽스처가 중복되는 부분이 있다면, 픽스처를 여러 테스트문에서 접근할 수 있는 장소로 옮겨 중복을 제거할 수 있지만, ‘테스트끼리 상호작용하게 하는 공유 픽스처’를 생성하는 원인이 되어 테스트를 실행하는 순서에 따라 결과가 달라질 수 있기 때문에 문제가 됨</li>\n<li>이때는 <code class=\"language-text\">beforeEach</code> 를 사용할 수 있음</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'province'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> asia<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    asia <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Province</span><span class=\"token punctuation\">(</span><span class=\"token function\">sampleProvinceData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'shortfall'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>asia<span class=\"token punctuation\">.</span>shortfall<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'profit'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>asia<span class=\"token punctuation\">.</span>profit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span><span class=\"token number\">230</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>개별 테스트를 실행할 때마다 픽스처를 새로 만들면 모든 테스트를 독립적으로 구성할 수 있음</li>\n</ul>\n<br>\n<h2 id=\"45-픽스처-수정하기\" style=\"position:relative;\"><a href=\"#45-%ED%94%BD%EC%8A%A4%EC%B2%98-%EC%88%98%EC%A0%95%ED%95%98%EA%B8%B0\" aria-label=\"45 픽스처 수정하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.5 픽스처 수정하기</h2>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'province'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change production'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    asia<span class=\"token punctuation\">.</span>producers<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>production <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>asia<span class=\"token punctuation\">.</span>shortfall<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>asia<span class=\"token punctuation\">.</span>profit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span><span class=\"token number\">292</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>위 예제에서는 <code class=\"language-text\">beforeEach에서</code> ‘설정’한 표준 픽스처를 취해서, 테스트를 ‘수행’하고, 이 픽스처가 일을 기대한 대로 처리했는지를 ‘검증’</li>\n<li>이 테스트는 <code class=\"language-text\">it</code> 구문 하나에서 두 가지 속성을 검증하고 있지만, 일반적으로 <code class=\"language-text\">it</code> 구문 하나당 검증도 하나씩만 하는 게 좋음</li>\n</ul>\n<br>\n<h2 id=\"46-경계-조건-검사하기\" style=\"position:relative;\"><a href=\"#46-%EA%B2%BD%EA%B3%84-%EC%A1%B0%EA%B1%B4-%EA%B2%80%EC%82%AC%ED%95%98%EA%B8%B0\" aria-label=\"46 경계 조건 검사하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.6 경계 조건 검사하기</h2>\n<ul>\n<li>의도나 예측 범위를 벗어나는 경계 지점에서 문제가 생길 경우 확인하는 테스트도 함께 작성하면 좋음</li>\n<li>컬렉션 타입의 값이 비었을 때나, 숫자형이 0 또는 음수인 경우를 검사해봄</li>\n</ul>\n<blockquote>\n<p>문제가 생길 가능성이 있는 경계 조건을 생각해보고 그 부분을 집중적으로 테스트하자</p>\n</blockquote>\n<ul>\n<li>테스트가 모든 버그를 걸러주지는 못할지라도, 안심하고 리팩터링할 수 있는 보호막은 되어줌 그리고 리팩터링을 하면서 프로그램을 더욱 깊이 이해하게 되어 더 많은 버그를 찾게 됨</li>\n</ul>\n<br>\n<h2 id=\"47-끝나지-않은-여정\" style=\"position:relative;\"><a href=\"#47-%EB%81%9D%EB%82%98%EC%A7%80-%EC%95%8A%EC%9D%80-%EC%97%AC%EC%A0%95\" aria-label=\"47 끝나지 않은 여정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.7 끝나지 않은 여정</h2>\n<ul>\n<li>테스트는 반복적으로 진행</li>\n<li>기능을 새로 추가할 때마다 테스트도 추가하는 것은 물론, 기존 테스트도 다시 살펴봐야 함</li>\n<li>버그 리포트를 받으면 가장 먼저 그 버그를 드러내는 단위 테스트부터 작성</li>\n</ul>\n<br>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<ul>\n<li><a href=\"https://www.yes24.com/Product/Goods/89649360\">리팩터링 2판 책</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#41-%EC%9E%90%EA%B0%80-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BD%94%EB%93%9C%EC%9D%98-%EA%B0%80%EC%B9%98\">4.1 자가 테스트 코드의 가치</a></li>\n<li><a href=\"#42-%ED%85%8C%EC%8A%A4%ED%8A%B8%ED%95%A0-%EC%83%98%ED%94%8C-%EC%BD%94%EB%93%9C\">4.2 테스트할 샘플 코드</a></li>\n<li><a href=\"#43-%EC%B2%AB-%EB%B2%88%EC%A7%B8-%ED%85%8C%EC%8A%A4%ED%8A%B8\">4.3 첫 번째 테스트</a></li>\n<li><a href=\"#44-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0\">4.4 테스트 추가하기</a></li>\n<li><a href=\"#45-%ED%94%BD%EC%8A%A4%EC%B2%98-%EC%88%98%EC%A0%95%ED%95%98%EA%B8%B0\">4.5 픽스처 수정하기</a></li>\n<li><a href=\"#46-%EA%B2%BD%EA%B3%84-%EC%A1%B0%EA%B1%B4-%EA%B2%80%EC%82%AC%ED%95%98%EA%B8%B0\">4.6 경계 조건 검사하기</a></li>\n<li><a href=\"#47-%EB%81%9D%EB%82%98%EC%A7%80-%EC%95%8A%EC%9D%80-%EC%97%AC%EC%A0%95\">4.7 끝나지 않은 여정</a></li>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>\n</div>","frontmatter":{"date":"August 23, 2023","title":"리팩터링 4장&5장","categories":"Study","author":"Kay","emoji":"👋"},"fields":{"slug":"/refactoring-4&5/"}},"prev":{"id":"7326d706-30eb-5609-8492-c6fc9addd245","html":"<h2 id=\"61-함수-추출하기\" style=\"position:relative;\"><a href=\"#61-%ED%95%A8%EC%88%98-%EC%B6%94%EC%B6%9C%ED%95%98%EA%B8%B0\" aria-label=\"61 함수 추출하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6.1 함수 추출하기</h2>\n<ul>\n<li>코드 조각을 찾아 무슨 일을 하는지 파악한 다음, 독립된 함수로 추출하고 목적에 맞는 이름 붙임</li>\n<li>코드를 독립된 함수로 묶는 기준은 ‘목적과 구현을 분리’하는 것</li>\n<li>코드를 보고 무슨 일을 하는지 파악하는 데 한참이 걸린다면 그 부분을 함수로 추출한 뒤 ‘무슨 일’에 걸맞는 이름을 지음</li>\n<li>함수는 짧게 작성(함수가 짧으면 캐싱하기도 쉽기 때문에 컴파일러가 최적화하는 데 유리할 때가 많음)</li>\n<li>짧은 함수는 이름 짓기에 특별히 신경 써야 함(별도의 문서 없이 코드 자체만으로 내용을 충분히 설명되게 만들어야 함)</li>\n</ul>\n<p>절차</p>\n<ol>\n<li>함수를 새로 만들고 목적을 잘 드러내는 이름을 붙임 (’어떻게’가 아닌 ‘무엇을’ 하는지가 드러나야 함)</li>\n<li>추출할 코드를 원본 함수에서 복사하여 새 함수에 붙여넣음</li>\n<li>추출한 코드 중 원본 함수의 지역 변수를 참조하거나 추출한 함수의 유효범위를 벗어나는 변수는 없는지 검사(있다면 매개변수로 전달함)</li>\n<li>변수를 다 처리했다면 컴파일</li>\n<li>원본 함수에서 추출한 코드 부분을 새로 만든 함수를 호출하는 문장으로 바꿈(즉, 추출한 함수로 일을 위임함)</li>\n<li>테스트</li>\n<li>다른 코드에 방금 추출한 것과 똑같거나 비슷한 코드가 없는지 확인. 있다면 방금 추출한 새 함수를 호출하도록 바꿀지 검토(인라인 코드를 함수 호출로 변경)</li>\n</ol>\n<blockquote>\n<p>함수를 중첩시키면, 추출한 함수에서 원본 함수에 정의된 모든 변수에 접근할 수 있지만, 중첩 함수를 지원하지 않는 언어에서는 불가능한 방법.\n따라서 원본 함수에서만 접근할 수 있는 변수들에 특별히 신경 써야함</p>\n</blockquote>\n<p>예시코드</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// before</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">printOwing</span><span class=\"token punctuation\">(</span>invoice<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> outstanding <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'***************'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'**** 고객 채무 ****'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'***************'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> o <span class=\"token keyword\">of</span> invoice<span class=\"token punctuation\">.</span>orders<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    outstanding <span class=\"token operator\">+=</span> o<span class=\"token punctuation\">.</span>amount<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> today <span class=\"token operator\">=</span> Clock<span class=\"token punctuation\">.</span>today<span class=\"token punctuation\">;</span>\n  invoice<span class=\"token punctuation\">.</span>dueDate <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>today<span class=\"token punctuation\">.</span><span class=\"token function\">getFullYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> today<span class=\"token punctuation\">.</span><span class=\"token function\">getMonth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> today<span class=\"token punctuation\">.</span><span class=\"token function\">getDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">고객명: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>invoice<span class=\"token punctuation\">.</span>customer<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">채무액: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>customer<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">마감일: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>invoice<span class=\"token punctuation\">.</span>dueDate<span class=\"token punctuation\">.</span>toLocaleDateString<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// after</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">printOwing</span><span class=\"token punctuation\">(</span>invoice<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">printBanner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> outstanding <span class=\"token operator\">=</span> <span class=\"token function\">calculateOutstanding</span><span class=\"token punctuation\">(</span>invoice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">recordDueDate</span><span class=\"token punctuation\">(</span>invoice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printDetails</span><span class=\"token punctuation\">(</span>invoice<span class=\"token punctuation\">,</span> outstanding<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">calculateOutstanding</span><span class=\"token punctuation\">(</span>invoice<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> o <span class=\"token keyword\">of</span> invoice<span class=\"token punctuation\">.</span>orders<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    result <span class=\"token operator\">+=</span> o<span class=\"token punctuation\">.</span>amount<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">recordDueDate</span><span class=\"token punctuation\">(</span>invoice<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> today <span class=\"token operator\">=</span> Clock<span class=\"token punctuation\">.</span>today<span class=\"token punctuation\">;</span>\n  invoice<span class=\"token punctuation\">.</span>dueDate <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>today<span class=\"token punctuation\">.</span><span class=\"token function\">getFullYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> today<span class=\"token punctuation\">.</span><span class=\"token function\">getMonth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> today<span class=\"token punctuation\">.</span><span class=\"token function\">getDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">printDetails</span><span class=\"token punctuation\">(</span>invoice<span class=\"token punctuation\">,</span> outstanding<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">고객명: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>invoice<span class=\"token punctuation\">.</span>customer<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">채무액: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>customer<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">마감일: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>invoice<span class=\"token punctuation\">.</span>dueDate<span class=\"token punctuation\">.</span>toLocaleDateString<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<h2 id=\"62-함수-인라인하기\" style=\"position:relative;\"><a href=\"#62-%ED%95%A8%EC%88%98-%EC%9D%B8%EB%9D%BC%EC%9D%B8%ED%95%98%EA%B8%B0\" aria-label=\"62 함수 인라인하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6.2 함수 인라인하기</h2>\n<ul>\n<li>함수 본문이 이름만큼 명확하거나, 리팩터링 과정에서 잘못 추출된 함수들은 인라인함.(간접 호출을 너무 과하게 쓰는 코드도 흔한 인라인 대상)</li>\n</ul>\n<p>절차</p>\n<ol>\n<li>다형 메서드인지 확인(서브클래스에서 오버라이드하는 메서드는 인라인하면 안 됨)</li>\n<li>인라인할 함수를 호출하는 곳을 모두 찾음</li>\n<li>각 호출문을 함수 본문으로 교체함</li>\n<li>하나씩 교체할 때마다 테스트함</li>\n<li>함수 정의(원래 함수)를 삭제함</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// before</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">reportLines</span><span class=\"token punctuation\">(</span>aCustomer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> lines <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">gatherCustomerData</span><span class=\"token punctuation\">(</span>lines<span class=\"token punctuation\">,</span> aCustomer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> lines<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">gatherCustomerData</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span> aCustomer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  out<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> aCustomer<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  out<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'location'</span><span class=\"token punctuation\">,</span> aCustomer<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// after</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">reportLines</span><span class=\"token punctuation\">(</span>aCustomer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> lines <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  lines<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> aCustomer<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  lines<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'location'</span><span class=\"token punctuation\">,</span> aCustomer<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> lines<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>핵심은 항상 단계를 잘게 나눠서 처리하는 것</p>\n<br>\n<h2 id=\"63-변수-추출하기\" style=\"position:relative;\"><a href=\"#63-%EB%B3%80%EC%88%98-%EC%B6%94%EC%B6%9C%ED%95%98%EA%B8%B0\" aria-label=\"63 변수 추출하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6.3 변수 추출하기</h2>\n<ul>\n<li>지역 변수를 활용하면 표현식을 쪼개 관리하기 더 쉽게 만들고, 복잡한 로직을 구성하는 단계마다 이름을 붙일 수 있어서 코드의 목적을 훨씬 명확하게 드러낼 수 있음 또 디버깅에도 도움이 됨</li>\n<li>변수 추출, 즉 표현식에 이름을 붙이기로 했다면 그 이름이 들어갈 문맥도 살펴야 함</li>\n<li>함수를 벗어난 넓은 문맥에서까지 의미가 된다면 변수가 아닌 함수로 추출해야 함</li>\n</ul>\n<p>절차</p>\n<ol>\n<li>추출하려는 표현식에 부작용은 없는지 확인</li>\n<li>불변 변수를 하나 선언하고 이름을 붙인 표현식의 복제본을 대입 함</li>\n<li>원본 표현식을 새로 만든 변수로 교체함</li>\n<li>테스트 함</li>\n<li>표현식을 여러 곳에서 사용한다면 각각을 새로 만든 변수로 교체, 하나 교체할 때마다 테스트 함</li>\n</ol>\n<p>예시 코드</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// before</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">price</span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 가격(price) = 기본 가격 - 수량 할인 + 배송비</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    order<span class=\"token punctuation\">.</span>quantity <span class=\"token operator\">*</span> order<span class=\"token punctuation\">.</span>itemPrice <span class=\"token operator\">-</span>\n    Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> order<span class=\"token punctuation\">.</span>quantity <span class=\"token operator\">-</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> order<span class=\"token punctuation\">.</span>itemPrice <span class=\"token operator\">*</span> <span class=\"token number\">0.05</span> <span class=\"token operator\">+</span>\n    Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">.</span>quantity <span class=\"token operator\">*</span> order<span class=\"token punctuation\">.</span>itemPrice <span class=\"token operator\">*</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// after</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">price</span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> basePrice <span class=\"token operator\">=</span> order<span class=\"token punctuation\">.</span>quantity <span class=\"token operator\">*</span> order<span class=\"token punctuation\">.</span>itemPrice<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> quantityDiscount <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> order<span class=\"token punctuation\">.</span>quantity <span class=\"token operator\">-</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> order<span class=\"token punctuation\">.</span>itemPrice <span class=\"token operator\">*</span> <span class=\"token number\">0.05</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> shipping <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">.</span>quantity <span class=\"token operator\">*</span> order<span class=\"token punctuation\">.</span>itemPrice <span class=\"token operator\">*</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> basePrice <span class=\"token operator\">-</span> quantityDiscount <span class=\"token operator\">+</span> shipping<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>같은 코드를 클래스 문맥 안에서는 변수가 아닌 메서드로 추출할 수 있음</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Order</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>aRecord<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_data <span class=\"token operator\">=</span> aRecord<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">get</span> <span class=\"token function\">quantity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_data<span class=\"token punctuation\">.</span>quantity<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">get</span> <span class=\"token function\">itemPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_data<span class=\"token punctuation\">.</span>itemPrice<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">get</span> <span class=\"token function\">price</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>basePrice <span class=\"token operator\">-</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>quantityDiscount <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>shipping<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">get</span> <span class=\"token function\">basePrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>quantity <span class=\"token operator\">*</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>itemPrice<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">get</span> <span class=\"token function\">quantityDiscount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>quantity <span class=\"token operator\">-</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>itemPrice <span class=\"token operator\">*</span> <span class=\"token number\">0.05</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">get</span> <span class=\"token function\">shipping</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>basePrice <span class=\"token operator\">*</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<h2 id=\"64-변수-인라인하기\" style=\"position:relative;\"><a href=\"#64-%EB%B3%80%EC%88%98-%EC%9D%B8%EB%9D%BC%EC%9D%B8%ED%95%98%EA%B8%B0\" aria-label=\"64 변수 인라인하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6.4 변수 인라인하기</h2>\n<p>절차</p>\n<ol>\n<li>대입문의 우변(표현식)에서 부작용이 생기지는 않는지 확인함</li>\n<li>변수가 불변으로 선언되지 않았다면 불변으로 만든 후 테스트함</li>\n<li>이 변수를 가장 처음 사용하는 코드를 찾아서 대입문 우변의 코드로 바꿈</li>\n<li>테스트</li>\n<li>변수를 사용하는 부분을 모두 교체할 때까지 이 과정을 반복</li>\n<li>변수 선언문과 대입문을 지움</li>\n<li>테스트</li>\n</ol>\n<p>예시 코드</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// before</span>\n<span class=\"token keyword\">let</span> basePrice <span class=\"token operator\">=</span> anOrder<span class=\"token punctuation\">.</span>basePrice<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">return</span> basePrice <span class=\"token operator\">></span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// after</span>\n<span class=\"token keyword\">return</span> anOrder<span class=\"token punctuation\">.</span>basePrice <span class=\"token operator\">></span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span></code></pre></div>\n<br>\n<h2 id=\"65-함수-선언-바꾸기\" style=\"position:relative;\"><a href=\"#65-%ED%95%A8%EC%88%98-%EC%84%A0%EC%96%B8-%EB%B0%94%EA%BE%B8%EA%B8%B0\" aria-label=\"65 함수 선언 바꾸기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6.5 함수 선언 바꾸기</h2>\n<ul>\n<li>함수는 프로그램을 작은 부분으로 나누는 주된 수단</li>\n<li>함수 선언은 각 부분이 서로 맞물리는 방식을 표현하며, 실질적으로 소프트웨어 시스템의 구성 요소를 조립하는 연결부 역할</li>\n<li>이러한 연결부에서 가장 중요한 것은 함수의 이름</li>\n<li>함수 구현 코드를 살펴볼 필요 없이 호출문만 보고도 무슨 일을 하는지 파악할 수 있어야 함</li>\n<li>함수의 매개변수 역시 중요</li>\n<li>매개변수는 함수를 사용하는 문맥을 설정 함</li>\n<li>매개변수를 적절히 사용하여 함수의 활용 범위를 넓힐 수 있으며, 다른 모듈과의 결합을 제거할 수도 있음</li>\n</ul>\n<p>간단한 절차</p>\n<ol>\n<li>매개변수를 제거하려거든 먼저 함수 본문에서 제거 대상 매개변수를 참조하는 곳은 없는지 확인 함</li>\n<li>메서드 선언을 원하는 형태로 바꿈</li>\n<li>기존 메서드 선언을 참조하는 부분을 모두 찾아서 바뀐 형태로 수정함</li>\n<li>테스트한다.</li>\n</ol>\n<p>마이그레이션 절차</p>\n<ol>\n<li>이어지는 추출 단계를 수월하게 만들어야 한다면 함수의 본문을 적절히 리팩터링 함</li>\n<li>함수 본문을 새로운 함수로 추출 함</li>\n<li>추출한 함수에 매개변수를 추가해야 한다면 ‘간단한 절차’를 따라 추가 함</li>\n<li>테스트한다.</li>\n<li>기존 함수를 인라인</li>\n<li>이름을 임시로 붙여뒀다면 함수 선언 바꾸기를 한 번 더 적용해서 원래 이름으로 되돌림</li>\n<li>테스트</li>\n</ol>\n<p>예시 코드</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// before</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">inNewEngland</span><span class=\"token punctuation\">(</span>aCustomer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'MA'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'CT'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ME'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'VT'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'NH'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'RI'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>aCustomer<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> newEnglanders <span class=\"token operator\">=</span> someCustomers<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">inNewEngland</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// after</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">inNewEngland</span><span class=\"token punctuation\">(</span>stateCode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'MA'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'CT'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ME'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'VT'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'NH'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'RI'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>stateCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> newEnglanders <span class=\"token operator\">=</span> someCustomers<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">inNewEngland</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">.</span>satate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<br>\n<h2 id=\"66-변수-선언하기\" style=\"position:relative;\"><a href=\"#66-%EB%B3%80%EC%88%98-%EC%84%A0%EC%96%B8%ED%95%98%EA%B8%B0\" aria-label=\"66 변수 선언하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6.6 변수 선언하기</h2>\n<ul>\n<li>데이터는 참조하는 모든 부분을 한 번에 바꿔야 코드가 제대로 작동하기 때문에 함수보다 다루기가 까다로움</li>\n<li>접근할 수 있는 범위가 넓은 데이터를 옮길 때는 먼저 그 데이터로의 접근을 독점하려는 함수를 만드는 식으로 캡슐화하는 것이 좋음</li>\n<li>데이터 캡슐화는 데이터 변경 전 검증이나 변경 후 추가 로직을 쉽게 끼워넣을 수 있다는 장점도 있음</li>\n<li>데이터의 캡슐화를 위해 객체 지향에서 객체의 데이터는 항상 private으로 유지해야 함</li>\n</ul>\n<p>절차</p>\n<ol>\n<li>변수로의 접근과 갱신을 전담하는 캡슐화 함수들을 만듦</li>\n<li>정적 검사를 수행</li>\n<li>변수를 직접 참조하던 부분을 모두 적절한 캡슐화 함수 호출로 바꿈. 하나씩 바꿀 때마다 테스트 진행</li>\n<li>변수의 접근 범위를 제한</li>\n<li>테스트</li>\n<li>변수 값이 레코드라면 레코드 캡슐화하기를 적용할지 고려해봄</li>\n</ol>\n<p>예시 코드</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// before</span>\n<span class=\"token comment\">// 전역 변수에 중요한 데이터가 담겨 있는 경우</span>\n<span class=\"token keyword\">let</span> defaultOwner <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> firstName<span class=\"token operator\">:</span> <span class=\"token string\">'마틴'</span><span class=\"token punctuation\">,</span> lastName<span class=\"token operator\">:</span> <span class=\"token string\">'파울러'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 데이터를 참조하는 코드</span>\nspaceship<span class=\"token punctuation\">.</span>owner <span class=\"token operator\">=</span> defaultOwner<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 데이터를 갱신하는 코드</span>\ndefaultOwner <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> firstName<span class=\"token operator\">:</span> <span class=\"token string\">'레베카'</span><span class=\"token punctuation\">,</span> lastName<span class=\"token operator\">:</span> <span class=\"token string\">'파슨스'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// after</span>\n<span class=\"token comment\">// defaultOwner.js</span>\n<span class=\"token keyword\">let</span> defaultOwner <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> firstName<span class=\"token operator\">:</span> <span class=\"token string\">'마틴'</span><span class=\"token punctuation\">,</span> lastName<span class=\"token operator\">:</span> <span class=\"token string\">'파울러'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getDefaultOwner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> defaultOwner<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">setDefaultOwner</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  defaultOwner <span class=\"token operator\">=</span> arg<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>값 캡슐화하기</p>\n<ul>\n<li>변수뿐 아니라 변수에 담긴 내용을 변경하는 행위까지 제어할 수 있게 캡슐화</li>\n<li>게터가 데이터의 복제본을 반환하도록 수정</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getDefaultOwner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> defaultOwner<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>레코드 캡슐화를 통해 아예 변경할 수 없게 만드는 방법도 있음</li>\n</ul>\n<br>\n<h2 id=\"67-변수-이름-바꾸기\" style=\"position:relative;\"><a href=\"#67-%EB%B3%80%EC%88%98-%EC%9D%B4%EB%A6%84-%EB%B0%94%EA%BE%B8%EA%B8%B0\" aria-label=\"67 변수 이름 바꾸기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6.7 변수 이름 바꾸기</h2>\n<ul>\n<li>명확한 프로그래밍의 핵심은 이름짓기</li>\n<li>간단한 변수의 경우 대체로 파악이 쉽지만, 함수 호출 한 번으로 끝나지 않고 값이 영속되는 필드라면 신중하게 이름을 지어야 함</li>\n</ul>\n<h3 id=\"절차\" style=\"position:relative;\"><a href=\"#%EC%A0%88%EC%B0%A8\" aria-label=\"절차 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>절차</h3>\n<ol>\n<li>폭넓게 쓰이는 변수라면 변수 캡슐화하기를 고려</li>\n<li>이름을 바꿀 변수를 참조하는 곳을 모두 찾아서, 하나씩 변경</li>\n<li>테스트</li>\n</ol>\n<h3 id=\"예시\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%8B%9C\" aria-label=\"예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예시</h3>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// before</span>\n<span class=\"token keyword\">let</span> tpHd <span class=\"token operator\">=</span> <span class=\"token string\">'untitled'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 변수를 읽기만 하는 경우</span>\nresult <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;h1></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>tpHd<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/h1></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 값을 수정하는 경우</span>\ntpHd <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">[</span><span class=\"token string\">'articleTitle'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// after: getter와 setter를 통해 변수 캡슐화하기</span>\nresult <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;h1></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">title</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/h1></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">setTitle</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span><span class=\"token string\">'articleTitle'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> _title <span class=\"token operator\">=</span> <span class=\"token string\">'untitled'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">title</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> _title<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">setTitle</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  _title <span class=\"token operator\">=</span> arg<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<h2 id=\"68-매개변수-객체-만들기\" style=\"position:relative;\"><a href=\"#68-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98-%EA%B0%9D%EC%B2%B4-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"68 매개변수 객체 만들기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6.8 매개변수 객체 만들기</h2>\n<ul>\n<li>데이터 뭉치를 데이터 구조로 묶으면 데이터 사이의 관계가 명확해짐, 나아가 함수가 이 데이터 구조를 받게 하면 매개변수 수가 줄어듬</li>\n</ul>\n<h3 id=\"절차-1\" style=\"position:relative;\"><a href=\"#%EC%A0%88%EC%B0%A8-1\" aria-label=\"절차 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>절차</h3>\n<ol>\n<li>적당한 데이터 구조가 아직 마련되어 있지 않다면 새로 만듦</li>\n<li>테스트</li>\n<li>함수 선언 바꾸기로 새 데이터 구조를 매개변수로 추가</li>\n<li>테스트</li>\n<li>함수 호출 시 새로운 데이터 구조 인스턴스를 넘기도록 수정, 하나씩 수정할 때마다 테스트 진행</li>\n<li>기존 매개변수를 사용하던 코드를 새 데이터 구조의 원소를 사용하도록 바꿈</li>\n<li>다 바꿨다면 기존 매개변수를 제거하고 테스트 함</li>\n</ol>\n<h3 id=\"예시-1\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%8B%9C-1\" aria-label=\"예시 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예시</h3>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// before</span>\n<span class=\"token comment\">// 데이터</span>\n<span class=\"token keyword\">const</span> station <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'ZB1'</span><span class=\"token punctuation\">,</span>\n  readings<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span> temp<span class=\"token operator\">:</span> <span class=\"token number\">47</span><span class=\"token punctuation\">,</span> time<span class=\"token operator\">:</span> <span class=\"token string\">'2016-11-19 09:10'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> temp<span class=\"token operator\">:</span> <span class=\"token number\">53</span><span class=\"token punctuation\">,</span> time<span class=\"token operator\">:</span> <span class=\"token string\">'2016-11-19 09:20'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> temp<span class=\"token operator\">:</span> <span class=\"token number\">58</span><span class=\"token punctuation\">,</span> time<span class=\"token operator\">:</span> <span class=\"token string\">'2016-11-19 09:30'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> temp<span class=\"token operator\">:</span> <span class=\"token number\">53</span><span class=\"token punctuation\">,</span> time<span class=\"token operator\">:</span> <span class=\"token string\">'2016-11-19 09:40'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> temp<span class=\"token operator\">:</span> <span class=\"token number\">51</span><span class=\"token punctuation\">,</span> time<span class=\"token operator\">:</span> <span class=\"token string\">'2016-11-19 09:50'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 함수</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">readingsOutsideRange</span><span class=\"token punctuation\">(</span>station<span class=\"token punctuation\">,</span> min<span class=\"token punctuation\">,</span> max<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> station<span class=\"token punctuation\">.</span>readings<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> r<span class=\"token punctuation\">.</span>temp <span class=\"token operator\">&lt;</span> min <span class=\"token operator\">||</span> r<span class=\"token punctuation\">.</span>temp <span class=\"token operator\">></span> max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 호출문</span>\nalerts <span class=\"token operator\">=</span> <span class=\"token function\">readingsOutsideRange</span><span class=\"token punctuation\">(</span>\n  station<span class=\"token punctuation\">,</span>\n  operatingPlan<span class=\"token punctuation\">.</span>temperatureFloor<span class=\"token punctuation\">,</span>\n  operatingPlan<span class=\"token punctuation\">.</span>temperatureCeiling<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// after</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">NumberRange</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>min<span class=\"token punctuation\">,</span> max<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> min<span class=\"token operator\">:</span> min<span class=\"token punctuation\">,</span> max<span class=\"token operator\">:</span> max <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_data<span class=\"token punctuation\">.</span>min<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_data<span class=\"token punctuation\">.</span>max<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">readingsOutsideRange</span><span class=\"token punctuation\">(</span>station<span class=\"token punctuation\">,</span> range<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> station<span class=\"token punctuation\">.</span>readings<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> r<span class=\"token punctuation\">.</span>temp <span class=\"token operator\">&lt;</span> range<span class=\"token punctuation\">.</span>min <span class=\"token operator\">||</span> r<span class=\"token punctuation\">.</span>temp <span class=\"token operator\">></span> range<span class=\"token punctuation\">.</span>max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> range <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NumberRange</span><span class=\"token punctuation\">(</span>operatingPlan<span class=\"token punctuation\">.</span>temperatureFloor<span class=\"token punctuation\">,</span> operatingPlan<span class=\"token punctuation\">.</span>temperatureCeiling<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nalerts <span class=\"token operator\">=</span> <span class=\"token function\">readingsOutsideRange</span><span class=\"token punctuation\">(</span>station<span class=\"token punctuation\">,</span> range<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<br>\n<h2 id=\"69-여러-함수를-클래스로-묶기\" style=\"position:relative;\"><a href=\"#69-%EC%97%AC%EB%9F%AC-%ED%95%A8%EC%88%98%EB%A5%BC-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%A1%9C-%EB%AC%B6%EA%B8%B0\" aria-label=\"69 여러 함수를 클래스로 묶기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6.9 여러 함수를 클래스로 묶기</h2>\n<ul>\n<li>클래스는 데이터와 함수를 하나의 공유 환경으로 묶은 후, 다른 프로그램 요소와 어우러질 수 있도록 그중 일부를 외부에 제공</li>\n<li>공통 데이터를 중심으로 긴밀하게 엮여 작동하는 함수 무리는 클래스 하나로 묶을 수 있음</li>\n<li>여러 함수를 클래스로 묶으면 클라이언트가 객체의 핵심 데이터를 변경할 수 있고, 파생 객체들을 일관되게 관리할 수 있음</li>\n</ul>\n<h3 id=\"절차-2\" style=\"position:relative;\"><a href=\"#%EC%A0%88%EC%B0%A8-2\" aria-label=\"절차 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>절차</h3>\n<ol>\n<li>함수들이 공유하는 공통 데이터 레코드를 캡슐화 함 2.공통 레코드를 사용하는 함수 각각을 새 클래스로 옮김</li>\n<li>데이터를 조작하는 로직들은 함수로 추출해서 새 클래스로 옮김</li>\n</ol>\n<h3 id=\"예시-2\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%8B%9C-2\" aria-label=\"예시 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예시</h3>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// before</span>\n<span class=\"token comment\">// 클라이언트 1</span>\n<span class=\"token keyword\">const</span> aReading <span class=\"token operator\">=</span> <span class=\"token function\">acquireReading</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> baseCharge <span class=\"token operator\">=</span> <span class=\"token function\">baseRate</span><span class=\"token punctuation\">(</span>aReading<span class=\"token punctuation\">.</span>month<span class=\"token punctuation\">,</span> aReading<span class=\"token punctuation\">.</span>year<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> aReading<span class=\"token punctuation\">.</span>quantity<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 클라이언트 2</span>\n<span class=\"token keyword\">const</span> aReading <span class=\"token operator\">=</span> <span class=\"token function\">acquireReading</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> baseCharge <span class=\"token operator\">=</span> <span class=\"token function\">baseRate</span><span class=\"token punctuation\">(</span>aReading<span class=\"token punctuation\">.</span>month<span class=\"token punctuation\">,</span> aReading<span class=\"token punctuation\">.</span>year<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> aReading<span class=\"token punctuation\">.</span>quantity<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> taxableCharge <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> base <span class=\"token operator\">-</span> <span class=\"token function\">taxThreshold</span><span class=\"token punctuation\">(</span>aReading<span class=\"token punctuation\">.</span>year<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// after</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Reading</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_customer <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>customer<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_quantity <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>quantity<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_month <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>month<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_year <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>year<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">get</span> <span class=\"token function\">customer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_customer<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">quantity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_quantity<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">month</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_month<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">year</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_year<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">get</span> <span class=\"token function\">baseCharge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">baseRate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>month<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>year<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>quantity<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">get</span> <span class=\"token function\">taxableCharge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>baseCharge <span class=\"token operator\">-</span> <span class=\"token function\">taxThreshold</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>year<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 클라이언트 3</span>\n<span class=\"token keyword\">const</span> rawReading <span class=\"token operator\">=</span> <span class=\"token function\">acquireReading</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> aReading <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Reading</span><span class=\"token punctuation\">(</span>rawReading<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> basicChargeAmount <span class=\"token operator\">=</span> aReading<span class=\"token punctuation\">.</span>baseCharge<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> taxableCharge <span class=\"token operator\">=</span> aReading<span class=\"token punctuation\">.</span>taxableCharge<span class=\"token punctuation\">;</span></code></pre></div>\n<br>\n<h2 id=\"610-여러-함수를-변환-함수로-묶기\" style=\"position:relative;\"><a href=\"#610-%EC%97%AC%EB%9F%AC-%ED%95%A8%EC%88%98%EB%A5%BC-%EB%B3%80%ED%99%98-%ED%95%A8%EC%88%98%EB%A1%9C-%EB%AC%B6%EA%B8%B0\" aria-label=\"610 여러 함수를 변환 함수로 묶기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6.10 여러 함수를 변환 함수로 묶기</h2>\n<ul>\n<li>데이터를 입력받아서 여러 가지 정보를 도출하는 작업들을 한데로 모아두면 검색과 갱신을 일관된 장소에서 할 수 있고 로직 중복도 막을 수 있음</li>\n<li>변환 함수를 사용하면 원본 데이터를 입력받아서 필요한 정보를 모두 도출한 뒤, 각각을 출력 데이터의 필드에 넣어 반환 함</li>\n</ul>\n<blockquote>\n<p>💡 원본 데이터가 코드 안에서 갱신될 때는 클래스로 묶는 것이 좋음</p>\n</blockquote>\n<h3 id=\"절차-3\" style=\"position:relative;\"><a href=\"#%EC%A0%88%EC%B0%A8-3\" aria-label=\"절차 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>절차</h3>\n<ol>\n<li>변환할 레코드를 입력받아서 값을 그대로 반환하는 변환 함수를 만듦</li>\n<li>묶을 함수 중 함수 하나를 골라서 본문 코드를 변환 함수로 옮기고, 처리 결과를 레코드에 새 필드로 기록 그런 다음 클라이언트 코드가 이 필드를 사용하도록 수정 함</li>\n<li>테스트</li>\n<li>나머지 관련 함수도 위 과정에 따라 처리함</li>\n</ol>\n<h3 id=\"예시-3\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%8B%9C-3\" aria-label=\"예시 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예시</h3>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// before</span>\n<span class=\"token comment\">// 클라이언트 1</span>\n<span class=\"token keyword\">const</span> aReading <span class=\"token operator\">=</span> <span class=\"token function\">acquireReading</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> baseCharge <span class=\"token operator\">=</span> <span class=\"token function\">baseRate</span><span class=\"token punctuation\">(</span>aReading<span class=\"token punctuation\">.</span>month<span class=\"token punctuation\">,</span> aReading<span class=\"token punctuation\">.</span>year<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> aReading<span class=\"token punctuation\">.</span>quantity<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 클라이언트 2</span>\n<span class=\"token keyword\">const</span> aReading <span class=\"token operator\">=</span> <span class=\"token function\">acquireReading</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> base <span class=\"token operator\">=</span> <span class=\"token function\">baseRate</span><span class=\"token punctuation\">(</span>aReading<span class=\"token punctuation\">.</span>month<span class=\"token punctuation\">,</span> aReading<span class=\"token punctuation\">.</span>year<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> aReading<span class=\"token punctuation\">.</span>quantity<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> taxableCharge <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> base <span class=\"token operator\">-</span> <span class=\"token function\">taxThreshold</span><span class=\"token punctuation\">(</span>aReading<span class=\"token punctuation\">.</span>year<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 클라이언트 3</span>\n<span class=\"token keyword\">const</span> aReading <span class=\"token operator\">=</span> <span class=\"token function\">acquireReading</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> basicChargeAmount <span class=\"token operator\">=</span> <span class=\"token function\">calculateBaseCharge</span><span class=\"token punctuation\">(</span>aReading<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">calculateBaseCharge</span><span class=\"token punctuation\">(</span>aReading<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">baseRate</span><span class=\"token punctuation\">(</span>aReading<span class=\"token punctuation\">.</span>month<span class=\"token punctuation\">,</span> aReading<span class=\"token punctuation\">.</span>year<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> aReading<span class=\"token punctuation\">.</span>quantity<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// after</span>\n<span class=\"token comment\">// 클라이언트 1, 3</span>\n<span class=\"token keyword\">const</span> rawReading <span class=\"token operator\">=</span> <span class=\"token function\">acquireReading</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 미가공 측정값</span>\n<span class=\"token keyword\">const</span> aReading <span class=\"token operator\">=</span> <span class=\"token function\">enrichReading</span><span class=\"token punctuation\">(</span>rawReading<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> basicChargeAmount <span class=\"token operator\">=</span> aReading<span class=\"token punctuation\">.</span>baseCharge<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 클라이언트 2</span>\n<span class=\"token keyword\">const</span> rawReading <span class=\"token operator\">=</span> <span class=\"token function\">acquireReading</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 미가공 측정값</span>\n<span class=\"token keyword\">const</span> aReading <span class=\"token operator\">=</span> <span class=\"token function\">enrichReading</span><span class=\"token punctuation\">(</span>rawReading<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> taxableCharge <span class=\"token operator\">=</span> aReading<span class=\"token punctuation\">.</span>taxableCharge<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">enrichReading</span><span class=\"token punctuation\">(</span>original<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">cloneDeep</span><span class=\"token punctuation\">(</span>original<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  result<span class=\"token punctuation\">.</span>baseCharge <span class=\"token operator\">=</span> <span class=\"token function\">calculateBaseCharge</span><span class=\"token punctuation\">(</span>aReading<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  result<span class=\"token punctuation\">.</span>taxableCharge <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">.</span>baseCharge <span class=\"token operator\">-</span> <span class=\"token function\">taxThreshold</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>year<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">enrichReading()</code> 처럼 정보를 추가해 반환할 때 원본 측정값 레코드는 변경하지 않아야 함</li>\n</ul>\n<br>\n<h2 id=\"611-단계-쪼개기\" style=\"position:relative;\"><a href=\"#611-%EB%8B%A8%EA%B3%84-%EC%AA%BC%EA%B0%9C%EA%B8%B0\" aria-label=\"611 단계 쪼개기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6.11 단계 쪼개기</h2>\n<ul>\n<li>서로 다른 두 대상을 한꺼번에 다루는 코드를 발견하면 각각을 별개 모듈로 나눌 수 있음</li>\n<li>이렇게 분리하는 가장 간편한 방법 하나는 동작을 연이은 두 단계로 쪼개는 것</li>\n<li>가장 대표적인 예는 컴파일러</li>\n<li>컴파일 작업은 여러 단계가 순차적으로 연결된 형태로 분리되어 있음</li>\n<li>각 단계는 자신만의 문제에 집중하기 때문에 나머지 단계에 관해서는 자세히 몰라도 이해할 수 있음</li>\n</ul>\n<h3 id=\"절차-4\" style=\"position:relative;\"><a href=\"#%EC%A0%88%EC%B0%A8-4\" aria-label=\"절차 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>절차</h3>\n<ol>\n<li>두 번째 단계에 해당하는 코드를 독립 함수로 추출함</li>\n<li>테스트</li>\n<li>중간 데이터 구조를 만들어서 앞에서 추출한 함수의 인수로 추가함</li>\n<li>테스트</li>\n<li>추출한 두 번째 단계 함수의 매개변수를 하나씩 검토. 그중 첫 번째 단계에서 사용되는 것은 중간 데이터 구조로 옮김 하나씩 옮길 때마다 테스트함</li>\n<li>첫 번째 단계 코드를 함수로 추출하면서 중간 데이터 구조를 반환하도록 만듦</li>\n</ol>\n<h3 id=\"예시-4\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%8B%9C-4\" aria-label=\"예시 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예시</h3>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// before</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">priceOrder</span><span class=\"token punctuation\">(</span>product<span class=\"token punctuation\">,</span> quantity<span class=\"token punctuation\">,</span> shippingMethod<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> basePrice <span class=\"token operator\">=</span> product<span class=\"token punctuation\">.</span>basePrice <span class=\"token operator\">*</span> quantity<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> discount <span class=\"token operator\">=</span>\n    Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>quantity <span class=\"token operator\">-</span> product<span class=\"token punctuation\">.</span>discountThreshold<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> product<span class=\"token punctuation\">.</span>basePrice <span class=\"token operator\">*</span> product<span class=\"token punctuation\">.</span>discountRate<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> shippingPerCase <span class=\"token operator\">=</span>\n    basePrice <span class=\"token operator\">></span> shippingMethod<span class=\"token punctuation\">.</span>discountThreshold\n      <span class=\"token operator\">?</span> shippingMethod<span class=\"token punctuation\">.</span>discountedFee\n      <span class=\"token operator\">:</span> shippingMethod<span class=\"token punctuation\">.</span>feePerCase<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> shippingCost <span class=\"token operator\">=</span> quantity <span class=\"token operator\">*</span> shippingPerCase<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> price <span class=\"token operator\">=</span> basePrice <span class=\"token operator\">-</span> discount <span class=\"token operator\">+</span> shippingCost<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> price<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// after</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">priceOrder</span><span class=\"token punctuation\">(</span>product<span class=\"token punctuation\">,</span> quantity<span class=\"token punctuation\">,</span> shippingMethod<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> priceData <span class=\"token operator\">=</span> <span class=\"token function\">calculatePricingData</span><span class=\"token punctuation\">(</span>product<span class=\"token punctuation\">,</span> quantity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">applyShipping</span><span class=\"token punctuation\">(</span>priceData<span class=\"token punctuation\">,</span> shippingMethod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">calculatePricingData</span><span class=\"token punctuation\">(</span>product<span class=\"token punctuation\">,</span> quantity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> basePrice <span class=\"token operator\">=</span> product<span class=\"token punctuation\">.</span>basePrice <span class=\"token operator\">*</span> quantity<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> discount <span class=\"token operator\">=</span>\n    Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>quantity <span class=\"token operator\">-</span> product<span class=\"token punctuation\">.</span>discountThreshold<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> product<span class=\"token punctuation\">.</span>basePrice <span class=\"token operator\">*</span> product<span class=\"token punctuation\">.</span>discountRate<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> basePrice<span class=\"token punctuation\">,</span> quantity<span class=\"token punctuation\">,</span> discount <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">applyShipping</span><span class=\"token punctuation\">(</span>priceData<span class=\"token punctuation\">,</span> shippingMethod<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> shippingPerCase <span class=\"token operator\">=</span>\n    priceData<span class=\"token punctuation\">.</span>basePrice <span class=\"token operator\">></span> shippingMethod<span class=\"token punctuation\">.</span>discountThreshold\n      <span class=\"token operator\">?</span> shippingMethod<span class=\"token punctuation\">.</span>discountedFee\n      <span class=\"token operator\">:</span> shippingMethod<span class=\"token punctuation\">.</span>feePerCase<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> shippingCost <span class=\"token operator\">=</span> priceData<span class=\"token punctuation\">.</span>quantity <span class=\"token operator\">*</span> shippingPerCase<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> priceData<span class=\"token punctuation\">.</span>basePrice <span class=\"token operator\">-</span> priceData<span class=\"token punctuation\">.</span>discount <span class=\"token operator\">+</span> shippingCost<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>험블 객체 패턴(Humble Object Pattern) : 명령줄 호출과 표준 출력에 쓰는 느리고 불편한 작업과 자주 테스트해야 할 복잡한 동작을 분리함으로써 테스트를 더 쉽게 수행하게 만듦</li>\n</ul>\n<br>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<ul>\n<li><a href=\"https://www.yes24.com/Product/Goods/89649360\">리팩터링 2판 책</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#61-%ED%95%A8%EC%88%98-%EC%B6%94%EC%B6%9C%ED%95%98%EA%B8%B0\">6.1 함수 추출하기</a></li>\n<li><a href=\"#62-%ED%95%A8%EC%88%98-%EC%9D%B8%EB%9D%BC%EC%9D%B8%ED%95%98%EA%B8%B0\">6.2 함수 인라인하기</a></li>\n<li><a href=\"#63-%EB%B3%80%EC%88%98-%EC%B6%94%EC%B6%9C%ED%95%98%EA%B8%B0\">6.3 변수 추출하기</a></li>\n<li><a href=\"#64-%EB%B3%80%EC%88%98-%EC%9D%B8%EB%9D%BC%EC%9D%B8%ED%95%98%EA%B8%B0\">6.4 변수 인라인하기</a></li>\n<li><a href=\"#65-%ED%95%A8%EC%88%98-%EC%84%A0%EC%96%B8-%EB%B0%94%EA%BE%B8%EA%B8%B0\">6.5 함수 선언 바꾸기</a></li>\n<li><a href=\"#66-%EB%B3%80%EC%88%98-%EC%84%A0%EC%96%B8%ED%95%98%EA%B8%B0\">6.6 변수 선언하기</a></li>\n<li>\n<p><a href=\"#67-%EB%B3%80%EC%88%98-%EC%9D%B4%EB%A6%84-%EB%B0%94%EA%BE%B8%EA%B8%B0\">6.7 변수 이름 바꾸기</a></p>\n<ul>\n<li><a href=\"#%EC%A0%88%EC%B0%A8\">절차</a></li>\n<li><a href=\"#%EC%98%88%EC%8B%9C\">예시</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#68-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98-%EA%B0%9D%EC%B2%B4-%EB%A7%8C%EB%93%A4%EA%B8%B0\">6.8 매개변수 객체 만들기</a></p>\n<ul>\n<li><a href=\"#%EC%A0%88%EC%B0%A8-1\">절차</a></li>\n<li><a href=\"#%EC%98%88%EC%8B%9C-1\">예시</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#69-%EC%97%AC%EB%9F%AC-%ED%95%A8%EC%88%98%EB%A5%BC-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%A1%9C-%EB%AC%B6%EA%B8%B0\">6.9 여러 함수를 클래스로 묶기</a></p>\n<ul>\n<li><a href=\"#%EC%A0%88%EC%B0%A8-2\">절차</a></li>\n<li><a href=\"#%EC%98%88%EC%8B%9C-2\">예시</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#610-%EC%97%AC%EB%9F%AC-%ED%95%A8%EC%88%98%EB%A5%BC-%EB%B3%80%ED%99%98-%ED%95%A8%EC%88%98%EB%A1%9C-%EB%AC%B6%EA%B8%B0\">6.10 여러 함수를 변환 함수로 묶기</a></p>\n<ul>\n<li><a href=\"#%EC%A0%88%EC%B0%A8-3\">절차</a></li>\n<li><a href=\"#%EC%98%88%EC%8B%9C-3\">예시</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#611-%EB%8B%A8%EA%B3%84-%EC%AA%BC%EA%B0%9C%EA%B8%B0\">6.11 단계 쪼개기</a></p>\n<ul>\n<li><a href=\"#%EC%A0%88%EC%B0%A8-4\">절차</a></li>\n<li><a href=\"#%EC%98%88%EC%8B%9C-4\">예시</a></li>\n</ul>\n</li>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>\n</div>","frontmatter":{"date":"September 01, 2023","title":"리팩터링 6장","categories":"Study","author":"Kay","emoji":"👋"},"fields":{"slug":"/refactoring-6/"}},"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/write-log-230827/","nextSlug":"/refactoring-4&5/","prevSlug":"/refactoring-6/"}},"staticQueryHashes":["1073350324","2938748437"]}