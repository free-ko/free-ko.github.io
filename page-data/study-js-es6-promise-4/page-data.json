{"componentChunkName":"component---src-templates-blog-template-js","path":"/study-js-es6-promise-4/","result":{"data":{"cur":{"id":"1d08700c-bf48-55e6-af3a-28dd2c33ae97","html":"<br>\n<h1 align=\"center\">\n  👋  Promise -  resolve(), thenable, reject()\n</h1>\n<br>\n<h2 id=\"1-resolve\" style=\"position:relative;\"><a href=\"#1-resolve\" aria-label=\"1 resolve permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. resolve()</h2>\n<ul>\n<li>\n<p>성공(fullfilled) 상태의 <code class=\"language-text\">Promise</code> 인스턴스를 생성하여 반환</p>\n<ul>\n<li><code class=\"language-text\">Promise.resolve()</code> 형태로 작성함</li>\n<li>파라미터 값에 따라 생성 방법이 다름</li>\n</ul>\n</li>\n<li>\n<p>파라미터에 값을 작성하면 파라미터 값으로 <code class=\"language-text\">Promise</code> 인스턴스를 생성하여 반환</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'sports'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'music'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'끝'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1. resolve() 파라미터에 값을 작성했음, 값을 하나만 작성할 수 있으므로 다수를 작성하려면 Array, Object 등을 사용해야 함</span>\n<span class=\"token comment\">// 2. new 연산자를 사용하지 않지만 Promise 인스턴스를 생성하여 반환함, 성공(fulfilled) 상태로 설정함</span>\n<span class=\"token comment\">// 3. 성공 상태이므로 then()의 첫 번째 파라미터 함수가 호출됨</span>\n\n<span class=\"token comment\">// [실행결과]</span>\n<span class=\"token comment\">// 끝</span>\n<span class=\"token comment\">// [\"sports\", \"music\"]</span></code></pre></div>\n</li>\n<li>\n<p>파라미터에 <code class=\"language-text\">Promise</code> 인스턴스를 작성하면 파라미터의 <code class=\"language-text\">Promise</code> 인스턴스의 값을 사용하여 <code class=\"language-text\">Promise</code> 인스턴스를 생성하여 반환</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'sports'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'music'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">param</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1. Promise.resolve(obj) resolve() 파라미터에 Promise 인스턴스를 작성했음</span>\n<span class=\"token comment\">// 2. Promise 인스턴스를 생성하여 반환함 성공 상태로 설정함</span>\n<span class=\"token comment\">// 3. then((param) => {console.log(param)}; obj 인스턴스의 resolve() 파라미터 값이 param에 설정됨</span>\n\n<span class=\"token comment\">// [실행결과]</span>\n<span class=\"token comment\">// [\"sports\", \"music\"]</span></code></pre></div>\n</li>\n</ul>\n<br>\n<h2 id=\"2-thenable\" style=\"position:relative;\"><a href=\"#2-thenable\" aria-label=\"2 thenable permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. thenable</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">Promise.resolve()</code> 파라미터에 <code class=\"language-text\">then()</code>을 작성한 형태</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n<span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'끝'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1. const obj = Promise.resolve({...}); resolve() 파라미터에 then(){...}을 작성했음, Promise 인스턴스를 생성하여 반환함, then()을 실행하지 않고 아래로 이동</span>\n<span class=\"token comment\">// 2. obj.then((value) => {console.log(value)}); then()을 실행하지 않음</span>\n<span class=\"token comment\">// 3. console.log(\"끝\")을 실행함</span>\n<span class=\"token comment\">// 4. 이어서 Promise.resolve()의 then()을 실행함</span>\n<span class=\"token comment\">// 5. then(resolve, reject){ resolve([1,2])}); resolve([1,2])를 호출하며 아래 then()의 첫 번째 파라미터 함수가 실행됨</span>\n<span class=\"token comment\">// 6. obj.then((value) => {console.log(value)}); resolve([1,2])의 [1,2]가 value에 설정됨</span>\n\n<span class=\"token comment\">// 실행결과</span>\n<span class=\"token comment\">// 끝</span>\n<span class=\"token comment\">// [1,2]</span></code></pre></div>\n</li>\n</ul>\n<br>\n<h2 id=\"3reject\" style=\"position:relative;\"><a href=\"#3reject\" aria-label=\"3reject permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.reject()</h2>\n<ul>\n<li>\n<p>실패(reject) 상태의 Promise 인스턴스를 생성하여 반환함</p>\n<ul>\n<li><code class=\"language-text\">Promise.reject()</code> 형태로 작성함</li>\n</ul>\n</li>\n<li>파라미터에 <code class=\"language-text\">reject</code> 사유를 작성함</li>\n<li>\n<p><code class=\"language-text\">then()</code> 을 연결한 형태</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'실패'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n<span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1. const obj = Promise.reject(\"실패\"); new 연산자를 사용하지 않지만 Promise 인스턴스를 생성하여 반환함, 실패(reject) 상태로 설정함</span>\n<span class=\"token comment\">// 2. 실패 상태이므로 then()의 두 번째 파라미터 함수가 호출됨</span>\n<span class=\"token comment\">// 3. obj.then( , (value) => console.log(value)}); Promise.reject(\"실패\")에서 \"실패\"가 value에 설정됨</span>\n\n<span class=\"token comment\">// 실행결과</span>\n<span class=\"token comment\">// 실패</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">catch()</code> 를 연결한 형태</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'에러 발생'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'끝'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1. const obj = new Error(\"에러 발생\"); Error 인스턴스를 생성함</span>\n<span class=\"token comment\">// 2. Promise.reject(obj) obj 인스턴스를 사용하여 Promise 인스턴스를 생성함, reject()를 실행하지 않음</span>\n<span class=\"token comment\">// 3. console.log(\"끝\")을 실행함</span>\n<span class=\"token comment\">// 4. Promise.reject(obj)를 실행하며 catch()가 호출됨</span>\n<span class=\"token comment\">// 5. catch((error) => console.log(error.message)); obj 인스턴스가 error에 설정됨</span>\n\n<span class=\"token comment\">// 실행결과</span>\n<span class=\"token comment\">// 끝</span>\n<span class=\"token comment\">// 에러 발생</span></code></pre></div>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1-resolve\">1. resolve()</a></li>\n<li><a href=\"#2-thenable\">2. thenable</a></li>\n<li><a href=\"#3reject\">3.reject()</a></li>\n</ul>\n</div>","excerpt":"1. resolve() 성공(fullfilled) 상태의  인스턴스를 생성하여 반환  형태로 작성함 파라미터 값에 따라 생성 방법이 다름 파라미터에 값을 작성하면 파라미터 값으로  인스턴스를 생성하여 반환 파라미터에  인스턴스를 작성하면 파라미터의  인스턴스의 값을 사용하여  인스턴스를 생성하여 반환 2. thenable  파라미터에 을 작성한 형태 3.reject() 실패(reject) 상태의 Promise 인스턴스를 생성하여 반환함  형태로 작성함 파라미터에  사유를 작성함  을 연결한 형태  를 연결한 형태 1. resolve() 2. thenable 3.reject()","frontmatter":{"date":"December 18, 2021","title":"Promise - resolve(), thenable, reject()","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-promise-4/"}},"next":{"id":"ee26c187-aed8-5677-81cb-3e225724e280","html":"<br>\n<h1 align=\"center\">\n  👋  HTTP 메서드 - PUT, PATCH, DELETE\n</h1>\n<br>\n<h2 id=\"1-put\" style=\"position:relative;\"><a href=\"#1-put\" aria-label=\"1 put permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. PUT</h2>\n<ol>\n<li>\n<p>리소스를 대체</p>\n<ul>\n<li>리소스가 있으면 대체(기존거 삭제됨)</li>\n<li>리소스가 없으면 생성</li>\n<li>쉽게 이야기해서 덮어버림</li>\n</ul>\n</li>\n<li>\n<p>중요! 클라이언트가 리소스를 식별</p>\n<ul>\n<li>클라이언트가 리소스 <code class=\"language-text\">위치</code>를 알고 URI 지정</li>\n<li>POST와 차이점</li>\n</ul>\n</li>\n</ol>\n<br>\n<h2 id=\"2-patch\" style=\"position:relative;\"><a href=\"#2-patch\" aria-label=\"2 patch permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. PATCH</h2>\n<ol>\n<li>\n<p>리소스 부분 변경</p>\n<ul>\n<li>클라이언트에서 요청</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token constant\">PATCH</span> <span class=\"token operator\">/</span>memebers<span class=\"token operator\">/</span><span class=\"token number\">100</span> <span class=\"token constant\">HTTP</span><span class=\"token operator\">/</span><span class=\"token number\">1.1</span>\nContent<span class=\"token operator\">-</span>Type<span class=\"token operator\">:</span> application<span class=\"token operator\">/</span>json\n\n<span class=\"token punctuation\">{</span>\n <span class=\"token comment\">// userName 필드가 없을 경우</span>\n <span class=\"token string\">\"age\"</span><span class=\"token operator\">:</span> <span class=\"token number\">50</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>서버(<code class=\"language-text\">/members/100</code>)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"userName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ko\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"age\"</span> <span class=\"token operator\">:</span> <span class=\"token number\">20</span>   <span class=\"token comment\">// 이 부분만 50으로 변경</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ol>\n<br>\n<h2 id=\"3-delete\" style=\"position:relative;\"><a href=\"#3-delete\" aria-label=\"3 delete permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. DELETE</h2>\n<ol>\n<li>리소스 제거</li>\n</ol>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1-put\">1. PUT</a></li>\n<li><a href=\"#2-patch\">2. PATCH</a></li>\n<li><a href=\"#3-delete\">3. DELETE</a></li>\n</ul>\n</div>","frontmatter":{"date":"December 18, 2021","title":"HTTP - 4.HTTP 메서드(3)","categories":"CS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-cs-HTTP-8/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":"zoomkoding/zoomkoding-gatsby-blog"}}}}},"pageContext":{"slug":"/study-js-es6-promise-4/","nextSlug":"/study-cs-HTTP-8/","prevSlug":""}},"staticQueryHashes":["1073350324","2938748437"]}