{"componentChunkName":"component---src-templates-blog-template-js","path":"/study-js-es6-Symbol-Property-4/","result":{"data":{"cur":{"id":"7a3c7d04-3a43-5b60-8cb0-279b695c59f9","html":"<br>\n<h1 align=\"center\">\n  👋  Symbol.species\n</h1>\n<br>\n<h2 id=\"symbolspecies\" style=\"position:relative;\"><a href=\"#symbolspecies\" aria-label=\"symbolspecies permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Symbol.species</h2>\n<ul>\n<li>species의 사전적 의미 : (공통 특성을 지닌) 종류, 인류, 종</li>\n<li>\n<p><code class=\"language-text\">Symbol.species</code> 는 <code class=\"language-text\">constructor</code>를 반환</p>\n<ul>\n<li><code class=\"language-text\">constructor</code> 를 실행하면 인스턴스를 생성하여 반환하므로 결국, 인스턴스를 반환하게 됨</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">Symbol.species</code> 를 오버라이드 하면 다른 인스턴스를 반환할 수 있다는 의미</p>\n<ul>\n<li>메소드를 실행한 후의 결과 형태</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const obj = [1, 2, 3];\n\n/*\n\t1. [1, 2, 3]으로 Array 오브젝트를 생성하여 obj에 할달\n\n\t2. 오른쪽의 obj를 펼쳐서 obj 구조를 보면\n\t\t- prototype은 없고 __proto__만 있으므로\n\t\n\t3. obj는 빌트인 Array 오브젝트가 아니라\n\t\t- Array.prototype에 연결된 메소드로 생성한 인스턴스임\n\n\t4. 다만, new 연산자를 사용하지 않았으므로 강좌에서 인스턴스라고 하지 않고 오브젝트라고 한 것\n*/\n\nconst one = obj.slice(1, 3);\n\n/*\n\t1. 위 코드를 실행한 후의 one과 obj의 구조는 차이가 없으며\n\t\t- 값 [2,3]만 다름\n\n\t2. 이것이 인스턴스에 있는 메소드를 호출하면\n\t\t- 메소드 실행 결괏값을 반환하지 않고\n\n\t3. 결괏값이 설정된 인스턴스를 반환하기 때문\n*/\n\nconst two = one.slice(1, 2);\n\n/*\n\t1. 바로 앞에서 반환된 one으로\n\t\t- 메소드를 호출할 수 있다는 것은\n\t\t- one이 인스턴스이기 때문\n\n\t2. 또한 slice(1, 2)를 실행하면\n\t\t- 결과 값이 설정된 인스턴스를 반환 함\t\n*/\n\n// 정리 //\n/*\n\t1. Array 인스턴스의 메소드를 호출하면\n\t\t- 값을 반환하는 것이 아니라\n\t\t\n\t2. 반환할 Array 인스턴스를 생성하고\n\t\t- 메소드에서 구한 값을 반환할 Array 인스턴스에 설정하여\n\t\t- Array 인스턴스를 반환함\n*/</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<ul>\n<li>\n<p><code class=\"language-text\">Symbol.speies</code> 기능</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">class Sports extends Array {}\nconst obj = new Sports(10, 20, 30);\nconst one = obj.slice(1, 2);\n\nconsole.log(one); // [20]</code>\n        </deckgo-highlight-code>\n<ul>\n<li><code class=\"language-text\">class Sports extends Array{}</code></li>\n<li>빌트인 Array 오브젝트를 상속(확장, 연결) 받음</li>\n<li><code class=\"language-text\">const obj = new Sports(10,20,30);</code></li>\n<li>인스턴스를 생성함</li>\n<li><code class=\"language-text\">const one = obj.slice(1,2);</code></li>\n<li><code class=\"language-text\">obj</code> 인스턴스의 <code class=\"language-text\">slice()</code>를 호출하면</li>\n<li><code class=\"language-text\">slice()</code> 처리 결과를 인스턴스에 설정하여 인스턴스를 반환함</li>\n<li>이렇게 인스턴스의 메소드를 호출 했을 때</li>\n<li>인스턴스를 반환하도록 하는 것이</li>\n<li><code class=\"language-text\">Symbol.species</code> 기능임</li>\n</ul>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","excerpt":"Symbol.species species의 사전적 의미 : (공통 특성을 지닌) 종류, 인류, 종  는 를 반환  를 실행하면 인스턴스를 생성하여 반환하므로 결국, 인스턴스를 반환하게 됨  를 오버라이드 하면 다른 인스턴스를 반환할 수 있다는 의미 메소드를 실행한 후의 결과 형태  기능  빌트인 Array 오브젝트를 상속(확장, 연결) 받음  인스턴스를 생성함   인스턴스의 를 호출하면  처리 결과를 인스턴스에 설정하여 인스턴스를 반환함 이렇게 인스턴스의 메소드를 호출 했을 때 인스턴스를 반환하도록 하는 것이  기능임","frontmatter":{"date":"October 24, 2021","title":"Symbol.species","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-Symbol-Property-4/"}},"next":{"id":"bae85f4b-2447-5d66-b0ec-5a42941f5610","html":"<br>\n<h1 align=\"center\">\n  👋  Symbol.isConcatSpreadable\n</h1>\n<br>\n<h2 id=\"isconcatspreadable\" style=\"position:relative;\"><a href=\"#isconcatspreadable\" aria-label=\"isconcatspreadable permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>isConcatSpreadable</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">Array.prototype.concat()</code>은 배열의 엘리먼트를 전개하여 반환</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const one = [10, 20],\ntwo = [&#39;A&#39;, &#39;B&#39;];\nconst show = () =&gt; {\nconsole.log(one.concat(two));\n};\n\nshow(); // [10,20,A,B]\n\ntwo[Symbol.isConcatSpreadable] = true;\n\nshow(); // [10,20,A,B]\n\ntwo[Symbol.isConcatSpreadable] = false;\n\nshow(); // [10,20,[A,B]]\n\n// 대상이 Array이면 전개하는 것이 디폴트임\n// @@isConcatSpreadable을 true로 처리</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p><code class=\"language-text\">[Symbol.isConcatSpreadable] = true</code></p>\n<ul>\n<li>one 배열 끝에 two 배열의 엘리먼트를 하나씩 연결</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">[Symbol.isConcatSpreadable] = false</code></p>\n<ul>\n<li>전개하지 않고 two 배열 자체를 연결</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">Array-Like</code> 전개</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const one = [10, 20];\nconst like = { 0: &#39;A&#39;, 1: &#39;B&#39;, length: 2 };\nconst show = () =&gt; {\nconsole.log(one.concat(like));\n};\n\nshow(); // [10,20,{0: &quot;A&quot;, 1: &quot;B&quot;, length: 2}]\n\ntwo[Symbol.isConcatSpreadable] = true;\n\nshow(); // [10,20,A,B]\n\ntwo[Symbol.isConcatSpreadable] = false;\n\nshow(); // [10,20,{0: &quot;A&quot;, 1: &quot;B&quot;, length: 2}]\n\n// 대상이 Array-Like이면 전개하지 않는 것이 디폴트 임\n// @@isConcatSpreadable을 false로 처리\n// Array-Like에서 값만 전개함</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","frontmatter":{"date":"October 23, 2021","title":"Symbol.isConcatSpreadable","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-Symbol-Property-3/"}},"prev":{"id":"5071182f-14de-504f-af6f-4c56d52ac02f","html":"<br>\n<h1 align=\"center\">\n  👋  Symbol.species 오버라이드\n</h1>\n<br>\n<h2 id=\"species-오버라이드\" style=\"position:relative;\"><a href=\"#species-%EC%98%A4%EB%B2%84%EB%9D%BC%EC%9D%B4%EB%93%9C\" aria-label=\"species 오버라이드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Species 오버라이드</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">Symbol.species</code> 는 <code class=\"language-text\">static</code> 약세서 프로퍼티 이며 <code class=\"language-text\">getter</code> 만 있고 <code class=\"language-text\">setter</code> 는 없음</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">class Sports extends Array {\n\tstatice get [Symbol.species](){\n\t\treturn Array;\n\t}\n};\n\nconst obj = new Sports(10, 20)</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p><code class=\"language-text\">Symbol.species</code> 를 사용할 수 있는 빌트인 오브젝트</p>\n<ul>\n<li>Array, Map, Set, RegExp</li>\n<li>Promise, ArrayBuffer, TypedArray</li>\n</ul>\n</li>\n<li>빌트인 오브젝트를 상속받은 <code class=\"language-text\">class</code>에 <code class=\"language-text\">Symbol.species</code> 를 작성하면 빌트인 오브젝트의 <code class=\"language-text\">@@species</code>가 오라이드 됨</li>\n<li>\n<p>인스턴스 바꾸기</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">class Sports extends Array {\n\tstatice get [Symbol.species](){\n\t\treturn Array;\n\t}\n};\n\nconst one = new Sports(10, 20, 30);\nconsole.log(one instanceof Sports);  // true\n\nconst two = one.slice(1, 2);\nconsole.log(two instanceof Array);   // true\nconsole.log(two instanceof Sports);  // false</code>\n        </deckgo-highlight-code>\n<ul>\n<li><code class=\"language-text\">class Sports extends Array{}</code></li>\n<li>빌트인 <code class=\"language-text\">Array</code> 오브젝트를 상속 받음</li>\n<li><code class=\"language-text\">statice get [Symbol.species](){ return Array; }</code></li>\n<li>빌트인<code class=\"language-text\">Array</code> 오브젝트의 <code class=\"language-text\">@@species</code>를 오버라이드 함</li>\n<li><code class=\"language-text\">const one = new Sports(10, 20, 30);</code></li>\n<li>인스턴스를 생성함</li>\n<li>파라미터 값이 인스턴스에 설정 됨</li>\n<li><code class=\"language-text\">one instanceof Sports</code></li>\n<li><code class=\"language-text\">Sports</code> 로 <code class=\"language-text\">one</code> 을 만들었으므로 <code class=\"language-text\">true</code> 출력</li>\n<li><code class=\"language-text\">const two = one.slice(1,2);</code></li>\n<li><code class=\"language-text\">Array</code> 오브젝트를 상속 받았으므로 <code class=\"language-text\">one</code> 인스턴스로 <code class=\"language-text\">slice()</code>를 호출 할 수 있음</li>\n<li><code class=\"language-text\">slice()</code> 대상은 인스턴스에 설정된 [10, 20, 30]</li>\n<li>인스턴스를 반환하며 반환되는 인스턴스에 <code class=\"language-text\">slice()</code> 결과를 설정함</li>\n<li><code class=\"language-text\">Symbol.species()</code> 로 오버라이드 했으므로</li>\n<li><code class=\"language-text\">static get [Symbol.species](){}</code> 가 호출 됨</li>\n<li>호출에 사용한 <code class=\"language-text\">one</code> 인스턴스 형태를 반환하지 않고 <code class=\"language-text\">Array</code> 인스턴스를 반환함</li>\n<li>이처럼 <code class=\"language-text\">Symbol.species()</code>로 반환할 인스턴스를 변경할 수 있음</li>\n<li><code class=\"language-text\">two instanceof Array</code></li>\n<li><code class=\"language-text\">two</code> 인스턴스에는 <code class=\"language-text\">Array</code> 인스턴스가 할당되어 있으며</li>\n<li><code class=\"language-text\">Array</code> 오브젝트로 만들었으므로 <code class=\"language-text\">true</code> 출력</li>\n<li><code class=\"language-text\">two instacne of Sports</code></li>\n<li><code class=\"language-text\">Sports</code> 가 아니라 <code class=\"language-text\">Array</code> 오브젝트로 <code class=\"language-text\">two</code> 인스턴스를 만들었으므로 <code class=\"language-text\">false</code> 출력</li>\n</ul>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","frontmatter":{"date":"October 25, 2021","title":"Symbol.species 오버라이드","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-Symbol-Property-5/"}},"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":"zoomkoding/zoomkoding-gatsby-blog"}}}}},"pageContext":{"slug":"/study-js-es6-Symbol-Property-4/","nextSlug":"/study-js-es6-Symbol-Property-3/","prevSlug":"/study-js-es6-Symbol-Property-5/"}},"staticQueryHashes":["1073350324","2938748437"]}