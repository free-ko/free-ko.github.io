{"componentChunkName":"component---src-templates-blog-template-js","path":"/study-js-es6-promise-3/","result":{"data":{"cur":{"id":"0c5c9918-fe1d-56a1-9422-0679d6793916","html":"<br>\n<h1 align=\"center\">\n  👋  Promise -  then(), then()의 return, catch(), finally()\n</h1>\n<br>\n<h2 id=\"1-then\" style=\"position:relative;\"><a href=\"#1-then\" aria-label=\"1 then permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. then()</h2>\n<ul>\n<li>\n<p>성공과 실패 핸들러 함수를 작성함</p>\n<ul>\n<li><code class=\"language-text\">Promise</code> 인스턴스를 반환함</li>\n</ul>\n</li>\n<li>\n<p>파라미터</p>\n<ul>\n<li>첫 번째: 성공일 때 실행될 핸들러 함수</li>\n<li>두 번째: 실패일 때 실행될 핸들러 함수</li>\n</ul>\n</li>\n<li>\n<p>실행자의 <code class=\"language-text\">resolve(), reject()</code> 에 파라미터 값을 다수 작성하더라도 핸들러 함수는 처음 하나만 사용 함</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n<span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  conosle<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token parameter\">reason</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reason<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1. resolve(1,2,3); 파라미터에 값을 3개 작성했음</span>\n<span class=\"token comment\">// 2. 실패(reject)가 발생하지 않으면 reject()를 작성하지 않아도 됨</span>\n<span class=\"token comment\">// 3. obj.then((value) => {.1.}, (reason) => {.2.}); 사실 실행자에 resolve()만 있으므로 첫 번째 함수만 작성해도 됨</span>\n<span class=\"token comment\">// 4. 실행자에서 resolve()가 실행되면 then()의 첫 번째 파라미터 함수가 실행됨, 이 때 resolve(1,2,3)에서 1,2,3을 넘겨 주지만</span>\n<span class=\"token comment\">// 5. then((value) => {console.log(value)}의 value에 첫 번째 값인 1만 설정됨</span>\n<span class=\"token comment\">// 6. 다수의 파라미터 값을 넘겨주려면 배열, Object 등을 사용해야 함</span>\n\n<span class=\"token comment\">// [실행결과]</span>\n<span class=\"token comment\">// 1</span></code></pre></div>\n</li>\n</ul>\n<br>\n<h2 id=\"2-then의-return\" style=\"position:relative;\"><a href=\"#2-then%EC%9D%98-return\" aria-label=\"2 then의 return permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. then()의 return</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">then()</code> 에서 <code class=\"language-text\">Promise</code> 인스턴스를 반환함</p>\n<ul>\n<li><code class=\"language-text\">return</code> 값을 반환하지 않음</li>\n<li><code class=\"language-text\">method chain</code>에서 <code class=\"language-text\">this</code>를 <code class=\"language-text\">return</code> 하는 것과 같은 개념임</li>\n<li>따라서 <code class=\"language-text\">then().then()</code> 형태 처럼 <code class=\"language-text\">then()</code>을 연속해서 호출 할 수 있음</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">return</code> 값을 <code class=\"language-text\">[[PromiseValue]]</code>에 설정하고 <code class=\"language-text\">[[PromiseValue]]</code> 값을 다음 <code class=\"language-text\">then()</code> 의 파라미터 값으로 넘겨 줌</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nobj\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> value <span class=\"token operator\">+</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">param</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1. obj.then((value) => {...} value 파라미터에 100이 설정됨</span>\n<span class=\"token comment\">// 2. return value + 50; 150을 반환하지 않고 인스턴스를 반환함, 150은 [[PromiseValue]]에 설정함</span>\n<span class=\"token comment\">// 3. return을 작성하지 않으면 undefined를 [[PromiseValue]]에 설정함</span>\n<span class=\"token comment\">// 4. then((param) => {console.log(param}); param에 [[PromiseValue]] 값이 150이 설정됨</span>\n\n<span class=\"token comment\">// [실행결과]</span>\n<span class=\"token comment\">// 150</span></code></pre></div>\n</li>\n</ul>\n<br>\n<h2 id=\"3-catch\" style=\"position:relative;\"><a href=\"#3-catch\" aria-label=\"3 catch permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. catch()</h2>\n<ul>\n<li>\n<p>실패(reject)의 핸들러 함수를 작성함</p>\n<ul>\n<li><code class=\"language-text\">then()</code>의 두 번째 파라미터를 작성하지 않고</li>\n<li>대신에 <code class=\"language-text\">catch(param)</code>를 작성함</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> check <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  check <span class=\"token operator\">?</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>check<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nobj\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1. check ? resolve(check) : reject(1,2,3); check 값이 false이므로 reject()를 호출하게 되며 파라미터 값으로 1,2,3을 넘겨 줌</span>\n<span class=\"token comment\">// 2. catch((value) => {console.log(value)}); then()의 두 번째 파라미터에 함수를 작성하지 않고 별도로 catch()를 작성했음</span>\n<span class=\"token comment\">// 3. reject()가 호출되면 catch(value)가 실행됨 1,2,3을 파라미터 값으로 넘겨주지만 value에 첫 번째 값인 1만 설정됨</span>\n\n<span class=\"token comment\">// [실행결과]</span>\n<span class=\"token comment\">// 1</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">return</code> 문의 표현식 평가 결과를 <code class=\"language-text\">[[PromiseValue]]</code>에 설정함</li>\n</ul>\n</li>\n<li><code class=\"language-text\">Promise</code> 인스턴스를 반환하므로 <code class=\"language-text\">catch().then()</code> 처럼 이어서 <code class=\"language-text\">then()</code> 을 호출할 수 있음</li>\n<li>\n<p><code class=\"language-text\">[[PromiseValue]]</code> 값을 <code class=\"language-text\">then()</code> 의 파라미터 값으로 넘겨줌</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nobj\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">throw</span> <span class=\"token string\">'에러'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">catch1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'catch1:'</span> <span class=\"token operator\">+</span> catch1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">'정상'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">param</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'then:'</span> <span class=\"token operator\">+</span> param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">catch2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'catch2:'</span> <span class=\"token operator\">+</span> catch2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1. obj.then((value) => {...} 실행자에서 resolve(100)이 실행되므로 then()의 첫 번째 파라미터 함수가 호출됨</span>\n<span class=\"token comment\">// 2. throw \"에러\" throw문으로 에러를 발생시킴. 바로 아래의 catch((catch1) = {})에서 받음, 이때, \"에러\"를 [[PromiseValue]]에 설정함</span>\n<span class=\"token comment\">// 3. catch((catch1) => {...}); [PromiseValue]]의 \"에러\"가 catch1에 설정됨</span>\n<span class=\"token comment\">// 4. return \"정상\"; 에러가 발생하여 catch()를 실행했지만 catch()에서 에러가 발생하지 않으면 바로 아래의 then()을 실행함 \"정상\"을 [[PromiseValue]]에 설정함</span>\n<span class=\"token comment\">// 5. then((param) => {...}); 여기서 에러가 발생하지 않으므로 아래의 catch()를 호출하지 않음 Promise 처리가 끝남</span>\n<span class=\"token comment\">// 6. catch((catch2) => {...}); 실행하지 않는 것을 설명하기 위해 작성했음</span>\n\n<span class=\"token comment\">// [실행결과]</span>\n<span class=\"token comment\">// catch1: 에러</span>\n<span class=\"token comment\">// then: 정상</span></code></pre></div>\n</li>\n</ul>\n<br>\n<h2 id=\"4-finally\" style=\"position:relative;\"><a href=\"#4-finally\" aria-label=\"4 finally permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. finally()</h2>\n<ul>\n<li>\n<p>성공, 실패에 관계 없이 파라미터의 핸들러 함수가 실행됨</p>\n<ul>\n<li>핸들러 함수에 파라미터가 없음</li>\n<li>ES2018부터 지원함</li>\n</ul>\n</li>\n<li>\n<p>활용 측면이지만 <code class=\"language-text\">then(), catch()</code>의 같은 코드를 <code class=\"language-text\">finally()</code>에 작성하면 코드 중복을 필할 수 있음</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resovle<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nobj\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">reason</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reason<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">finally</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">param</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'finally:'</span> <span class=\"token operator\">+</span> param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1. resolve(100); then()의 핸들러 함수가 호출됨</span>\n<span class=\"token comment\">// 2. obj.then((value) => {return 200;}) 200을 [[PromiseValue]]에 설정함 catch()를 실행하지 않고 finally()를 실행함</span>\n<span class=\"token comment\">// 3. finally((param) => {...} 문법적으로 param 파라미터를 사용하지 않음 then()에서 200을 return 하지만 [[PromiseValue]] 값이 param에 설정되지 않음</span>\n<span class=\"token comment\">// 4. 파라미터를 작성하더라도 에러가 나지 않지만 undefined가 설정되므로 의미가 없음</span>\n\n<span class=\"token comment\">// [실행결과]</span>\n<span class=\"token comment\">// 100</span>\n<span class=\"token comment\">// finally: undefined</span></code></pre></div>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1-then\">1. then()</a></li>\n<li><a href=\"#2-then%EC%9D%98-return\">2. then()의 return</a></li>\n<li><a href=\"#3-catch\">3. catch()</a></li>\n<li><a href=\"#4-finally\">4. finally()</a></li>\n</ul>\n</div>","excerpt":"1. then() 성공과 실패 핸들러 함수를 작성함  인스턴스를 반환함 파라미터 첫 번째: 성공일 때 실행될 핸들러 함수 두 번째: 실패일 때 실행될 핸들러 함수 실행자의  에 파라미터 값을 다수 작성하더라도 핸들러 함수는 처음 하나만 사용 함 2. then()의 return  에서  인스턴스를 반환함  값을 반환하지 않음 에서 를  하는 것과 같은 개념임 따라서  형태 처럼 을 연속해서 호출 할 수 있음  값을 에 설정하고  값을 다음  의 파라미터 값으로 넘겨 줌 3. catch() 실패(reject)의 핸들러 함수를 작성함 의 두 번째 파라미터를 작성하지 않고 대신에 를 작성함  문의 표현식 평가 결과를 에 설정함  인스턴스를 반환하므로  처럼 이어서  을 호출할 수 있음  값을  의 파라미터 값으로 넘겨줌 4. finally() 성공, 실패에 관계 없이 파라미터의 핸들러 함수가 실행됨 핸들러 함수에 파라미터가 없음 ES2018부터 지원함 활용 측면이지만 의 같은 코드를 에 …","frontmatter":{"date":"December 17, 2021","title":"Promise - then(), then()의 return, catch(), finally()","categories":"JS","author":"Kay","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-promise-3/"}},"next":{"id":"f1a82043-bb6c-5541-9ef6-e8888f5f0b05","html":"<br>\n<h1 align=\"center\">\n  👋  HTTP 메서드\n</h1>\n<br>\n<h2 id=\"1http-api를-만들어보자\" style=\"position:relative;\"><a href=\"#1http-api%EB%A5%BC-%EB%A7%8C%EB%93%A4%EC%96%B4%EB%B3%B4%EC%9E%90\" aria-label=\"1http api를 만들어보자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.HTTP API를 만들어보자</h2>\n<ol>\n<li>HTTP API를 만들어보자</li>\n<li>HTTP 메서드 - GET, POST</li>\n<li>HTTP 메서드 - PUT, PATCH, DELETE</li>\n<li>HTTP 메서드의 속성</li>\n</ol>\n<br>\n<h2 id=\"2요구사항-ex-회원-정보-관리-api를-만들어라\" style=\"position:relative;\"><a href=\"#2%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD-ex-%ED%9A%8C%EC%9B%90-%EC%A0%95%EB%B3%B4-%EA%B4%80%EB%A6%AC-api%EB%A5%BC-%EB%A7%8C%EB%93%A4%EC%96%B4%EB%9D%BC\" aria-label=\"2요구사항 ex 회원 정보 관리 api를 만들어라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.요구사항 ex) 회원 정보 관리 API를 만들어라</h2>\n<ol>\n<li>회원 목록 조회</li>\n<li>회원 조회</li>\n<li>회원 등록</li>\n<li>회원 수정</li>\n<li>회원 삭제</li>\n</ol>\n<br>\n<h2 id=\"3api-url-설정--초보-개발자\" style=\"position:relative;\"><a href=\"#3api-url-%EC%84%A4%EC%A0%95--%EC%B4%88%EB%B3%B4-%EA%B0%9C%EB%B0%9C%EC%9E%90\" aria-label=\"3api url 설정  초보 개발자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.API URL 설정 : 초보 개발자</h2>\n<ol>\n<li>회원 목록 조회 : <code class=\"language-text\">/read-member-list</code></li>\n<li>회원 조회 : <code class=\"language-text\">/read-member-by-id</code></li>\n<li>회원 등록 : <code class=\"language-text\">/create-memger</code></li>\n<li>회원 수정 : <code class=\"language-text\">/update-member</code></li>\n<li>회원 삭제 : <code class=\"language-text\">/delete-member</code></li>\n</ol>\n<p><strong>—> 이것은 좋은 URI 설계일까?</strong></p>\n<p><strong>—> 가장 중요한 것은 리소스 식별</strong></p>\n<br>\n<h2 id=\"4api-uri-고민\" style=\"position:relative;\"><a href=\"#4api-uri-%EA%B3%A0%EB%AF%BC\" aria-label=\"4api uri 고민 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.API URI 고민</h2>\n<ol>\n<li>\n<p>리소스의 의미는 뭘까?</p>\n<ul>\n<li>회원을 등록하고 수정하고 조회하는게 리소스가 아니다!\nex) 미네랄을 캐라 —> 미네랄이 리소스</li>\n<li><strong>회원</strong>이라는 개념 자체가 바로 리소스이다.</li>\n</ul>\n</li>\n<li>\n<p>리소스를 어떻게 식별하는게 좋을까?</p>\n<ul>\n<li>회원을 등록하고 수정하고 조회하는 것을 모두 배제</li>\n<li>회원이라는 리소스만 식별하면 된다. —> 회원 리소스를 URI에 매핑</li>\n</ul>\n</li>\n</ol>\n<br>\n<h2 id=\"5api-url-설정--위-상황-고려\" style=\"position:relative;\"><a href=\"#5api-url-%EC%84%A4%EC%A0%95--%EC%9C%84-%EC%83%81%ED%99%A9-%EA%B3%A0%EB%A0%A4\" aria-label=\"5api url 설정  위 상황 고려 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.API URL 설정 : 위 상황 고려</h2>\n<ol>\n<li><code class=\"language-text\">회원</code> 목록 조회 : <code class=\"language-text\">/members</code></li>\n<li><code class=\"language-text\">회원</code> 조회 <code class=\"language-text\">/members/{id}</code> <strong>—> 어떻게 구분하지?</strong></li>\n<li><code class=\"language-text\">회원</code> 등록 : <code class=\"language-text\">/members/{id}</code> <strong>—> 어떻게 구분하지?</strong></li>\n<li><code class=\"language-text\">회원</code> 수정 : <code class=\"language-text\">/members/{id}</code> <strong>—> 어떻게 구분하지?</strong></li>\n<li><code class=\"language-text\">회원</code> 삭제 : <code class=\"language-text\">/members/{id}</code> <strong>—> 어떻게 구분하지?</strong></li>\n</ol>\n<br>\n<p>참고 : 계층 구조상 상위를 컬렉션으로 보고 복수단어 사용 권장 ( memeber —> members )</p>\n<br>\n<h2 id=\"6리소스와-행위를-분리--가장-중요한-것은-리소스를-식별하는-것\" style=\"position:relative;\"><a href=\"#6%EB%A6%AC%EC%86%8C%EC%8A%A4%EC%99%80-%ED%96%89%EC%9C%84%EB%A5%BC-%EB%B6%84%EB%A6%AC--%EA%B0%80%EC%9E%A5-%EC%A4%91%EC%9A%94%ED%95%9C-%EA%B2%83%EC%9D%80-%EB%A6%AC%EC%86%8C%EC%8A%A4%EB%A5%BC-%EC%8B%9D%EB%B3%84%ED%95%98%EB%8A%94-%EA%B2%83\" aria-label=\"6리소스와 행위를 분리  가장 중요한 것은 리소스를 식별하는 것 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6.리소스와 행위를 분리 : 가장 중요한 것은 리소스를 식별하는 것</h2>\n<ol>\n<li>URI는 리소스만 식별</li>\n<li>\n<p><strong>리소스와</strong> 해당 리소스를 대상으로 하는 <strong>행위를</strong> 분리</p>\n<ul>\n<li><strong>리소스</strong> : 회원</li>\n<li><strong>행위</strong> : 조회, 등록, 삭제, 변경</li>\n</ul>\n</li>\n<li>리소는 명사, 행위는 동사</li>\n<li>행위는 어떻게 구분??? —> HTTP 메서드 : GET, POST로</li>\n</ol>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1http-api%EB%A5%BC-%EB%A7%8C%EB%93%A4%EC%96%B4%EB%B3%B4%EC%9E%90\">1.HTTP API를 만들어보자</a></li>\n<li><a href=\"#2%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD-ex-%ED%9A%8C%EC%9B%90-%EC%A0%95%EB%B3%B4-%EA%B4%80%EB%A6%AC-api%EB%A5%BC-%EB%A7%8C%EB%93%A4%EC%96%B4%EB%9D%BC\">2.요구사항 ex) 회원 정보 관리 API를 만들어라</a></li>\n<li><a href=\"#3api-url-%EC%84%A4%EC%A0%95--%EC%B4%88%EB%B3%B4-%EA%B0%9C%EB%B0%9C%EC%9E%90\">3.API URL 설정 : 초보 개발자</a></li>\n<li><a href=\"#4api-uri-%EA%B3%A0%EB%AF%BC\">4.API URI 고민</a></li>\n<li><a href=\"#5api-url-%EC%84%A4%EC%A0%95--%EC%9C%84-%EC%83%81%ED%99%A9-%EA%B3%A0%EB%A0%A4\">5.API URL 설정 : 위 상황 고려</a></li>\n<li><a href=\"#6%EB%A6%AC%EC%86%8C%EC%8A%A4%EC%99%80-%ED%96%89%EC%9C%84%EB%A5%BC-%EB%B6%84%EB%A6%AC--%EA%B0%80%EC%9E%A5-%EC%A4%91%EC%9A%94%ED%95%9C-%EA%B2%83%EC%9D%80-%EB%A6%AC%EC%86%8C%EC%8A%A4%EB%A5%BC-%EC%8B%9D%EB%B3%84%ED%95%98%EB%8A%94-%EA%B2%83\">6.리소스와 행위를 분리 : 가장 중요한 것은 리소스를 식별하는 것</a></li>\n</ul>\n</div>","frontmatter":{"date":"December 16, 2021","title":"HTTP - 4.HTTP 메서드(1)","categories":"CS","author":"Kay","emoji":"👨‍💻"},"fields":{"slug":"/study-cs-HTTP-6/"}},"prev":{"id":"cbdb5133-5b32-5865-9c69-784e07c1944b","html":"<br>\n<h1 align=\"center\">\n  👋  HTTP 메서드 - GET, POST\n</h1>\n<br>\n<h2 id=\"1http-메서드-종류--주요-메서드\" style=\"position:relative;\"><a href=\"#1http-%EB%A9%94%EC%84%9C%EB%93%9C-%EC%A2%85%EB%A5%98--%EC%A3%BC%EC%9A%94-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-label=\"1http 메서드 종류  주요 메서드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.HTTP 메서드 종류 : 주요 메서드</h2>\n<ol>\n<li><code class=\"language-text\">GET</code>: 리소스 조회</li>\n<li><code class=\"language-text\">POST</code>: 요청 데이터 처리, 주로 등록에 사용</li>\n<li><code class=\"language-text\">PUT</code>: 리소스를 대체, 해당 리소스가 없으면 생성</li>\n<li><code class=\"language-text\">PATCH</code>: 리소스 부분 변경</li>\n<li><code class=\"language-text\">DELETE</code>: 리소스 삭제</li>\n</ol>\n<br>\n<h2 id=\"2http-메서드-종류--기타-메서드\" style=\"position:relative;\"><a href=\"#2http-%EB%A9%94%EC%84%9C%EB%93%9C-%EC%A2%85%EB%A5%98--%EA%B8%B0%ED%83%80-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-label=\"2http 메서드 종류  기타 메서드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.HTTP 메서드 종류 : 기타 메서드</h2>\n<ol>\n<li><code class=\"language-text\">HEAD</code>: GET과 동일하지만 메시지 부분을 제외하고, 상태 줄과 헤더만 반환</li>\n<li><code class=\"language-text\">OPTIONS</code>: 대상 리소스에 대한 통신 가능 옵션(메서드)를 설명(주로 <code class=\"language-text\">CORS</code> 에서 사용)</li>\n<li><code class=\"language-text\">CONNECT</code>: 대상 자원으로 식별되는 서버에 대한 터널을 설정 —> 거의 사용 X</li>\n<li><code class=\"language-text\">TRACE</code>: 대상 리소스에 대한 경로를 따라 메시지 루프백 테스트를 수행 —> 거의 사용 X</li>\n</ol>\n<br>\n<h2 id=\"3get\" style=\"position:relative;\"><a href=\"#3get\" aria-label=\"3get permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.GET</h2>\n<ol>\n<li>리소스 조회</li>\n<li>서버에 전달하고 싶은 데이터는 Query(쿼리 파라미터, 쿼리 스트링)를 통해서 전달</li>\n<li>메시지 바디를 사용해서 데이터를 전달할 수 있지만, 지원하지 않는 곳이 많아서 권장하지 않음</li>\n</ol>\n<br>\n<h2 id=\"4post\" style=\"position:relative;\"><a href=\"#4post\" aria-label=\"4post permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.POST</h2>\n<ol>\n<li>요청 데이터 처리</li>\n<li>메시지 바디를 통해 서버로 요청 데이터 전달</li>\n<li>\n<p>서버는 요청 데이터를 처리</p>\n<ul>\n<li>메시지 바디를 통해 들어온 데이터를 처리하는 모든 기능을 수행한다.</li>\n</ul>\n</li>\n<li>주로 전달된 데이터로 신규 리소스 등록, 프로세스 처리에 사용</li>\n</ol>\n<br>\n<h2 id=\"5post--요청-데이터를-어떻게-처리한다는-뜻일까\" style=\"position:relative;\"><a href=\"#5post--%EC%9A%94%EC%B2%AD-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%B2%98%EB%A6%AC%ED%95%9C%EB%8B%A4%EB%8A%94-%EB%9C%BB%EC%9D%BC%EA%B9%8C\" aria-label=\"5post  요청 데이터를 어떻게 처리한다는 뜻일까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.POST : 요청 데이터를 어떻게 처리한다는 뜻일까?</h2>\n<ol>\n<li>\n<p>스펙 : POST 메서드는 대상 리소그가 리소스의 고유한 의미 체계에 따라 요청에 포함된 표현을 처리하도록 요청함</p>\n<p>ex) POST는 다음과 같은 기능에 사용됨</p>\n<ul>\n<li>HTML 양식에 입력된 필드와 같은 데이터 블록을 데이터 처리 프로세스에 제공\n—> HTML FORM에 입력한 정보로 회원가입, 주문 등에 사용</li>\n<li>게시판, 뉴스 그룹, 메일링 리스트, 블로그 또는 유사한 기사 그룹에 메시지 게시\n—> 게시판 글쓰기, 댓글 달기</li>\n<li>서버가 아직 식별하지 않은 새 리소스 생성\n—> 신규 주문 생성</li>\n<li>기존 자원에 데이터 추가\n—> 한 문서 끝에 내용 추가하기</li>\n</ul>\n</li>\n<li>정리 : 이 리소스 URI에 POST 요청이 오면 요청 데이터를 어떻게 처리할지 리소스마다 따로 정해야 함 —> 정해진 것이 없음</li>\n</ol>\n<br>\n<h2 id=\"6post-정리\" style=\"position:relative;\"><a href=\"#6post-%EC%A0%95%EB%A6%AC\" aria-label=\"6post 정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6.POST 정리</h2>\n<ol>\n<li>\n<p>새 리소스 생성(등록)</p>\n<ul>\n<li>서버가 아직 식별하지 않은 새 리소스 생성</li>\n</ul>\n</li>\n<li>\n<p>요청 데이터 처리</p>\n<ul>\n<li>단순히 데이터를 생성하거나, 변경하는 것을 넘어서 프로세스를 처리해야 하는 경우</li>\n<li>ex) 주문에서 결제 완료 —> 배달 시작 —> 배달완료 처럼 단순히 값 변경을 넘어 프로세스의 상태가 변경되는 경우</li>\n<li>POST의 결과로 새로운 리소스가 생성되지 않을 수도 있음</li>\n<li>ex) POST <code class=\"language-text\">/orders/{orderId}/start-delivery(컨트롤 URI)</code></li>\n</ul>\n</li>\n<li>\n<p>다른 메서드로 처리하기 애매한 경우</p>\n<p>ex) JSON으로 조회 데이터를 넘겨야 하는데, GET 메서드를 사용하기 어려운 경우, 애매하면 POST</p>\n</li>\n</ol>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1http-%EB%A9%94%EC%84%9C%EB%93%9C-%EC%A2%85%EB%A5%98--%EC%A3%BC%EC%9A%94-%EB%A9%94%EC%84%9C%EB%93%9C\">1.HTTP 메서드 종류 : 주요 메서드</a></li>\n<li><a href=\"#2http-%EB%A9%94%EC%84%9C%EB%93%9C-%EC%A2%85%EB%A5%98--%EA%B8%B0%ED%83%80-%EB%A9%94%EC%84%9C%EB%93%9C\">2.HTTP 메서드 종류 : 기타 메서드</a></li>\n<li><a href=\"#3get\">3.GET</a></li>\n<li><a href=\"#4post\">4.POST</a></li>\n<li><a href=\"#5post--%EC%9A%94%EC%B2%AD-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%B2%98%EB%A6%AC%ED%95%9C%EB%8B%A4%EB%8A%94-%EB%9C%BB%EC%9D%BC%EA%B9%8C\">5.POST : 요청 데이터를 어떻게 처리한다는 뜻일까?</a></li>\n<li><a href=\"#6post-%EC%A0%95%EB%A6%AC\">6.POST 정리</a></li>\n</ul>\n</div>","frontmatter":{"date":"December 17, 2021","title":"HTTP - 4.HTTP 메서드(2)","categories":"CS","author":"Kay","emoji":"👨‍💻"},"fields":{"slug":"/study-cs-HTTP-7/"}},"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":"zoomkoding/zoomkoding-gatsby-blog"}}}}},"pageContext":{"slug":"/study-js-es6-promise-3/","nextSlug":"/study-cs-HTTP-6/","prevSlug":"/study-cs-HTTP-7/"}},"staticQueryHashes":["1073350324","2938748437"]}