{"componentChunkName":"component---src-templates-blog-template-js","path":"/study-js-es6-object-6/","result":{"data":{"cur":{"id":"ab437056-27d7-5d7d-91e5-d7301502b0ca","html":"<br>\n<h1 align=\"center\">\n  👋  인스턴스에 함수로 추가\n</h1>\n<br>\n<h2 id=\"함수로-추가\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98%EB%A1%9C-%EC%B6%94%EA%B0%80\" aria-label=\"함수로 추가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수로 추가</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">new</code> 연산자로 인스턴스를 생성하고</p>\n<ul>\n<li>인스턴스의 프로퍼티로 함수를 추가</li>\n<li>다른 인스턴스와 공유하지 않음</li>\n</ul>\n</li>\n<li>\n<p>인스턴스에 추가한 후의 인스턴스 구조</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">function Book() {\nthis.point = 100;\n}\n\nBook.prototype.getPoint = function () {\nreturn this.point;\n};\n\nconst obj = new Book();\n\n// 인스턴스 프로퍼티(함수)로 추가 함\nobj.setPoint = function (param) {\nthis.point = param;\n};\n\n// obj를 펼치면 __proto__ 위에 setPoint가 표시됨\n\n// 인스턴스의 함수 형태로 호출함\n// 함수에서 this가 인스턴스를 참조함\nobj.setPoint(200);\n\n// prototype에 연결된 메소드를 호출 함\nconsole.log(obj.getPoint());\n\nconst newObj = new Book();\nconsole.log(newObj.setPoint); // undefined\n\n/*\n\t1. 새로운 인스턴스를 생성하면\n\t- setPoint()를 인스턴스에서 사용할 수 없게 됨\n\n\t2. 인스턴스의 프로퍼티로 설정했기 때문\n\t\n\t3. 인스턴스의 프로퍼티로 연결한 것과\n\t- prototype에 연결한 메소드의 차이 임\n*/</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","excerpt":"함수로 추가  연산자로 인스턴스를 생성하고 인스턴스의 프로퍼티로 함수를 추가 다른 인스턴스와 공유하지 않음 인스턴스에 추가한 후의 인스턴스 구조","frontmatter":{"date":"September 26, 2021","title":"인스턴스에 함수로 추가","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-object-6/"}},"next":{"id":"f1340f31-1055-57e2-9bb9-d6da9ade70f0","html":"<br>\n<h1 align=\"center\">\n  👋  prototype와 proto, 메소드 호출 방법\n</h1>\n<br>\n<h2 id=\"메소드-호출-방법\" style=\"position:relative;\"><a href=\"#%EB%A9%94%EC%86%8C%EB%93%9C-%ED%98%B8%EC%B6%9C-%EB%B0%A9%EB%B2%95\" aria-label=\"메소드 호출 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>메소드 호출 방법</h2>\n<ul>\n<li><code class=\"language-text\">prototype</code>과 <code class=\"language-text\">__proto__</code>에 연결된 메소드를 호출하는 방법이 다름</li>\n<li>\n<p><code class=\"language-text\">prototpye</code>에 연결된 메소드 호출</p>\n<ul>\n<li><code class=\"language-text\">Array.prototype.slice()</code> 처럼 <code class=\"language-text\">prototype</code>을 작성하여 호출</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">function Book() {\nthis.point = 100;\n}\n\nBook.prototype.getPoint = function () {\nconsole.log(Object.is(this, Book.prototype));\nreturn this.point;\n};\n\nconsole.log(Book.prototype.getPoint());\nconsole.log(Book.prototype.getPoint.call(Book));\n\n// 결과\n// true\n// undefined\n// false\n// undefined\n\n// 1. Book.prototype.getPoint() prototype을 작성하여 호출하면 getPoint()에서 this가 Book.prototype을 참조\n// 2. Book.prototype.getPoint.call(Book) this가 Book을 참조함\n// 3. this.point를 참조하려면 인스턴스를 생성하고 인스턴스의 메소드를 호출해야함</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<ul>\n<li>\n<p><code class=\"language-text\">__proto__</code>에 연결된 메소드 호출</p>\n<ul>\n<li>인스턴스를 생성하여 호출</li>\n<li><code class=\"language-text\">new</code> 연산자로 생성한 인스턴스 구조</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">function Book() {\nthis.point = 100;\n}\n\nBook.prototype.getPoint = function () {\nreturn this.point;\n};\n\nconst obj = new Book();\n/*\n\t1. 오른쪽 obj를 펼치면\n\t- point: 100이 있으며 인스턴스 프로퍼티임\n\t- 생성자 함수에서 this.point = 100으로 설정한 것\n\n\t2. __proto__를 펼치면\n\t- prototype에 연결된 메소드가 표시됨\n\t- getPoint는 Book.prototype.getPoint를 참조함\n\t- __proto__에 복사하지 않음\n*/\n\nconsole.log(obj.getPoint());\n/*\n\t1. 생성한 인스턴스 이름을 사용하여\n\t- getPoint() 메소드를 호출하면\n\t- 호출된 메소드에서 this로 인스턴스를 참조 할 수 있음\n*/</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","frontmatter":{"date":"September 26, 2021","title":"prototype와 proto, 메소드 호출 방법","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-object-5/"}},"prev":{"id":"3a07726a-3e7e-5938-bf3f-519ce8f18654","html":"<br>\n<h1 align=\"center\">\n  👋  __proto__에 메소드 추가\n</h1>\n<br>\n<h2 id=\"메소드-추가\" style=\"position:relative;\"><a href=\"#%EB%A9%94%EC%86%8C%EB%93%9C-%EC%B6%94%EA%B0%80\" aria-label=\"메소드 추가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>메소드 추가</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">__proto__</code> 에 <code class=\"language-text\">function</code>을 추가하면</p>\n<ul>\n<li><code class=\"language-text\">prototype</code>에 설정되며</li>\n<li>메소드로 추가하는 것과 같음</li>\n<li><code class=\"language-text\">__proto__</code>에 추가한 후의 <code class=\"language-text\">prototype</code> 모습</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">function Book(param) {\nthis.point = param;\n}\n\nBook.prototype.getPoint = function () {\nreturn this.point;\n};\n\nconst obj = new Book(100);\n\n// __proto__에 메소드를 추가 함\nobj.__proto__.setPoint = function (param) {\nthis.point = param;\n};\n\n/*\n\t1. obj를 펼치면 __proto__에 setPoint가 표시됨\n\n\t2. Book.prototype을 펼치면 setPoint가 표시됨\n*/\n\n/*\n\t1. 이렇게 표시가 되는 것은\n\t- __proto__에 메소드를 추가하면, __proto__에 추가하지 않고\n\t- prototype에 추가하기 때문\n\n\t2. __proto__에 연결되어 표시된 것은\n\t- 디버깅 툴에서 가독성을 위해\n\t- prototype에 연결된 메소드를 표시한 것\n*/</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>추가한 메소드를 인스턴스에 공유</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">function Book(param) {\nthis.point = param;\n}\n\nBook.prototype.getPoint = function () {\nreturn this.point;\n};\n\nconst obj = new Book(100);\n\n// beforeObj 인스턴스를 생성함\nconst beforeObj = new Book(100);\n\n// __proto__에 메소드를 추가함\nobj.__proto__.setPoint = function (param) {\nthis.point = param;\n};\n\n// 새로운 인스턴스를 생성함\nconst afterObj = new Book(300);\n\n/*\n\t1. setPoint()가 인스턴스에 할당되므로\n\t- 메소드로 호출할 수 있음\n*/\n\nbeforeObj.setPoint(700);\n/*\n\t1. beforeObj 인스턴스는\n\t- setPoint() 메소드를 추가하기 전에 인스턴스를 만들었지만\n\n\t2. prototpye sharing(공유)으로 인해\n\t- 추가된 메소드를 사용할 수 있음\n\n\t3. setPoint()가 호출되면\n\t- Book.prototype에서 setPoint의 존재 여부를 체크하고\n\t- 있으면 __proto__가 아니라 Book.prototype의\n\t- setPoint()를 호출하기 때문\n*/</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","frontmatter":{"date":"September 26, 2021","title":"__proto__에 메소드 추가","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-object-7/"}},"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":"zoomkoding/zoomkoding-gatsby-blog"}}}}},"pageContext":{"slug":"/study-js-es6-object-6/","nextSlug":"/study-js-es6-object-5/","prevSlug":"/study-js-es6-object-7/"}},"staticQueryHashes":["1073350324","2938748437"]}