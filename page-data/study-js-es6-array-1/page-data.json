{"componentChunkName":"component---src-templates-blog-template-js","path":"/study-js-es6-array-1/","result":{"data":{"cur":{"id":"0f644301-ee6b-5d96-ae52-83d684b1a4a3","html":"<br>\n<h1 align=\"center\">\n  👋  from(), of()\n</h1>\n<br>\n<h2 id=\"1-from\" style=\"position:relative;\"><a href=\"#1-from\" aria-label=\"1 from permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. from()</h2>\n<ul>\n<li>\n<p>첫 번째 파라미터의 오브젝트를 <code class=\"language-text\">Array</code> 오브젝트로 변환</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const like = { 0: &#39;zero&#39;, 1: &#39;one&#39;, length: 2 };\nconst list = Array.from(like);\n\nconsole.log(list); // [zero, one]\n\nconsole.log(Arrayfrom(&#39;ABC&#39;)); // [A, B, C]</code>\n        </deckgo-highlight-code>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">function args() {\nreturn Array.from(arguments);\n}\n\nconsole.log(args(1, 2, 3)); // [1,2,3]</code>\n        </deckgo-highlight-code>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">// &lt;li class=sports&gt;축구&lt;/li&gt;\n// &lt;li class=sports&gt;농구&lt;/li&gt;\n\nconst node = document.querySelectorAll(&#39;.sports&#39;);\nconst show = (node) =&gt; console.log(node.textContent);\n\nArray.from(nodes).forEach(show);\n// NodeList가 이터러블 오브젝트이므로 Array.from()으로 읽을 수 있음\n// 축구\n// 농구</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>두 번째 파라미터에 함수 작성</p>\n<ul>\n<li>이터러블 오브젝트를 전개할 때마다 호출</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const like = {0:&quot;zero&quot;, 1:&quot;one&quot;, length:2};\n\nconsole.log(Array.from(like, value =&gt; {\n\treturn value + &quot;변경&quot;;\n})\n\n// [zero변경, one변경]</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>세 번째 파라미터에 오브젝트 작성</p>\n<ul>\n<li>호출된 함수에서 <code class=\"language-text\">this</code>로 참조</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const like = { 0: 10, 1: 20, length: 2 };\n\nconsole.log(\nArray.from(\n  like,\n  function (value) {\n    return value + this.plus;\n  },\n  { plus: 70 },\n),\n);\n\n// 콜백 함수에서 this로 3번째 파라미터의 오브젝트를 참조함\n// 화살표 함수를 사용하면 콜백 함수에서 3번째 파라미터의 오브젝트를 참조하지 않음\n// [80, 90]</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<h2 id=\"2-of-함수\" style=\"position:relative;\"><a href=\"#2-of-%ED%95%A8%EC%88%98\" aria-label=\"2 of 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. of() 함수</h2>\n<ul>\n<li>\n<p>파라미터 값을 <code class=\"language-text\">Array</code>로 변환, 반환</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const result = Array.of(1, 2, 3);\n\nconsole.log(result); // [1, 2, 3]\nconsole.log(Array.of()); // []</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>파라미터에 변환 대상 값을 작성</p>\n<ul>\n<li>콤마로 구분하여 다수 작성 가능</li>\n</ul>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","excerpt":"1. from() 첫 번째 파라미터의 오브젝트를  오브젝트로 변환 두 번째 파라미터에 함수 작성 이터러블 오브젝트를 전개할 때마다 호출 세 번째 파라미터에 오브젝트 작성 호출된 함수에서 로 참조 2. of() 함수 파라미터 값을 로 변환, 반환 파라미터에 변환 대상 값을 작성 콤마로 구분하여 다수 작성 가능","frontmatter":{"date":"September 30, 2021","title":"from(), of()","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-array-1/"}},"next":{"id":"d93ed896-c2ad-5dce-8dd8-29055b87495f","html":"<br>\n<h1 align=\"center\">\n  👋  String.raw, String.raw()\n</h1>\n<br>\n<h2 id=\"1-stringraw\" style=\"position:relative;\"><a href=\"#1-stringraw\" aria-label=\"1 stringraw permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. String.raw</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">String</code> 오브젝트에 속하지만</p>\n<ul>\n<li><code class=\"language-text\">Template</code>을 사용하므로 여기서 다룸</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">String.raw</code>에 이어서 <code class=\"language-text\">Template</code> 작성</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const one = 1,\ntwo = 2;\nconst result = String.raw`1+2=${one + two}`;\n\nconsole.log(result); // 1+2=3</code>\n        </deckgo-highlight-code>\n<ul>\n<li>줄 바꿈을 문자로 처리</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">console.log(`one₩ntwo`);\n// one\n// two\n\nconsole.log(String.raw`one₩ntwo`);</code>\n        </deckgo-highlight-code>\n<ul>\n<li>유니코드의 코드 포인트 처리</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">console.log(`₩u{31}₩u{32}`); // 12\nconsole.log(String.raw`₩u{31}₩u{32}`); // \\u{31}\\u{32}</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<h2 id=\"2-stringraw\" style=\"position:relative;\"><a href=\"#2-stringraw\" aria-label=\"2 stringraw permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. String.raw()</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">raw</code>의 문자열을 문자 하나씩 전개 하면서 두 번째 파라미터 부터 조합하고 연결</p>\n<ul>\n<li>문자열</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const one = 1,\n  two = 2;\n\nconsole.log(STring.raw({ raw: &#39;ABCD&#39; }, one, two, 3));\n\n// A를 반환 버퍼에 넣고\n// raw() 2번째 파라미터 값을 버퍼에 첨부 즉, one 변숫값인 1을 첨부하며 A1이 됨\n// B를 반환 버퍼 끝에 첨부\n// raw()의 3번째 파라미터 값을 버퍼에 첨부 즉, two 변숫값인 2를 첨부\n// 현재까지 모습은 A1B2\n// C를 반환 버퍼 끝에 첨부\n// 4번째 파라미터 값인 3을 버퍼에 첨부\n// D를 반환 버퍼 끝에 첨부, 5번째 파라미터는 값이 없어서 첨부하지 않는 것이 아니라 값 자체를 첨부하지 않음\n// 좁합한 결과를 반환\n// A1B2C3D</code>\n        </deckgo-highlight-code>\n<ul>\n<li>배열</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const rawValue = { raw: [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;] };\n\nconsole.log(String.raw(rawValue, 1, 2, 3));\n\n// `A${1}B${2}C`\n// C 뒤에는 표현식이 없는 것으로 처리함 따라서 3이 첨부되지 않음\n// A1B2C</code>\n        </deckgo-highlight-code>\n</li>\n<li>첫 번째 파라미터는 <code class=\"language-text\">{raw: 값}</code> 형태</li>\n<li>\n<p>두 번째 파라미터 부터 조합할 값 작성</p>\n<ul>\n<li><code class=\"language-text\">({raw: \"ABCD\"}, 1, 2, 3)</code></li>\n</ul>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","frontmatter":{"date":"September 29, 2021","title":"String.raw, String.raw()","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-template-literal-3/"}},"prev":{"id":"c5eb811a-06b3-5a4f-8b13-9da184880c8c","html":"<br>\n<h1 align=\"center\">\n  👋  배열 엘리먼트 복사, copyWithin()\n</h1>\n<br>\n<h2 id=\"1-copywithin\" style=\"position:relative;\"><a href=\"#1-copywithin\" aria-label=\"1 copywithin permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. copyWithin()</h2>\n<ul>\n<li>범위 값을 복사하여 같은 오브젝트에 설정</li>\n<li>\n<p>두 번째 파라미터의 인덱스부터 복사하여</p>\n<ul>\n<li>첫 번째 파라미터 인덱스 부터 순서대로 설정(대체)</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const list = [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;, &#39;E&#39;];\nconst copy = list.copyWithin(1, 3);\n\nconsole.log(list); // [A,D,E,D,E]\nconsole.log(copy); // [A,D,E,D,E]\n\n// list 배열이 대상임\n// 두 번 째 파라미터의 3번 인덱스부터 배열의 끝까지 복사하여\n// 첫 번째 파라미터의 1번 인덱스 부터 차례로 설정\n// D와 E를 복사하므로 엘리먼트가 2개이며\n// 1번 인덱스부터 2개를 대체 하므로 B가, D로, C가 E로 대체됨\n// 복사 대상에 대체하므로 반환된 Array 오브젝트와 복사 대상이 같음</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>세 번째 파라미터의 인덱스 직전까지 복사</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const list = [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;, &#39;E&#39;];\nlist.copyWithin(0, 2, 4);\n\nconsole.log(list); // [C, D, C, D, E]\n\n// 두 번째 파라미터의 2번 인덱스 부터\n// 세 번째 파라미터의 4번 인덱스 직전까지 복사하여 list 배열의 0번 인덱스부터 설정\n// 2번 인덱스, 3번 인덱스를 복사하므로 C와 D를 복사하게 됨\n// A가 C로, B가 D로 대체됨</code>\n        </deckgo-highlight-code>\n</li>\n<li>복사 시작 인덱스와 끝 인덱스를 작성하지 않으면 배열 전체 복사</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const list = [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;, &#39;E&#39;];\nlist.copyWithin(3); // [A,B,C,A,B]\n\n// list 배열 전체가 복사 대상임\n// 3번 인덱스부터 대체 함\n// 복사할 엘리먼트 수가 대체할 엘리먼트 수보다 많으면\n// 매치되는 인덱스만 값을 대체하고 남는 것은 대체하지 않음\n// D가 A로, E가 A로 대체됨</code>\n        </deckgo-highlight-code>\n<br>\n<h2 id=\"2-copywithin\" style=\"position:relative;\"><a href=\"#2-copywithin\" aria-label=\"2 copywithin permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. copyWithin()</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">copyWithin()</code> 함수의 특징</p>\n<ul>\n<li><code class=\"language-text\">shallow copy(얕은 복사)</code></li>\n<li>같은 배열 안에서 이동하는 개념</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const list = [&#39;A&#39;, { B: &#39;가&#39; }, &#39;C&#39;];\n\nconsole.log(list.copyWithin(0, 1)); // [{B: &quot;가&quot;}, C, C]\n\n// {B: &quot;가&quot;}를 복사 할 때 새로운 {B: &quot;가&quot;}를 만들지 않고 현재의 메모리 주소를 복사함\n// shallow copy(얕은 복사)라고 함\n// shallow copy는 값이 연동됨\n// 연동되지 않도록 하려면 Deep Copy를 해야 함</code>\n        </deckgo-highlight-code>\n<ul>\n<li>배열의 엘리먼트 수가 변동되지 않음</li>\n<li>배열 안에서 엘리먼트를 이동은 엘리먼트를 왼쪽, 오른쪽으로 이동하는 것(처리 속도가 빠름)</li>\n</ul>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","frontmatter":{"date":"October 01, 2021","title":"배열 엘리먼트 복사, copyWithin()","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-array-2/"}},"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":"zoomkoding/zoomkoding-gatsby-blog"}}}}},"pageContext":{"slug":"/study-js-es6-array-1/","nextSlug":"/study-js-es6-template-literal-3/","prevSlug":"/study-js-es6-array-2/"}},"staticQueryHashes":["1073350324","2938748437"]}