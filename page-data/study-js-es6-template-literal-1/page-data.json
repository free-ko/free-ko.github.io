{"componentChunkName":"component---src-templates-blog-template-js","path":"/study-js-es6-template-literal-1/","result":{"data":{"cur":{"id":"735861e5-1ad2-5bed-8a3b-c7f5ff2d9fcc","html":"<br>\n<h1 align=\"center\">\n  👋  Template Literal\n</h1>\n<br>\n<h2 id=\"template-literal\" style=\"position:relative;\"><a href=\"#template-literal\" aria-label=\"template literal permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Template Literal</h2>\n<ul>\n<li>\n<p>Syntax</p>\n<ul>\n<li><code class=\"language-text\">문자열</code></li>\n<li><code class=\"language-text\">문자열 ${표현식} 문자열</code></li>\n<li>tag <code class=\"language-text\">문자열 ${표현식} 문자열</code></li>\n</ul>\n</li>\n<li>\n<p>Template Literal</p>\n<ul>\n<li>문자열 처리를 위한 리터럴</li>\n<li>표현식을 포함할 수 있음</li>\n<li>강좌에서는 템플릿으로 표기</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">backtick</code> 안에 표현식 작성</p>\n<ul>\n<li>표현식을 <code class=\"language-text\">${표현식}</code> 형태로 작성</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">console.log(`ABC`); // ABC\n\nconst one = 1,\ntwo = 2;\nconst result = `1 + 2는 ${one + two}이 된다.`;\n\nconsole.log(result); // 1 + 2는 3이 된다.\n\n// 템플릿의 모든 공백이 그대로 반영됨</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>줄 바꿈 작성 차이</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">console.log(&#39;ES5-1라인 \\n 2라인&#39;);\n/*\n\t1. ES5 형태로 문자열 중간에서\n\t- 줄을 바꾸려면 \\n을 작성함\n*/\n\nconsole.log(`1라인\n\t2라인`);\n/*\n\t1. Template 리터럴을 사용함\n\t\n\t2. ES5처럼 \\n을 사용하지 않고\n\t- 백틱 안에서 줄을 바꿈\n\t- 줄 앞에 공백을 작성하면 공백으로 처리 됨\n*/</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","excerpt":"Template Literal Syntax   tag  Template Literal 문자열 처리를 위한 리터럴 표현식을 포함할 수 있음 강좌에서는 템플릿으로 표기  안에 표현식 작성 표현식을  형태로 작성 줄 바꿈 작성 차이","frontmatter":{"date":"September 27, 2021","title":"Template Literal","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-template-literal-1/"}},"next":{"id":"b9b7cf46-f3c3-5307-af62-e7a42e3c1873","html":"<br>\n<h1 align=\"center\">\n  👋  setPrototypeOf() - prototype 사용\n</h1>\n<br>\n<h2 id=\"setporotytpeof\" style=\"position:relative;\"><a href=\"#setporotytpeof\" aria-label=\"setporotytpeof permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>setPorotytpeOf()</h2>\n<ul>\n<li>첫 번째 파라미터에 <code class=\"language-text\">prototype</code>을 작성</li>\n<li>\n<p>첫 번째 파라미터의 <code class=\"language-text\">prototype</code>에</p>\n<ul>\n<li>두 번째 파라미터의 <code class=\"language-text\">prototype</code>에 연결된 프로퍼티를 설정</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">prototype</code> 연결 후의 인스턴스 구조</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">function Book() {}\nBook.prototype.getBook = function () {};\n\nfunction Point() {}\nPoint.prototype.getPoint = function () {};\n\nObject.setPrototypeOf(Point.prototype, Book.prototype);\n/*\n\t1. Point.prototype에\n\t- Book.prototype에 연결된 프로퍼티(메소드 포함)를 설정함\n\n\t2. Point.prototype에 설정하므로 이것을 펼치면\n\t- Book.prototype.getBook()이 있어야 하는데 없음\n\n\t3. 또한, Point.prototype에 연결한 메소드가\n\t- 지워지지 않고 유지 됨 \n\n\t4. 한편, Point.prototype.__proto__를 펼치면\n\t- getBook()이 표시됨\n\n\t5. setPrototypeOf() 함수 이름의 뉘앙스가\n\t- prototype에 설정하는 것처럼 보이지만\n\t- prototype에 __proto__를 만들고 여기에 설정함\n\n\t6. prototype에 설정하면 getPoint()가 지워지므로\n\t- Point에 작성된 메소드를 사용할 수 없게 됨\n\n\t7. 이를 피하기 위해 __proto__를 만들어 설정한 것\n\n\t8. __proto__로 구조적으로 계층을 만들어 설정하므로 \n\t- 같은 이름의 메소드가 있더라도 대체되지 않음\n\t\n\t9. 식별자 해결을 할 때, __proto__ 순서로 검색하므로\n\t- 같은 이름의 메소드가 있을 때,\n\t- 앞의 메소드가 호출 됨\n*/\n\nconst obj = new Point(300);\n/*\n\t1. new Point(300)를 실행하면\n\t- Point.prototype에 연결된 메소드로 인스턴스를 생성함\n\n\t2. 오른쪽의 obj를 펼치면\n\t- obj.__proto__.proto__구조 임\n\t- 이것은 Point.prototype 구조와 같음\n\n\t3. 위의 __proto__에 Point.prototype에 연결된 메소드가 설정되고\n\t- 아래의 __proto__에 Book.prototype에 연결된 메소드가 설정 됨\n*/</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>상속을 위한 목적이라면</p>\n<ul>\n<li><code class=\"language-text\">super</code> 등의 상속 처리 키워드를 제공하는</li>\n<li><code class=\"language-text\">Class</code>를 사용하는 것이 좋음</li>\n</ul>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","frontmatter":{"date":"September 26, 2021","title":"setPrototypeOf() - prototype 사용","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-object-9/"}},"prev":{"id":"4c1cbd4e-2093-5a31-aa17-fb55f0bd87d3","html":"<br>\n<h1 align=\"center\">\n  👋  tagged Template\n</h1>\n<br>\n<h2 id=\"tagged-template\" style=\"position:relative;\"><a href=\"#tagged-template\" aria-label=\"tagged template permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>tagged Template</h2>\n<ul>\n<li>템플릿에 함수 이름을 작성한 형태</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const one = 1, two = 2;\nconst show = (text, value) =&gt; {\n  console.log(`${text[0] $(value)`);   // 1 + 2 = 3\n  console.log(text[1]);                // &quot;&quot;\n}\n\nshow `1+ 2 = ${one + two}`;\n\n// 1. Template에서 문자열과 표현식을 분리 함\n// 2. &quot;1 + 2 = &quot;가 문자열이고  ${one + two}가 표현식이며 펴악하면 3이 됨\n// 3. show()함수를 호출 함\n// 4. 문자열을 배열로 넘겨줌, 왼쪽에서 오른쪽으로 배열 엘리먼트로 추가, 마지막에 빈 문자열을 엘리먼트로 추가\n// 5. 표현식은 평가 결과를 넘겨 줌\n// 6. console.log(text[1]), 호출하는 함수에서 넘겨 준 빈 문자열, text[1]이 없으면 undefined가 출력됨</code>\n        </deckgo-highlight-code>\n<ul>\n<li>호출되는 함수를 <code class=\"language-text\">태그 함수</code>라고 부름</li>\n<li>\n<p><code class=\"language-text\">show()</code> 함수를 호출하면서</p>\n<ul>\n<li>문자열을 배열로 파라미터로 넘기고</li>\n<li>표현식 결과를 하나씩 파라미터로 넘김</li>\n</ul>\n</li>\n<li>\n<p>호출하는 곳에서</p>\n<ul>\n<li>표현식을 평가한 값을 다수 넘겨 줄 때</li>\n<li>태그 함수에 대응하는 파라미터 이름을 작성한 형태</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const one = 1,\ntwo = 2;\nconst show = (text, plus, minus) =&gt; {\nconsole.log(`${text[0]} ${plus}`); // 1 + 2 = 3\nconsole.log(`${text[1]} ${minus}`); // 이고 1 - 2 = -1\nconsole.log(`${text[2]} ${text[3]}`); // 이다 undefined\n};\n\nshow`1+2=${one + two}이고 1-2=${one - two}이다`;</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>문자열을 분리하면</p>\n<ul>\n<li><code class=\"language-text\">[\"1+2 = \", 이고 1-2 = \", \"이다\"]</code></li>\n<li>3개의 배열 엘리먼트가 됨</li>\n</ul>\n</li>\n<li>\n<p>표현식을 분리하면</p>\n<ul>\n<li><code class=\"language-text\">${one + two}</code>와 <code class=\"language-text\">${one - two}</code></li>\n</ul>\n</li>\n<li>show 태그 함수를 호출</li>\n<li>\n<p>태그 함수에 Rest 파라미터 작성</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const one = 1, two = 2;\nconst show = (text, ...rest) =&gt; {\n\tconsole.log(`${text[0] ${rest[0]}}`);\n\tconsole.log(`${text[1] ${rest[1]} ${test[2]}}`);\n}\n\nshow `1+2 = ${one + two}이고 1 -2 = ${one - two}이다`;</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>문자열을 분리하면</p>\n<ul>\n<li><code class=\"language-text\">[\"1+2=\", \"이고 1-2=\", \"이다\"]</code></li>\n<li>3개의 배열 엘리먼트가 됨</li>\n</ul>\n</li>\n<li>\n<p>표현식을 분리하면</p>\n<ul>\n<li><code class=\"language-text\">${one + two}</code>와 <code class=\"language-text\">${one - two}</code></li>\n<li><code class=\"language-text\">[3, -1]</code></li>\n<li>show 태그 함수를 호출</li>\n</ul>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","frontmatter":{"date":"September 28, 2021","title":"tagged Template","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-template-literal-2/"}},"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":"zoomkoding/zoomkoding-gatsby-blog"}}}}},"pageContext":{"slug":"/study-js-es6-template-literal-1/","nextSlug":"/study-js-es6-object-9/","prevSlug":"/study-js-es6-template-literal-2/"}},"staticQueryHashes":["1073350324","2938748437"]}