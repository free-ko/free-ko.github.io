{"componentChunkName":"component---src-templates-blog-template-js","path":"/study-js-es6-template-literal-1/","result":{"data":{"cur":{"id":"735861e5-1ad2-5bed-8a3b-c7f5ff2d9fcc","html":"<br>\n<h1 align=\"center\">\n  👋  Template Literal\n</h1>\n<br>\n<h2 id=\"template-literal\" style=\"position:relative;\"><a href=\"#template-literal\" aria-label=\"template literal permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Template Literal</h2>\n<ul>\n<li>\n<p>Syntax</p>\n<ul>\n<li><code class=\"language-text\">문자열</code></li>\n<li><code class=\"language-text\">문자열 ${표현식} 문자열</code></li>\n<li>tag <code class=\"language-text\">문자열 ${표현식} 문자열</code></li>\n</ul>\n</li>\n<li>\n<p>Template Literal</p>\n<ul>\n<li>문자열 처리를 위한 리터럴</li>\n<li>표현식을 포함할 수 있음</li>\n<li>강좌에서는 템플릿으로 표기</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">backtick</code> 안에 표현식 작성</p>\n<ul>\n<li>표현식을 <code class=\"language-text\">${표현식}</code> 형태로 작성</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">ABC</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ABC</span>\n\n<span class=\"token keyword\">const</span> one <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\ntwo <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">1 + 2는 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>one <span class=\"token operator\">+</span> two<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">이 된다.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1 + 2는 3이 된다.</span>\n\n<span class=\"token comment\">// 템플릿의 모든 공백이 그대로 반영됨</span></code></pre></div>\n</li>\n<li>\n<p>줄 바꿈 작성 차이</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ES5-1라인 \\n 2라인'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*\n\t1. ES5 형태로 문자열 중간에서\n\t- 줄을 바꾸려면 \\n을 작성함\n*/</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">1라인\n\t2라인</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*\n\t1. Template 리터럴을 사용함\n\t\n\t2. ES5처럼 \\n을 사용하지 않고\n\t- 백틱 안에서 줄을 바꿈\n\t- 줄 앞에 공백을 작성하면 공백으로 처리 됨\n*/</span></code></pre></div>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#template-literal\">Template Literal</a></li>\n</ul>\n</div>","excerpt":"Template Literal Syntax   tag  Template Literal 문자열 처리를 위한 리터럴 표현식을 포함할 수 있음 강좌에서는 템플릿으로 표기  안에 표현식 작성 표현식을  형태로 작성 줄 바꿈 작성 차이 Template Literal","frontmatter":{"date":"September 27, 2021","title":"Template Literal","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-template-literal-1/"}},"next":{"id":"f1340f31-1055-57e2-9bb9-d6da9ade70f0","html":"<br>\n<h1 align=\"center\">\n  👋  prototype와 proto, 메소드 호출 방법\n</h1>\n<br>\n<h2 id=\"메소드-호출-방법\" style=\"position:relative;\"><a href=\"#%EB%A9%94%EC%86%8C%EB%93%9C-%ED%98%B8%EC%B6%9C-%EB%B0%A9%EB%B2%95\" aria-label=\"메소드 호출 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>메소드 호출 방법</h2>\n<ul>\n<li><code class=\"language-text\">prototype</code>과 <code class=\"language-text\">__proto__</code>에 연결된 메소드를 호출하는 방법이 다름</li>\n<li>\n<p><code class=\"language-text\">prototpye</code>에 연결된 메소드 호출</p>\n<ul>\n<li><code class=\"language-text\">Array.prototype.slice()</code> 처럼 <code class=\"language-text\">prototype</code>을 작성하여 호출</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Book</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>point <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nBook<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getPoint</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token keyword\">is</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> Book<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>point<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Book<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">getPoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Book<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">getPoint</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>Book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 결과</span>\n<span class=\"token comment\">// true</span>\n<span class=\"token comment\">// undefined</span>\n<span class=\"token comment\">// false</span>\n<span class=\"token comment\">// undefined</span>\n\n<span class=\"token comment\">// 1. Book.prototype.getPoint() prototype을 작성하여 호출하면 getPoint()에서 this가 Book.prototype을 참조</span>\n<span class=\"token comment\">// 2. Book.prototype.getPoint.call(Book) this가 Book을 참조함</span>\n<span class=\"token comment\">// 3. this.point를 참조하려면 인스턴스를 생성하고 인스턴스의 메소드를 호출해야함</span></code></pre></div>\n</li>\n</ul>\n<br>\n<ul>\n<li>\n<p><code class=\"language-text\">__proto__</code>에 연결된 메소드 호출</p>\n<ul>\n<li>인스턴스를 생성하여 호출</li>\n<li><code class=\"language-text\">new</code> 연산자로 생성한 인스턴스 구조</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Book</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>point <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nBook<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getPoint</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>point<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Book</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*\n\t1. 오른쪽 obj를 펼치면\n\t- point: 100이 있으며 인스턴스 프로퍼티임\n\t- 생성자 함수에서 this.point = 100으로 설정한 것\n\n\t2. __proto__를 펼치면\n\t- prototype에 연결된 메소드가 표시됨\n\t- getPoint는 Book.prototype.getPoint를 참조함\n\t- __proto__에 복사하지 않음\n*/</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">getPoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*\n\t1. 생성한 인스턴스 이름을 사용하여\n\t- getPoint() 메소드를 호출하면\n\t- 호출된 메소드에서 this로 인스턴스를 참조 할 수 있음\n*/</span></code></pre></div>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EB%A9%94%EC%86%8C%EB%93%9C-%ED%98%B8%EC%B6%9C-%EB%B0%A9%EB%B2%95\">메소드 호출 방법</a></li>\n</ul>\n</div>","frontmatter":{"date":"September 26, 2021","title":"prototype와 proto, 메소드 호출 방법","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-object-5/"}},"prev":{"id":"4c1cbd4e-2093-5a31-aa17-fb55f0bd87d3","html":"<br>\n<h1 align=\"center\">\n  👋  tagged Template\n</h1>\n<br>\n<h2 id=\"tagged-template\" style=\"position:relative;\"><a href=\"#tagged-template\" aria-label=\"tagged template permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>tagged Template</h2>\n<ul>\n<li>템플릿에 함수 이름을 작성한 형태</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> one <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> two <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">show</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">text<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>text<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>`<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 1 + 2 = 3</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                <span class=\"token comment\">// \"\"</span>\n<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\n\nshow </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token number\">1</span><span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token operator\">=</span> $<span class=\"token punctuation\">{</span>one <span class=\"token operator\">+</span> two<span class=\"token punctuation\">}</span>`<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1. Template에서 문자열과 표현식을 분리 함</span>\n<span class=\"token comment\">// 2. \"1 + 2 = \"가 문자열이고  ${one + two}가 표현식이며 펴악하면 3이 됨</span>\n<span class=\"token comment\">// 3. show()함수를 호출 함</span>\n<span class=\"token comment\">// 4. 문자열을 배열로 넘겨줌, 왼쪽에서 오른쪽으로 배열 엘리먼트로 추가, 마지막에 빈 문자열을 엘리먼트로 추가</span>\n<span class=\"token comment\">// 5. 표현식은 평가 결과를 넘겨 줌</span>\n<span class=\"token comment\">// 6. console.log(text[1]), 호출하는 함수에서 넘겨 준 빈 문자열, text[1]이 없으면 undefined가 출력됨</span></code></pre></div>\n<ul>\n<li>호출되는 함수를 <code class=\"language-text\">태그 함수</code>라고 부름</li>\n<li>\n<p><code class=\"language-text\">show()</code> 함수를 호출하면서</p>\n<ul>\n<li>문자열을 배열로 파라미터로 넘기고</li>\n<li>표현식 결과를 하나씩 파라미터로 넘김</li>\n</ul>\n</li>\n<li>\n<p>호출하는 곳에서</p>\n<ul>\n<li>표현식을 평가한 값을 다수 넘겨 줄 때</li>\n<li>태그 함수에 대응하는 파라미터 이름을 작성한 형태</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> one <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\ntwo <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">show</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">text<span class=\"token punctuation\">,</span> plus<span class=\"token punctuation\">,</span> minus</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>text<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>plus<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1 + 2 = 3</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>text<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>minus<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 이고 1 - 2 = -1</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>text<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>text<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 이다 undefined</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nshow<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">1+2=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>one <span class=\"token operator\">+</span> two<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">이고 1-2=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>one <span class=\"token operator\">-</span> two<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">이다</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>문자열을 분리하면</p>\n<ul>\n<li><code class=\"language-text\">[\"1+2 = \", 이고 1-2 = \", \"이다\"]</code></li>\n<li>3개의 배열 엘리먼트가 됨</li>\n</ul>\n</li>\n<li>\n<p>표현식을 분리하면</p>\n<ul>\n<li><code class=\"language-text\">${one + two}</code>와 <code class=\"language-text\">${one - two}</code></li>\n</ul>\n</li>\n<li>show 태그 함수를 호출</li>\n<li>\n<p>태그 함수에 Rest 파라미터 작성</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> one <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> two <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">show</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">text<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>text<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> $<span class=\"token punctuation\">{</span>rest<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>text<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> $<span class=\"token punctuation\">{</span>rest<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span> $<span class=\"token punctuation\">{</span>test<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nshow <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">1+2 = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>one <span class=\"token operator\">+</span> two<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">이고 1 -2 = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>one <span class=\"token operator\">-</span> two<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">이다</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>문자열을 분리하면</p>\n<ul>\n<li><code class=\"language-text\">[\"1+2=\", \"이고 1-2=\", \"이다\"]</code></li>\n<li>3개의 배열 엘리먼트가 됨</li>\n</ul>\n</li>\n<li>\n<p>표현식을 분리하면</p>\n<ul>\n<li><code class=\"language-text\">${one + two}</code>와 <code class=\"language-text\">${one - two}</code></li>\n<li><code class=\"language-text\">[3, -1]</code></li>\n<li>show 태그 함수를 호출</li>\n</ul>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#tagged-template\">tagged Template</a></li>\n</ul>\n</div>","frontmatter":{"date":"September 28, 2021","title":"tagged Template","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-template-literal-2/"}},"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":"zoomkoding/zoomkoding-gatsby-blog"}}}}},"pageContext":{"slug":"/study-js-es6-template-literal-1/","nextSlug":"/study-js-es6-object-5/","prevSlug":"/study-js-es6-template-literal-2/"}},"staticQueryHashes":["1073350324","2938748437"]}