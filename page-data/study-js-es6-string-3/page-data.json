{"componentChunkName":"component---src-templates-blog-template-js","path":"/study-js-es6-string-3/","result":{"data":{"cur":{"id":"48eaeab3-4bbd-5784-b35e-d6f157ff2269","html":"<br>\n<h1 align=\"center\">\n  👋  startsWith(), endsWith(), repeat(), includes(), raw()\n</h1>\n<br>\n<h2 id=\"1-startswith\" style=\"position:relative;\"><a href=\"#1-startswith\" aria-label=\"1 startswith permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. startsWith()</h2>\n<ul>\n<li>\n<p>대상 문자열이</p>\n<ul>\n<li>첫 번째 파라미터의 문자열로 시작하면 <code class=\"language-text\">true</code>, 아니면 <code class=\"language-text\">false</code> 반환</li>\n<li>정규 표현식 사용 불가</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const target = &#39;ABC&#39;;\n\nconsole.log(target.startsWith(&#39;AB&#39;)); // true\nconsole.log(target.startsWith(&#39;BC&#39;)); // false\n\nconsole.log(/^AB/.test(target)); // true</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>두 번째 파라미터</p>\n<ul>\n<li>선택이며, 비교 시작 인덱스 작성</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const target = &#39;ABCD&#39;;\n\nconsole.log(target.startsWith(&#39;BC&#39;, 1)); // true\nconsole.log(target.startsWith(&#39;BC&#39;, 2)); // false</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<h2 id=\"2-endswith\" style=\"position:relative;\"><a href=\"#2-endswith\" aria-label=\"2 endswith permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. endsWith()</h2>\n<ul>\n<li>\n<p>대상 문자열이</p>\n<ul>\n<li>첫 번째 파라미터의 문자열로 끝면 <code class=\"language-text\">true</code>, 아니면 <code class=\"language-text\">false</code> 반환</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const target = &#39;ABC&#39;;\n\nconsole.log(target.endsWith(&#39;AB&#39;)); // true\nconsole.log(target.endsWith(&#39;BC&#39;)); // false\n\nconsole.log(/BC$/.test(target)); // true</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>두 번째 파라미터</p>\n<ul>\n<li>선택이며, 사용할 문자열 길이 지정</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const target = &#39;ABC&#39;;\n\nconsole.log(target.endsWith(&#39;AB&#39;, 2)); // true\n\n// 1. &quot;AB&quot;로 끝나지 않았지만\n// 2. 대상 문자열을 3자리가 아닌 2자리를 사용하므로 즉, &quot;AB&quot;만 사용하므로 true를 반환</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<h2 id=\"3repeat\" style=\"position:relative;\"><a href=\"#3repeat\" aria-label=\"3repeat permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.repeat()</h2>\n<ul>\n<li>대상 문자열을 파라미터에 작성한 수 만큼 복제, 연결하여 반환</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const target = &#39;ABC&#39;;\n\nconsole.log(target.repeat(3)); // ABCABCABC\nconsole.log(target.repeat(0)); // &quot;&quot;\nconsole.log(target.repeat()); // &quot;&quot;\nconsole.log(target.repeat(2.7)); // ABCABC\n\n// 1. 파라미터를 작성하지 않거나 0을 작성하면 빈 문자열을 반환\n// 2. 2.7에서 0.7을 무시하고 2를 사용 함</code>\n        </deckgo-highlight-code>\n<br>\n<h2 id=\"4-includes\" style=\"position:relative;\"><a href=\"#4-includes\" aria-label=\"4 includes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. includes()</h2>\n<ul>\n<li>\n<p>대상 문자열에</p>\n<ul>\n<li>첫 번째 파라미터의 문자열이 있으면 <code class=\"language-text\">true</code> 없으면 <code class=\"language-text\">false</code> 반환</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const target = &quot;123&quot;;\nconsole.log(target.includes(&quot;1&quot;));  // true;\n\nconsole.log(target.includes(12));   // true;\nconsole.log(target.includes(&quot;13&quot;);  // false</code>\n        </deckgo-highlight-code>\n<ul>\n<li>두 번째 파라미터(선택)</li>\n<li>비교 시작 인덱스 작성</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const target= &quot;ABC&quot;;\nconsole.log(target.includes(&quot;A&quot;, 1));   // false\n\ntry {\n\tresult = traget.includes(/^A/);\n} catch(2) {\n\tconsole.log(&quot;정규 표현식 사용 불가&quot;);\n}\n\n// 1. &quot;A&quot;가 있지만 0번 인덱스에 있음\n// 2. 1번 인덱스부터 비교하므로 존재 하지 않음</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","excerpt":"1. startsWith() 대상 문자열이 첫 번째 파라미터의 문자열로 시작하면 , 아니면  반환 정규 표현식 사용 불가 두 번째 파라미터 선택이며, 비교 시작 인덱스 작성 2. endsWith() 대상 문자열이 첫 번째 파라미터의 문자열로 끝면 , 아니면  반환 두 번째 파라미터 선택이며, 사용할 문자열 길이 지정 3.repeat() 대상 문자열을 파라미터에 작성한 수 만큼 복제, 연결하여 반환 4. includes() 대상 문자열에 첫 번째 파라미터의 문자열이 있으면  없으면  반환 두 번째 파라미터(선택) 비교 시작 인덱스 작성","frontmatter":{"date":"September 20, 2021","title":"시작/끝 체크 복제","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-string-3/"}},"next":{"id":"e3bdb6c6-f385-5734-b51e-53dffd7f0dba","html":"<br>\n<h1 align=\"center\">\n  👋  fromCodePoint(), codePointAt(), normalize()\n</h1>\n<br>\n<h2 id=\"1-fromcodepoint\" style=\"position:relative;\"><a href=\"#1-fromcodepoint\" aria-label=\"1 fromcodepoint permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. fromCodePoint()</h2>\n<ul>\n<li>유니코드의 코드 포인트에 해당하는 문자 반환</li>\n<li>\n<p>파라미터에 다수의 코드 포인트 작성 가능</p>\n<ul>\n<li>문자를 연결하여 반환</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const point = String.fromCodePoint;\n\nconsole.log(point(49, 50, 51)); // 123\nconsole.log(point(44032, 44033)); // 가각\nconsole.log(point(0x31, 0x32, 0x33)); // 123\nconsole.log(point(0x1f4118)); // 코끼리 이모지</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>ES5의 <code class=\"language-text\">fromCahrCode()</code>사용</p>\n<ul>\n<li><code class=\"language-text\">Surrogate pair</code>로 작성</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">console.log(String.fromCharCode(0x1f418)); // 네모 아이콘\nconsole.log(String.fromCharCode(0xd83d, 0xdc18)); // 코끼리 아이콘\n\n// 1. fromCharCode()ㅇㅔ서는 0x1f418형태를 지원하지 않으므로\n// 2. fromCharCode(0xD83D, 0xDc18)처럼 Surrogate pair로 작성함</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<h2 id=\"2-codepointat\" style=\"position:relative;\"><a href=\"#2-codepointat\" aria-label=\"2 codepointat permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. codePointAt()</h2>\n<ul>\n<li>\n<p>대상 문자열에서</p>\n<ul>\n<li>파라미터에 작성한 인덱스 번째 문자를</li>\n<li>유니코드 코드 포인트로 변환하여 반환</li>\n<li>코드 포인트는 UTF-16으로 인코딩된 값</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const result = &#39;가나다&#39;.codePointAt(2);\n\nconsole.log(result); // 45796\nconsole.log(typeof result); // number\n\nconsole.log(&#39;가나다&#39;.codePointAt(3)); // undefined\nconsole.log(String.fromCodePoint(result)); // 다\n\n// 1. &quot;가나다&quot;.codePointAt(2) 문자열 &quot;가나다&quot;에서 3번째의 코드 포인트를 구해 반환함\n// 2. 반환된 코드 포인트 타입은 number임\n// 3. 인덱스 번째에 문자가 없으면 undefined를 반환함\n// 4. codePointAt(2)의 값은 45796이고 fromCodePoint(45796)의 값은 &quot;다&quot;임</code>\n        </deckgo-highlight-code>\n<br>\n<h2 id=\"3-normalize\" style=\"position:relative;\"><a href=\"#3-normalize\" aria-label=\"3 normalize permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. normalize()</h2>\n<ul>\n<li>대상 문자열을 파라미터에 지정한</li>\n<li>유니코드 정규화 형식으로 반환하여 반환</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">console.log(&#39;ㄱ&#39;.codePointAt().toString(16)); // 3131\nconsole.log(&#39;ㅏ&#39;.codePointAt().toString(16)); // 314f\nconsole.log(&#39;₩u{3131}₩u{314F}&#39;); // ㄱ ㅏ</code>\n        </deckgo-highlight-code>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const point = &#39;₩u{3131}₩u{314F}&#39;;\n\nconsole.log(point.noormalize(&#39;NFC&#39;)); // ㄱ ㅏ\nconsole.log(point.normalize(&#39;NFD&#39;)); // ㄱ ㅏ\n\nconsole.log(point.normalize(&#39;NFKD&#39;)); // 가\nconsole.log(point.normalize(&#39;NFKC&#39;)); // 가</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","frontmatter":{"date":"September 19, 2021","title":"Unicode 함수","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-string-2/"}},"prev":{"id":"7231d0bf-cab6-56e3-bd4b-d97fef218934","html":"<br>\n<h1 align=\"center\">\n  👋  padStart(), padEnd(), trimStart(), trimEnd()\n</h1>\n<br>\n<h2 id=\"1-padstart\" style=\"position:relative;\"><a href=\"#1-padstart\" aria-label=\"1 padstart permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. padStart()</h2>\n<ul>\n<li>\n<p>첫 번째 파라미터 값 만큼 길이를 늘리고</p>\n<ul>\n<li>늘어난 끝에 대상 문자열을 설정한 후</li>\n<li>앞의 남은 공간에 두 번째 파라미터를 채움</li>\n</ul>\n</li>\n<li>두 번째 파라미터에 채울 문자열 작성</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">console.log(&#39;ABC&#39;.padStar(10, &#39;123&#39;)); // 1231231ABC\nconsole.log(&#39;ABC&#39;.padStar(6, &#39;123456&#39;)); // 123ABC\nconsole.log(&#39;ABCDE&#39;.padStar(3, &#39;123&#39;)); // ABCDE\nconsole.log(&#39;ABC&#39;.padStar(6, length)); // 6</code>\n        </deckgo-highlight-code>\n<ol>\n<li><code class=\"language-text\">console.log(\"ABC\".padStar(10, \"123\"));</code> 10자리로 늘리고 8/9/10 번째에 “ABC”를 설정, 남은 7자리에 “123”을 왼쪽부터 반복하여 채움</li>\n<li><code class=\"language-text\">console.log(\"ABC\".padStar(6, \"123456\"));</code> 6자리 끝에 ABC를 설정하면 3자리가 남음, 123456을 왼쪽부터 채우고 123이 채워짐</li>\n<li><code class=\"language-text\">console.log(\"ABCDE\".padStar(3, \"123\"));</code> 전체 길이가 대상 문자열보다 작으면 길이를 줄이지 않고 대상 문자열을 반환</li>\n<li><code class=\"language-text\">console.log(\"ABC\".padStar(6, length));</code> 두 번째 파라미터를 작성하지 않으면 남은 앞에 빈문자열을 채움</li>\n</ol>\n<br>\n<h2 id=\"2-padend\" style=\"position:relative;\"><a href=\"#2-padend\" aria-label=\"2 padend permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. padEnd()</h2>\n<ul>\n<li>\n<p>첫 번째 파라미터 값 만큼 길이를 늘리고</p>\n<ul>\n<li>늘어난 끝에 대상 문자열을 설정한 후</li>\n<li>뒤의 남은 공간에 두 번째 파라미터를 채움</li>\n</ul>\n</li>\n<li>두 번째 파라미터에 채울 문자열 작성</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">console.log(&#39;ABC&#39;.padEnd(10, &#39;123&#39;)); // ABC1231231\nconsole.log(&#39;ABC&#39;.padEnd(6, &#39;123456&#39;)); // ABC123\nconsole.log(&#39;ABCDE&#39;.padEnd(3, &#39;123&#39;)); // ABCDE\nconsole.log(&#39;ABC&#39;.padEnd(6, length)); // 6</code>\n        </deckgo-highlight-code>\n<ol>\n<li><code class=\"language-text\">console.log(\"ABC\".padStar(10, \"123\"));</code> 10자리로 늘리고 1/2/3 번째에 “ABC”를 설정, 남은 7자리에 “123”을 왼쪽부터 반복하여 채움</li>\n<li><code class=\"language-text\">console.log(\"ABC\".padStar(6, \"123456\"));</code> 6자리 앞자리에 ABC를 설정하면 3자리가 남음, 123456을 왼쪽부터 채우고 123이 채워짐</li>\n<li><code class=\"language-text\">console.log(\"ABCDE\".padStar(3, \"123\"));</code> 전체 길이가 대상 문자열보다 작으면 길이를 줄이지 않고 대상 문자열을 반환</li>\n<li><code class=\"language-text\">console.log(\"ABC\".padStar(6, length));</code> 두 번째 파라미터를 작성하지 않으면 남은 뒤에 빈문자열을 채움</li>\n</ol>\n<br>\n<h2 id=\"3trimstart\" style=\"position:relative;\"><a href=\"#3trimstart\" aria-label=\"3trimstart permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.trimStart()</h2>\n<ul>\n<li>\n<p>문자열 앞의 공백 삭제</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const value = &#39;  123&#39;;\nconsole.log(value.length); // 5\nconsole.log(value.trimStart().length); // 3\n\nconst split = &#39;a, b, c&#39;.split(&#39;,&#39;);\nfor (let value of split) {\nconsole.log(`${value}, ${value.length}`);\nconsole.log(value.trimStart().length);\n}\n\n// a, 1\n// 1\n// b, 2\n// 1\n// c, 2\n// 1</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<h2 id=\"4-trimend\" style=\"position:relative;\"><a href=\"#4-trimend\" aria-label=\"4 trimend permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. trimEnd()</h2>\n<ul>\n<li>문자열 끝의 공백 삭제</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const value = &#39;123   &#39;;\nconsole.log(value.length); // 5\nconsole.log(value.trimEnd().length); // 3</code>\n        </deckgo-highlight-code>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","frontmatter":{"date":"September 21, 2021","title":"길이 늘리기, 공백 삭제","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-string-4/"}},"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":"zoomkoding/zoomkoding-gatsby-blog"}}}}},"pageContext":{"slug":"/study-js-es6-string-3/","nextSlug":"/study-js-es6-string-2/","prevSlug":"/study-js-es6-string-4/"}},"staticQueryHashes":["1073350324","2938748437"]}