{"componentChunkName":"component---src-templates-blog-template-js","path":"/study-js-es6-Generator-1/","result":{"data":{"cur":{"id":"fcd6c5e7-6ed8-5583-bb8a-d689449c1565","html":"<br>\n<h1 align=\"center\">\n  👋   Generator 함수\n</h1>\n<br>\n<h2 id=\"1-code-classlanguage-textfunctioncode\" style=\"position:relative;\"><a href=\"#1-code-classlanguage-textfunctioncode\" aria-label=\"1 code classlanguage textfunctioncode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. <code class=\"language-text\">function*</code></h2>\n<ul>\n<li>Generator function : <code class=\"language-text\">function*</code> 키워드를 사용한 함수</li>\n<li>\n<p>제너레이터 함수 형태 : <code class=\"language-text\">function* 선언문</code>, <code class=\"language-text\">function* 표현식</code>, <code class=\"language-text\">Generator Function</code></p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">sports</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">one</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">book</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>one<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> music <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getProtytpeOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> gen <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">music</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>작성 방법 :<code class=\"language-text\">function*</code> 다음에 소괄호() 작성이어서 작성해도 되고 하나 이상 띄워도 됨</li>\n</ul>\n<br>\n<h2 id=\"2-code-classlanguage-textfuntioncode-선언문\" style=\"position:relative;\"><a href=\"#2-code-classlanguage-textfuntioncode-%EC%84%A0%EC%96%B8%EB%AC%B8\" aria-label=\"2 code classlanguage textfuntioncode 선언문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. <code class=\"language-text\">funtion*</code> 선언문</h2>\n<ul>\n<li><code class=\"language-text\">function*</code> 다음에 함수 이름 작성</li>\n<li>\n<p>제너레이터 함수를 호출하면 함수 블록<code class=\"language-text\">{}</code>을 실행하지 않고</p>\n<ul>\n<li><code class=\"language-text\">Generator</code>오브젝트를 생성하여 반환</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">sports</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">one<span class=\"token punctuation\">,</span> two</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">yield</span> one <span class=\"token operator\">+</span> two<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> sports<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token function\">sports</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// object</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {value: 3, done: false}</span>\n\n<span class=\"token comment\">// 1. function* sports(one, two){} 선언문 형태의 제너레이터 ㅎ마수 임</span>\n<span class=\"token comment\">// 2. 제너레이터 함수의 타입은 function</span>\n<span class=\"token comment\">// 3. const obj = sports(1, 2); sports 함수를 호출하면 Generator 오브젝트를 생성하여 반환함</span>\n<span class=\"token comment\">// 4. 이때, 함수 코드를 실행하지 않음</span>\n<span class=\"token comment\">// 5. 파라미터 값은 생성한 오브젝트에 설정됨</span>\n<span class=\"token comment\">// 6. new 연산자를 사용할 수 없음, 단일 함수로 사용하겠다는 뉘앙스</span>\n<span class=\"token comment\">// 7. typeof obj 생성한 Generator 오브젝트 타입 object</span>\n<span class=\"token comment\">// 8. obj.next() Generator 오브젝트가 iterator 오브젝트이므로 next() 함수를 호출 할 수 있으며 이때 함수 코드가 실행 됨</span></code></pre></div>\n</li>\n<li><code class=\"language-text\">Generator</code> 오브젝트는 <code class=\"language-text\">iterator</code> 오브젝트</li>\n<li>\n<p>함수 코드 실행</p>\n<ul>\n<li><code class=\"language-text\">Generator</code> 오브젝트의 메소드를 호출 할 때</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"3-code-classlanguage-textfunctioncode-표현식\" style=\"position:relative;\"><a href=\"#3-code-classlanguage-textfunctioncode-%ED%91%9C%ED%98%84%EC%8B%9D\" aria-label=\"3 code classlanguage textfunctioncode 표현식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. <code class=\"language-text\">function*</code> 표현식</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">function*</code> 다음에 함수 이름 작성은 선택</p>\n<ul>\n<li>일반적으로 함수 이름을 작성하지 않음</li>\n<li><code class=\"language-text\">function*</code> 왼쪽에 변수를 선언하며 변수 이름이 함수 이름이 됨</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>one<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">yield</span> one<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token function\">sports</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {value: 100, done: false}</span>\n\n<span class=\"token comment\">// 1. const sports = function* (one) {} 표현식 형태의 제너레이터 함수 임</span>\n<span class=\"token comment\">// 2. 왼쪽 sports가 함수 이름이 됨</span>\n<span class=\"token comment\">// 문법 적으로는 * 다음에 함수 이름을 작성할 수 있지만 일반적으로는 사용하지 않음</span></code></pre></div>\n</li>\n<li>\n<p>함수를 선언하는 형태만 다를 뿐</p>\n<ul>\n<li>다른 것은 <code class=\"language-text\">function*</code> 선언문과 같음</li>\n</ul>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1-function\">1. <code class=\"language-text\">function*</code></a></li>\n<li><a href=\"#2-funtion-%EC%84%A0%EC%96%B8%EB%AC%B8\">2. <code class=\"language-text\">funtion*</code> 선언문</a></li>\n<li><a href=\"#3-function-%ED%91%9C%ED%98%84%EC%8B%9D\">3. <code class=\"language-text\">function*</code> 표현식</a></li>\n</ul>\n</div>","excerpt":"1.  Generator function :  키워드를 사용한 함수 제너레이터 함수 형태 : , ,  작성 방법 : 다음에 소괄호() 작성이어서 작성해도 되고 하나 이상 띄워도 됨 2.  선언문  다음에 함수 이름 작성 제너레이터 함수를 호출하면 함수 블록을 실행하지 않고 오브젝트를 생성하여 반환  오브젝트는  오브젝트 함수 코드 실행  오브젝트의 메소드를 호출 할 때 3.  표현식  다음에 함수 이름 작성은 선택 일반적으로 함수 이름을 작성하지 않음  왼쪽에 변수를 선언하며 변수 이름이 함수 이름이 됨 함수를 선언하는 형태만 다를 뿐 다른 것은  선언문과 같음 1.  2.  선언문 3.  표현식","frontmatter":{"date":"October 10, 2021","title":"Generator 함수","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-Generator-1/"}},"next":{"id":"c354bcc7-e5b5-5cbe-bb2a-033fafcdbac9","html":"<br>\n<h1 align=\"center\">\n  👋  u 플래그, s 플래그\n</h1>\n<br>\n<h2 id=\"1-u-플래그\" style=\"position:relative;\"><a href=\"#1-u-%ED%94%8C%EB%9E%98%EA%B7%B8\" aria-label=\"1 u 플래그 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. u 플래그</h2>\n<ul>\n<li>\n<p>정규 표현식의 패턴을 유니코드의 코드 포인트로 변환하여 매치</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">'₩u{31}₩u{32}'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'u'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'12'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>unicode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">₩u{1f418}</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">u</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'코끼리이모지'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n\n<span class=\"token comment\">// 1. new RegExp(\"₩u{31}₩u{32}\", \"u\" 패턴을 코드 포인트로 변환하고 u flag로 인스턴스를 생성함</span>\n<span class=\"token comment\">// 2. obj.test(\"12\") 매치가 되므로 true가 출력</span>\n<span class=\"token comment\">// 3. obj.unicode unicode 프로퍼티 값이 true로 설정됨</span>\n<span class=\"token comment\">// 4. 이모지도 매치 가능</span></code></pre></div>\n</li>\n<li>\n<p>u 플래그를 사용하지 않으면 코드 포인트를 문자로 매치</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">₩u{31}₩u{32}</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'12'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1. / 다음에 플래그를 작성하지 않았음</span>\n<span class=\"token comment\">// 2. 패턴의 코드 포인트를 일반 문자로 간주하여 12와 매치하므로 false가 출력됨</span></code></pre></div>\n</li>\n</ul>\n<br>\n<h2 id=\"2-s-플래그\" style=\"position:relative;\"><a href=\"#2-s-%ED%94%8C%EB%9E%98%EA%B7%B8\" aria-label=\"2 s 플래그 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. s 플래그</h2>\n<ul>\n<li>정규 표현식에서 dot(점.)은 모든 문자를 매치하지만 줄바꿈 문자는 매치 하지 않음</li>\n<li>\n<p>S 플래그를 사용하면(ES2018) 줄 바꿈 문자를 매치</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> text <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">line\n줄을 바꿈</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 이전 방법</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[₩s₩S]+</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[^]+</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n\n<span class=\"token comment\">// s플래그</span>\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.+'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'s'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>dotAll<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<ul>\n<li>dotAll 플래그에 true 설정</li>\n</ul>\n</li>\n<li>\n<p>줄 바꿈 문자</p>\n<ul>\n<li>U+000A Line Feed(LF)(“\\n”)</li>\n<li>U+000D Carriage Return(CR)(“\\r”)</li>\n<li>U+2028 Line Separator</li>\n<li>U+2029 Paragraph Separator</li>\n</ul>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1-u-%ED%94%8C%EB%9E%98%EA%B7%B8\">1. u 플래그</a></li>\n<li><a href=\"#2-s-%ED%94%8C%EB%9E%98%EA%B7%B8\">2. s 플래그</a></li>\n</ul>\n</div>","frontmatter":{"date":"October 09, 2021","title":"u 플래그, s 플래그","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-RegExp-3/"}},"prev":{"id":"407eee4d-aa51-56cc-9695-c54af371638d","html":"<br>\n<h1 align=\"center\">\n  👋   GeneratorFunction\n</h1>\n<br>\n<h2 id=\"genratorfunction\" style=\"position:relative;\"><a href=\"#genratorfunction\" aria-label=\"genratorfunction permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GenratorFunction</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">GeneratorFunction.constructor</code> 를 사용하여</p>\n<ul>\n<li>제너레이터 함수를 생성</li>\n<li>파라미터를 문자열로 작성</li>\n<li>마지막 파라미터가 함수 코드가 되고 앞은 파라미터 이름이 됨</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> fn <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Function</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'one'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'return one'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 100</span>\n\n<span class=\"token keyword\">const</span> create <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> sports <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">create</span><span class=\"token punctuation\">(</span><span class=\"token string\">'one'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'yield one'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token function\">sports</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {value: 100, done: false}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">gen</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*\n\t1. 오른쪽 gen을 펼치면 prototype이 있음\n\t- 이것을 펼치면 constructor가 있어야 하는데 없음\n\t- 또한 메소드로 없음\n\n\t2. __proto__가 있으며 이것을 펼치면 constructor가 있음\n\t- __proto__에 다른 오브젝트의 prototype에 연결된 프로퍼티를\n\t- 인스턴스 개념으로 생성하여 첨부한 것이 표시 됨\n\n\t3. 즉, GeneratorFunction의 constructor가 첨부된 것\n*/</span></code></pre></div>\n<br>\n<ul>\n<li>예시</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\">  <span class=\"token keyword\">const</span> create <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">function</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">;</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>create<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// function GeneratorFunction() {[native code]}</span>\n\n  <span class=\"token keyword\">const</span> sprots <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">create</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"one\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"yield one;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> sports<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// function</span>\n\n  <span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token function\">sports</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// {value: 100, done: false}</span>\n\n  <span class=\"token comment\">/*\n\n    1. create = (function*(){}).constructor;\n        - 제너레이터 함수를 생성하는\n        - constructor(생성자)를 할당 함\n\n    2. constructor가 할당되므로\n        - new 연산자로 생성자 함수를 호출할 수 있음\n\n    3. console.log(create);\n        - function GeneratorFunction() {} 출력\n        - function 오브젝트 형태\n\n    4. sports = new create(param)\n        - GeneratorFunction을 사용하여 제너레이터 함수를 생성하고 sports 변수에 할당 함\n        - param 에 파라미터와 함수 코드를 작성 one: 파라미터 이름, yield one: 함수 코드\n\n    5. console.log(typeof sports)\n        - new  연산자를 사용했는데\n        - sports가 Object가 아니라 function임\n\n    6. function이라는 것은\n        - function* sports() 로 제너레이터 함수를 선언한 것을 뜻함\n        - 즉, 지금까지 제너레이터 함수를 선언하는 처리를 한 것\n\n    7. const obj = sports(100);\n        - 제너레이터 함수를 호출 함\n        - 제너레이터 오브젝트 생성, 반환\n        - 함수 코드를 실행하지 않음\n        - 100이 one에 매핑 됨\n\n    8. obj.next()\n        - 제너레이터 오브젝트는 이터레이터 오브젝트이며\n        - obj에 이터레이터 오브젝트가 할당되어 있으므로\n        - `next()`를 호출 할 수 있음\n        - {value: 100, done: false} 출력\n  */</span></code></pre></div>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#genratorfunction\">GenratorFunction</a></li>\n</ul>\n</div>","frontmatter":{"date":"October 11, 2021","title":"GeneratorFunction","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-Generator-2/"}},"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":"zoomkoding/zoomkoding-gatsby-blog"}}}}},"pageContext":{"slug":"/study-js-es6-Generator-1/","nextSlug":"/study-js-es6-RegExp-3/","prevSlug":"/study-js-es6-Generator-2/"}},"staticQueryHashes":["1073350324","2938748437"]}