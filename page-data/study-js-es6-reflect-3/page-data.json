{"componentChunkName":"component---src-templates-blog-template-js","path":"/study-js-es6-reflect-3/","result":{"data":{"cur":{"id":"15e426fc-0697-5374-a59f-00e5793fa80a","html":"<br>\n<h1 align=\"center\">\n  👋 this 참조 오브젝트, Proxy 핸들러의 set() 트랩\n</h1>\n<br>\n<h2 id=\"1set\" style=\"position:relative;\"><a href=\"#1set\" aria-label=\"1set permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.set()</h2>\n<ul>\n<li><code class=\"language-text\">target</code> 에 프로퍼티 키와 값을 설정함</li>\n<li>\n<p><code class=\"language-text\">true, fasle</code> 를 반환함</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const target = {\npoint: 100,\n};\n\nconsole.log((target.point = 200)); // 200\nconsole.log(Reflect.set(target, &#39;point&#39;, 300)); // true\nconsole.log(target.point); // 300\n\n// 1. console.log(target.point = 200); setter는 point에 설정한 값을 반환함\n// 2. Reflect.set(target, &quot;point&quot;, 300) target에 point가 있으면 300으로 대체하고 없으면 추가 함 이것은 setter와 같음\n// 3. 한편, set()은 처리를 성공하면 true를 반환하고 실패하면 false를 반환함\n// 4. 에러로 프로그램이 중단되는 것을 방지할 수 있음</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p><code class=\"language-text\">this</code> 로 참조할 오브젝트 작성</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const target = {\npoint: 100,\nset setPoint(key) {\n  target[key] = this.point + 500;\n},\n};\n\ntarget.setPoint = &#39;point&#39;;\nconsole.log(target.point); // 600\n\nconst that = { point: 300 };\nRefelct.set(target, &#39;setPoint&#39;, &#39;point&#39;, that);\n\nconsole.log(target.point); // 800\n\n// 1. target.setPoint = &quot;point&quot;; setPoint()가 호출되며 &quot;point&quot;가 프로퍼티 값으로 넘어 감\n// 2. setPoint()에서 this가 target을 참조함, target.point = (100 + 500) 형태가 됨\n// 3. Refelct.set(target, &quot;setPoint&quot;, &quot;point&quot;, that); 4번째 파라미터에 that을 작성함, setPoint()에서 this가 that을 참조함, target.point = (300 + 500) 형태가 됨</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p><code class=\"language-text\">Proxy</code> 핸들러의 <code class=\"language-text\">set()</code> 트랩 호출</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const target = {\npoint: 100,\nset setPoint(key) {\n  target[key] = this.point + 500;\n},\n};\n\nconst handler = {\nset(target, key, value, receiver) {\n  Reflect.set(target, key, value, receiver);\n},\n};\n\nconst proxy = new Proxy(target, handler);\nproxy.setPoint = &#39;point&#39;;\n\nconsole.log(target.point); // 600\n\n// 1. proxy.setPoint = &quot;point&quot;; set() 트랩이 호출됨\n// 2. 트랩: set(target, key, value, receiver){...} target 파라미터에 target이 설정됨 key에 setPoint가 설정되고 value에 point가 설정됨 receiver에 Proxy 인스턴스가 설정됨\n// 3. 트랩: Reflect.set(target, key, value, receiver) setPoint()를 호출 함, setPoint()에서 this가 receiver(Proxy)를 참조하며 Proxy.[[target]].point 값을 사용함</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p><code class=\"language-text\">set()</code> 트랩에서 <code class=\"language-text\">this</code> 참조 변경</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const target = {\npoint: 100,\nset setPoint(key) {\n  target[key] = this.point + 500;\n},\n};\n\nconst handler = {\nset(target, key, value, receiver) {\n  Reflect.set(target, key, value, receiver);\n},\n};\n\nconst proxy = new Proxy(target, handler);\nconst that = { point: 300 };\nReflect.set(proxy, &#39;setPoint&#39;, &#39;point&#39;, that);\n\nconsole.log(target.point); // 800\n\n// 1. Reflect.set(proxy, &quot;setPoint&quot;, &quot;point&quot;, that); 4번째 파라미터에 that을 작성함, set() 트랩이 호출 됨\n// 2. 트랩: set(target, key, value, receiver) {...}, receiver에 that 오브젝트가 설정됨\n// 3. 트랩: Reflect.set(target, key, value, receiver); setPoint()를 호출 함\n// 4. target[key] = this.point + 500; this가 receiver를 참조하며, receiver는 that임 this.point에서 {point: 300}을 사용함</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","excerpt":"1.set()  에 프로퍼티 키와 값을 설정함  를 반환함  로 참조할 오브젝트 작성  핸들러의  트랩 호출  트랩에서  참조 변경","frontmatter":{"date":"December 07, 2021","title":"this 참조 오브젝트, Proxy 핸들러의 set() 트랩","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-reflect-3/"}},"next":{"id":"f1ac4f67-bca2-5690-8bf5-a28a8d3893f9","html":"<br>\n<h1 align=\"center\">\n  👋 this 참조 오브젝트, Proxy 핸들러의 get() 트랩\n</h1>\n<br>\n<h2 id=\"1-get\" style=\"position:relative;\"><a href=\"#1-get\" aria-label=\"1 get permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. get()</h2>\n<ul>\n<li><code class=\"language-text\">target</code> 의 프로퍼티 값을 반환함</li>\n<li>\n<p><code class=\"language-text\">target</code> 의 <code class=\"language-text\">getter</code> 와 차이 임</p>\n<ul>\n<li><code class=\"language-text\">receiver</code> 에 <code class=\"language-text\">this</code> 로 참조할 오브젝트 작성</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const target = {\n  point: 100,\n  get getPoint() {\n    return this.point + 500;\n  },\n};\n\nconsole.log(target.getPoint); //  600\nconsole.log(Reflect.get(target, &#39;getPoint&#39;)); // 600\n\nconst that = { point: 300 };\n\nconsole.log(Reflect.get(target, &#39;getPoint&#39;, that)); // 800\n\n// 1. console.log(target.getPoint); getter이므로 target의 getPoint()가 호출 됨, getPoint()에서 this가 target을 참조함\n// 2. Reflect.get(target, &quot;getPoint&quot;) target의 getPoint()가 호출됨, getPoint()에서 this가 target을 참조함\n// 3. Reflect.get(target, &quot;getPoint&quot;, that) 3번째 파라미터에 that을 작성했음, getPoint()에서 this가 that을 참조함\n// 4. this로 참조하는 오브젝트를 바꿀 수 있음</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p><code class=\"language-text\">Proxy</code> 핸들러의 <code class=\"language-text\">get()</code> 트랩에서 <code class=\"language-text\">target[key]</code> 로 값을 구하는 형태</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const target = {\n\tpoint: 100,\n\tget getPoint() {\n\t\treturn this.point + 500;\n\t}\n};\n\ncosnt handler = {\n\tget(target, key, receiver) {\n\t\treturn target[key];\n\t}\n};\n\nconst proxy = new Proxy(target, handler);\nconsole.log(Reflect.get(proxy, &quot;getPoint&quot;));    // 600\n\nconst that = {point: 200};\nconsole.log(Reflect.get(proxy, &quot;getPoint&quot;, that));   // 600\n\n// 1. Reflect.get(proxy, &quot;getPoint&quot;) get() 트랩이 호출됨\n// 2. 트랩: get(target, key, receiver){...}, target 오브젝트, &quot;getPoint&quot;가 설정되고 receiver에 Proxy 인스턴스가 설정됨\n// 3. 트랩: return target[key], getPoint()를 호출함\n// 4. get getPoint(){return this.point + 500;}, getPoint()에서 this가 target을 참조함, this.point 값은 100\n// 5. Reflect.get(proxy, &quot;getPoint&quot;, that); 3번째 파라미터에 that을 작성함, getPoint()에서 this가 that을 참조하지 않고 target을 참조함\n// 6. 한편, get() 트랩을 작성하지 않으면 getPoint()에서 this가 that을 참조함 200과 500을 더해 700이 됨</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p><code class=\"language-text\">get()</code> 트랩에서 <code class=\"language-text\">Reflect.get()</code> 을 사용한 형태</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const target = {\n\tpoint: 100,\n\tget getPoint() {\n\t\treturn this.point + 500;\n\t}\n};\n\ncosnt handler = {\n\tget(target, key, receiver) {\n\t\treturn Reflect.get(target, key, receiver);\n\t}\n};\n\nconst proxy = new Proxy(target, handler);\nconst that = {point: 200};\n\nconsole.log(Reflect.get(proxy, &quot;getPoint&quot;, that));  // 700\n\n// 1. Reflect.get(proxy, &quot;getPoint&quot;, that), 3번째 파라미터에 that을 작성함\n// 2. 트랩: get(target, key, receiver){...}, receiver에 {point: 200}이 설정됨\n// 3. 트랩: return Reflect.get(target, key, receiver); target의 getPoint()가 호출됨\n// 4. getPoint()에서 this가 receiver의 {point: 200}을 참조함\n// 5. 결과적으로 target.getPoint로 값을 구하는 것은 that을 사용할 수 없으므로 확장성 떨어짐\n// 6. Reflect.get(proxy, &quot;getPoint&quot;, that)과 return Reflect.get(target, key, receiver); 를 사용하면 일련의 코드를 변경하지 않아도 됨\n// 7. 상황에 따라 get() 트랩에서 return 값을 바꿀 수 있음</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","frontmatter":{"date":"December 06, 2021","title":"this 참조 오브젝트, Proxy 핸들러의 get() 트랩","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-reflect-2/"}},"prev":{"id":"cc2a0360-8ca1-5a04-9452-9a6fb19fc157","html":"<br>\n<h1 align=\"center\">\n  👋 has(), deleteProperty()\n</h1>\n<br>\n<h2 id=\"1-has\" style=\"position:relative;\"><a href=\"#1-has\" aria-label=\"1 has permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. has()</h2>\n<ul>\n<li><code class=\"language-text\">target</code> 에 <code class=\"language-text\">key</code> 이 존재 여부를 반환함</li>\n<li>\n<p><code class=\"language-text\">Reflect.has(target, key)</code> 형태로 작성</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const target = {\npoint: 100,\n};\n\nconsole.log(Reflect.has(target, &#39;point&#39;)); // true\n\n// 1. Reflect.has(target, &quot;point&quot;), target 오브젝트에 &quot;point&quot;가 프로퍼티 키로 존재하면 true를 반환하고 존재하지 않으면 false를 반환</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>상속받은 <code class=\"language-text\">prototype, __proto__</code>도 검색</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">function target() {}\n\nconsole.log(Reflect.has(target, &#39;hasOwnProperty&#39;)); // true\n\n// 1. Reflect.has(target, &quot;hasOwnProperty&quot;); target 함수에 hasOwnProperty()를 작성하지 않지만 true가 반환됨\n// 2. target 함수 구조를 보면 target.prototype에 hasOwnProperty()가 없지만 target.prototype.__proto__에 있기 때문</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>핸들러의 <code class=\"language-text\">has()</code> 트랩 호출</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const target = { point: 100 };\n\nconst handler = {\nhas(target, key) {\n  return Reflect.has(target, key);\n},\n};\n\nconst proxy = new Proxy(target, handler);\n\nconsole.log(&#39;point&#39; in proxy); // true\n\n// 1. console.log(&quot;point&quot; in proxy); has() 트랩이 호출됨\n// 2. 트랩: has(target, key){...}, target 오브젝트, &quot;point&quot;가 설정됨\n// 3. 트랩: return Reflect.has(target, key); return을 작성하지 않으면 target에 key가 존재하더라도 false가 반환됨</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<h2 id=\"2-deleteproperty\" style=\"position:relative;\"><a href=\"#2-deleteproperty\" aria-label=\"2 deleteproperty permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. deleteProperty()</h2>\n<ul>\n<li><code class=\"language-text\">target</code> 에서 <code class=\"language-text\">key</code>를 삭제 함</li>\n<li>\n<p><code class=\"language-text\">Reflect.deleteProperty()</code> 형태</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const target = { point: 100 };\n\nconsole.log(Reflect.deleteProperty(target, &#39;point&#39;)); // true\nconsole.log(Reflect.deleteProperty(target, &#39;point&#39;)); // true\n\n// 1. Reflect.deleteProperty(target, &quot;point&quot;); 삭제 처리를 성공하면 true를 반환하고 실패하면 flase를 반환함\n// 2. 두 번째의 Reflect.deleteProperty(target, &quot;point&quot;); 프로퍼티가 존재하지 않더라도 true를 반환함, 프로퍼티 삭제 여부가 아닌 삭제 처리 수행의 성공/실패가 기준임\n// 3. 이어서 false가 반환되는 경우를 살펴봄</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p><code class=\"language-text\">false</code> 반환</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const target = {};\nObject.definedProperty(target, &quot;point&quot;, {\n\tvalue: 100, configurable: false;\n});\n\nconsole.log(Reflect.deleteProperty(target, &quot;point&quot;));   // false\n\n// 1. (Reflect.deleteProperty(target, &quot;point&quot;), point가 {configurable: false}이므로 삭제 할 수 없기 때문에 false를 반환합니다.\n// 2. 이것이 삭제 처리 실패 입니다.</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>인덱스로 배열 엘리먼트 삭제</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const target = [1, 2, 3, 4];\nReflect.deleteProperty(target, 1);\n\nconsole.log(target); // [1, undefined, 3, 4]\n\n// 1. Reflect.deleteProperty(target, 1); target이 배열일 때 두 번째 파라미터 1은 배열의 인덱스 임\n// 2. 1번 인덱스 값인 2를 삭제하며 삭제한 인덱스의 엘리먼트에 undefined를 설정함, 3과 4를 앞으로 당기지 않음</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","frontmatter":{"date":"December 08, 2021","title":"has(), deleteProperty()","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-reflect-4/"}},"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":"zoomkoding/zoomkoding-gatsby-blog"}}}}},"pageContext":{"slug":"/study-js-es6-reflect-3/","nextSlug":"/study-js-es6-reflect-2/","prevSlug":"/study-js-es6-reflect-4/"}},"staticQueryHashes":["1073350324","2938748437"]}