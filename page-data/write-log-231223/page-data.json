{"componentChunkName":"component---src-templates-blog-template-js","path":"/write-log-231223/","result":{"data":{"cur":{"id":"82fdf2cd-665c-5334-90a9-fa19b168909e","html":"<h2 id=\"회고\" style=\"position:relative;\"><a href=\"#%ED%9A%8C%EA%B3%A0\" aria-label=\"회고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>회고</h2>\n<h3 id=\"업무-회고\" style=\"position:relative;\"><a href=\"#%EC%97%85%EB%AC%B4-%ED%9A%8C%EA%B3%A0\" aria-label=\"업무 회고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>업무 회고</h3>\n<ul>\n<li>디자이너 팀원분께서 섬세하다는 칭찬을 들었다. 타인이 나에게 해준 칭찬이 나의 강점이 될 수 있다는 사실을 생각해보았다.</li>\n<li>API를 호출할 때, Base Url과 Endpoint의 의미를 이해하고 사용하도록 하자. 특정 API의 URL의 변수 네이밍을 잘 짓자.</li>\n<li>디자인 시안을 받았을 때, 구현하기 앞서 프론트엔드 개발자로써 더 좋은 UX를 제공하는 라이브러리가 없는지 찾아보고 적용하자. 무조건적으로 디자인 시안을 구현하기 보다는 더 나은 결과물을 만들기 위해 노력하자.</li>\n<li>팀내에서 개발실력을 인정받기 위해서는 다양한 능력이 필요한 것 같다. 그 중 무엇보다 스스로 노력하는 태도가 가장 먼저 인 것 같다.</li>\n<li>기본기를 정말 중요하게 그리고 집요하게 잘 만들어 놓자.</li>\n<li>협업했던 팀원분들과 끝임없이 피드백을 통해 보완점을 채워가자. 이번에 대시보드 함께 개발한 BE 개발자 분에게 피드백을 요청했고 피드백 내용 중에 개발할 때, 조급함 마음이 생기지 않도록 사전에 많은 장치들을 만들어 놓으면 좋을 것 같다고 피드백을 주셨다. 이렇게 피드백 주신 이유는 내가 마음이 급해지다보니 너무 많은 질문을 특히 조금만 더 찾아보면 나오는 질문들을 했기 때문이다. 이렇게 되면 나 뿐만아니라, 팀원분의 시간에 영향을 준다.</li>\n<li>상황을 인지하고 나의 마음이 조급하지 않도록 일정 관리나 모르는 부분에 대해서 정확하게 이해 및 정리를 하면서 일을 두번하지 않고 제대로 할 수 있도록 노력하자.</li>\n<li>PR을 날리기 전에 스스로 PR 리뷰를 한 뒤에, 팀원분들에게 PR 리뷰 요청을 드리자. 나의 시간이 중요한 만큼 팀원분들의 시간도 중요하다.</li>\n<li>스스로 나의 커리어의 끝판왕이 무엇인지 목표를 정해 도전하는 태도를 가지는 것도 중요한 것 같다.</li>\n<li>회사는 디폴트가 일을 잘하는 것이다. 그 다음 인간관계이다.</li>\n<li>antd에서 제공하는 DatePicker를 사용할 때, onChange로 value 값을 리셋 시킬 때, undefined가 아닌, null로 셋팅을 해야 값이 확실히 리셋된다.</li>\n<li>내가 할 수 있는 것을 명확히 인지하고 캐치해서 스스로 진행해야 한다.</li>\n<li>지금 이 상황에서 경험할 수 있는 것들을 잘 정리하고 체화해서 나중에 꼭 필요한 사람이 될 수 있도록 노력하자. 개발자로써 필요한 사람은 많은 경험을 통해 현 회사에서 직면하고 있는 문제 해결을 넘어 미래를 대비해 어떻게 하면 효율적인 아키텍쳐 및 개발 문화 등을 설계할 수 있는 사람이라고 생각한다. 그렇기 때문에 조금 더 지금 내가 다니고 있는 회사의 규모에서 어떤 문제를 해결하고 있는지 정밀하게 파악하고 정리하면서 한 걸음씩 나아갈 수 있도록 의식적으로 노력하자. 결국 밑에서부터 차근히 올라가자</li>\n<li>내가 사용하고 있는 IDE, 리눅스 운영체제 등 개발 약속어 등 정말 기본적인 것부터 학습하자. 결국 빠르게 개발한다는 것은 불필요한 행위를 하지 않고 정말 해야할 행위에 집중하는 것이다.</li>\n<li>React Hook Form에서 isDirty 값을 사용하기 위해서는 form에 default value를 셋팅해야 함</li>\n<li>React Hook Form과 Yup을 함께 사용할 때에는 Default Value와 Schema 생성시 객체 property 순서를 맞춰야 함. 간혹 useFieldArray를 통해 특정 form data를 가져올 때, 가져오지 못하는 문제가 간혹 발생</li>\n<li>React Hook Form에서 제공하는 watch를 사용할 때, 인자로 아무것도 넣지 않을 경우 Form Data를 다 가져오는데, 이 때 가져온 값이 실시간으로 변경되었을 때, React UI 컴포넌트가 리렌더링이 되지 않은 부분이 있음. 이럴 때에는 watch에 내가 원하는 form의 id를 인자로 넣어서 리턴한 값을 가지고 React UI 컴포넌트 Props로 전달해 UI가 실시간으로 반영될 수 있도록 진행시켜야 함</li>\n</ul>\n<br>\n<h2 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리</h2>\n<p>팀 리더분께서 퇴사를 하신다고 말씀하셨다. 업무 인수인계를 전달 받으면서 나도 이분 처럼 잘할 수 있을까? 라는 스스로 의심을 해보았다.</p>\n<p>최대한 리더분께서 전달해주신 피드백을 곱씹으면서 더 성장 할 수 있도록 노력해야 겠다.</p>\n<p>정말 디테일하게 나에게 피드백주신 리더분을 리스펙한다. 더 많이 도움을 못드린것 같아 아쉽다.</p>\n<p>누군가의 리더가 된다는 것은 정말로 어렵고 또 쉽지도 않은 길인데, 그 길을 먼저 걸어가신 리더분에게 다시 한번 그동안 수고하셨다고 전달하고 싶다.</p>\n<p>마지막으로 나도 이분처럼 누군가에게 좋은 영향을 주는 리더가 되고 싶다.</p>\n<br>\n<h3 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h3>\n<ul>\n<li><a href=\"https://zdnet.co.kr/view/?no=20200324150523\">정재훈 CTO</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%ED%9A%8C%EA%B3%A0\">회고</a></p>\n<ul>\n<li><a href=\"#%EC%97%85%EB%AC%B4-%ED%9A%8C%EA%B3%A0\">업무 회고</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\">마무리</a></p>\n<ul>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"회고 업무 회고 디자이너 팀원분께서 섬세하다는 칭찬을 들었다. 타인이 나에게 해준 칭찬이 나의 강점이 될 수 있다는 사실을 생각해보았다. API를 호출할 때, Base Url과 Endpoint의 의미를 이해하고 사용하도록 하자. 특정 API의 URL의 변수 네이밍을 잘 짓자. 디자인 시안을 받았을 때, 구현하기 앞서 프론트엔드 개발자로써 더 좋은 UX를 제공하는 라이브러리가 없는지 찾아보고 적용하자. 무조건적으로 디자인 시안을 구현하기 보다는 더 나은 결과물을 만들기 위해 노력하자. 팀내에서 개발실력을 인정받기 위해서는 다양한 능력이 필요한 것 같다. 그 중 무엇보다 스스로 노력하는 태도가 가장 먼저 인 것 같다. 기본기를 정말 중요하게 그리고 집요하게 잘 만들어 놓자. 협업했던 팀원분들과 끝임없이 피드백을 통해 보완점을 채워가자. 이번에 대시보드 함께 개발한 BE 개발자 분에게 피드백을 요청했고 피드백 내용 중에 개발할 때, 조급함 마음이 생기지 않도록 사전에 많은 장치들을 만들…","frontmatter":{"date":"December 23, 2023","title":"12월 4주 회고","categories":"Log","author":"Kay","emoji":"👋"},"fields":{"slug":"/write-log-231223/"}},"next":{"id":"1d75f8b5-97ab-563b-8958-49bb13c2eb65","html":"<h2 id=\"추상화-기법\" style=\"position:relative;\"><a href=\"#%EC%B6%94%EC%83%81%ED%99%94-%EA%B8%B0%EB%B2%95\" aria-label=\"추상화 기법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>추상화 기법</h2>\n<ul>\n<li>도메인에 존재하는 개념들을 구조화하고 단순화하기 위해 다양한 추상화 기법을 사용할 수 있음</li>\n<li>주요 추상화 기법의 종류들: 분류와 인스턴스화, 일반화와 특수화, 집합과 분해</li>\n<li>객체지향의 가장 큰 장점은 동일한 추상화 기법을 프로그램의 분석, 설계, 구현 단계에 걸쳐 일관성 있게 적용할 수 있다는 점</li>\n</ul>\n<br>\n<h2 id=\"분류와-인스턴스화\" style=\"position:relative;\"><a href=\"#%EB%B6%84%EB%A5%98%EC%99%80-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4%ED%99%94\" aria-label=\"분류와 인스턴스화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>분류와 인스턴스화</h2>\n<ol>\n<li>\n<p>개념과 범주</p>\n<ul>\n<li>도로 위를 달리는 작은 승용차와 버스, 트럭들을 가리켜 ‘자동차’라고 하며, 길거리에 자라고 있는 다양한 종류의 가로수들을 일컬어 ‘나무’라고 할 수 있음</li>\n<li>개별 자동차와 나무는 완전히 동일하지 않지만 유사한 특성을 바탕으로 각각 ‘자동차’와 ‘나무’로 분류할 수 있음.</li>\n<li>이처럼 객체를 분류하고 범주로 묶는 것은 객체들의 특정 집합에 공통의 개념을 적용하는 것을 의미함</li>\n<li>자동차: 바퀴를 이용해 사람들을 한 장소에서 다른 장소로 운반하는 운송수단 (이라는 특징)</li>\n<li>나무: 푸른 잎과 갈색의 줄기를 가진 다년생 식물 (이라는 특징)</li>\n<li>세상에 존재하는 객체에 개념을 적용하는 과정을 분류라고 함.</li>\n<li>분류는 객체를 특정한 개념을 나타내는 집합의 구성 요소로 포함시킴. 이때 ‘수많은 개별적인 현상들’을 객체라고 하고, ‘하나의 개념’을 타입이라고 함.</li>\n<li>분류는 객체를 타입과 연관시키는 것</li>\n<li>객체지향의 세계에서 타입은 개념과 동의어이며 속성과 행위가 유사한 객체에 공통적으로 적용되는 관념이나 아이디어를 의미. 객체는 자동으로 타입의 인스턴스라고 함</li>\n</ul>\n</li>\n<li>\n<p>타입</p>\n<ul>\n<li>객체를 타입에 따라 분류하기 위해서는 객체가 타입에 속하는지 여부를 확인할 수 있어야 함. 타입은 세 가지 관점에서의 정의가 필요.</li>\n<li>심볼: 타입을 가리키는 간략한 이름이나 명칭</li>\n<li>내연: 타입의 완전한 정의</li>\n<li>외연: 타입에 속하는 모든 객체들의 집합</li>\n</ul>\n</li>\n<li>\n<p>ex) 자동차</p>\n<ul>\n<li>심볼: 자동차</li>\n<li>내연: 원동기를 동력원으로 해서 주행하는 사람이나 화물을 운반하는 기계</li>\n<li>외연: 모든 자동차들의 집합\n→ 도메인을 분석하는 동안 이름(심볼)과 의미(내연), 객체들의 집합(외연)을 이용해 개념을 정의할 수 있음</li>\n</ul>\n</li>\n<li>\n<p>외연과 집합</p>\n<ul>\n<li>타입의 외연은 타입에 속하는 객체들의 집합</li>\n<li>단일 분류: 한 객체가 한 시점에 하나의 타입에만 속하는 것</li>\n<li>다중 분류: 한 객체가 한 시점에 여러 타입에 속하는 것</li>\n<li>대부분의 객체지향 프로그래밍 언어들은 단일 분류만을 지원. 한 객체는 오로지 한 클래스의 인스턴스여야만 함</li>\n<li>동적 분류: 객체가 한 집합에서 다른 집합의 원소로 자신이 속하는 타입을 변경할 수 있는 경우</li>\n<li>정적 분류: 객체가 자신의 타입을 변경할 수 없는 경우</li>\n<li>대부분의 언어에서는 동적 분류를 구현할 수 있는 방법을 제공하지 않음.</li>\n<li>다중 분류와 동적 분류 관점에서 도메인 모델의 초안을 만든 후 실제 구현에 적합하도록 단일 분류와 정적 분류 방식으로 객체들의 범주를 재조정하는 편이 분석과 구현 간의 차이를 메울 수 있는 가장 현실적인 방법</li>\n</ul>\n</li>\n<li>\n<p>클래스</p>\n<ul>\n<li>객체지향 프로그래밍 언어를 이용해 타입을 구현하는 가장 보편적인 방법은 클래스를 이용하는 것</li>\n<li>아리스토텔레스 철학에서 비롯된 현재의 객체지향 패러다임에서는 만약 객체들이 동일한 특성을 가진다면 그것들은 동일한 카테고리에 속함.</li>\n<li>객체들의 카테고리는 객체들이 공유하는 공통적인 특성에 의해 정의됨</li>\n<li>객체의 특성을 사물의 가장 핵심적이고 필수불가결한 ‘본질’과 그렇지 않은 ‘우연’적인 속성으로 나눌 수도 있음.</li>\n<li>객체지향 언어에서 클래스는 객체가 공유하는 본질적인 속성을 정의함. 동일한 범주에 속하는 객체는 모두 동일한 속성을 가져야만 한함</li>\n<li>자바스크립트와 같은 프로토타입 기반의 언어에서 분류와 인스턴스화는 프로토타입이라는 객체의 복사를 통해 이뤄짐</li>\n</ul>\n</li>\n</ol>\n<br>\n<h2 id=\"일반화와-특수화\" style=\"position:relative;\"><a href=\"#%EC%9D%BC%EB%B0%98%ED%99%94%EC%99%80-%ED%8A%B9%EC%88%98%ED%99%94\" aria-label=\"일반화와 특수화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>일반화와 특수화</h2>\n<ol>\n<li>\n<p>범주의 계층</p>\n<ul>\n<li>중세 유럽의 카를로스 린네의 생물 분류법은 ‘계’라는 최상위 단계가 있는 중첩된 계층 구조였음</li>\n<li>계-문-강-목-과-속-종의 분류에서 고양이종 범주는 포유류강 범주의 하위 범주에 속함. 얼룩고양이를 실제로 알지 못하더라도 얼룩고양이에게 (포유류처럼) 척추가 있고 새끼를 낳아 기르며 젖을 먹여 새끼를 기를 것이라는 사실을 쉽게 추론할 수 있음</li>\n<li>린네의 분류 체계는 범주 간의 계층적인 구조를 가짐.</li>\n<li>린네의 계층 구조에서 계층의 상위에 위치한 범주를 계층의 하위 범주의 일반화 라고 하고, 계층의 하위에 위치한 범주는 계층의 상위 범주의 특수화 라고 함</li>\n</ul>\n</li>\n<li>\n<p>서브타입</p>\n<ul>\n<li>어떤 타입이 다른 타입보다 일반적이라면 이 타입을 슈퍼타입(supertype) 이라고 하며, 어떤 타입이 다른 타입보다 좀 더 특수하다면 이 타입을 서브타입(subtype) 이라고 험. 슈퍼타입은 서브타입의 일반화이고 서브타입은 슈퍼타입의 특수화</li>\n<li>슈퍼타입은 서브타입의 일반화이고 서브타입은 슈퍼타입의 특수화</li>\n<li>아리스토텔레스의 분류법에서는 기존의 범주가 가진 속성을 새로운 범주가 포함할 경우 새로운 범주는 기존의 범주를 확장해 정의할 수 있음.</li>\n<li>이것은 객체지향의 세계에서도 동일하게 적용됨. 서브타입은 슈퍼타입이 가진 본질적인 속성과 함께 자신만의 추가적인 속성을 가짐</li>\n<li>서브타입은 슈퍼타입의 본질적인 속성을 모두 포함하기 때문에 계층에 속하는 모든 서브타입들은 슈퍼타입의 속성을 공유함.</li>\n<li>외연의 관점에서 서브타입은 슈퍼타입의 부분집합으로 표현됨. (종 &#x3C; 속 &#x3C; 과 &#x3C; 목 &#x3C; 강 &#x3C; 문 &#x3C; 계)</li>\n<li>(린네의 분류체계에서는 ‘계’로 갈수록 슈퍼타입, ‘종’으로 갈수록 서브타입)</li>\n<li>모든 고양이는 육식동물의 집합에 포함되며, 모든 육식동물은 포유류의 집합에 포함됨. 따라서 고양이의 집합은 육식동물의 부분집합이며, 육식동물의 집합은 포유류의 부분집합</li>\n<li>어떤 타입이 다른 타입의 서브타입이 되기 위해서는 ‘100% 규칙’ 과 ‘is-a 규칙’ 을 준수해야 함</li>\n<li>100% 규칙: 슈퍼타입의 정의가 100% 서브타입에 적용돼야만 함</li>\n<li>is-a 규칙: 서브타입의 모든 인스턴스는 슈퍼타입 집합에 포함돼야 함</li>\n<li>흔히 일반화 관계를 is-a 관계라고 함</li>\n<li>“고양이는 육식동물이다 (O)”와 “육식동물은 고양이다 (X)” → 두 가지 범주 간의 일반화 관계를 표현함</li>\n<li>모든 고양이 인스턴스들은 육식동물에 해당함</li>\n</ul>\n</li>\n<li>\n<p>상속</p>\n<ul>\n<li>일반화와 특수화 관계를 구현하는 가장 일반적인 방법은 클래스 간 상속을 사용하는 것이지만, 모든 상속 관계가 일반화 관계인 것은 아님.</li>\n<li>일반화의 원칙은 한 타입이 다른 타입의 서브타입이 되기 위해서는 슈퍼타입에 순응(conformance) 해야 한다는 것.</li>\n<li>이는 특정 기대 집합에 대해 서브타입의 슈퍼타입에 대한 대체 가능성을 의미함</li>\n<li>\n<p>구조적인 순응</p>\n<ul>\n<li>서브타입은 슈퍼타입이 가지고 있는 속성과 연관관계 면에서 100% 일치해야 한다는 것</li>\n<li>Person이 name이라는 속성을 가진다면 Person의 서브타입인 Employee 역시 name이라는 속성을 가질 것이라고 기대할 수 있음. Employee는 Person을 대체할 수 있음</li>\n</ul>\n</li>\n<li>\n<p>행위적인 순응</p>\n<ul>\n<li>서브타입은 슈퍼타입을 행위적으로 대체 가능해야 함. 이를 흔히 리스코프 치환 원칙이라고 함</li>\n<li>Person이 getAge()라는 메시지에 대한 응답으로 나이를 반환한다면 서브타입인 Employee 역시 getAge()라는 메시지에 대한 응답으로 나이를 반환해야 함.</li>\n</ul>\n</li>\n<li>\n<p>상속은 서브타이핑(subtyping) 과 서브클래싱(subclassing) 의 두 가지 용도로 사용될 수 있음</p>\n<ul>\n<li>서브타이핑: 서브클래스가 슈퍼클래스를 대체할 수 있는 경우 (타입을 상속)</li>\n<li>서브클래싱: 서브클래스가 슈퍼클래스를 대체할 수 없고 단지 코드만 공유하고 있는 경우 (클래스를 상속)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// 서브타이핑</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">MyClass</span> <span class=\"token punctuation\">{</span>\n  String <span class=\"token function\">Name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span><span class=\"token operator\">:</span> MyClass <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> String <span class=\"token function\">Name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Class name is A\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token constant\">B</span></span><span class=\"token operator\">:</span> MyClass <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> String <span class=\"token function\">Name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Class name is B\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">PrintName</span><span class=\"token punctuation\">(</span>MyClass obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">Name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  MyClass objA <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  MyClass objB <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token constant\">B</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">PrintName</span><span class=\"token punctuation\">(</span>objA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Class name is A</span>\n  <span class=\"token function\">PrintName</span><span class=\"token punctuation\">(</span>objB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Class name is B</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// 서브클래싱</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span>  <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> String <span class=\"token function\">Name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Class name is A\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token constant\">B</span></span><span class=\"token operator\">:</span> <span class=\"token constant\">A</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> String <span class=\"token function\">Name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Class name is B\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">PrintName</span><span class=\"token punctuation\">(</span><span class=\"token constant\">A</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">Name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">A</span> objA <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token constant\">A</span> objB <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token constant\">B</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">PrintName</span><span class=\"token punctuation\">(</span>objA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// Class name is A</span>\n  <span class=\"token function\">PrintName</span><span class=\"token punctuation\">(</span>objB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// Class name is A</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 클래스 상속은 부모 클래스의 코드를 재사용하기 때문에 위와 같이 슈퍼클래스의 객체를 하위클래스의 객체로 대체하더라도 하위 클래스의 행동으로 대체되어 동작하지 않는다</span>\n<span class=\"token comment\">// 메소드 재정의(method overriding)를 통해 부모 클래스의 메소드를 대체해야 한다.</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token constant\">B</span></span><span class=\"token operator\">:</span> <span class=\"token constant\">A</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> override String <span class=\"token function\">Name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Class name is B\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li><a href=\"https://epicdevsold.tistory.com/177\">객체지향 상속의 종류: 서브클래싱과 서브타이핑 (Subclassing &#x26; Subtyping)</a></li>\n<li>흔히 서브타이핑을 인터페이스 상속이라고 하고, 서브클래싱을 구현 상속이라고 함.</li>\n<li>여러 클래스로 구성된 상속 계층에서 수신된 메시지를 이해하는 기본적인 방법은 클래스 간의 위임(delegation) 을 사용하는 것</li>\n<li>어떤 객체의 클래스가 수신된 메시지를 이해할 수 없다면 메시지를 클래스의 부모 클래스로, 그리고 또 부모 클래스로 위임함</li>\n<li>프로토타입 기반 언어에서 상속은 객체와 객체 간의 관계로 이뤄지며, 메시지 역시 위임 메커니즘에 의해 처리됨.</li>\n<li>자식 객체와 부모 객체 사이 상속과 위임을 통해 관계를 연결함</li>\n</ul>\n</li>\n</ol>\n<br>\n<h2 id=\"집합과-분해\" style=\"position:relative;\"><a href=\"#%EC%A7%91%ED%95%A9%EA%B3%BC-%EB%B6%84%ED%95%B4\" aria-label=\"집합과 분해 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>집합과 분해</h2>\n<ol>\n<li>\n<p>계층적인 복잡성</p>\n<ul>\n<li>복잡성은 ‘계층’의 형태를 띰</li>\n<li>단순한 형태로부터 복잡한 형태로 진화하는 데 걸리는 시간은 그 사이에 존재하는 ‘안정적인 형태’의 수와 분포에 의존함</li>\n<li>시계는 수많은 부품이 유기적으로 결합되어 부품들 간의 계층적인 형태를 취함. 시계를 짧은 시간 안에 효율적으로 조립하는 방법은 작은 부품으로 구성된 안정적인 형태의 중간 부품을 이용해서 조립하는 것. 시계는 전체적인 연쇄 계층 구조로 구성됨</li>\n<li>집합: 안정적인 형태의 부분으로부터 전체를 구축하는 행위</li>\n<li>분해: 전체를 부분으로 분할하는 행위</li>\n<li>집합은 전체의 내부로 불필요한 세부사항을 감춰주는 추상화 메커니즘이자 캡슐화 메커니즘</li>\n<li>집합과 분해는 한 번에 다뤄야 하는 요소의 수를 감소시킴으로써 인지 과부하를 방지함. 인간은 은유를 통해 쉽게 추상적인 경계를 찾으며, 인위적인 집합을 창조할 수 있음</li>\n</ul>\n</li>\n<li>\n<p>합성 관계</p>\n<ul>\n<li>객체와 객체 사이의 전체-부분 관계를 구현하기 위해서는 합성 관계를 사용함</li>\n<li>주문 항목은 반드시 어떤 한 주문의 일부로 생성되는 전체-부분 관계</li>\n<li>합성 관계는 부분을 전체 안에 캡슐화함으로써 인지 과부하를 방지함. 이 모델을 다루는 사람은 주문 항목과 관련된 세부 사항을 무시하고 주문과 상품이 존재하는 것처럼 모델을 다룰 수 있으며, 필요하다면 주문 내부로 들어가 주문 항목과 관련된 세부 사항을 확인할 수도 있음</li>\n<li>상품은 주문 항목의 일부가 아님</li>\n<li>주문 항목과 상품 간에는 단순한 물리적 통로만 존재함. 이를 연관 관계라고 함</li>\n<li>합성 관계는 연관 관계보다 더 강하게 객체들을 결합함</li>\n<li>일반적으로 합성 관계로 연결된 객체는 포함하는 객체가 제거될 때 내부에 포함된 객체도 함께 제거됨</li>\n<li>주문이 제거되면 주문 항목도 함께 제거됨</li>\n<li>반면 연관 관계로 연결된 두 객체는 독립적으로 제거될 수 있음</li>\n<li>주문과 주문 항목이 제거되더라도 상품은 계속 판매됨</li>\n</ul>\n</li>\n<li>\n<p>패키지</p>\n<ul>\n<li>소프트웨어의 구조를 단순화하기 위해서는 서로 관련성이 높은 클래스 집합을 논리적인 단위로 통합해야 함. 이렇게 묶는 구성 요소를 패키지(package) 또는 모듈(module) 이라고 함</li>\n<li>패키지를 이용하면 개별 클래스가 아닌 클래스의 집합을 캡슐화함으로써 전체적인 복잡도를 낮출 수 있으며, 함께 협력하는 응집도 높은 클래스 집합을 하나로 모아 패키지 경계 안에서 작업을 할 수 있음</li>\n<li>패키지는 내부의 클래스들을 추상화함</li>\n</ul>\n</li>\n</ol>\n<br>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<ul>\n<li><a href=\"https://www.yes24.com/Product/Goods/18249021\">객체지향의 사실과 오해</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EC%B6%94%EC%83%81%ED%99%94-%EA%B8%B0%EB%B2%95\">추상화 기법</a></li>\n<li><a href=\"#%EB%B6%84%EB%A5%98%EC%99%80-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4%ED%99%94\">분류와 인스턴스화</a></li>\n<li><a href=\"#%EC%9D%BC%EB%B0%98%ED%99%94%EC%99%80-%ED%8A%B9%EC%88%98%ED%99%94\">일반화와 특수화</a></li>\n<li><a href=\"#%EC%A7%91%ED%95%A9%EA%B3%BC-%EB%B6%84%ED%95%B4\">집합과 분해</a></li>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>\n</div>","frontmatter":{"date":"December 20, 2023","title":"객체지향의 사실과 오해 - 기타","categories":"Study","author":"Kay","emoji":"👋"},"fields":{"slug":"/oop-fact-and-misunderstand-etc/"}},"prev":{"id":"be6f86fa-37a6-5f71-ac42-b1df2f1422d1","html":"<h2 id=\"babel이란\" style=\"position:relative;\"><a href=\"#babel%EC%9D%B4%EB%9E%80\" aria-label=\"babel이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Babel이란</h2>\n<ul>\n<li>babel은 source-to-source compiler로, ES6 버전 이상의 JavaScript 코드를 ES5 코드로 변환하는 구문 변환(syntax transform)을 수행.</li>\n<li>JavaScript 언어를 컴퓨터 수준의 기계어로 바꾸는 것이 아니라 같은 레벨의 언어를 형태만 변환하는 것이므로 babel을 트랜스파일러(transpiler)라고 부르기도 하지만, 넓은 의미에서 컴파일러(compiler)라고 알려져 있음.</li>\n<li>babel 덕분에 개발자들은 최신 문법의 JavaScript로 편하게 개발을 할 수 있게 되었음</li>\n</ul>\n<br>\n<h2 id=\"babel-트랜스파일링-과정\" style=\"position:relative;\"><a href=\"#babel-%ED%8A%B8%EB%9E%9C%EC%8A%A4%ED%8C%8C%EC%9D%BC%EB%A7%81-%EA%B3%BC%EC%A0%95\" aria-label=\"babel 트랜스파일링 과정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Babel 트랜스파일링 과정</h2>\n<p>babel 컴파일 과정</p>\n<ul>\n<li>파싱(parsing) 단계: babel이 소스코드를 파싱하여 AST를 생성(이때 생성되는 트리는 JSON 형태와 비슷). AST에서 각각의 노드들은 관계를 형성</li>\n<li>변환(transform) 단계: AST를 브라우저가 지원하는 코드로 변환. 이때 개발자가 설정한 plugin과 preset들에 의해서 컴파일됨</li>\n<li>생성(generate) 단계: AST를 코드로 출력</li>\n</ul>\n<h3 id=\"ast란\" style=\"position:relative;\"><a href=\"#ast%EB%9E%80\" aria-label=\"ast란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AST란</h3>\n<p>AST(Abstract Syntax Tree)란 프로그래밍 언어의 문법에 따라 소스코드 구조를 표시하는 계층적 프로그램 표현. HTML을 파싱할 때도 사용됨. babel 플러그인은 babel 컴파일 단계에서 AST(Abstract Syntax Tree)를 변형하는 역할을 수행함. Babel은 플러그인이 변형시킨 AST를 가지고 타깃 코드를 생성함</p>\n<br>\n<h2 id=\"babel-config\" style=\"position:relative;\"><a href=\"#babel-config\" aria-label=\"babel config permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Babel config</h2>\n<ul>\n<li>babel 설정 파일을 만들어주는 방법에는 babel.config.json과 .babelrc.json이 있음. 각각은 사용하는 경우가 조금 다름</li>\n</ul>\n<h3 id=\"babelconfigjson\" style=\"position:relative;\"><a href=\"#babelconfigjson\" aria-label=\"babelconfigjson permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>babel.config.json</h3>\n<ul>\n<li>babel 설정 파일을 root 폴더에 생성함.</li>\n<li>프로젝트 전체의 설정을 위해서 사용하며, 하나의 레포(monorepo)를 사용하고 있는 경우 권장됨.</li>\n<li>babel 6 까지는 .babelrc로 설정을 관리했지만, babel 7부터는 babel.config.json 파일을 사용하는 것을 권장함</li>\n<li>\n<p><a href=\"https://babeljs.io/docs/usage#configuration\">babel 공식 문서</a>에서 제공하는 babel.config.json 파일의 내용은 다음과 같음</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n<span class=\"token property\">\"presets\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"@babel/env\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"targets\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"edge\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"17\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"firefox\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"60\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"chrome\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"67\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"safari\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"11.1\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h3 id=\"babelconfigjson-1\" style=\"position:relative;\"><a href=\"#babelconfigjson-1\" aria-label=\"babelconfigjson 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>babel.config.json</h3>\n<ul>\n<li>babel 설정을 해당 파일이 속한 package에만 적용함.</li>\n<li>프로젝트의 일부에만 적용되는 설정 작성 시 사용하며, 특정 파일들에 대해서 컴파일을 할 때 유용함</li>\n</ul>\n<h3 id=\"babel-loader\" style=\"position:relative;\"><a href=\"#babel-loader\" aria-label=\"babel loader permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>babel-loader</h3>\n<ul>\n<li>webpack을 사용하고 있다면 babel을 webpack에서 실행시켜주는 도구인 babel-loader를 사용할 수 있음.</li>\n<li>babel-loader 설치 후 webpack config의 loader 목록에에 babel-loader를 넣고 필요한 옵션을 추가하면 됨.</li>\n<li>package.json에 명시한 scripts를 통해 webpack을 실행하면 번들링 과정에서 babel이 코드의 트랜스파일링을 진행함.</li>\n<li>\n<p>node_modules는 트랜스파일링이 필요 없으므로 exclude 옵션으로 제외시켜 줌.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// webpack.config.js</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\nmodule<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  rules<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      test<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.(tsx|ts)$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n      exclude<span class=\"token operator\">:</span> <span class=\"token string\">'node_modules'</span><span class=\"token punctuation\">,</span>\n      use<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        loader<span class=\"token operator\">:</span> <span class=\"token string\">'babel-loader'</span><span class=\"token punctuation\">,</span>\n        options<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          presets<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'@babel/preset-env'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'@babel/preset-react'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'@babel/preset-typescript'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n          plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'@babel/plugin-transform-runtime'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'babel-plugin-styled-components'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li><a href=\"https://webpack.js.org/loaders/babel-loader/\">참고</a></li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"plugin과-presets\" style=\"position:relative;\"><a href=\"#plugin%EA%B3%BC-presets\" aria-label=\"plugin과 presets permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>plugin과 presets</h2>\n<h3 id=\"plugin\" style=\"position:relative;\"><a href=\"#plugin\" aria-label=\"plugin permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>plugin</h3>\n<ul>\n<li>babel에서 코드의 변환은 plugin의 구성에 따라 결정됨.</li>\n<li>babel plugin은 babel 컴파일 단계에서 AST를 변형하는 역할을 함.</li>\n<li>babel은 plugin이 변형시킨 AST를 가지고 타겟 코드를 생성함</li>\n<li><a href=\"https://tech.kakao.com/2020/12/01/frontend-growth-02/\">참고</a></li>\n</ul>\n<h3 id=\"presets\" style=\"position:relative;\"><a href=\"#presets\" aria-label=\"presets permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>presets</h3>\n<ul>\n<li>preset은 plugin들의 집합임.</li>\n<li>plugin을 하나하나 추가해주는 대신, 적용할 규칙들을 그룹으로 묶은 preset으로 한번에 지정해줄 수 있음.</li>\n<li>예를 들면 ES6 문법들을 모아둔 es2015 preset과 react에서 사용하는 문법들을 모아둔 react preset이 있음.</li>\n<li>preset들을 우선적으로 추가하고, 추가적으로 사용하고 싶은 plugin들을 기재해줌</li>\n<li>\n<p>babel이 제공하는 공식 babel preset들은 아래와 같음</p>\n<ul>\n<li>@babel/preset-env</li>\n<li>@babel/preset-flow</li>\n<li>@babel/preset-react</li>\n<li>@babel/preset-typescript</li>\n</ul>\n</li>\n<li>이 중 @babel/preset-env은 타겟 환경에 필요한 구문 변환(syntax transform), 브라우저 폴리필(browser polyfill)을 제공하며, 나머지 항목들은 각각 flow, react, typescript 사용 시 babel에서 지원해주는 preset임</li>\n<li><a href=\"https://babeljs.io/docs/en/babel-preset-env\">참고</a></li>\n</ul>\n<br>\n<h2 id=\"babel과-react\" style=\"position:relative;\"><a href=\"#babel%EA%B3%BC-react\" aria-label=\"babel과 react permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Babel과 React</h2>\n<ul>\n<li>React에서 babel을 사용하면 JSX 문법을 트랜스파일링해줄 수 있음. 이때 @babel/preset-react이 필요.</li>\n<li>@babel/preset-react은 JSX 코드를 React.createElement 호출 코드로 바꿔줌</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// babel 컴파일 전</span>\n<span class=\"token keyword\">const</span> profile <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>profile.png<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>profile<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span>user<span class=\"token punctuation\">.</span>firstName<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span>lastName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// babel 컴파일 후</span>\n<span class=\"token keyword\">const</span> profile <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> src<span class=\"token operator\">:</span> <span class=\"token string\">'profile.png'</span><span class=\"token punctuation\">,</span> className<span class=\"token operator\">:</span> <span class=\"token string\">'profile'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'h1'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>user<span class=\"token punctuation\">.</span>firstName<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span>lastName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li><a href=\"https://babeljs.io/docs/babel-preset-react\">참고</a></li>\n</ul>\n<br>\n<h2 id=\"babel과-typescript\" style=\"position:relative;\"><a href=\"#babel%EA%B3%BC-typescript\" aria-label=\"babel과 typescript permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Babel과 TypeScript</h2>\n<ul>\n<li>@babel/preset-typescript preset을 설치하여 babel을 TypeScript와 함께 사용할 수 있음.</li>\n<li>하지만 babel은 타입 체크까지 해주지는 않음. 타입 체킹은 TypeScript에게 맡기기 위해 webpack 설정에서 ts-loader를 사용할 수 있음</li>\n<li>다만 ts-loader는 속도가 느리기 때문에, babel-loader를 사용하는 것을 권장하고 있음. (ts-loader는 HMR도 지원하지 않음) babel-loader 단독으로는 타입 체킹을 해주지 않기 때문에, fork-ts-checker-webpack-plugin과 같은 별도의 타입 체크 plugin을 설치해줌</li>\n<li><a href=\"https://babeljs.io/docs/#type-annotations-flow-and-typescript\">참고</a></li>\n</ul>\n<br>\n<h2 id=\"polyfill\" style=\"position:relative;\"><a href=\"#polyfill\" aria-label=\"polyfill permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>polyfill</h2>\n<ul>\n<li>Babel을 사용한다고 해서 모든 JavaScript 최신 함수를 사용할 수 있는 것은 아님.</li>\n<li>babel 문법을 변환해주는 역할만 함. polyfill은 구형 브라우저에서 지원하지 않는 객체를 지원하도록 특별한 코드를 추가함. babel은 컴파일 타임에 실행되고, babel-polyfill은 런타임에 실행됨.</li>\n</ul>\n<h3 id=\"babel-트랜스파일링-시-polyfill-동작-원리\" style=\"position:relative;\"><a href=\"#babel-%ED%8A%B8%EB%9E%9C%EC%8A%A4%ED%8C%8C%EC%9D%BC%EB%A7%81-%EC%8B%9C-polyfill-%EB%8F%99%EC%9E%91-%EC%9B%90%EB%A6%AC\" aria-label=\"babel 트랜스파일링 시 polyfill 동작 원리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Babel 트랜스파일링 시 polyfill 동작 원리</h3>\n<ol>\n<li>.babelrc, .babelrc.json, package.json, 또는 babel.config.js에 명시된 browserslist의 타겟 브라우저를 탐색함</li>\n<li>타겟 브라우저를 core-js와 매핑함</li>\n<li>특정 문법을 지원하지 않는 구형 브라우저의 경우 polyfill을 주입함</li>\n<li>@babel/polyfill은 core-js와 regenerator-runtime을 포함하여 ES6 이상의 환경을 완전히 지원할 수 있음.</li>\n<li>babel/polyfill은 Promise, WeakMap과 같은 객체들을 전역 스코프에 추가해줌. 그러나 필요하지 않은 코드까지 불러와 번들 크기가 커진다는 단점이 있음</li>\n<li>또한 전역에 import로 모듈들을 불러오기 때문에, 전역 스코프를 오염시키는 문제가 있음. 이제 바벨은 위 방식 대신 @babel/plugin-transform-runtime과 core-js@3 plugin을 사용하여 설정 파일을 작성할 것을 권장함. (webpack을 사용한다면 webpack 설정 파일에 추가해줌)</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// webpack.config.js</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"@babel/plugin-transform-runtime\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"absoluteRuntime\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"corejs\"</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// corejs 설정</span>\n        <span class=\"token string\">\"helpers\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"regenerator\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"useESModules\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>@babel/plugin-transform-runtime babel은 모든 helper 함수들을 매번 중복으로 생성하는 것을 방지하기 위해, babel 런타임을 별도의 모듈로 분리하고자 사용함.</li>\n<li>설정 시 헬퍼 함수들을 한 곳(@babel/runtime)에서 참조하여 코드의 크기를 줄일 수 있음. 또 내부적으로 regenerator-runtime과 core-js를 peerDependencies로 갖고 있어 따로 설정을 해주지 않고 필요한 polyfill을 사용할 수 있음</li>\n</ul>\n<h3 id=\"정리\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC\" aria-label=\"정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정리</h3>\n<ul>\n<li>babel은 자바스크립트의 최신 문법을 자바스크립트 ES5 표준으로 바꿔주는 역할을 함.</li>\n<li>polyfill은 자바스크립트 문법으로 인식은 하고 있지만 Promise, Set, Map처럼 구형 브라우저에서 지원하지 않는 객체들을 정의해주는 역할을 함.</li>\n</ul>\n<p><a href=\"https://ljs0705.medium.com/babel-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-a1d0e6bd021a\">참고</a></p>\n<br>\n<h2 id=\"babel에서-promise를-처리하는-방식\" style=\"position:relative;\"><a href=\"#babel%EC%97%90%EC%84%9C-promise%EB%A5%BC-%EC%B2%98%EB%A6%AC%ED%95%98%EB%8A%94-%EB%B0%A9%EC%8B%9D\" aria-label=\"babel에서 promise를 처리하는 방식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Babel에서 Promise를 처리하는 방식</h2>\n<ul>\n<li>ES6에서 등장한 Promise는 구형 브라우저들에서는 이해하지 못하는 문법임. 따라서 polyfill이 필요함</li>\n</ul>\n<p>Promise는 babel에서 아래와 같이 컴파일됨</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// &lt;ES6에서 Promise></span>\n<span class=\"token keyword\">let</span> promise <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\npromise<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// &lt;babel로 변환된 Promise></span>\n<span class=\"token comment\">// - Promise 자체는 코드의 변화는 크지 않음.</span>\n<span class=\"token keyword\">var</span> promise <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npromise\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">'catch'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// &lt;ES6의 async-await></span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">testFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> promise<span class=\"token punctuation\">;</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">async </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">testFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// &lt;babel로 변환된 async-await></span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">asyncGeneratorStep</span><span class=\"token punctuation\">(</span>gen<span class=\"token punctuation\">,</span> resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">,</span> _next<span class=\"token punctuation\">,</span> _throw<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> arg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> info <span class=\"token operator\">=</span> gen<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> value <span class=\"token operator\">=</span> info<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>_next<span class=\"token punctuation\">,</span> _throw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">_asyncToGenerator</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> self <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span>\n      args <span class=\"token operator\">=</span> arguments<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">var</span> gen <span class=\"token operator\">=</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">function</span> <span class=\"token function\">_next</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">asyncGeneratorStep</span><span class=\"token punctuation\">(</span>gen<span class=\"token punctuation\">,</span> resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">,</span> _next<span class=\"token punctuation\">,</span> _throw<span class=\"token punctuation\">,</span> <span class=\"token string\">'next'</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">function</span> <span class=\"token function\">_throw</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">asyncGeneratorStep</span><span class=\"token punctuation\">(</span>gen<span class=\"token punctuation\">,</span> resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">,</span> _next<span class=\"token punctuation\">,</span> _throw<span class=\"token punctuation\">,</span> <span class=\"token string\">'throw'</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token function\">_next</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">testFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">_testFunc</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">_testFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  _testFunc <span class=\"token operator\">=</span> <span class=\"token function\">_asyncToGenerator</span><span class=\"token punctuation\">(</span>\n    <span class=\"token comment\">/*#__PURE__*/</span> regeneratorRuntime<span class=\"token punctuation\">.</span><span class=\"token function\">mark</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">_callee</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">var</span> value<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> regeneratorRuntime<span class=\"token punctuation\">.</span><span class=\"token function\">wrap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">_callee$</span><span class=\"token punctuation\">(</span>_context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_context<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> _context<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span>\n              _context<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n              <span class=\"token keyword\">return</span> promise<span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span>\n              value <span class=\"token operator\">=</span> _context<span class=\"token punctuation\">.</span>sent<span class=\"token punctuation\">;</span>\n              <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'async '</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">case</span> <span class=\"token number\">4</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">'end'</span><span class=\"token operator\">:</span>\n              <span class=\"token keyword\">return</span> _context<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> _callee<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">_testFunc</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">testFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>async 키워드는 generator에, await 키워드는 yield에 대응됨.</li>\n<li>하나의 로직이 종료될 때마다 이터레이터 객체의 메서드인 next를 호출하여 다음 로직을 수행함.</li>\n<li>이때 반환값이 완료(done) 상태라면 값을 성공적으로 반환(resolve)하고, 그렇지 않다면 다시 Promise를 재귀적으로 호출함</li>\n<li>이때 generator도 ES5에 정의되지 않았기 때문에 babel은 regenerator 라이브러리를 사용하여 generator를 흉내낸 함수를 구현함. 여기서는 <code class=\"language-text\">_asyncToGenerator</code>가 그 역할을 하고 있음</li>\n<li>generator는 비동기적 패턴을 yield를 통해 동기적인 “모습”으로 바꾸어주고, promise는 generator로 만든 iterator를 반복해서 실행해주는 역할을 함. await keyword에 사용하는 함수가 항상 Promise를 반환해야하는 이유임</li>\n</ul>\n<p><a href=\"https://betterprogramming.pub/how-polyfill-works-in-babel-b8cfbbc8351f?gi=11ec810deeea\">참고</a></p>\n<br>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<ul>\n<li><a href=\"https://babeljs.io/docs/usage\">Babel</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#babel%EC%9D%B4%EB%9E%80\">Babel이란</a></li>\n<li>\n<p><a href=\"#babel-%ED%8A%B8%EB%9E%9C%EC%8A%A4%ED%8C%8C%EC%9D%BC%EB%A7%81-%EA%B3%BC%EC%A0%95\">Babel 트랜스파일링 과정</a></p>\n<ul>\n<li><a href=\"#ast%EB%9E%80\">AST란</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#babel-config\">Babel config</a></p>\n<ul>\n<li><a href=\"#babelconfigjson\">babel.config.json</a></li>\n<li><a href=\"#babelconfigjson-1\">babel.config.json</a></li>\n<li><a href=\"#babel-loader\">babel-loader</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#plugin%EA%B3%BC-presets\">plugin과 presets</a></p>\n<ul>\n<li><a href=\"#plugin\">plugin</a></li>\n<li><a href=\"#presets\">presets</a></li>\n</ul>\n</li>\n<li><a href=\"#babel%EA%B3%BC-react\">Babel과 React</a></li>\n<li><a href=\"#babel%EA%B3%BC-typescript\">Babel과 TypeScript</a></li>\n<li>\n<p><a href=\"#polyfill\">polyfill</a></p>\n<ul>\n<li><a href=\"#babel-%ED%8A%B8%EB%9E%9C%EC%8A%A4%ED%8C%8C%EC%9D%BC%EB%A7%81-%EC%8B%9C-polyfill-%EB%8F%99%EC%9E%91-%EC%9B%90%EB%A6%AC\">Babel 트랜스파일링 시 polyfill 동작 원리</a></li>\n<li><a href=\"#%EC%A0%95%EB%A6%AC\">정리</a></li>\n</ul>\n</li>\n<li><a href=\"#babel%EC%97%90%EC%84%9C-promise%EB%A5%BC-%EC%B2%98%EB%A6%AC%ED%95%98%EB%8A%94-%EB%B0%A9%EC%8B%9D\">Babel에서 Promise를 처리하는 방식</a></li>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>\n</div>","frontmatter":{"date":"December 29, 2023","title":"Babel에 대해","categories":"Study","author":"Kay","emoji":"👋"},"fields":{"slug":"/babel-info/"}},"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/write-log-231223/","nextSlug":"/oop-fact-and-misunderstand-etc/","prevSlug":"/babel-info/"}},"staticQueryHashes":["1073350324","2938748437"]}