{"componentChunkName":"component---src-templates-blog-template-js","path":"/study-js-es6-module-1/","result":{"data":{"cur":{"id":"4566f5b9-4944-552b-a8a7-238dc6f6e24c","html":"<br>\n<h1 align=\"center\">\n  👋  Module - 접근 및 바탕, 코드 형태, html 파일 작성 방법\n</h1>\n<br>\n<h2 id=\"1-접근-및-바탕\" style=\"position:relative;\"><a href=\"#1-%EC%A0%91%EA%B7%BC-%EB%B0%8F-%EB%B0%94%ED%83%95\" aria-label=\"1 접근 및 바탕 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 접근 및 바탕</h2>\n<ul>\n<li>일반 적으로 하나의 <code class=\"language-text\">js</code> 파일에 다수의 함수, 오브젝트를 작성함</li>\n<li>\n<p>한편, 하나의 파일에 작성하면 사용하지 않는 것도 <code class=\"language-text\">Compile</code>해야 하며 메모리를 차지하므로 비효율적</p>\n<ul>\n<li>ex) 회원 가입(클릭 할 때만 필요한 것)</li>\n</ul>\n</li>\n<li><code class=\"language-text\">Module</code> 은 파일을 분리하여 필요한 시점에 필요한 것을 가볍게 사용하려는 목적으로 사용</li>\n<li>\n<p><code class=\"language-text\">Moduel</code> 을 파일이라고 할 수는 없지만 구조 측면에서보면 하나의 파일이 <code class=\"language-text\">Module</code> 임</p>\n<ul>\n<li>파일 확장자로 <code class=\"language-text\">mjs</code> 도 있음</li>\n<li>ex) <a href=\"https://v8.dev/features/modules#mjs\">JavaScript modules</a></li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">Module</code> 파일 기본</p>\n<ul>\n<li>함수, 오브젝트를 분리하는 것이 바탕이므로 <code class=\"language-text\">Module</code> 파일은 되도록 <code class=\"language-text\">작아야</code> 함</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"2-module-코드-형태\" style=\"position:relative;\"><a href=\"#2-module-%EC%BD%94%EB%93%9C-%ED%98%95%ED%83%9C\" aria-label=\"2 module 코드 형태 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Module 코드 형태</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">Moduel</code> 코드 형태</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// export.mjs</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getPoint</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> id <span class=\"token operator\">+</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// import.mjs</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> getPoint <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./export.mjs'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getPoint</span><span class=\"token punctuation\">(</span><span class=\"token string\">'code'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// code100</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">export</code> 키워드</p>\n<ul>\n<li>외부로 보내 줄 함수, 오브젝트를 선언함</li>\n<li><code class=\"language-text\">&lt;script></code> 에 <code class=\"language-text\">mjs</code> 파일을 작성하여 랜더링 하지 않음</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">import</code> 키워드</p>\n<ul>\n<li><code class=\"language-text\">export</code> 로 선언된 <code class=\"language-text\">mjs</code> 파일을 가져와서</li>\n<li>오브젝트, 함수를 사용 함</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"3-html-파일-작성법\" style=\"position:relative;\"><a href=\"#3-html-%ED%8C%8C%EC%9D%BC-%EC%9E%91%EC%84%B1%EB%B2%95\" aria-label=\"3 html 파일 작성법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. html 파일 작성법</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">html</code> 파일에 <code class=\"language-text\">module</code> 파일을 작성하는 방법</p>\n<ul>\n<li><code class=\"language-text\">&lt;script type=module src=\"./import.mjs\"></code></li>\n<li>상대 경로, 절대 경로로 작성함</li>\n<li>상대 경로는 <code class=\"language-text\">/, ./, ../</code>로 시작해야 함</li>\n<li><code class=\"language-text\">\"import.mjs\"</code> 처럼 경로 없이 작성 불가, 추후 가능할 것으로 생각함</li>\n<li><code class=\"language-text\">defer</code> 가 디폴트이므로 <code class=\"language-text\">defer</code> 를 작성하지 않음</li>\n</ul>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1-%EC%A0%91%EA%B7%BC-%EB%B0%8F-%EB%B0%94%ED%83%95\">1. 접근 및 바탕</a></li>\n<li><a href=\"#2-module-%EC%BD%94%EB%93%9C-%ED%98%95%ED%83%9C\">2. Module 코드 형태</a></li>\n<li><a href=\"#3-html-%ED%8C%8C%EC%9D%BC-%EC%9E%91%EC%84%B1%EB%B2%95\">3. html 파일 작성법</a></li>\n</ul>\n</div>","excerpt":"1. 접근 및 바탕 일반 적으로 하나의  파일에 다수의 함수, 오브젝트를 작성함 한편, 하나의 파일에 작성하면 사용하지 않는 것도 해야 하며 메모리를 차지하므로 비효율적 ex) 회원 가입(클릭 할 때만 필요한 것)  은 파일을 분리하여 필요한 시점에 필요한 것을 가볍게 사용하려는 목적으로 사용  을 파일이라고 할 수는 없지만 구조 측면에서보면 하나의 파일이  임 파일 확장자로  도 있음 ex) JavaScript modules  파일 기본 함수, 오브젝트를 분리하는 것이 바탕이므로  파일은 되도록  함 2. Module 코드 형태  코드 형태  키워드 외부로 보내 줄 함수, 오브젝트를 선언함  에  파일을 작성하여 랜더링 하지 않음  키워드  로 선언된  파일을 가져와서 오브젝트, 함수를 사용 함 3. html 파일 작성법  파일에  파일을 작성하는 방법  상대 경로, 절대 경로로 작성함 상대 경로는 로 시작해야 함  처럼 경로 없이 작성 불가, 추후 가능할 것으로 생각함  가 디…","frontmatter":{"date":"December 12, 2021","title":"Module - 접근 및 바탕, 코드 형태, html 파일 작성 방법","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-module-1/"}},"next":{"id":"91d21ee4-cd28-550e-9451-cbef0ab783f4","html":"<br>\n<h1 align=\"center\">\n  👋 construct(), apply()\n</h1>\n<br>\n<h2 id=\"1-constructo\" style=\"position:relative;\"><a href=\"#1-constructo\" aria-label=\"1 constructo permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. constructo()</h2>\n<ul>\n<li>인스턴스를 생성하여 반환함</li>\n<li>\n<p><code class=\"language-text\">Reflect.construct(target, params)</code> 형태</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">one<span class=\"token punctuation\">,</span> two</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>point <span class=\"token operator\">=</span> one <span class=\"token operator\">+</span> two<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">construct</span><span class=\"token punctuation\">(</span>Point<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 300</span>\n\n<span class=\"token comment\">// 1. Reflect.construct(Point, [100, 200], Point 클래스의 constructor()를 호출 함, [100]처럼 값이 하나라도 배열로 작성함</span>\n<span class=\"token comment\">// 2. constructor(one, two){...} 100이 one에 200이 two에 설정됨</span>\n<span class=\"token comment\">// 3. Point 인스턴스를 생성하여 반환함</span></code></pre></div>\n</li>\n<li>\n<p>세 번째 파라미터는 선택임</p>\n<ul>\n<li>생성자 함수를 작성함</li>\n<li>작성한 함수로 인스턴스를 생성함</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">point</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>point <span class=\"token operator\">=</span> point<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getPoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>point<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">getTitle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'JS: '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>point<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">construct</span><span class=\"token punctuation\">(</span>Point<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> Book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>getPoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">getTitle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// JS: 100</span>\n\n<span class=\"token comment\">// 1. Reflect.construct(Point, [100], Book); 3번째 파라미터에 Book 클래스를 작성함, Point 클래스의 constructor가 호출됨</span>\n<span class=\"token comment\">// 2. constructor(point){ this.point = point; } Point가 아니라 Book으로 인스턴스를 생성함, this가 Book 클래스를 참조함</span>\n<span class=\"token comment\">// 3. this.point = point; point가 인스턴스 프로퍼티로 설정됨</span>\n<span class=\"token comment\">// 4. 외부 API 사용처럼 변경할 수 없는 환경에서 클래스의 프로퍼티를 인스턴스 프로퍼티로 사용하면서 클래스의 prototype을 오버라이드하는 형태로 사용할 수 있음</span>\n<span class=\"token comment\">// 5. obj.getPoint, obj 인스턴스에 getPoint()가 없으므로 undefined 출력</span>\n<span class=\"token comment\">// 6. obj.getTitle() Bookd의 getTitle()이 호출됨</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">핸들러의 constrcut()</code> 트랩 호출</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>point</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>point <span class=\"token operator\">=</span> point<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">getPoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>point<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> handler <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">construct</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">,</span> proxy</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">construct</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> proxy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>Point<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">construct</span><span class=\"token punctuation\">(</span>proxy<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">getPoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1, 2]</span>\n\n<span class=\"token comment\">// 1. const obj = Reflect.construct(proxy, [1, 2]); construct() 트랩이 호출됨</span>\n<span class=\"token comment\">// 2. 트랩: construct(target, params, proxy) {...} Point 클래스가 target에 [1, 2]가 params에 설정됨, proxy에 Proxy 인스턴스가 설정됨</span></code></pre></div>\n</li>\n</ul>\n<br>\n<h2 id=\"2-apply\" style=\"position:relative;\"><a href=\"#2-apply\" aria-label=\"2 apply permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. apply()</h2>\n<ul>\n<li><code class=\"language-text\">target</code> 에 작성한 함수를 호출함</li>\n<li>\n<p><code class=\"language-text\">Relfect.apply(target, {}, key)</code> 형태</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>values</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> values<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> value <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>plus<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">Reflect</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> plus<span class=\"token operator\">:</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [101, 102]</span>\n\n<span class=\"token comment\">// 1. Reflect.apply(add, {plus: 100}, [1,2]) add() 함수를 호출함</span>\n<span class=\"token comment\">// 2. function add(...values){...} [1,2]가 values 파라미터에 설정됨</span>\n<span class=\"token comment\">// 3. map()에서 this가 {plus: 100}을 참조함, 코드처럼 화살표 함수를 사용해야 함, map(function(value){...}) 형태는 this가 window를 참조함</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">call(), apply()</code> 통합</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> indexOf <span class=\"token operator\">=</span> String<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>indexOf<span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ABC'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">Reflect</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>indexOf<span class=\"token punctuation\">,</span> <span class=\"token string\">'ABC'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'B'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n\n<span class=\"token comment\">// 1. const indexOf = String.prototype.indexOf; String.prototype.indexOf() 메소드 임</span>\n<span class=\"token comment\">// 2. call()로 호출 indexOf.call(\"ABC\", \"B\");</span>\n<span class=\"token comment\">// 3. Reflect.apply()로 호출, Reflect.apply(indexOf, \"ABC\", [\"B\"]) call()과 apply()를 통합하여 Reflect.apply()로 호출함</span></code></pre></div>\n</li>\n<li>\n<p>핸들러의 <code class=\"language-text\">apply()</code> 트랩 호출</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>values</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> values<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> value <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>plus<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> handler <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> that<span class=\"token punctuation\">,</span> params</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">Reflect</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> that<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">obj</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> plus<span class=\"token operator\">:</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [101, 102]</span>\n\n<span class=\"token comment\">// 1. const obj = new Proxy(add, handler); add가 apply() 트랩에서 호출할 함수임</span>\n<span class=\"token comment\">// 2. obj.apply({plus: 100}, [1, 2]) apply() 트랩이 호출 됨</span>\n<span class=\"token comment\">// 3. 트랩: apply(target, that, params) {...}, add() 함수가 target에 설정됨 {plus:100}이 that에 설정되고 [1,2]가 params에 설정됨</span></code></pre></div>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1-constructo\">1. constructo()</a></li>\n<li><a href=\"#2-apply\">2. apply()</a></li>\n</ul>\n</div>","frontmatter":{"date":"December 11, 2021","title":"Reflect - construct(), apply()","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-reflect-7/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":"zoomkoding/zoomkoding-gatsby-blog"}}}}},"pageContext":{"slug":"/study-js-es6-module-1/","nextSlug":"/study-js-es6-reflect-7/","prevSlug":""}},"staticQueryHashes":["1073350324","2938748437"]}