{"componentChunkName":"component---src-templates-blog-template-js","path":"/study-js-es6-promise-2/","result":{"data":{"cur":{"id":"76ca7d65-d6cc-5912-b2dc-8c8f02719519","html":"<br>\n<h1 align=\"center\">\n  👋  Promise 인스턴스 생성\n</h1>\n<br>\n<h2 id=\"1-new-promise\" style=\"position:relative;\"><a href=\"#1-new-promise\" aria-label=\"1 new promise permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. new Promise()</h2>\n<ul>\n<li><code class=\"language-text\">Promise</code> 인스턴스를 생성하여 반환함</li>\n<li>\n<p>파라미터 실행자<code class=\"language-text\">(excuter)</code> 함수를 작성함</p>\n<ul>\n<li>성공, 실패 처리 함수 이름</li>\n<li>실행자 코드</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'성공'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'실팽'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">reason</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reason<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'끝'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1. const obj = new Promise((resolve, reject) => {...} Promise 인스턴스를 생성하여 obj에 할당함</span>\n<span class=\"token comment\">// 2. resolve와 reject 이름의 Function 오브젝트를 생성하여 인스턴스에 설정함</span>\n<span class=\"token comment\">// 3. resolve(\"성공\"); reject(\"실팽\"); 실행자 처리를 성공하면 resolve()가 호출되고 실패하면 reject()가 호출됨</span>\n<span class=\"token comment\">// 4. 지금 호출하지 않고 코드 끝까지 실행한 후 호출함</span>\n<span class=\"token comment\">// 5. 이것이 Promise의 비동기 처리(실행) 임</span>\n<span class=\"token comment\">// 6. obj.then((value) => {.1.}, (reason) => {.2.}): then()을 실행하지 않음 아래로 내려 감</span>\n<span class=\"token comment\">// 7. console.log(\"끝\")을 실행함 여기서 전체 흐름이 끝나지만 실행자의 resolve()와 reject() 실행이 남았음</span>\n<span class=\"token comment\">// 8. 실행자에서 resolve(\"성공\") 또는 reject(\"실패\")를 호출함 상태가 하나만 발생하므로 상태에 해당하는 함수만 호출함 여기서는 resolve(\"성공\")을 호출함</span>\n<span class=\"token comment\">// 9. then()을 호출함 then() 단위로 파라미터의 함수를 실행하게 됨</span>\n<span class=\"token comment\">// 10. then((value) => {console.log(value)}, 실행자에서 resolve(\"성공\")에서 \"성공\"이 value에 설정됨</span>\n<span class=\"token comment\">// 11. 엔진에서는 상태(fulfilled, rejected)에 따라 파라미터의 핸들러 함수를 실행함</span>\n<span class=\"token comment\">// 12. then((reason) => { console.log(reason)}; 실행자에서 reject(\"실패\")를 호출하면 then()의 두 번째 파라미터 함수가 실행되며 reject(\"실패\")에서 \"실패\"가 reason에 설정됨</span>\n\n<span class=\"token comment\">// [ 실행결과 ]</span>\n<span class=\"token comment\">// 끝</span>\n<span class=\"token comment\">// 성공</span></code></pre></div>\n</li>\n<li>\n<p>스펙 : <code class=\"language-text\">deferred action</code></p>\n<ul>\n<li>MDN: Promise chain</li>\n<li><code class=\"language-text\">obj.then((value) ⇒ {console.log(value)}, (reson) ⇒ {console.log(reson)};</code></li>\n</ul>\n</li>\n<li>\n<p>Promise 오브젝트 형태</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> promise <span class=\"token operator\">=</span> <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*\n\t1. Promise 오브젝트 형태를 살펴봄\n\n\t2. promise를 펼치면 프로퍼티와 함수가 있음\n\n\t3. prototype에 constructor가 있으며 메소드가 있음\n\t\t- JS의 일반적인 형태\n*/</span>\n\ncosnt ojb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"실패\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"실행자\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n\t1. resolve와 reject 이름의 Function 오브젝트를 생성함\n\t\t- Function 오브젝트이므로 호출할 수 있음\n\n\t*** 코드가 끝까지 처리한 후 실행함 ***\n\tresolve([1,2,3])을 호출하며 then()이 호출됨\n\t\t- [[PromiseStatus]]: \"resolved\" 이므로 then()의 첫 번째 파라미터 함수르 실행하게 됨\n*/</span>\n\n<span class=\"token comment\">/*\n\t2. obj.__proto__를 펼치면 Promise.prototype에 연결된 메소드가 표시됨\n\n\t3. [[PromiseStatus]]: \"resolved\" Promise 상태를 나타내며 \"fulfilled\" 상태를 뜻함\n\n\t4. [[PromiseValue]]: Array(3) resolve([1,2,3])의 파라미터에 작성한 값\n*/</span>\n\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// resolve([1,2,3])의 [1,2,3]이 value에 설정됨</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token parameter\">reason</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reason<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// then()의 파라미터에 성공, 실패 핸들러 함수를 작성함</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"끝\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1-new-promise\">1. new Promise()</a></li>\n</ul>\n</div>","excerpt":"1. new Promise()  인스턴스를 생성하여 반환함 파라미터 실행자 함수를 작성함 성공, 실패 처리 함수 이름 실행자 코드 스펙 :  MDN: Promise chain  Promise 오브젝트 형태 1. new Promise()","frontmatter":{"date":"December 16, 2021","title":"Promise - 인스턴스 생성","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-promise-2/"}},"next":{"id":"3a31df44-f0fe-588b-b9f7-e4c47c7917e9","html":"<br>\n<h1 align=\"center\">\n  👋  HTTP 메서드\n</h1>\n<br>\n<h2 id=\"1http-api를-만들어보자\" style=\"position:relative;\"><a href=\"#1http-api%EB%A5%BC-%EB%A7%8C%EB%93%A4%EC%96%B4%EB%B3%B4%EC%9E%90\" aria-label=\"1http api를 만들어보자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.HTTP API를 만들어보자</h2>\n<ol>\n<li>HTTP API를 만들어보자</li>\n<li>HTTP 메서드 - GET, POST</li>\n<li>HTTP 메서드 - PUT, PATCH, DELETE</li>\n<li>HTTP 메서드의 속성</li>\n</ol>\n<br>\n<h2 id=\"2요구사항-ex-회원-정보-관리-api를-만들어라\" style=\"position:relative;\"><a href=\"#2%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD-ex-%ED%9A%8C%EC%9B%90-%EC%A0%95%EB%B3%B4-%EA%B4%80%EB%A6%AC-api%EB%A5%BC-%EB%A7%8C%EB%93%A4%EC%96%B4%EB%9D%BC\" aria-label=\"2요구사항 ex 회원 정보 관리 api를 만들어라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.요구사항 ex) 회원 정보 관리 API를 만들어라</h2>\n<ol>\n<li>회원 목록 조회</li>\n<li>회원 조회</li>\n<li>회원 등록</li>\n<li>회원 수정</li>\n<li>회원 삭제</li>\n</ol>\n<br>\n<h2 id=\"3api-url-설정--초보-개발자\" style=\"position:relative;\"><a href=\"#3api-url-%EC%84%A4%EC%A0%95--%EC%B4%88%EB%B3%B4-%EA%B0%9C%EB%B0%9C%EC%9E%90\" aria-label=\"3api url 설정  초보 개발자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.API URL 설정 : 초보 개발자</h2>\n<ol>\n<li>회원 목록 조회 : <code class=\"language-text\">/read-member-list</code></li>\n<li>회원 조회 : <code class=\"language-text\">/read-member-by-id</code></li>\n<li>회원 등록 : <code class=\"language-text\">/create-memger</code></li>\n<li>회원 수정 : <code class=\"language-text\">/update-member</code></li>\n<li>회원 삭제 : <code class=\"language-text\">/delete-member</code></li>\n</ol>\n<p><strong>—> 이것은 좋은 URI 설계일까?</strong></p>\n<p><strong>—> 가장 중요한 것은 리소스 식별</strong></p>\n<br>\n<h2 id=\"4api-uri-고민\" style=\"position:relative;\"><a href=\"#4api-uri-%EA%B3%A0%EB%AF%BC\" aria-label=\"4api uri 고민 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.API URI 고민</h2>\n<ol>\n<li>\n<p>리소스의 의미는 뭘까?</p>\n<ul>\n<li>회원을 등록하고 수정하고 조회하는게 리소스가 아니다!\nex) 미네랄을 캐라 —> 미네랄이 리소스</li>\n<li><strong>회원</strong>이라는 개념 자체가 바로 리소스이다.</li>\n</ul>\n</li>\n<li>\n<p>리소스를 어떻게 식별하는게 좋을까?</p>\n<ul>\n<li>회원을 등록하고 수정하고 조회하는 것을 모두 배제</li>\n<li>회원이라는 리소스만 식별하면 된다. —> 회원 리소스를 URI에 매핑</li>\n</ul>\n</li>\n</ol>\n<br>\n<h2 id=\"5api-url-설정--위-상황-고려\" style=\"position:relative;\"><a href=\"#5api-url-%EC%84%A4%EC%A0%95--%EC%9C%84-%EC%83%81%ED%99%A9-%EA%B3%A0%EB%A0%A4\" aria-label=\"5api url 설정  위 상황 고려 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.API URL 설정 : 위 상황 고려</h2>\n<ol>\n<li><code class=\"language-text\">회원</code> 목록 조회 : <code class=\"language-text\">/members</code></li>\n<li><code class=\"language-text\">회원</code> 조회 <code class=\"language-text\">/members/{id}</code> <strong>—> 어떻게 구분하지?</strong></li>\n<li><code class=\"language-text\">회원</code> 등록 : <code class=\"language-text\">/members/{id}</code> <strong>—> 어떻게 구분하지?</strong></li>\n<li><code class=\"language-text\">회원</code> 수정 : <code class=\"language-text\">/members/{id}</code> <strong>—> 어떻게 구분하지?</strong></li>\n<li><code class=\"language-text\">회원</code> 삭제 : <code class=\"language-text\">/members/{id}</code> <strong>—> 어떻게 구분하지?</strong></li>\n</ol>\n<br>\n<p>참고 : 계층 구조상 상위를 컬렉션으로 보고 복수단어 사용 권장 ( memeber —> members )</p>\n<br>\n<h2 id=\"6리소스와-행위를-분리--가장-중요한-것은-리소스를-식별하는-것\" style=\"position:relative;\"><a href=\"#6%EB%A6%AC%EC%86%8C%EC%8A%A4%EC%99%80-%ED%96%89%EC%9C%84%EB%A5%BC-%EB%B6%84%EB%A6%AC--%EA%B0%80%EC%9E%A5-%EC%A4%91%EC%9A%94%ED%95%9C-%EA%B2%83%EC%9D%80-%EB%A6%AC%EC%86%8C%EC%8A%A4%EB%A5%BC-%EC%8B%9D%EB%B3%84%ED%95%98%EB%8A%94-%EA%B2%83\" aria-label=\"6리소스와 행위를 분리  가장 중요한 것은 리소스를 식별하는 것 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6.리소스와 행위를 분리 : 가장 중요한 것은 리소스를 식별하는 것</h2>\n<ol>\n<li>URI는 리소스만 식별</li>\n<li>\n<p><strong>리소스와</strong> 해당 리소스를 대상으로 하는 <strong>행위를</strong> 분리</p>\n<ul>\n<li><strong>리소스</strong> : 회원</li>\n<li><strong>행위</strong> : 조회, 등록, 삭제, 변경</li>\n</ul>\n</li>\n<li>리소는 명사, 행위는 동사</li>\n<li>행위는 어떻게 구분??? —> HTTP 메서드 : GET, POST로</li>\n</ol>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1http-api%EB%A5%BC-%EB%A7%8C%EB%93%A4%EC%96%B4%EB%B3%B4%EC%9E%90\">1.HTTP API를 만들어보자</a></li>\n<li><a href=\"#2%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD-ex-%ED%9A%8C%EC%9B%90-%EC%A0%95%EB%B3%B4-%EA%B4%80%EB%A6%AC-api%EB%A5%BC-%EB%A7%8C%EB%93%A4%EC%96%B4%EB%9D%BC\">2.요구사항 ex) 회원 정보 관리 API를 만들어라</a></li>\n<li><a href=\"#3api-url-%EC%84%A4%EC%A0%95--%EC%B4%88%EB%B3%B4-%EA%B0%9C%EB%B0%9C%EC%9E%90\">3.API URL 설정 : 초보 개발자</a></li>\n<li><a href=\"#4api-uri-%EA%B3%A0%EB%AF%BC\">4.API URI 고민</a></li>\n<li><a href=\"#5api-url-%EC%84%A4%EC%A0%95--%EC%9C%84-%EC%83%81%ED%99%A9-%EA%B3%A0%EB%A0%A4\">5.API URL 설정 : 위 상황 고려</a></li>\n<li><a href=\"#6%EB%A6%AC%EC%86%8C%EC%8A%A4%EC%99%80-%ED%96%89%EC%9C%84%EB%A5%BC-%EB%B6%84%EB%A6%AC--%EA%B0%80%EC%9E%A5-%EC%A4%91%EC%9A%94%ED%95%9C-%EA%B2%83%EC%9D%80-%EB%A6%AC%EC%86%8C%EC%8A%A4%EB%A5%BC-%EC%8B%9D%EB%B3%84%ED%95%98%EB%8A%94-%EA%B2%83\">6.리소스와 행위를 분리 : 가장 중요한 것은 리소스를 식별하는 것</a></li>\n</ul>\n</div>","frontmatter":{"date":"December 16, 2021","title":"HTTP - 4.HTTP 메서드(1)","categories":"CS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-cs-HTTP-6/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":"zoomkoding/zoomkoding-gatsby-blog"}}}}},"pageContext":{"slug":"/study-js-es6-promise-2/","nextSlug":"/study-cs-HTTP-6/","prevSlug":""}},"staticQueryHashes":["1073350324","2938748437"]}