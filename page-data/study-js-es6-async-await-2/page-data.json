{"componentChunkName":"component---src-templates-blog-template-js","path":"/study-js-es6-async-await-2/","result":{"data":{"cur":{"id":"18b5fc12-d7e8-5b47-b057-a4ff25d08ccb","html":"<br>\n<h1 align=\"center\">\n  👋  async/await - 반환, 형태, for-await-of\n</h1>\n<br>\n<h2 id=\"1-await\" style=\"position:relative;\"><a href=\"#1-await\" aria-label=\"1 await permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. await</h2>\n<ul>\n<li>\n<p>Syntax</p>\n<ul>\n<li><code class=\"language-text\">[value] = awiat</code> 표현식</li>\n<li><code class=\"language-text\">async</code> 함수 안에 작성함</li>\n<li><code class=\"language-text\">[value]</code> 는 선택임</li>\n</ul>\n</li>\n<li>\n<p>표현식이 <code class=\"language-text\">Promise</code> 오브젝트 이면 <code class=\"language-text\">resolve()</code>의 파라미터 값을 반환함</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">crate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">param</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getPoint</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">option</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span>option<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">getPoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> point<span class=\"token operator\">:</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1. const value = await create(option); 에서 create() 함수를 호출함</span>\n<span class=\"token comment\">// 2. 호출된 함수에서 Promise 인스턴스를 반환함 따라서 아래 코드로 이동하게 되는데 await로 인해 resolve(param)이 실행되어 param 값을 보낼 때 까지 기다림</span>\n<span class=\"token comment\">// 3. resolve(param)을 실행함 보낸 값을 받아 value 변수에 할당함</span>\n<span class=\"token comment\">// 4. conosle.log(value)를 실행함</span>\n\n<span class=\"token comment\">// 실행결과</span>\n<span class=\"token comment\">// {point:100}</span></code></pre></div>\n</li>\n<li>\n<p>표현식이 <code class=\"language-text\">Promise</code> 오브젝트가 아니면 표현식의 평가 결과를 반환함</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getPoint</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">option</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> option<span class=\"token punctuation\">.</span>point<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">getPoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> point<span class=\"token operator\">:</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1. const value = await option.point + 200; option은 파라미터 값으로 {point: 100}임 await 표현식이 Promise 오브젝트가 아님</span>\n<span class=\"token comment\">// 2. 이때에는 표현식의 평가 결과를 반환함</span>\n<span class=\"token comment\">// 3. await가 비동기 환경에서 동기 처리를 위한 것이므로 표현식이 비동기 처리가 아니면 의미가 약함</span>\n\n<span class=\"token comment\">// 실행결과</span>\n<span class=\"token comment\">// 300</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">Promise</code> 에서 <code class=\"language-text\">reject()</code> 가 발생했을 때 에러에 대처하는 형태임</p>\n<ul>\n<li><code class=\"language-text\">try-catch</code> 를 사용한 형태</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">param</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getPoint</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">option</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span>option<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">getPoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> point<span class=\"token operator\">:</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1. reject(param); Promise에서 reject()가 실행되면</span>\n<span class=\"token comment\">// 2. catch(error) 블록에서 받음 reject(param)의 param이 catch(error)의 error에 설정됨</span>\n<span class=\"token comment\">// 3. try-catch로 에러 발생에 대응할 수 있음</span>\n\n<span class=\"token comment\">// 실행결과</span>\n<span class=\"token comment\">// {point:100}</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">catch()</code> 를 사용한 형태</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">param</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getPoint</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">option</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">await</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span>option<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token number\">300</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">param</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">getPoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> point<span class=\"token operator\">:</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1. reject(param); reject() 처리이므로 catch()가 실행됨</span>\n<span class=\"token comment\">// 2. catch((value) => {...} reject(param)의 param 값이 value에 설정됨</span>\n<span class=\"token comment\">// 3. return 300; 300이 반환되지 않고 Promise 인스턴스를 반환하므로 아래의 then()이 호출됨</span>\n<span class=\"token comment\">// 4. then((param) => {...} catch()에서 return 300은 정상 처리이므로 첫 번째 파라미터 함수가 실행되며 param에 300이 설정됨</span>\n\n<span class=\"token comment\">// 실행결과</span>\n<span class=\"token comment\">// 300</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">Promise</code> 가 아닌 값을 반환하는 형태</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">param</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getPoint</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">option</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span>option<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">300</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 1. 앞은 catch().then() 형태이지만 여기는 catch()가 끝임</span>\n<span class=\"token comment\">// 2. return 300; catch()에 then()이 연결되어 있으면 Promise 인스턴스를 반환하지만 then() 연결이 없으면 300을 반환함</span>\n<span class=\"token comment\">// 3. console.log(value) 300을 반환하므로 300이 출력됨</span>\n\n<span class=\"token comment\">// 실행결과</span>\n<span class=\"token comment\">// 300</span></code></pre></div>\n</li>\n</ul>\n<br>\n<h2 id=\"2-for-await-of\" style=\"position:relative;\"><a href=\"#2-for-await-of\" aria-label=\"2 for await of permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. for-await-of</h2>\n<ul>\n<li>\n<p>Syntax</p>\n<ul>\n<li><code class=\"language-text\">for await (variable of iterable) {...}</code></li>\n<li><code class=\"language-text\">async</code> 함수에서 사용할 수 있음</li>\n</ul>\n</li>\n<li>\n<p>동기 반복에서 사용할 수 있지만</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">for</span> <span class=\"token keyword\">await</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> value <span class=\"token keyword\">of</span> list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1. for await (variable of iterable) {...} iterable에 이터러블 오브젝트를 작성함 [10,20]은 이터러블 오브젝트 임 variable에 const/let/var 변수를 작성함</span>\n<span class=\"token comment\">// 2. for await (const value of list) {...} [10,20]의 엘리먼트를 하나씩 반복하면서 값을 value에 설정하고 console.log(value)로 값을 출력함</span>\n<span class=\"token comment\">// 3. 배열에서 Promise 인스턴스를 반환하지 않으므로 이것은 비동기 반복이 아니라 동기 반복</span>\n\n<span class=\"token comment\">// 실행결과</span>\n<span class=\"token comment\">// 10</span>\n<span class=\"token comment\">// 20</span></code></pre></div>\n</li>\n<li>\n<p>일반적으로 비동기 반복에서 사용</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">point</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">yield</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">yield</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">for</span> <span class=\"token keyword\">await</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> value <span class=\"token keyword\">of</span> <span class=\"token function\">point</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1. for await (const value of point()){...} point() 제너레이터 함수를 호출하면 Proimse 인스턴스를 반환하므로 비오디로 반복하게 됨</span>\n\n<span class=\"token comment\">// 실행결과</span>\n<span class=\"token comment\">// 10</span>\n<span class=\"token comment\">// 20</span></code></pre></div>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1-await\">1. await</a></li>\n<li><a href=\"#2-for-await-of\">2. for-await-of</a></li>\n</ul>\n</div>","excerpt":"1. await Syntax  표현식  함수 안에 작성함  는 선택임 표현식이  오브젝트 이면 의 파라미터 값을 반환함 표현식이  오브젝트가 아니면 표현식의 평가 결과를 반환함  에서  가 발생했을 때 에러에 대처하는 형태임  를 사용한 형태  를 사용한 형태  가 아닌 값을 반환하는 형태 2. for-await-of Syntax   함수에서 사용할 수 있음 동기 반복에서 사용할 수 있지만 일반적으로 비동기 반복에서 사용 1. await 2. for-await-of","frontmatter":{"date":"December 23, 2021","title":"async/await - 반환, 형태, for-await-of","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-async-await-2/"}},"next":{"id":"b4ecf84f-07d3-52a4-af67-c5a6d80a8f87","html":"<br>\n<h1 align=\"center\">\n  👋  HTTP 상태코드 소개\n</h1>\n<br>\n<h2 id=\"1상태-코드--클라이언트가-보낸-요청의-처리-상태를-응답에서-알려주는-기능\" style=\"position:relative;\"><a href=\"#1%EC%83%81%ED%83%9C-%EC%BD%94%EB%93%9C--%ED%81%B4%EB%9D%BC%EC%9D%B4%EC%96%B8%ED%8A%B8%EA%B0%80-%EB%B3%B4%EB%82%B8-%EC%9A%94%EC%B2%AD%EC%9D%98-%EC%B2%98%EB%A6%AC-%EC%83%81%ED%83%9C%EB%A5%BC-%EC%9D%91%EB%8B%B5%EC%97%90%EC%84%9C-%EC%95%8C%EB%A0%A4%EC%A3%BC%EB%8A%94-%EA%B8%B0%EB%8A%A5\" aria-label=\"1상태 코드  클라이언트가 보낸 요청의 처리 상태를 응답에서 알려주는 기능 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.상태 코드 : 클라이언트가 보낸 요청의 처리 상태를 응답에서 알려주는 기능</h2>\n<ol>\n<li>1XX : 요청이 수신되어 처리 중(Informational) —> <code class=\"language-text\">거의 사용하지 않음</code></li>\n<li>2XX : 요청 정상 처리(Successful)</li>\n<li>3XX : 요청을 완료하려면 추가 행동이 필요(Redirection)</li>\n<li>4XX : 클라이언트 오류, 잘못된 문법 등으로 서버가 요청을 수행할 수 없음</li>\n<li>5XX : 서버 오류, 서버가 정상 요청을 처리하지 못함(Server Error)</li>\n</ol>\n<br>\n<h2 id=\"2만약-모르는-상태-코드가-나타나면\" style=\"position:relative;\"><a href=\"#2%EB%A7%8C%EC%95%BD-%EB%AA%A8%EB%A5%B4%EB%8A%94-%EC%83%81%ED%83%9C-%EC%BD%94%EB%93%9C%EA%B0%80-%EB%82%98%ED%83%80%EB%82%98%EB%A9%B4\" aria-label=\"2만약 모르는 상태 코드가 나타나면 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.만약 모르는 상태 코드가 나타나면?</h2>\n<ol>\n<li>클라이언트가 인식할 수 없는 상태코드를 서버가 반환하면?</li>\n<li>클라이언트는 상위 상태코드로 해석해서 처리</li>\n<li>\n<p>미래에서 새로운 상태 코드가 추가되어도 클라리언트를 변경하지 않아도 됨</p>\n<p>ex) 299 ??? —> 2XX : <code class=\"language-text\">Successful</code></p>\n<p>ex) 451 ??? —> 4XX : <code class=\"language-text\">Client Error</code></p>\n<p>ex) 599 ??? —> 5XX : <code class=\"language-text\">Server Error</code></p>\n</li>\n</ol>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1%EC%83%81%ED%83%9C-%EC%BD%94%EB%93%9C--%ED%81%B4%EB%9D%BC%EC%9D%B4%EC%96%B8%ED%8A%B8%EA%B0%80-%EB%B3%B4%EB%82%B8-%EC%9A%94%EC%B2%AD%EC%9D%98-%EC%B2%98%EB%A6%AC-%EC%83%81%ED%83%9C%EB%A5%BC-%EC%9D%91%EB%8B%B5%EC%97%90%EC%84%9C-%EC%95%8C%EB%A0%A4%EC%A3%BC%EB%8A%94-%EA%B8%B0%EB%8A%A5\">1.상태 코드 : 클라이언트가 보낸 요청의 처리 상태를 응답에서 알려주는 기능</a></li>\n<li><a href=\"#2%EB%A7%8C%EC%95%BD-%EB%AA%A8%EB%A5%B4%EB%8A%94-%EC%83%81%ED%83%9C-%EC%BD%94%EB%93%9C%EA%B0%80-%EB%82%98%ED%83%80%EB%82%98%EB%A9%B4\">2.만약 모르는 상태 코드가 나타나면?</a></li>\n</ul>\n</div>","frontmatter":{"date":"December 23, 2021","title":"HTTP - 6.상태코드","categories":"CS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-cs-HTTP-12/"}},"prev":{"id":"71a91466-91bc-5928-b1ff-cfe50979e879","html":"<br>\n<h1 align=\"center\">\n  👋  HTTP 상태코드\n</h1>\n<br>\n<h2 id=\"1-2xx--successful\" style=\"position:relative;\"><a href=\"#1-2xx--successful\" aria-label=\"1 2xx  successful permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 2XX = Successful</h2>\n<h3 id=\"1-클라이언트의-요청을-성공적으로-처리\" style=\"position:relative;\"><a href=\"#1-%ED%81%B4%EB%9D%BC%EC%9D%B4%EC%96%B8%ED%8A%B8%EC%9D%98-%EC%9A%94%EC%B2%AD%EC%9D%84-%EC%84%B1%EA%B3%B5%EC%A0%81%EC%9C%BC%EB%A1%9C-%EC%B2%98%EB%A6%AC\" aria-label=\"1 클라이언트의 요청을 성공적으로 처리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1) 클라이언트의 요청을 성공적으로 처리</h3>\n<ol>\n<li>200 OK</li>\n<li>\n<p>201 Created</p>\n<ul>\n<li>요청 성공해서 새로운 리소스가 생성됨</li>\n<li>Location이 Header에 있을 수 있음</li>\n</ul>\n</li>\n<li>\n<p>202 Accepted —> <code class=\"language-text\">잘 사용하지 않음</code></p>\n<ul>\n<li>요청이 접수되었으나 처리가 완료되지 않았음</li>\n<li>배치 처리 같은 곳에서 사용 ex) 요청 접수 후 1시간 뒤에 배치 프로세스가 요청을 처리함</li>\n</ul>\n</li>\n<li>\n<p>204 No Content</p>\n<ul>\n<li>서버가 요청을 성공적으로 수행했지만, 응답 페이로드 본문에 보낼 데이터가 없음\nex) 웹 문서 편집기에서 <code class=\"language-text\">Save</code> 버튼\n—> <code class=\"language-text\">Save</code> 버튼의 결과로 아무 내용이 없어도 된다.\n—> <code class=\"language-text\">Save</code> 버튼을 눌러도 같은 화면을 유지해야 한다.\n—> 결과 내용이 없어도 204 메시지(2XX)만으로 성공을 인식할 수 있다.</li>\n</ul>\n</li>\n</ol>\n<br>\n<h2 id=\"2-3xx---리다이렉션\" style=\"position:relative;\"><a href=\"#2-3xx---%EB%A6%AC%EB%8B%A4%EC%9D%B4%EB%A0%89%EC%85%98\" aria-label=\"2 3xx   리다이렉션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 3XX - 리다이렉션</h2>\n<h3 id=\"1-요청을-완료하기-위해-유저-에이전트의-추가-조치-필요\" style=\"position:relative;\"><a href=\"#1-%EC%9A%94%EC%B2%AD%EC%9D%84-%EC%99%84%EB%A3%8C%ED%95%98%EA%B8%B0-%EC%9C%84%ED%95%B4-%EC%9C%A0%EC%A0%80-%EC%97%90%EC%9D%B4%EC%A0%84%ED%8A%B8%EC%9D%98-%EC%B6%94%EA%B0%80-%EC%A1%B0%EC%B9%98-%ED%95%84%EC%9A%94\" aria-label=\"1 요청을 완료하기 위해 유저 에이전트의 추가 조치 필요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1) 요청을 완료하기 위해 유저 에이전트의 추가 조치 필요</h3>\n<ol>\n<li>300 Multiple Choices</li>\n<li>301 Moved Permanently</li>\n<li>302 Found</li>\n<li>303 See Other</li>\n<li>304 Not Modified</li>\n<li>307 Temporary Refirect</li>\n<li>308 Permanent Redirect</li>\n</ol>\n<br>\n<h3 id=\"2-리다이렉션-이해\" style=\"position:relative;\"><a href=\"#2-%EB%A6%AC%EB%8B%A4%EC%9D%B4%EB%A0%89%EC%85%98-%EC%9D%B4%ED%95%B4\" aria-label=\"2 리다이렉션 이해 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2) 리다이렉션 이해</h3>\n<ul>\n<li>웹 브라우저는 3XX 응답의 결과에 Location 헤더가 있으면, Location 위치로 자동 이동</li>\n</ul>\n<br>\n<h3 id=\"3-리다이렉션-종류\" style=\"position:relative;\"><a href=\"#3-%EB%A6%AC%EB%8B%A4%EC%9D%B4%EB%A0%89%EC%85%98-%EC%A2%85%EB%A5%98\" aria-label=\"3 리다이렉션 종류 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3) 리다이렉션 종류</h3>\n<ol>\n<li>\n<p>영구 리다이렉션 : 특정 리소스의 URI가 영구적으로 이동</p>\n<p>ex) <code class=\"language-text\">/members —> /users</code></p>\n<p>ex) <code class=\"language-text\">/event —> /new-event</code></p>\n</li>\n<li>\n<p>일시 리다이렉션 : 일시적인 변경</p>\n<ul>\n<li>주문 완료 후 주문 내역 화면으로 이동</li>\n<li>PRG : Post / Redirect / Get</li>\n</ul>\n</li>\n<li>\n<p>특수 리다이렉션</p>\n<ul>\n<li>결과 대신 캐시를 사용</li>\n</ul>\n</li>\n</ol>\n<br>\n<h3 id=\"4-영구-리다이렉션--301-308--잘-사용하지-않음\" style=\"position:relative;\"><a href=\"#4-%EC%98%81%EA%B5%AC-%EB%A6%AC%EB%8B%A4%EC%9D%B4%EB%A0%89%EC%85%98--301-308--%EC%9E%98-%EC%82%AC%EC%9A%A9%ED%95%98%EC%A7%80-%EC%95%8A%EC%9D%8C\" aria-label=\"4 영구 리다이렉션  301 308  잘 사용하지 않음 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4) 영구 리다이렉션 : 301, 308 —> 잘 사용하지 않음</h3>\n<ol>\n<li>리소스의 URI가 영구적으로 이동</li>\n<li>원래의 URL를 사용X, 검색 엔진 등에서도 변경 인지</li>\n<li>\n<p><code class=\"language-text\">301 Move Permanently</code></p>\n<ul>\n<li>리다이렉트시 요청 메서드가 GET으로 변하고, 본문이 제거될 수 있음(MAY)</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">308 Permanent Redirect</code></p>\n<ul>\n<li>301과 기능은 같음</li>\n<li>리다이렉트시 요청 메서드와 본문 유지(처음 POST를 보내면 리다이렉트도 유지)</li>\n</ul>\n</li>\n</ol>\n<br>\n<h3 id=\"5-일시적-리다이렉션--302-307-303--실무에서-사용\" style=\"position:relative;\"><a href=\"#5-%EC%9D%BC%EC%8B%9C%EC%A0%81-%EB%A6%AC%EB%8B%A4%EC%9D%B4%EB%A0%89%EC%85%98--302-307-303--%EC%8B%A4%EB%AC%B4%EC%97%90%EC%84%9C-%EC%82%AC%EC%9A%A9\" aria-label=\"5 일시적 리다이렉션  302 307 303  실무에서 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5) 일시적 리다이렉션 : 302, 307, 303 —> 실무에서 사용</h3>\n<ol>\n<li>리소스의 URI가 일시적으로 변경</li>\n<li>따라서 검색 엔진 등에서 URL을 변경하면 안됨</li>\n<li>\n<p><code class=\"language-text\">302 Found</code></p>\n<ul>\n<li>리다이렉트시 요청 메서드가 GET으로 변하고, 본문이 제거될 수 있음(MAY)</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">307 Temporary Redirect</code></p>\n<ul>\n<li>302와 기능은 같음</li>\n<li>리다이렉트시 요청 메서드와 본문 유지(요청 메서드를 변경하면 안된다. MUST NOT)</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">303 See Other</code></p>\n<ul>\n<li>302와 기능은 같음</li>\n<li>리다이렉트시 요청 메서드가 <code class=\"language-text\">GET</code>으로 변경</li>\n</ul>\n</li>\n</ol>\n<br>\n<h3 id=\"6-prg-post--redirect--get\" style=\"position:relative;\"><a href=\"#6-prg-post--redirect--get\" aria-label=\"6 prg post  redirect  get permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6) PRG: Post / Redirect / Get</h3>\n<p><strong>—> 일시적인 리다이렉션 예시</strong></p>\n<ol>\n<li>\n<p>POST로 주문 후에 웹 브라우저를 새로고침하면?</p>\n<ul>\n<li>새로고침은 다시 요청</li>\n<li>중복 주문이 될 수 있다.</li>\n</ul>\n</li>\n<li>POST로 주문 후에 새로고침으로 인한 중복 주문 방지</li>\n<li>POST로 주문 후에 주문 결과 화면을 GET 메서드로 리다이렉트</li>\n<li>새로고침해도 결과 화면을 GET으로 조회</li>\n<li>중복 주문 대신에 결과 화면만 GET으로 다시 요청</li>\n<li>\n<p>PRG 이후 리다이렉트</p>\n<ul>\n<li>URL이 이미 POST —> GET으로 리다이렉트 됨</li>\n<li>새로 고침 해도 GET으로 결과 화면만 조회</li>\n</ul>\n</li>\n</ol>\n<br>\n<h3 id=\"7-그래서-뭘-써야-하나-302-307-303\" style=\"position:relative;\"><a href=\"#7-%EA%B7%B8%EB%9E%98%EC%84%9C-%EB%AD%98-%EC%8D%A8%EC%95%BC-%ED%95%98%EB%82%98-302-307-303\" aria-label=\"7 그래서 뭘 써야 하나 302 307 303 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>7) 그래서 뭘 써야 하나? 302, 307, 303</h3>\n<ol>\n<li>\n<p>정리</p>\n<ul>\n<li>302 Found —> GET으로 변할 수 있음</li>\n<li>307 Temporary Redirect —> 메서드가 변하면 안됨</li>\n<li>303 See Other —> 메서드가 GET으로 변경</li>\n</ul>\n</li>\n<li>\n<p>역사</p>\n<ul>\n<li>처음 302 스펙의 의도는 HTTP 메서드를 유지하는 것</li>\n<li>그런데 웹 브라우저들이 대부분 GET으로 바꾸어버림(일부는 다르게 동작)</li>\n<li>그래서 모호한 302를 대신하는 명확한 307, 303이 등장함(301 대응으로 308도 등장)</li>\n</ul>\n</li>\n<li>\n<p>현실</p>\n<ul>\n<li>307, 303을 권장하지만 현실적으로 이미 많은 애플리케이션 라이브러리들이 302를 기본 값으로 사용</li>\n<li>자동 리다이렉션시에 GET으로 변해도 되면 그냥 302를 사용해도 큰 문제 없음</li>\n</ul>\n</li>\n</ol>\n<br>\n<h3 id=\"8-기타-리다이렉션--300-304\" style=\"position:relative;\"><a href=\"#8-%EA%B8%B0%ED%83%80-%EB%A6%AC%EB%8B%A4%EC%9D%B4%EB%A0%89%EC%85%98--300-304\" aria-label=\"8 기타 리다이렉션  300 304 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>8) 기타 리다이렉션 : 300, 304</h3>\n<ol>\n<li>300 Multiple Choices : 안쓴다.</li>\n<li>\n<p>304 Not Modified</p>\n<ul>\n<li>캐시를 목적으로 사용</li>\n<li>클라이언트에게 리소스가 수정되지 않았음을 알려준다. 따라서 클라이언트는 로컬 PC에 저장된 캐시를 재사용한다.(캐시로 리다이렉트 한다.)</li>\n<li>304 응답은 응답에 메시지 바디를 포함하면 안된다. (로컬 캐시를 사용해야 하므로)</li>\n<li>조건부 GET, HEAD 요청시 사용</li>\n</ul>\n</li>\n</ol>\n<br>\n<h2 id=\"3-4xx---클라이언트-오류\" style=\"position:relative;\"><a href=\"#3-4xx---%ED%81%B4%EB%9D%BC%EC%9D%B4%EC%96%B8%ED%8A%B8-%EC%98%A4%EB%A5%98\" aria-label=\"3 4xx   클라이언트 오류 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 4XX - 클라이언트 오류</h2>\n<ol>\n<li>클라이언트의 요청에 잘못된 문법등으로 서버가 요청을 수행할 수 없음</li>\n<li>오류의 원인이 클라이언트에 있음</li>\n<li>중요!!! 클라이언트가 이미 잘못된 요청, 데이터를 보내고 있기 때문에, 똑같은 재시도가 실패함</li>\n</ol>\n<br>\n<h3 id=\"1-400-bad-request\" style=\"position:relative;\"><a href=\"#1-400-bad-request\" aria-label=\"1 400 bad request permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1) 400 Bad Request</h3>\n<ol>\n<li>클라이언트가 잘못된 요청을 해서 서버가 요청을 처리할 수 없음</li>\n<li>요청 구문, 메시지 등 오류</li>\n<li>클라이언트는 요청 내용을 다시 컴토하고, 보내야 함 ex) 요청 파라미터가 잘못되거나, API 스펙이 맞지 않을 때</li>\n</ol>\n<br>\n<h3 id=\"2-401-unauthorized\" style=\"position:relative;\"><a href=\"#2-401-unauthorized\" aria-label=\"2 401 unauthorized permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2) 401 Unauthorized</h3>\n<ol>\n<li>클라이언트가 해당 리소스에 대한 인증이 필요함</li>\n<li>인증 되지 않음</li>\n<li>401 오류 발생시 응답에 WWW-Authenticate 헤더와 함께 인증 방법을 설명</li>\n<li>\n<p>참고</p>\n<ul>\n<li>인증(Authentication) : 본인이 누구인지 확인 ex) 로그인</li>\n<li>인가(Authorization) : 권한부여 (ADMIN 권한 처럼 특정 리소스에 접근할 수 있는 권한, 인증이 있어야 인가가 있음)</li>\n<li>오류 메시지가 Unauthorized 이지만 인증 되지 않음(이름이 아쉬움)</li>\n</ul>\n</li>\n</ol>\n<br>\n<h3 id=\"3-403-forbidden\" style=\"position:relative;\"><a href=\"#3-403-forbidden\" aria-label=\"3 403 forbidden permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3) 403 Forbidden</h3>\n<ol>\n<li>서버가 요청을 이해했지만 승인을 거부함</li>\n<li>\n<p>주로 인증 자격 증명은 있지만, 접근 권한이 불충분한 경우</p>\n<ul>\n<li>ex) 어드민 등급이 아닌 사용자가 로그인은 했지만, 어드민 등급의 리소스에 접근하는 경우</li>\n</ul>\n</li>\n</ol>\n<br>\n<h3 id=\"4-404-not-found\" style=\"position:relative;\"><a href=\"#4-404-not-found\" aria-label=\"4 404 not found permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4) 404 Not Found</h3>\n<ol>\n<li>요청 리소스를 찾을 수 없음</li>\n<li>요청 리소스가 서버에 없음</li>\n<li>또는 클라이언트가 권한이 부족한 리소스에 접근할 때 해당 리소스를 숨기고 싶을 때</li>\n</ol>\n<br>\n<h2 id=\"4-5xx-server-error\" style=\"position:relative;\"><a href=\"#4-5xx-server-error\" aria-label=\"4 5xx server error permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 5xx Server Error</h2>\n<ol>\n<li>서버 오류</li>\n<li>서버 문제로 오류 발생</li>\n<li>서버에 문제가 있기 때문에 재시도 하면 성공할 수도 있음(복구가 되거나 등)</li>\n</ol>\n<br>\n<h3 id=\"1-500-internal-server-error\" style=\"position:relative;\"><a href=\"#1-500-internal-server-error\" aria-label=\"1 500 internal server error permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1) 500 Internal Server Error</h3>\n<ol>\n<li>서버 문제로 오류 발생, 애매하면 500 오류</li>\n<li>서버 내부 문제로 오류 발생</li>\n<li>애매하면 500 오류</li>\n</ol>\n<br>\n<h3 id=\"2-503-service-unavailable\" style=\"position:relative;\"><a href=\"#2-503-service-unavailable\" aria-label=\"2 503 service unavailable permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2) 503 Service Unavailable</h3>\n<ol>\n<li>서비스 이용 불가</li>\n<li>서버가 일시적인 과부하 또는 예정된 작업으로 잠시 요청을 처리할 수 없음</li>\n<li>Retry-After 헤더 필드로 얼마뒤에 복구되는지 보낼 수도 있음</li>\n</ol>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#1-2xx--successful\">1. 2XX = Successful</a></p>\n<ul>\n<li><a href=\"#1-%ED%81%B4%EB%9D%BC%EC%9D%B4%EC%96%B8%ED%8A%B8%EC%9D%98-%EC%9A%94%EC%B2%AD%EC%9D%84-%EC%84%B1%EA%B3%B5%EC%A0%81%EC%9C%BC%EB%A1%9C-%EC%B2%98%EB%A6%AC\">1) 클라이언트의 요청을 성공적으로 처리</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#2-3xx---%EB%A6%AC%EB%8B%A4%EC%9D%B4%EB%A0%89%EC%85%98\">2. 3XX - 리다이렉션</a></p>\n<ul>\n<li><a href=\"#1-%EC%9A%94%EC%B2%AD%EC%9D%84-%EC%99%84%EB%A3%8C%ED%95%98%EA%B8%B0-%EC%9C%84%ED%95%B4-%EC%9C%A0%EC%A0%80-%EC%97%90%EC%9D%B4%EC%A0%84%ED%8A%B8%EC%9D%98-%EC%B6%94%EA%B0%80-%EC%A1%B0%EC%B9%98-%ED%95%84%EC%9A%94\">1) 요청을 완료하기 위해 유저 에이전트의 추가 조치 필요</a></li>\n<li><a href=\"#2-%EB%A6%AC%EB%8B%A4%EC%9D%B4%EB%A0%89%EC%85%98-%EC%9D%B4%ED%95%B4\">2) 리다이렉션 이해</a></li>\n<li><a href=\"#3-%EB%A6%AC%EB%8B%A4%EC%9D%B4%EB%A0%89%EC%85%98-%EC%A2%85%EB%A5%98\">3) 리다이렉션 종류</a></li>\n<li><a href=\"#4-%EC%98%81%EA%B5%AC-%EB%A6%AC%EB%8B%A4%EC%9D%B4%EB%A0%89%EC%85%98--301-308--%EC%9E%98-%EC%82%AC%EC%9A%A9%ED%95%98%EC%A7%80-%EC%95%8A%EC%9D%8C\">4) 영구 리다이렉션 : 301, 308 —> 잘 사용하지 않음</a></li>\n<li><a href=\"#5-%EC%9D%BC%EC%8B%9C%EC%A0%81-%EB%A6%AC%EB%8B%A4%EC%9D%B4%EB%A0%89%EC%85%98--302-307-303--%EC%8B%A4%EB%AC%B4%EC%97%90%EC%84%9C-%EC%82%AC%EC%9A%A9\">5) 일시적 리다이렉션 : 302, 307, 303 —> 실무에서 사용</a></li>\n<li><a href=\"#6-prg-post--redirect--get\">6) PRG: Post / Redirect / Get</a></li>\n<li><a href=\"#7-%EA%B7%B8%EB%9E%98%EC%84%9C-%EB%AD%98-%EC%8D%A8%EC%95%BC-%ED%95%98%EB%82%98-302-307-303\">7) 그래서 뭘 써야 하나? 302, 307, 303</a></li>\n<li><a href=\"#8-%EA%B8%B0%ED%83%80-%EB%A6%AC%EB%8B%A4%EC%9D%B4%EB%A0%89%EC%85%98--300-304\">8) 기타 리다이렉션 : 300, 304</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#3-4xx---%ED%81%B4%EB%9D%BC%EC%9D%B4%EC%96%B8%ED%8A%B8-%EC%98%A4%EB%A5%98\">3. 4XX - 클라이언트 오류</a></p>\n<ul>\n<li><a href=\"#1-400-bad-request\">1) 400 Bad Request</a></li>\n<li><a href=\"#2-401-unauthorized\">2) 401 Unauthorized</a></li>\n<li><a href=\"#3-403-forbidden\">3) 403 Forbidden</a></li>\n<li><a href=\"#4-404-not-found\">4) 404 Not Found</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#4-5xx-server-error\">4. 5xx Server Error</a></p>\n<ul>\n<li><a href=\"#1-500-internal-server-error\">1) 500 Internal Server Error</a></li>\n<li><a href=\"#2-503-service-unavailable\">2) 503 Service Unavailable</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"December 24, 2021","title":"HTTP - 6.상태코드(2)","categories":"CS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-cs-HTTP-13/"}},"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":"zoomkoding/zoomkoding-gatsby-blog"}}}}},"pageContext":{"slug":"/study-js-es6-async-await-2/","nextSlug":"/study-cs-HTTP-12/","prevSlug":"/study-cs-HTTP-13/"}},"staticQueryHashes":["1073350324","2938748437"]}