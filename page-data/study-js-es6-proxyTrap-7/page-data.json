{"componentChunkName":"component---src-templates-blog-template-js","path":"/study-js-es6-proxyTrap-7/","result":{"data":{"cur":{"id":"df6cd14a-9104-50b1-8ce8-a1ce3e36119c","html":"<br>\n<h1 align=\"center\">\n  👋 construct(), apply(), ownKeys(), getOwnPropertyDescriptor() 트랩\n</h1>\n<br>\n<h2 id=\"1-construct\" style=\"position:relative;\"><a href=\"#1-construct\" aria-label=\"1 construct permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. construct()</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">new</code> 연산자의 트랩임</p>\n<ul>\n<li>인스턴스를 생성하여 반환함</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">point</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>point <span class=\"token operator\">=</span> point<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> handler <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">construct</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> proxy</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> point <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token keyword\">is</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'add'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      point <span class=\"token operator\">+=</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">target</span><span class=\"token punctuation\">(</span>point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>Point<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> pointObj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">obj</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'add'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>pointobj<span class=\"token punctuation\">.</span>point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 400</span>\n\n<span class=\"token comment\">// 1. const obj = new Proxy(Point, handler); Point 클래스로 Proxy 인스턴스를 생성함</span>\n<span class=\"token comment\">// 2. const pointObj = new obj(100, \"add\", 300); construct() 트랩이 호출됨</span>\n<span class=\"token comment\">// 3. 트랩: construct(target, args, proxy) {...}</span>\n<span class=\"token comment\">//\t\t- target에 Point 클래스가 설정되고</span>\n<span class=\"token comment\">//\t\t- args에 [100, \"add\", 300] 형태로 설정됨</span>\n<span class=\"token comment\">//    - proxy에 new Proxy()로 생성한 obj 인스턴스가 설정됨</span>\n<span class=\"token comment\">// 4. construct(){...} 트랩처리 Point 클래스의 constructor를 호출하기 전에 조건에 따라 인스턴스의 초깃값을 정리 함</span>\n<span class=\"token comment\">// 5. 트랩을 호출할 때마다 정리하지 않고 트랩에서 일괄적으로 정리하면 효율이 높음</span>\n<span class=\"token comment\">// 6. 트랩을 이렇게 활용할 수 있음</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">construct()</code> 트랩이 호출되는 형태</p>\n<ul>\n<li><code class=\"language-text\">const obj = new Proxy(Point, handler);</code></li>\n<li><code class=\"language-text\">new obj</code>를 실행할 때 호출</li>\n<li><code class=\"language-text\">Reflect.construct()</code></li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"2-apply\" style=\"position:relative;\"><a href=\"#2-apply\" aria-label=\"2 apply permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. apply()</h2>\n<ul>\n<li>\n<p>함수 호출 트랩임</p>\n<ul>\n<li><code class=\"language-text\">Proxy</code> 인스턴스 호출로 트랩이 실행된 형태 임</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">getPoint</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>values</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> values<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> value <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> handler <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> that<span class=\"token punctuation\">,</span> params</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">target</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>getPoint<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">obj</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [110, 210]</span>\n\n<span class=\"token comment\">// 1. console.log(obj(100, 200)); obj는 Proxy 인스턴스이며 이를 호출하면 apply() 트랩이 호출됨</span>\n<span class=\"token comment\">// 2. 트랩: apply(target, that, params){...} target에 getPoint 함수가 설정됨</span>\n<span class=\"token comment\">// 3. Proxy 인스턴스 호출로 인해 트랩이 실행되면 that에 값이 설정되지 않음</span></code></pre></div>\n</li>\n</ul>\n<br>\n<h2 id=\"3-apply-트랩-호출\" style=\"position:relative;\"><a href=\"#3-apply-%ED%8A%B8%EB%9E%A9-%ED%98%B8%EC%B6%9C\" aria-label=\"3 apply 트랩 호출 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. apply() 트랩 호출</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">apply()</code> 트랩이 호출되는 형태</p>\n<ul>\n<li><code class=\"language-text\">Function.prototype.apply()</code></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">getPoint</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>values</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> values<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> value <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>bonus<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> handler <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> that<span class=\"token punctuation\">,</span> params</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">target</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>that<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>getPoint<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> add <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> bonus<span class=\"token operator\">:</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">obj</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [110, 210]</span>\n\n<span class=\"token comment\">// 1. console.log(obj.apply(add, [100, 200])); apply() 호출하면 apply() 트랩이 호출됨</span>\n<span class=\"token comment\">// 2. 첫 번째 파라미터에 getPoint()에서 this로 참조할 오브젝트를 작성함</span>\n<span class=\"token comment\">// 3. 두 번째 파라미터에 getPoint()로 넘겨 줄 파라미터 값을 작성함</span>\n<span class=\"token comment\">// 4. 트랩: apply(target, that, params){...} target에 getPoint 함수가 설정되고 that에 add 오브젝트가 설정됨 prams에 [100, 200]이 설정됨</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">Function.prototype.call()</code></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">getPoint</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>values</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> values<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> value <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>bonus<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> handler <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> that<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>params</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">target</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>that<span class=\"token punctuation\">,</span> parms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>getPoint<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> add <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> bonus<span class=\"token operator\">:</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">obj</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [110, 210]</span>\n\n<span class=\"token comment\">// 1. obj.call(add, 100, 200) call() 호출하면 apply 트랩이 호출됨</span>\n<span class=\"token comment\">// 2. 첫 번째 파라미터에 getPoint()에서 this로 참조할 오브젝트를 작성함</span>\n<span class=\"token comment\">// 3. 두 번째 파라미터 이후에 getPoint()로 넘겨 줄 파라미터 값을 작성함</span>\n<span class=\"token comment\">// 4. call() 호출이므로 두 번째 파라미터 이후에 콤마로 구분하여 값을 작성함</span>\n<span class=\"token comment\">// 5. 트랩: apply(target, that, ...params){...} target에 getPoint 함수가 설정되고 that에 add 오브젝트가 설정됨 params에 [100, 200]이 설정됨</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">proxy(...args): Proxy</code> 인스턴스</li>\n<li><code class=\"language-text\">Reflect.apply()</code></li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"4-ownkeys\" style=\"position:relative;\"><a href=\"#4-ownkeys\" aria-label=\"4 ownkeys permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. ownKeys()</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">Object.getOwnPropertyNames()</code> 의 트랩임</p>\n<ul>\n<li><code class=\"language-text\">target</code>의 모든 <code class=\"language-text\">key</code>를 배열로 반환함</li>\n<li><code class=\"language-text\">[[Configurable]]: false</code> 이거나 오브젝트가 확장 불가라도 반환함</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperties</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  point<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> enumerable<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  bonus<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token number\">200</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> handler <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">ownKeys</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyNames</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyNames</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [point, bonus]</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [point]</span>\n\n<span class=\"token comment\">// 1. console.log(Object.getOwnPropertyNames(obj)); ownKeys() 트랩이 호출됨</span>\n<span class=\"token comment\">// 2. 트랩: return Object.getOwnPropertyNames(target); target 오브젝트의 모든 프로퍼티 key를 반환함</span>\n<span class=\"token comment\">// 3. console.log(Object.keys(obj)); 트랩을 호출하며, 모든 프로퍼티 key를 반환함</span>\n<span class=\"token comment\">// 4. 한편, Object.keys()는 {enumerable: false}인 프로퍼티는 반환하지 않음 그래서 point만 출력됨</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">ownKeys()</code> 트랩이 호출되는 형태</p>\n<ul>\n<li><code class=\"language-text\">Object.getOwnPropertyNmaes()</code></li>\n<li><code class=\"language-text\">Object.getOwnPropertySymbols()</code></li>\n<li><code class=\"language-text\">Object.keys()</code></li>\n<li><code class=\"language-text\">Reflect.ownKeys()</code></li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"5-getownpropertydescriptor\" style=\"position:relative;\"><a href=\"#5-getownpropertydescriptor\" aria-label=\"5 getownpropertydescriptor permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. getOwnPropertyDescriptor()</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">Object.getOwnPropertyDescriptor()</code> 트랩임</p>\n<ul>\n<li>프로퍼티 디스크립터를 반환함</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> <span class=\"token string\">'point'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  value<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n  configurable<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> handler <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">getOwnPropertyDescriptor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> desc <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyDescriptor</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>desc<span class=\"token punctuation\">.</span>configurable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> configurable<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> desc<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyDescriptor</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">'point'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {value: 300, writable: false, enumerable: false, configurable: true}</span>\n\n<span class=\"token comment\">// 1. console.log(Object.getOwnPropertyDescriptor(obj, \"point\")); 트랩이 호출됨</span>\n<span class=\"token comment\">// 2. 트랩: if(desc.configurable){...} 디스크립터의 configurable 값이 true이면 value 속성 값을 바꾸어 반환함</span>\n<span class=\"token comment\">// 3. point 프로퍼티 {configurable: true}이므로 트랩에서 값을 바꾸어 반환할 수 있음 {configurable: false} 일 때는 바꿀 수 없음</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">getOwnPropertyDescriptor()</code> 트랩이 호출되는 형태</p>\n<ul>\n<li><code class=\"language-text\">Object.getOwnPropertyDescriptor()</code></li>\n<li><code class=\"language-text\">Reflect.getOwnPropertyDescriptor()</code></li>\n</ul>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1-construct\">1. construct()</a></li>\n<li><a href=\"#2-apply\">2. apply()</a></li>\n<li><a href=\"#3-apply-%ED%8A%B8%EB%9E%A9-%ED%98%B8%EC%B6%9C\">3. apply() 트랩 호출</a></li>\n<li><a href=\"#4-ownkeys\">4. ownKeys()</a></li>\n<li><a href=\"#5-getownpropertydescriptor\">5. getOwnPropertyDescriptor()</a></li>\n</ul>\n</div>","excerpt":"1. construct()  연산자의 트랩임 인스턴스를 생성하여 반환함  트랩이 호출되는 형태  를 실행할 때 호출  2. apply() 함수 호출 트랩임  인스턴스 호출로 트랩이 실행된 형태 임 3. apply() 트랩 호출  트랩이 호출되는 형태    인스턴스  4. ownKeys()  의 트랩임 의 모든 를 배열로 반환함  이거나 오브젝트가 확장 불가라도 반환함  트랩이 호출되는 형태     5. getOwnPropertyDescriptor()  트랩임 프로퍼티 디스크립터를 반환함  트랩이 호출되는 형태   1. construct() 2. apply() 3. apply() 트랩 호출 4. ownKeys() 5. getOwnPropertyDescriptor()","frontmatter":{"date":"December 04, 2021","title":"construct(), apply(), ownKeys(), getOwnPropertyDescriptor() 트랩","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-proxyTrap-7/"}},"next":{"id":"444aeb0c-9c44-5760-8704-cb69d670036b","html":"<br>\n<h1 align=\"center\">\n  👋 getPrototypeof(), setPrototypeof() 트랩\n</h1>\n<br>\n<h2 id=\"1-getprototypeof\" style=\"position:relative;\"><a href=\"#1-getprototypeof\" aria-label=\"1 getprototypeof permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. getPrototypeof()</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">[[GetPrototypeOf]]</code> 의 트랩임</p>\n<ul>\n<li><code class=\"language-text\">target</code> 의 <code class=\"language-text\">prototype</code>을 반환</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">getPoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> handler <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> target<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>Point<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> proto <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>proto<span class=\"token punctuation\">.</span>getPoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// getPoint(){return 100;}</span>\n\n<span class=\"token comment\">// 1. const obj = new Proxy(Point, handler); 첫 번째 파라미터에 Point 클래스를 작성했음, 트랩에서 Point.prototype을 구하기 위해서 obj.[[Target]]에서 Point 클래스가 설정됨</span>\n<span class=\"token comment\">// 2. const proto = Object.getPrototypeOf(obj); getProtytpeOf() 트랩이 호출됨</span>\n<span class=\"token comment\">// 3. 트랩: getPrototypeOf(target){} target에 Point 클래스가 설정됨</span>\n<span class=\"token comment\">// 4. 트랩: return target.prototype; Popoint.prototype을 반환함</span>\n<span class=\"token comment\">// 5. console.log(proto.getPoint); Point.prototype에 getPoint()가 있으므로 메소드 코드가 출력됨</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">target</code> 이 확장 불가라도 <code class=\"language-text\">prototype</code>을 반환 함</li>\n<li><code class=\"language-text\">String</code>, <code class=\"language-text\">Number</code> 처럼 값을 반환하면 <code class=\"language-text\">TypeError</code></li>\n</ul>\n</li>\n<li>\n<p>트랩 준수 사항</p>\n<ul>\n<li><code class=\"language-text\">target</code> 이 확장 불가일 때</li>\n<li><code class=\"language-text\">Object.getPrototypeOf(target)</code> 와 같은 값을 반환해야 함</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"2-getprototypeof-트랩-호출\" style=\"position:relative;\"><a href=\"#2-getprototypeof-%ED%8A%B8%EB%9E%A9-%ED%98%B8%EC%B6%9C\" aria-label=\"2 getprototypeof 트랩 호출 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. getPrototypeOf() 트랩 호출</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">getPrototypeOf()</code> 트랩이 호출되는 형태</p>\n<ul>\n<li><code class=\"language-text\">Object.getPrototypeOf()</code></li>\n<li><code class=\"language-text\">__proto__</code></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">getPoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> handler <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">getPrototyepOf</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>list <span class=\"token operator\">?</span> <span class=\"token builtin\">Array</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">:</span> target<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>Point<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nhandler<span class=\"token punctuation\">.</span>list <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> proto <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>proto<span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// function map() {[native code]}</span>\n\n<span class=\"token comment\">// 1. handler.list = true; getPrototypeOf() 트랩에서 체크 값으로 사용함</span>\n<span class=\"token comment\">// 2. const proto = obj.__proto__, getPrototypeOf 트랩이 호출됨 트랩에서 Array.prototype을 반환함</span>\n<span class=\"token comment\">// 3. console.log(proto.map) map 메소드가 있으므로 코드가 출력됨</span>\n<span class=\"token comment\">// 4. 조건에 따라 반환되는 prototype을 바꿀 수 있음</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">instanceof</code></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">getPoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> handler <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> Point<span class=\"token punctuation\">.</span>rptotype<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>targetinstanceof Point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// true</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Point<span class=\"token punctuation\">.</span>prototype <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// false</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// true</span>\n\n<span class=\"token comment\">// 1. console.log(target instanceof Point) target을 Point로 만들었으므로 true가 출력됨</span>\n<span class=\"token comment\">// 2. console.log(Point.protytpe instanceof Point) Point.prototype이 인스턴스가 아니므로 false가 출력됨</span>\n<span class=\"token comment\">// 3. console.log(obj instanceof Point) getPrototypeOf() 트랩이 호출됨 트랩에서 Point.prototype을 반환함</span>\n<span class=\"token comment\">// 4. (Point.prototype instanceof Point) 형태가 되므로 false가 출력되어야 하는데 ture가 출력됨</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">Object.prototype.isPrototypeOf()</code></li>\n<li><code class=\"language-text\">Reflect.getPrototypeOf()</code></li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"3-setprototypeof\" style=\"position:relative;\"><a href=\"#3-setprototypeof\" aria-label=\"3 setprototypeof permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. setPrototypeOf()</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">Object.setPrototypeOf()</code> 특징</p>\n<ul>\n<li><code class=\"language-text\">target</code>의 <code class=\"language-text\">__proto__</code> 에 두 번째 파라미터를 설정함</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTitle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'책'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">getPOint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'100'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">setPrototypeOf</span><span class=\"token punctuation\">(</span>Book<span class=\"token punctuation\">,</span> Point<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Book<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>getPOint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Book<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">.</span>getPoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// getPoint() {return 100;}</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Book</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>getPoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n\n<span class=\"token comment\">// 1. Object.setPrototypeOf(Book, Point.rptotyep); Book.__proto__에 있는 Function.prototype이 Point.prototype으로 대체됨</span>\n<span class=\"token comment\">// 2. console.log(Book.prototype.getPoint) Book.__proto__에 설정되므로 undfined가 출력됨</span>\n<span class=\"token comment\">// 3. Book.__protot__.getPoint getPoint() 코드가 출력됨</span>\n<span class=\"token comment\">// 4. console.log(obj.getPoint) Book.prototype으로 인스턴스를 생성하므로 obj 인스턴스에 getPoint가 없음</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">Object.setPrototypeOf()</code> 의 트랩임</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">setTitle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">'책'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">getPOint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">'100'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> handler <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">setPrototypeOf</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> proto</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">setPrototypeOf</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> proto<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>Book<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">setPrototypeOf</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> Point<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Book<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>getPoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Book<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">.</span>getPOint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// getPoint(){ return 100; }</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>getPoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// getPoint(){ return 100; }</span>\n\n<span class=\"token comment\">// 1. Object.setPrototypeOf(obj, Point.prototype); setPrototypeOf() 트랩이 호출됨</span>\n<span class=\"token comment\">// 2. 트랩: setPrototypeOf(target, proto){...} target에 Book 클래스가 설정되고 proto에 Point.prototype이 설정됨</span>\n<span class=\"token comment\">// 3. 트랩: Ojbect.setPrototypeOf(target, proto); Book.__proto__와 obj.[[Target]].__proto__가 Point.prototype으로 대체됨</span>\n<span class=\"token comment\">// 4. true를 반환하지 않으면 에러가 발생함</span>\n<span class=\"token comment\">// 5. console.log(Book.prototype.getPoint) undefined가 출력되며, Point.prototype이 Book.prototype에 설정되지 않기 때문</span>\n<span class=\"token comment\">// 6. console.log(Book.__proto__.getPoint) getPoint 코드가 출력됨</span>\n<span class=\"token comment\">// 7. console.log(obj.getPoint) getPoint 코드가 출력되며 obj.[[Target]].__proto__에 getPoint가 있기 때문</span></code></pre></div>\n</li>\n<li>\n<p>트랩 준수 사항</p>\n<ul>\n<li><code class=\"language-text\">target</code> 이 확장 불가 일 때</li>\n<li>두 번째 파라미터의 <code class=\"language-text\">prototype</code>과 <code class=\"language-text\">Object.getPrototypeOf(target)</code>로 구한 것과 같아야 함</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"4-setprototypeof-트랩-호출\" style=\"position:relative;\"><a href=\"#4-setprototypeof-%ED%8A%B8%EB%9E%A9-%ED%98%B8%EC%B6%9C\" aria-label=\"4 setprototypeof 트랩 호출 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. setPrototypeOf() 트랩 호출</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">setPrototypeOf()</code> 트랩이 호출되는 형태</p>\n<ul>\n<li><code class=\"language-text\">Object.setPrototypeOf()</code></li>\n<li><code class=\"language-text\">Reflect.setPrototypeOf()</code></li>\n</ul>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1-getprototypeof\">1. getPrototypeof()</a></li>\n<li><a href=\"#2-getprototypeof-%ED%8A%B8%EB%9E%A9-%ED%98%B8%EC%B6%9C\">2. getPrototypeOf() 트랩 호출</a></li>\n<li><a href=\"#3-setprototypeof\">3. setPrototypeOf()</a></li>\n<li><a href=\"#4-setprototypeof-%ED%8A%B8%EB%9E%A9-%ED%98%B8%EC%B6%9C\">4. setPrototypeOf() 트랩 호출</a></li>\n</ul>\n</div>","frontmatter":{"date":"December 03, 2021","title":"getPrototypeof(), setPrototypeof() 트랩","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-proxyTrap-6/"}},"prev":{"id":"6517c406-ac71-5136-9c1a-391a010c5603","html":"<br>\n<h1 align=\"center\">\n  👋 Reflect 오브젝트, Proxy 사용\n</h1>\n<br>\n<h2 id=\"1-reflect\" style=\"position:relative;\"><a href=\"#1-reflect\" aria-label=\"1 reflect permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Reflect</h2>\n<ul>\n<li>빌트인 오브젝트</li>\n<li><code class=\"language-text\">constructor</code> 가 없으므로 인스턴스를 생성 할 수 없음</li>\n<li>\n<p><code class=\"language-text\">reflect.get()</code> 형태로 호출</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> point<span class=\"token operator\">:</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 100</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> <span class=\"token string\">'point'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 100</span>\n\n<span class=\"token comment\">// 1. Reflect.get(target, \"point\") target에서 point 프로퍼티 값을 구함, target에 대상 오브젝트를 작성하고 \"point\"에 프로퍼티 키를 작성함</span>\n<span class=\"token comment\">// 2. [[Get]](\"point\", receiver) 형태로 target의 [[Get]]을 실행함</span>\n<span class=\"token comment\">// 3. 100을 반환</span>\n<span class=\"token comment\">// 4. 값을 구하는 것은 target.point와 같지만 Reflect.get()은 부가 기능이 있음</span></code></pre></div>\n</li>\n<li>\n<p>에러 대응 형태</p>\n<ul>\n<li><code class=\"language-text\">tray-catch</code> 로 에러 대응</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> <span class=\"token string\">'point'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  value<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n  writable<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> <span class=\"token string\">'point'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token number\">200</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'에러 발생'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 1. {value: 100, writable: false}, {writable: false}이므로 value 속성 값을 바꿀 수 없음</span>\n<span class=\"token comment\">// 2. try-catch에서 value: 200, value 속성 값을 바꾸면 에러가 발생함 그래서 try-catch문을 사용함</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">true</code>, <code class=\"language-text\">false</code>를 반환</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> <span class=\"token string\">'point'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  value<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n  writable<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> check <span class=\"token operator\">=</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> <span class=\"token string\">'point'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token number\">200</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>check<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1. {value: 100, writable: false}, {writable: false}이므로 value 속성 값을 바꿀 수 없음</span>\n<span class=\"token comment\">// 2. Reflect 오브젝트 사용, value: 200, value 속성 값을 바꾸면 에러가 발생함</span>\n<span class=\"token comment\">// 3. 이때, 프로그램이 중단되지 않고 처리 실패를 뜻하는 false를 반환, 성공이면 true를 반환함</span>\n<span class=\"token comment\">// 4. console.log(check); false가 출력됨</span></code></pre></div>\n</li>\n</ul>\n<br>\n<h2 id=\"2-proy-사용\" style=\"position:relative;\"><a href=\"#2-proy-%EC%82%AC%EC%9A%A9\" aria-label=\"2 proy 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Proy 사용</h2>\n<ul>\n<li><code class=\"language-text\">Reflect</code> 오브젝트의 함수는 <code class=\"language-text\">Proxy</code> 트랩에 1:1로 대응하며 트랩 이름과 함수 이름이 같음</li>\n<li>\n<p>트랩 파라미터와 <code class=\"language-text\">Reflect</code> 함수의 파라미터가 같음</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> point<span class=\"token operator\">:</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> handler <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">get</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> receiver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> receiver<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 300</span>\n\n<span class=\"token comment\">// 1. console.log(obj.point); getter이므로 get() 트랩이 호출됨</span>\n<span class=\"token comment\">// 2. 트랩: get(target, key, receiver){...} target 파라미터에 target이 설정됨 key에 \"point\"가 설정되고 receiver에 Proxy 인스턴스가 설정됨</span>\n<span class=\"token comment\">// 3. Proxy의 get() 트랩과 Reflect.get() 함수에서 트랩 이름과 Reflect 함수 이름이 같으며 파라미터도 같음, 13개 트랩에 대응하는 Reflect 함수가 있음</span>\n<span class=\"token comment\">// 4. 트랩: return Reflect.get(target, key, receiver) + 200; Reflect.get()은 obj.point로 값을 구하는 본래 기능을 수행함</span>\n<span class=\"token comment\">// 5. 구한 값 100에 200을 더해 반환하는 것은 부가 기능으로 이것은 트랩의 기능 임</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">Reflect</code> 오브젝트 형태</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> Reflect<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*\n1. Reflect 오브젝트 구조를 보기 위해 obj에 할당했음\n\n2. obj에 표시된 함수를 Reflect.get() 형태로 사용할 수 있음\n\n3. 함수 이름이 Proxy 트랩 이름과 같음\n\n4. Reflect 오브젝트에\n  - prototype과 prototype.constructor가 없음\n  - 따라서 new 연산자로 인스턴스를 생성할 수 없으며\n  - prototype에 메소드를 연결할 수 없음\n\n5. 표시된 constructor는 Reflect.constructor임\n*/</span></code></pre></div>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1-reflect\">1. Reflect</a></li>\n<li><a href=\"#2-proy-%EC%82%AC%EC%9A%A9\">2. Proy 사용</a></li>\n</ul>\n</div>","frontmatter":{"date":"December 05, 2021","title":"Reflect 오브젝트, Proxy 사용","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-reflect-1/"}},"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":"zoomkoding/zoomkoding-gatsby-blog"}}}}},"pageContext":{"slug":"/study-js-es6-proxyTrap-7/","nextSlug":"/study-js-es6-proxyTrap-6/","prevSlug":"/study-js-es6-reflect-1/"}},"staticQueryHashes":["1073350324","2938748437"]}