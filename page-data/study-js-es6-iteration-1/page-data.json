{"componentChunkName":"component---src-templates-blog-template-js","path":"/study-js-es6-iteration-1/","result":{"data":{"cur":{"id":"58fc7cd7-afb8-5d42-b489-17fd89c6bb54","html":"<br>\n<h1 align=\"center\">\n  👋 이터레이션, 이터레이션 프로토콜\n</h1>\n<br>\n<h2 id=\"1-이터레이션\" style=\"position:relative;\"><a href=\"#1-%EC%9D%B4%ED%84%B0%EB%A0%88%EC%9D%B4%EC%85%98\" aria-label=\"1 이터레이션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 이터레이션</h2>\n<ul>\n<li>\n<p>이터레이션(Iteration)의 사전적 의미 : 반복</p>\n<ul>\n<li><code class=\"language-text\">for()</code>문의 반복 개념과 차이 있음</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> value <span class=\"token keyword\">of</span> list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> list<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 10</span>\n<span class=\"token comment\">// 20</span>\n<span class=\"token comment\">// {value: 10, done: false}</span>\n<span class=\"token comment\">// {value: 20, done: false}</span>\n<span class=\"token comment\">// {value: undefined, done: true}</span></code></pre></div>\n</li>\n<li>\n<p>이터레이션을 위한 프로토콜(Protocol) 필요</p>\n<ul>\n<li>예: 통신 프로토콜(규약)</li>\n<li>데이터 송수신 프로토콜 정의</li>\n<li>어떻게 반복을 할 것인가에 대한 규약이 필요</li>\n</ul>\n</li>\n<li>\n<p>즉, 이터레이션은 프로토콜을 갖고 있으며</p>\n<ul>\n<li>프로토콜에 따라 이터레이션 수행</li>\n<li>프로토콜이 구문과 빌트인이 아니므로 프로토콜에 맞으면 이터레이션 가능</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"2-이터레이션-프로토콜\" style=\"position:relative;\"><a href=\"#2-%EC%9D%B4%ED%84%B0%EB%A0%88%EC%9D%B4%EC%85%98-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C\" aria-label=\"2 이터레이션 프로토콜 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 이터레이션 프로토콜</h2>\n<ul>\n<li>이터레이션 프로토콜(규약)은</li>\n<li>\n<p>오브젝트가 이터레이션 할 수 있는 구조이어야 하며</p>\n<ul>\n<li>[10, 20]은 가능, 100은 불가능</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> list<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// {value: 10, done: false}</span>\n<span class=\"token comment\">// {value: 20, done: false}</span>\n<span class=\"token comment\">// {value: undefined, done: true}</span></code></pre></div>\n</li>\n<li>\n<p>이터레이션 프로토콜 구분</p>\n<ul>\n<li>이터러블(iterable) 프로토콜 : 반복가능 한 것</li>\n<li>이터레이터(iterator) 프로토콜 : <code class=\"language-text\">obj.next()</code> 처럼 반복문을 실행시키는 것\n—> 이렇게 이터러블, 이터레이터를 규약하는 이유는? <code class=\"language-text\">확장성</code> 때문에</li>\n</ul>\n</li>\n<li>개발자 코드로 프로토콜을 맞추면 이터레이션 할 수 없는 오브젝트를 이터레이션 할 수 있도록 만들 수 있음</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1-%EC%9D%B4%ED%84%B0%EB%A0%88%EC%9D%B4%EC%85%98\">1. 이터레이션</a></li>\n<li><a href=\"#2-%EC%9D%B4%ED%84%B0%EB%A0%88%EC%9D%B4%EC%85%98-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C\">2. 이터레이션 프로토콜</a></li>\n</ul>\n</div>","excerpt":"1. 이터레이션 이터레이션(Iteration)의 사전적 의미 : 반복 문의 반복 개념과 차이 있음 이터레이션을 위한 프로토콜(Protocol) 필요 예: 통신 프로토콜(규약) 데이터 송수신 프로토콜 정의 어떻게 반복을 할 것인가에 대한 규약이 필요 즉, 이터레이션은 프로토콜을 갖고 있으며 프로토콜에 따라 이터레이션 수행 프로토콜이 구문과 빌트인이 아니므로 프로토콜에 맞으면 이터레이션 가능 2. 이터레이션 프로토콜 이터레이션 프로토콜(규약)은 오브젝트가 이터레이션 할 수 있는 구조이어야 하며 10, 20은 가능, 100은 불가능 이터레이션 프로토콜 구분 이터러블(iterable) 프로토콜 : 반복가능 한 것 이터레이터(iterator) 프로토콜 :  처럼 반복문을 실행시키는 것\n—> 이렇게 이터러블, 이터레이터를 규약하는 이유는?  때문에 개발자 코드로 프로토콜을 맞추면 이터레이션 할 수 없는 오브젝트를 이터레이션 할 수 있도록 만들 수 있음 1. 이터레이션 2. 이터레이션 프로토콜","frontmatter":{"date":"September 03, 2021","title":"이터레이션","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-iteration-1/"}},"next":{"id":"2c97ba6c-5326-5120-bf8f-14b9559810fa","html":"<br>\n<h1 align=\"center\">\n  👋 화살표 함수와 this, this가 정적 스코프 참조\n</h1>\n<br>\n<h2 id=\"1-화살표-함수와-this\" style=\"position:relative;\"><a href=\"#1-%ED%99%94%EC%82%B4%ED%91%9C-%ED%95%A8%EC%88%98%EC%99%80-this\" aria-label=\"1 화살표 함수와 this permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 화살표 함수와 this</h2>\n<h3 id=\"1-code-classlanguage-textstrictcode-모드에서-함수를-호출할-때\" style=\"position:relative;\"><a href=\"#1-code-classlanguage-textstrictcode-%EB%AA%A8%EB%93%9C%EC%97%90%EC%84%9C-%ED%95%A8%EC%88%98%EB%A5%BC-%ED%98%B8%EC%B6%9C%ED%95%A0-%EB%95%8C\" aria-label=\"1 code classlanguage textstrictcode 모드에서 함수를 호출할 때 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1). <code class=\"language-text\">Strict</code> 모드에서 함수를 호출할 때</h3>\n<ul>\n<li>함수 앞에 오브젝트 작성은 필수</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// 오브젝트 작성은 필수</span>\n\n<span class=\"token string\">'use strict'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">book</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">getPoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getPoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// window.getPoint();</span>\n<span class=\"token punctuation\">}</span>\n\nwindow<span class=\"token punctuation\">.</span><span class=\"token function\">book</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span></code></pre></div>\n<ol>\n<li><code class=\"language-text\">strict</code> 모드에서는 <code class=\"language-text\">window.book()</code> 처럼 호출하는 함수 앞에 오브젝트를 작성해야 함, 이렇게 하지 않으면 <code class=\"language-text\">book()</code> 함수 안에서 <code class=\"language-text\">this</code> 값이 <code class=\"language-text\">undefined</code></li>\n<li>또한, <code class=\"language-text\">getPoint()</code> 처럼 <code class=\"language-text\">window</code>를 앞에 작성하지 않으면 <code class=\"language-text\">getPoint()</code> 안에서 <code class=\"language-text\">this</code> 값이 <code class=\"language-text\">undefined</code> 임</li>\n<li>이를 피하기 위해 <code class=\"language-text\">window.getPoint()</code>로 호출하면 <code class=\"language-text\">window</code> 오브젝트에 <code class=\"language-text\">getPoint()</code>가 없으므로 에러가 남(현재 <code class=\"language-text\">book</code> 함수 블록 안에 <code class=\"language-text\">getPoint()</code>가 있음)</li>\n<li><code class=\"language-text\">strict</code> 모드의 함수에서 <code class=\"language-text\">this</code>를 참조하기 위해서는 <code class=\"language-text\">this</code>를 별도로 저장한 후 사용해야 하는 번거로움이 있음</li>\n</ol>\n<p>—> 화살표 함수로 해결 가능</p>\n<br>\n<h3 id=\"2-화살표-함수에서-code-classlanguage-textthiscode가-글로벌-오브젝트-참조\" style=\"position:relative;\"><a href=\"#2-%ED%99%94%EC%82%B4%ED%91%9C-%ED%95%A8%EC%88%98%EC%97%90%EC%84%9C-code-classlanguage-textthiscode%EA%B0%80-%EA%B8%80%EB%A1%9C%EB%B2%8C-%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8-%EC%B0%B8%EC%A1%B0\" aria-label=\"2 화살표 함수에서 code classlanguage textthiscode가 글로벌 오브젝트 참조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2). 화살표 함수에서 <code class=\"language-text\">this</code>가 글로벌 오브젝트 참조</h3>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// 화살표 함수 사용</span>\n\n<span class=\"token string\">'use strict'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> point <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">sports</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getPoint</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">getPoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nwindow<span class=\"token punctuation\">.</span><span class=\"token function\">sports</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol>\n<li>화살표 함수로 작성하면 <code class=\"language-text\">getPoint()</code>로 호출할 수 있음</li>\n<li>또한, <code class=\"language-text\">getPoint()</code> 화살표 함수 안에서 <code class=\"language-text\">this</code>가 <code class=\"language-text\">undefined</code>가 아니라 글로벌(<code class=\"language-text\">window</code>) 오브젝트를 참조 함</li>\n<li><code class=\"language-text\">var point = 100</code>을 작성했으므로 100이 출력됨</li>\n</ol>\n<br>\n<h3 id=\"3-code-classlanguage-textthiscode값이-code-classlanguage-textundefinedcode\" style=\"position:relative;\"><a href=\"#3-code-classlanguage-textthiscode%EA%B0%92%EC%9D%B4-code-classlanguage-textundefinedcode\" aria-label=\"3 code classlanguage textthiscode값이 code classlanguage textundefinedcode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3). <code class=\"language-text\">this</code>값이 <code class=\"language-text\">undefined</code></h3>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token string\">'use strict'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> book <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  point<span class=\"token operator\">:</span> <span class=\"token number\">500</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">getPoint</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nbook<span class=\"token punctuation\">.</span><span class=\"token function\">getPoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n1. 일반 함수인 book.getPoint()를 호출하면\n- 함수 안에서 this가 book 오브젝트를 참조 함\n- 따라서 console.log에 500이 출력됨\n*/</span>\n\n<span class=\"token keyword\">var</span> point <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> sports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">getPoint</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'this.point'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nsports<span class=\"token punctuation\">.</span><span class=\"token function\">getPoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 100이 출력됨</span>\n\n<span class=\"token comment\">/*\n1. 화살표 함수인 sports.getPoint()를 호출하면\n- 오른쪽 Local에 this:undefined가 표시됨\n\n2. 이것은, 화살표 함수는 함수에 this를 갖고 있지 않기 때문\n\n3. 이때, this가 window 오브젝트를 참조 함\n*/</span>\n\n<span class=\"token comment\">// 정리</span>\n<span class=\"token comment\">/*\n1. console.log(\"this.point\", this.point);\n- var point = 100;에서 var 키워드를 사용했으므\n- poinrt 변수가 window 오브젝트에 설정됨\n- 따라서 console.log에 100이 출력됨\n\n2. 지금부터 this가 window 오브젝트를 참조하는 논리를 살펴봄\n- 어떻게 화살표 함수는 this가 undefined인데 window를 참조하여 this에 값을 할당 할 수 있는지 파악\n*/</span></code></pre></div>\n<br>\n<h2 id=\"2-code-classlanguage-textthiscode가-정적-스코프-참조\" style=\"position:relative;\"><a href=\"#2-code-classlanguage-textthiscode%EA%B0%80-%EC%A0%95%EC%A0%81-%EC%8A%A4%EC%BD%94%ED%94%84-%EC%B0%B8%EC%A1%B0\" aria-label=\"2 code classlanguage textthiscode가 정적 스코프 참조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. <code class=\"language-text\">this</code>가 정적 스코프 참조</h2>\n<ul>\n<li>화살표 함수에서 정적 스코프의 <code class=\"language-text\">this</code>를 사용</li>\n<li>\n<p>정적(Lexical)스코프란</p>\n<ul>\n<li>엔진이 해석할 때, 화살표 함수를 만나면</li>\n<li><code class=\"language-text\">function object</code>를 생성하고</li>\n<li>화살표 함수가 속한 스코프를 생성한 함수 오브젝트 스코프에 바인딩</li>\n</ul>\n</li>\n<li>\n<p>오브젝트에 바인딩된 스코프의 <code class=\"language-text\">this</code>를 화살표 함수에서 <code class=\"language-text\">this</code>로 사용</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">var</span> title <span class=\"token operator\">=</span> <span class=\"token string\">\"책\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> book <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function-variable function\">show</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nbook<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 책</span></code></pre></div>\n<ol>\n<li><code class=\"language-text\">show()</code> 화살표 함수에서 <code class=\"language-text\">this</code>가 <code class=\"language-text\">window</code> 오브젝트를 참조하는 것은</li>\n<li>함수 밖 스코프의 변수를 사용하듯이 <code class=\"language-text\">show()</code>의 스코프인 <code class=\"language-text\">book</code> 함수 오브젝트에 설정된 스코프(글로벌 스코프)의 <code class=\"language-text\">this</code>를 화살표 함수에서 <code class=\"language-text\">this</code>로 사용하기 때문</li>\n<li><code class=\"language-text\">book</code> 오브젝트가 글로벌 오브젝트에 설정되므로 <code class=\"language-text\">this</code>가 <code class=\"language-text\">window</code> 오브젝트를 참조 함</li>\n</ol>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#1-%ED%99%94%EC%82%B4%ED%91%9C-%ED%95%A8%EC%88%98%EC%99%80-this\">1. 화살표 함수와 this</a></p>\n<ul>\n<li><a href=\"#1-strict-%EB%AA%A8%EB%93%9C%EC%97%90%EC%84%9C-%ED%95%A8%EC%88%98%EB%A5%BC-%ED%98%B8%EC%B6%9C%ED%95%A0-%EB%95%8C\">1). <code class=\"language-text\">Strict</code> 모드에서 함수를 호출할 때</a></li>\n<li><a href=\"#2-%ED%99%94%EC%82%B4%ED%91%9C-%ED%95%A8%EC%88%98%EC%97%90%EC%84%9C-this%EA%B0%80-%EA%B8%80%EB%A1%9C%EB%B2%8C-%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8-%EC%B0%B8%EC%A1%B0\">2). 화살표 함수에서 <code class=\"language-text\">this</code>가 글로벌 오브젝트 참조</a></li>\n<li><a href=\"#3-this%EA%B0%92%EC%9D%B4-undefined\">3). <code class=\"language-text\">this</code>값이 <code class=\"language-text\">undefined</code></a></li>\n</ul>\n</li>\n<li><a href=\"#2-this%EA%B0%80-%EC%A0%95%EC%A0%81-%EC%8A%A4%EC%BD%94%ED%94%84-%EC%B0%B8%EC%A1%B0\">2. <code class=\"language-text\">this</code>가 정적 스코프 참조</a></li>\n</ul>\n</div>","frontmatter":{"date":"September 02, 2021","title":"Arrow Function와 this","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-arrowFunction-3/"}},"prev":{"id":"609a2e9f-c47d-572e-8ae7-7af1c8a30c16","html":"<br>\n<h1 align=\"center\">\n  👋 이터러블 오브젝트, 이터러블 프로토콜\n</h1>\n<br>\n<h2 id=\"1-이터러블-오브젝트\" style=\"position:relative;\"><a href=\"#1-%EC%9D%B4%ED%84%B0%EB%9F%AC%EB%B8%94-%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8\" aria-label=\"1 이터러블 오브젝트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 이터러블 오브젝트</h2>\n<h3 id=\"1-이러터블-오브젝트-개념\" style=\"position:relative;\"><a href=\"#1-%EC%9D%B4%EB%9F%AC%ED%84%B0%EB%B8%94-%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8-%EA%B0%9C%EB%85%90\" aria-label=\"1 이러터블 오브젝트 개념 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1). 이러터블 오브젝트 개념</h3>\n<ul>\n<li>이터러블 프로토콜을 갖고 있는 오브젝트</li>\n<li>스펙에서는 <code class=\"language-text\">@@iterator()</code>로 표기</li>\n<li>\n<p>반복 구조, <code class=\"language-text\">Symbol.iterator()</code></p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// function values() { [native code] }</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> one<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> two<span class=\"token operator\">:</span> <span class=\"token number\">20</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span></code></pre></div>\n<ol>\n<li><code class=\"language-text\">[ ]</code> 리터럴로 생성한 <code class=\"language-text\">list</code>에 <code class=\"language-text\">Symbol.iterator</code>가 있으므로 <code class=\"language-text\">Array</code>는 이터러블 오브젝트 임</li>\n<li><code class=\"language-text\">{ }</code> 리터럴로 생성한 <code class=\"language-text\">obj</code>에 <code class=\"language-text\">Symbol.iterator</code>가 없으므로 <code class=\"language-text\">Object</code>는 이터러블 오브젝트가 아님</li>\n<li><code class=\"language-text\">for</code> 문의 반복과 이터레이션이 차이가 있듯이, <code class=\"language-text\">for - in</code>의 열거와 이터레이션은 차이가 있음</li>\n</ol>\n</li>\n</ul>\n<br>\n<h3 id=\"2-이터러블-오브젝트-구조\" style=\"position:relative;\"><a href=\"#2-%EC%9D%B4%ED%84%B0%EB%9F%AC%EB%B8%94-%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8-%EA%B5%AC%EC%A1%B0\" aria-label=\"2 이터러블 오브젝트 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2). 이터러블 오브젝트 구조</h3>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token string\">'use strict'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n  1. 오른쪽 list를 펼치면 __proto__가 있으며 __proto__를 펼치면 Array 오브젝트의 메소드가 표시됨\n\n  2. 아래로 내려가면 Symbol(Symbol.iterator)가 있음, 따라서 Array 오브젝트는 이터러블 오브젝트 임\n\n  3. 또한 Symbol(Symbol.iterator)를 펼치면 __proto__에 Function 오브젝트 메소드가 연결되어 있음\n    - 즉, Symbol.iterator는 함수 임\n\n  4. Symbol.iterator가 함수 이므로 호출 할 수 있음\n*/</span></code></pre></div>\n<br>\n<h3 id=\"3-자체-오브젝트에는-없지만\" style=\"position:relative;\"><a href=\"#3-%EC%9E%90%EC%B2%B4-%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8%EC%97%90%EB%8A%94-%EC%97%86%EC%A7%80%EB%A7%8C\" aria-label=\"3 자체 오브젝트에는 없지만 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3). 자체 오브젝트에는 없지만</h3>\n<ul>\n<li>이터러블 오브젝트를 상속받아도 됨</li>\n<li>즉, <code class=\"language-text\">prototype chain(__proto__)</code>에 있으면 됨</li>\n<li>예를 들어, <code class=\"language-text\">Array</code> 오브젝트를 상속 받으면 이터러블 오브젝트가 됨</li>\n</ul>\n<br>\n<h2 id=\"2-이터러블-프로토콜\" style=\"position:relative;\"><a href=\"#2-%EC%9D%B4%ED%84%B0%EB%9F%AC%EB%B8%94-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C\" aria-label=\"2 이터러블 프로토콜 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 이터러블 프로토콜</h2>\n<h3 id=\"1-이터러블-프로토콜-개념\" style=\"position:relative;\"><a href=\"#1-%EC%9D%B4%ED%84%B0%EB%9F%AC%EB%B8%94-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C-%EA%B0%9C%EB%85%90\" aria-label=\"1 이터러블 프로토콜 개념 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1). 이터러블 프로토콜 개념</h3>\n<ul>\n<li>오브젝트가 반복할 수 있는 구조이어야 함</li>\n<li><code class=\"language-text\">Symbol.iterator</code>를 갖고 있어야 함</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// function values() { [native code] }</span></code></pre></div>\n<br>\n<h3 id=\"2-아래-빌트인-오브젝트는\" style=\"position:relative;\"><a href=\"#2-%EC%95%84%EB%9E%98-%EB%B9%8C%ED%8A%B8%EC%9D%B8-%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8%EB%8A%94\" aria-label=\"2 아래 빌트인 오브젝트는 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2). 아래 빌트인 오브젝트는</h3>\n<ul>\n<li>디폴트로 이터러블 프로토콜을 갖고 있음</li>\n<li>즉 <code class=\"language-text\">Symbol.iterator</code>를 갖고 있음 -<code class=\"language-text\">Array</code>, <code class=\"language-text\">Argument</code>, <code class=\"language-text\">String</code>, <code class=\"language-text\">TypedArray</code>, <code class=\"language-text\">Map</code>, <code class=\"language-text\">Set</code>, <code class=\"language-text\">DOM NodeList</code></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#1-%EC%9D%B4%ED%84%B0%EB%9F%AC%EB%B8%94-%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8\">1. 이터러블 오브젝트</a></p>\n<ul>\n<li><a href=\"#1-%EC%9D%B4%EB%9F%AC%ED%84%B0%EB%B8%94-%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8-%EA%B0%9C%EB%85%90\">1). 이러터블 오브젝트 개념</a></li>\n<li><a href=\"#2-%EC%9D%B4%ED%84%B0%EB%9F%AC%EB%B8%94-%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8-%EA%B5%AC%EC%A1%B0\">2). 이터러블 오브젝트 구조</a></li>\n<li><a href=\"#3-%EC%9E%90%EC%B2%B4-%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8%EC%97%90%EB%8A%94-%EC%97%86%EC%A7%80%EB%A7%8C\">3). 자체 오브젝트에는 없지만</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#2-%EC%9D%B4%ED%84%B0%EB%9F%AC%EB%B8%94-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C\">2. 이터러블 프로토콜</a></p>\n<ul>\n<li><a href=\"#1-%EC%9D%B4%ED%84%B0%EB%9F%AC%EB%B8%94-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C-%EA%B0%9C%EB%85%90\">1). 이터러블 프로토콜 개념</a></li>\n<li><a href=\"#2-%EC%95%84%EB%9E%98-%EB%B9%8C%ED%8A%B8%EC%9D%B8-%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8%EB%8A%94\">2). 아래 빌트인 오브젝트는</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"September 04, 2021","title":"이터러블 오브젝트, 프로토콜","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-iteration-2/"}},"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":"zoomkoding/zoomkoding-gatsby-blog"}}}}},"pageContext":{"slug":"/study-js-es6-iteration-1/","nextSlug":"/study-js-es6-arrowFunction-3/","prevSlug":"/study-js-es6-iteration-2/"}},"staticQueryHashes":["1073350324","2938748437"]}