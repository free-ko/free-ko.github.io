{"componentChunkName":"component---src-templates-blog-template-js","path":"/study-js-es6-number-Object-2/","result":{"data":{"cur":{"id":"c1c0eb43-f8ba-5d40-8eca-1b5b2be504a3","html":"<br>\n<h1 align=\"center\">\n  👋  진수, EPSILON: Number.EPSILON, 진수\n</h1>\n<br>\n<h2 id=\"1-numberepslon\" style=\"position:relative;\"><a href=\"#1-numberepslon\" aria-label=\"1 numberepslon permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Number.EPSLON</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">Number.EPSILON</code></p>\n<ul>\n<li>아주 작은 값</li>\n<li>2.220446049250313080847263361816E-16</li>\n<li>또는 2^-52</li>\n</ul>\n</li>\n<li>\n<p>사용 사례</p>\n<ul>\n<li>미세한 값 차이 형태</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> total <span class=\"token operator\">=</span> <span class=\"token number\">0.1</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>total<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0.3000000000000000004</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>total <span class=\"token operator\">===</span> <span class=\"token number\">0.3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></code></pre></div>\n<ol>\n<li>JS가 부동소수점 처리를 하기 때문(IEEE 74)</li>\n<li>이처럼 미세한 값 차이로 일치하지 않을 때 <code class=\"language-text\">EPSILON</code>을 사용</li>\n<li>미세한 값 차이를 같은 값으로 간주</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.2</span> <span class=\"token operator\">-</span> <span class=\"token number\">0.3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">&lt;</span> Number<span class=\"token punctuation\">.</span><span class=\"token constant\">EPSILON</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<ul>\n<li>값 차이가 <code class=\"language-text\">Number.EPSILON</code>보다 작으면 <code class=\"language-text\">true</code>를 반환`</li>\n<li><code class=\"language-text\">0 / 0</code>으로 <code class=\"language-text\">NaN</code>가 되는 것을 방지</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">/</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// NaN</span>\n\n<span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">+</span> Number<span class=\"token punctuation\">.</span><span class=\"token constant\">EPSILON</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">(0 + Number.EPSILON)</code> 처럼 작은 값을 더해 나누면 <code class=\"language-text\">0</code>이 됨</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"2-진수\" style=\"position:relative;\"><a href=\"#2-%EC%A7%84%EC%88%98\" aria-label=\"2 진수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 진수</h2>\n<ul>\n<li>\n<p>Binary(2진수)</p>\n<ul>\n<li><code class=\"language-text\">0b0101</code>, <code class=\"language-text\">0B0101</code> 형태로 작성</li>\n<li>숫자 <code class=\"language-text\">0</code> 다음에 <code class=\"language-text\">b/B</code> 작성하고 이어서 <code class=\"language-text\">0</code> 또는 <code class=\"language-text\">1</code>로 값을 작성</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> <span class=\"token number\">0b111</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 7</span>\n\n<span class=\"token comment\">// 1 + 2 + 4</span></code></pre></div>\n</li>\n<li>\n<p>Octal(8진수)</p>\n<ul>\n<li><code class=\"language-text\">0O0105</code> 형태로 작성</li>\n<li>숫자 <code class=\"language-text\">0</code> 다음에 영문 <code class=\"language-text\">o/O</code> 작성하고 이어서 <code class=\"language-text\">0~7</code>로 값을 작성</li>\n<li>ES3는 첫 자리에 영문 <code class=\"language-text\">o/O</code> 작성</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> <span class=\"token number\">0o1111</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1 + 8 + 64</span></code></pre></div>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1-numberepslon\">1. Number.EPSLON</a></li>\n<li><a href=\"#2-%EC%A7%84%EC%88%98\">2. 진수</a></li>\n</ul>\n</div>","excerpt":"1. Number.EPSLON  아주 작은 값 2.220446049250313080847263361816E-16 또는 2^-52 사용 사례 미세한 값 차이 형태 JS가 부동소수점 처리를 하기 때문(IEEE 74) 이처럼 미세한 값 차이로 일치하지 않을 때 을 사용 미세한 값 차이를 같은 값으로 간주 값 차이가 보다 작으면 를 반환` 으로 가 되는 것을 방지  처럼 작은 값을 더해 나누면 이 됨 2. 진수 Binary(2진수) ,  형태로 작성 숫자  다음에  작성하고 이어서  또는 로 값을 작성 Octal(8진수)  형태로 작성 숫자  다음에 영문  작성하고 이어서 로 값을 작성 ES3는 첫 자리에 영문  작성 1. Number.EPSLON 2. 진수","frontmatter":{"date":"September 16, 2021","title":"진수, EPSILON","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-number-Object-2/"}},"next":{"id":"ae2efbf2-370f-523a-a55c-9cda88814db9","html":"<br>\n<h1 align=\"center\">\n  👋  IEEE 754, 64비트 구성, 값을 구하는 방법, Number 상수\n</h1>\n<br>\n<h2 id=\"1-ieee-754\" style=\"position:relative;\"><a href=\"#1-ieee-754\" aria-label=\"1 ieee 754 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. IEEE 754</h2>\n<ul>\n<li>\n<p>IEEE (Institute of Electrical and Electronics Engineers)</p>\n<ul>\n<li>JS는 IEEE 754에 정의된 64비트 부동 소수점으로 수를 처리</li>\n<li>double-precision floating-point format numbers</li>\n<li>64비트로 최솟값과 최댓값을 처리</li>\n</ul>\n</li>\n<li>\n<p>정수와 실수를 구분하지 않음</p>\n<ul>\n<li>1을 1.0으로 처리</li>\n<li>1과 1.2를 더할 수 있음</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"2-64비트-구성\" style=\"position:relative;\"><a href=\"#2-64%EB%B9%84%ED%8A%B8-%EA%B5%AC%EC%84%B1\" aria-label=\"2 64비트 구성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 64비트 구성</h2>\n<ul>\n<li>\n<p>사인 비트</p>\n<ul>\n<li>63: 1비트</li>\n<li>값이 0이면 양수, 1이면 음수</li>\n</ul>\n</li>\n<li>\n<p>지수</p>\n<ul>\n<li>52 ~ 62 : 11비트</li>\n</ul>\n</li>\n<li>\n<p>가수</p>\n<ul>\n<li>0 ~51 : 52비트 + 1(사인 비트): 53비트</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"3-값을-구하는-방법\" style=\"position:relative;\"><a href=\"#3-%EA%B0%92%EC%9D%84-%EA%B5%AC%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"3 값을 구하는 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 값을 구하는 방법</h2>\n<ul>\n<li>비트 값은 <code class=\"language-text\">0</code> 아니면 <code class=\"language-text\">1</code></li>\n<li>\n<p>2^x승 값을 더해 값을 구함</p>\n<ul>\n<li>0비트 부터 1, 1, 1이면</li>\n<li>1(2^0) + 2(2^1) + 4 = 7</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"4-number-상수\" style=\"position:relative;\"><a href=\"#4-number-%EC%83%81%EC%88%98\" aria-label=\"4 number 상수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. Number 상수</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">safe integer</code>란 지수(e)를 사용하지 않고 나타낼 수 있는 값</p>\n<ul>\n<li>2의 64승이 아닌 2의 53승</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">Number.MAX_SAFE_INTEGER</code> : safe integer 최댓값</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Number<span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_SAFE_INTEGER</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">53</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 값이 동일 함</span>\n<span class=\"token comment\">// 9007199254740991</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">Number.MIN_SAFE_INTEGER</code> : safe integer 최솟값</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Number<span class=\"token punctuation\">.</span><span class=\"token constant\">MIN_SAFE_INTEGER</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">53</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 값이 동일 함</span>\n<span class=\"token comment\">// -9007199254740991</span></code></pre></div>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1-ieee-754\">1. IEEE 754</a></li>\n<li><a href=\"#2-64%EB%B9%84%ED%8A%B8-%EA%B5%AC%EC%84%B1\">2. 64비트 구성</a></li>\n<li><a href=\"#3-%EA%B0%92%EC%9D%84-%EA%B5%AC%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\">3. 값을 구하는 방법</a></li>\n<li><a href=\"#4-number-%EC%83%81%EC%88%98\">4. Number 상수</a></li>\n</ul>\n</div>","frontmatter":{"date":"September 15, 2021","title":"IEEE 754, 64비트 구성, 값을 구하는 방법, Number 상수","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-number-Object-1/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":"zoomkoding/zoomkoding-gatsby-blog"}}}}},"pageContext":{"slug":"/study-js-es6-number-Object-2/","nextSlug":"/study-js-es6-number-Object-1/","prevSlug":""}},"staticQueryHashes":["1073350324","2938748437"]}