{"componentChunkName":"component---src-templates-blog-template-js","path":"/study-js-functionalProgramming-5/","result":{"data":{"cur":{"id":"47a6080b-fbe1-5d63-8832-1bc37b170ba7","html":"<h1 id=\"️-복습\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%EB%B3%B5%EC%8A%B5\" aria-label=\"️ 복습 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>⭐️ 복습</h1>\n<ol>\n<li>액션</li>\n<li>사이드 이펙트를 발생시킴</li>\n<li><code class=\"language-text\">외부데이터</code>를 변경시키는 것</li>\n<li>\n<p>전역변수라고 <code class=\"language-text\">외부 데이터</code>라고 할 수 없음. 그래서 상황에 따라 확인해야 함</p>\n<ul>\n<li>ex) <code class=\"language-text\">window</code> 객체가 외부 데이터라고 생각할 수 있을까???</li>\n</ul>\n</li>\n<li>계산(순수함수)</li>\n<li>명시적인 입, 출력이 존재</li>\n<li>테스트 용이하며, 예측이 가능한 코드</li>\n<li>개발 피로를 낮춤</li>\n<li>데이터</li>\n<li>상수</li>\n<li>입력과 출력이 될 수 있는 것</li>\n<li>액션으로 확장가능</li>\n</ol>\n<br/>\n<h1 id=\"️-배운-내용\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%EB%B0%B0%EC%9A%B4-%EB%82%B4%EC%9A%A9\" aria-label=\"️ 배운 내용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️ 배운 내용</h1>\n<p>1.일급 개념</p>\n<ul>\n<li><code class=\"language-text\">함수의 인자나 값이 될 수 있는 것</code></li>\n<li>JS에서 가장 중요한 개념</li>\n<li>JS는 OOP가 가능하지만, JS는 OOP가 아님</li>\n<li>추상화</li>\n<li>어디서든 사용활 수 있도록 하는 과정</li>\n<li>\n<p>OOP 역사</p>\n<ul>\n<li>이분법적인 철학적 사고 ex) 외국인들은 <code class=\"language-text\">chair</code>라는 단어를 그냥 사용하지 않고 chaire에 무언가를 붙여서 사용(a chair, chairs) 즉, 하나의 추상화를 가지고 사용 용도에 따라 무언가를 추가해 사용 다시 말하면, 하나의 추상화 개념에서 <code class=\"language-text\">classfication</code> (분류) 할 수 있는 개념들이 탄생</li>\n</ul>\n</li>\n<li>\n<p>JS 정적 vs 동적</p>\n<ul>\n<li>JS의 큰 장점 중 하나는 <code class=\"language-text\">동적</code>이라는 것</li>\n<li>왜 JS는 <code class=\"language-text\">동적</code>???</li>\n<li>먼저 결론부터 말하자면, <strong>페이지/웹 앱의 서로 다른 상황에 서로 다른 화면을 보여줄 수 있고, 필요하면 새로운 콘텐츠를 생성할 수 있기 때문</strong></li>\n<li>그 전에 <code class=\"language-text\">정적 언어</code>는 무엇???</li>\n<li>컴파일러(빌드하지 않으면 컴퓨터가 읽지 못하는 것)</li>\n<li>런타임(<code class=\"language-text\">runExpection</code> 존재)과 컴파일(<code class=\"language-text\">compileException</code> 존재) 타임이 존재.</li>\n<li>정적언어의 단점은 수정 할 때마다 빌드를 해야함</li>\n<li>그러나 정적파일을 만들어서 올릴 경우 속도가 빠름</li>\n<li><code class=\"language-text\">동적 언어(인터프리터 언어)</code>는 무엇???(<code class=\"language-text\">unCompile</code>가 아님)</li>\n<li>스크립트 언어</li>\n<li>어떤 것을 <code class=\"language-text\">제어</code></li>\n<li>브라우저 기능을 제공하기 위한 언어</li>\n<li>이 때, <code class=\"language-text\">TS</code> 가 갑자기 부상한 이유는 협업과 클린코드가 중요해지기 때문이였습니다. 그 전에는 JS에 주석이 많았음</li>\n</ul>\n</li>\n<li>\n<p>트랜스 파일러</p>\n<ul>\n<li>JS에서만 사용</li>\n<li><code class=\"language-text\">Babel = 통합</code> cf) 바벨탑은 결국 쪼개지고, 그 때 민족의 언어가 많이 생겼다는 설 존재</li>\n<li><code class=\"language-text\">ES 최신 스펙</code>을 <strong>ES 낮은 버젼에서 사용할 수 있도록 변환하는 것</strong></li>\n<li>즉, 어디서든 JS 스펙을 사용할 수 있도록 통합하는 것</li>\n<li>ES 스펙이 등장한 이유</li>\n<li>다양한 브라우저가 저마다 기능이 있다보니, 개발자들이 대응하기 어려우짐</li>\n<li>그래서 다양한 브라우저 기능을 통합하는 명시적인 스펙이 등장</li>\n<li>Stage: 0 ~ 3, 3되면 안정화라고 생각해서 통합</li>\n<li>cf) 폴리필 - 바벨 없이 사용할 수 있는 개념\n6.컴파일러</li>\n<li>코드 자체를 변형</li>\n<li>인간이 짠 코드를 → 컴퓨터가 읽기 좋은 코드로 변환</li>\n<li>TS → JS가 컴파일러라고 하는게 이상함</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h1 id=\"️실습\" style=\"position:relative;\"><a href=\"#%EF%B8%8F%EC%8B%A4%EC%8A%B5\" aria-label=\"️실습 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>⭐️실습</h1>\n<ul>\n<li><code class=\"language-text\">forEach</code>를 통해, <code class=\"language-text\">Map, Filter, Reduce</code>를 만듦</li>\n</ul>\n<br/>\n<h3 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h3>\n<ul>\n<li><a href=\"https://github.com/FECrash/FunctionalProgramming\">함수형 프로그래밍 스터디</a></li>\n<li><a href=\"https://medium.com/@limsungmook/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%8A%94-%EC%99%9C-%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85%EC%9D%84-%EC%84%A0%ED%83%9D%ED%96%88%EC%9D%84%EA%B9%8C-997f985adb42\">JS는 왜 프로토타입을 선택했을까?</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>\n</div>","excerpt":"⭐️ 복습 액션 사이드 이펙트를 발생시킴 를 변경시키는 것 전역변수라고 라고 할 수 없음. 그래서 상황에 따라 확인해야 함 ex)  객체가 외부 데이터라고 생각할 수 있을까??? 계산(순수함수) 명시적인 입, 출력이 존재 테스트 용이하며, 예측이 가능한 코드 개발 피로를 낮춤 데이터 상수 입력과 출력이 될 수 있는 것 액션으로 확장가능 ✏️ 배운 내용 1.일급 개념  JS에서 가장 중요한 개념 JS는 OOP가 가능하지만, JS는 OOP가 아님 추상화 어디서든 사용활 수 있도록 하는 과정 OOP 역사 이분법적인 철학적 사고 ex) 외국인들은 라는 단어를 그냥 사용하지 않고 chaire에 무언가를 붙여서 사용(a chair, chairs) 즉, 하나의 추상화를 가지고 사용 용도에 따라 무언가를 추가해 사용 다시 말하면, 하나의 추상화 개념에서  (분류) 할 수 있는 개념들이 탄생 JS 정적 vs 동적 JS의 큰 장점 중 하나는 이라는 것 왜 JS는 ??? 먼저 결론부터 말하자면, 페이지/…","frontmatter":{"date":"January 29, 2023","title":"함수형 프로그래밍 - 스터디 5주차","categories":"Study","author":"Kay","emoji":"👨‍💻"},"fields":{"slug":"/study-js-functionalProgramming-5/"}},"next":{"id":"2f7f4b8a-672b-5c27-93bd-2f2f6d7ed6be","html":"<h1 id=\"facts\" style=\"position:relative;\"><a href=\"#facts\" aria-label=\"facts permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Facts</h1>\n<ul>\n<li>ORM에 대한 개념이 궁금해졌다.</li>\n</ul>\n<br/>\n<h1 id=\"feelings\" style=\"position:relative;\"><a href=\"#feelings\" aria-label=\"feelings permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Feelings</h1>\n<ul>\n<li>회사 프로젝트 내부에 ORM이 존재했는데, ORM에 대해 자세히 알아보지 않았다. 부끄러웠다.</li>\n</ul>\n<br/>\n<h1 id=\"findings\" style=\"position:relative;\"><a href=\"#findings\" aria-label=\"findings permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Findings</h1>\n<ul>\n<li>\n<p>개념</p>\n<ul>\n<li>ORM(Object Relational Model)은 사물을 추상화시켜 이해하려는 OOP적 사고방식과 DataModel을 정형화하여 관리하는 RDB 사이를 연결할 계층의 역할로 제시된 패러다임으로 RDB의 모델을 OOP에 Entity 형태로 투영시키는 방식을 사용한다.</li>\n<li>즉, Object와 DB간에 연결 역할을 해주는녀석이 ORM이다.</li>\n</ul>\n</li>\n<li>\n<p>등장 배경</p>\n<ul>\n<li>ORM을 사용하지 않을 경우 개발자가 개발 하기위해 DB에 접근하기 위해서는 SQL Query문을 직접 만들었다.</li>\n<li>SQL문법을 알고 있어야하기 때문에 쿼리문 작성시간이 오래걸려 개발이 지체되는 문제가 발생했다.</li>\n<li>개발 코드와 DB가 서로 종속되는 문제가 생겨나기 시작했다.</li>\n<li>이러한 문제점을 해결하기 위해 ORM이 등장하였고 ORM이 등장함으로서 SQL Query 문법에서 비교적 자유로워졌으며 개발 코드와 DB를 분리함으로써 객체지향의 의도에 부합하게 되었다.</li>\n</ul>\n</li>\n<li>\n<p>ORM 사용 장점과 단점</p>\n<ul>\n<li>장점</li>\n<li>선언문, 할당, 종료 등과같은 부수적인 코드가 사라짐으로써 개발의 생산성 향상.</li>\n<li>명확한 쿼리 (버그와 실수 감소)</li>\n<li>코드그 간결하고 직관이기 때문에 가독성을 높여준다.</li>\n<li>DB 의존성 감소</li>\n<li>특정 Database에 종속적이지 않다.</li>\n<li>개발자는 DB에 상관없이 Object에만 집중할 수 있다.</li>\n<li>단점</li>\n<li>튜닝의 어려움</li>\n<li>미세한 수정 및 디버그하기가 상대적으로 어렵다</li>\n<li>복잡한 쿼리작성의 문제</li>\n<li>ORM이 지정해 놓은 명령만 내릴 수 있다</li>\n<li>DB에 직접 명령을 내리지 않고 한단계 거쳐가기 때문에 Raw쿼리에 비해 느린 실행속도 발생</li>\n</ul>\n</li>\n</ul>\n<br>\n<h3 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h3>\n<p><a href=\"https://kyungyeon.dev/posts/3\">ORM Node.js에서 사용하기</a></p>","frontmatter":{"date":"January 29, 2023","title":"TIL - 230129","categories":"TIL","author":"Kay","emoji":"🤔"},"fields":{"slug":"/til-230129/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":"zoomkoding/zoomkoding-gatsby-blog"}}}}},"pageContext":{"slug":"/study-js-functionalProgramming-5/","nextSlug":"/til-230129/","prevSlug":""}},"staticQueryHashes":["1073350324","2938748437"]}