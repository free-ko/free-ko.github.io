{"componentChunkName":"component---src-templates-blog-template-js","path":"/study-cs-HTTP-9/","result":{"data":{"cur":{"id":"0f760536-60c0-5a41-b0ca-e5650db11815","html":"<br>\n<h1 align=\"center\">\n  👋  HTTP 메서드 - 속성\n</h1>\n<br>\n<h2 id=\"1안전\" style=\"position:relative;\"><a href=\"#1%EC%95%88%EC%A0%84\" aria-label=\"1안전 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.안전</h2>\n<ul>\n<li>호출해도 리소스를 변경하지 않는다.</li>\n<li>Q) 그래도 계속 호출해서, 로그 같은게 쌓여서 장애가 발생하면요?\n—> 안전은 해당 리소스만 고려한다. 그런 부분까지 고려하지 않는다.</li>\n</ul>\n<br>\n<h2 id=\"2멱등\" style=\"position:relative;\"><a href=\"#2%EB%A9%B1%EB%93%B1\" aria-label=\"2멱등 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.멱등</h2>\n<ul>\n<li>한 번 호출하든, 두 번 호출하든 100번 호출하든 결과가 똑같다.</li>\n<li>\n<p>멱등 메서드</p>\n<ol>\n<li>GET : 한 번 조회하든, 두 번 조회하든 같은 결과가 조회된다.</li>\n<li>PUT : 결과를 대체한다. 따라가 같은 요청을 여러번 해도 최종 결과는 같다.</li>\n<li>DELETE : 결과를 삭제한다. 같은 요청을 여러번 해도 삭제된 결과는 똑같다.</li>\n<li>POST : 멱등이 아니다!!! 두 번 호출하면 같은 결제가 중복해서 발생할 수 있다.</li>\n</ol>\n</li>\n<li>\n<p>활용</p>\n<ol>\n<li>자동 복구 메커니즘</li>\n<li>서버가 TIMEOUT 등으로 정상 응답을 못주었을 때, 클라이언트가 같은 요청을 다시 해도 되는가에 대한 판단 근거가 됨</li>\n</ol>\n</li>\n<li>\n<p>재 요청 중간에 다른 곳에서 리소스를 변경해버리면?</p>\n<ol>\n<li>사용자1 : GET —> userName: A, age: 20</li>\n<li>사용자2 :PUT —> userName: A, age: 30</li>\n<li>사용자1 : GET —> userName: A, age: 30 —> 사용자2의 영향으로 바뀐 데이터 조회</li>\n</ol>\n<p>—> 멱등은 외부 요인으로 중간에 리소스가 변경되는 것 까지는 고려하지 않는다.</p>\n</li>\n</ul>\n<br>\n<h2 id=\"3캐시가능\" style=\"position:relative;\"><a href=\"#3%EC%BA%90%EC%8B%9C%EA%B0%80%EB%8A%A5\" aria-label=\"3캐시가능 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.캐시가능</h2>\n<ul>\n<li>응답 결과 리소스를 캐시해서 사용해도 되는가?</li>\n<li>GET, HEAD, POST, PATCH 캐시가능</li>\n<li>\n<p>실제로는 GET, HEAD 정도만 캐시로 사용</p>\n<ul>\n<li>POST, PATCH는 본문 내용까지 캐시 키로 고려해야 하는데, 구현이 쉽지 않음</li>\n</ul>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1%EC%95%88%EC%A0%84\">1.안전</a></li>\n<li><a href=\"#2%EB%A9%B1%EB%93%B1\">2.멱등</a></li>\n<li><a href=\"#3%EC%BA%90%EC%8B%9C%EA%B0%80%EB%8A%A5\">3.캐시가능</a></li>\n</ul>\n</div>","excerpt":"1.안전 호출해도 리소스를 변경하지 않는다. Q) 그래도 계속 호출해서, 로그 같은게 쌓여서 장애가 발생하면요?\n—> 안전은 해당 리소스만 고려한다. 그런 부분까지 고려하지 않는다. 2.멱등 한 번 호출하든, 두 번 호출하든 100번 호출하든 결과가 똑같다. 멱등 메서드 GET : 한 번 조회하든, 두 번 조회하든 같은 결과가 조회된다. PUT : 결과를 대체한다. 따라가 같은 요청을 여러번 해도 최종 결과는 같다. DELETE : 결과를 삭제한다. 같은 요청을 여러번 해도 삭제된 결과는 똑같다. POST : 멱등이 아니다!!! 두 번 호출하면 같은 결제가 중복해서 발생할 수 있다. 활용 자동 복구 메커니즘 서버가 TIMEOUT 등으로 정상 응답을 못주었을 때, 클라이언트가 같은 요청을 다시 해도 되는가에 대한 판단 근거가 됨 재 요청 중간에 다른 곳에서 리소스를 변경해버리면? 사용자1 : GET —> userName: A, age: 20 사용자2 :PUT —> userName: …","frontmatter":{"date":"December 20, 2021","title":"HTTP - 4.HTTP 메서드(4)","categories":"CS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-cs-HTTP-9/"}},"next":{"id":"4a016ae3-8359-5e18-8115-ae9812494bfb","html":"<br>\n<h2 id=\"1-새로운-도전\" style=\"position:relative;\"><a href=\"#1-%EC%83%88%EB%A1%9C%EC%9A%B4-%EB%8F%84%EC%A0%84\" aria-label=\"1 새로운 도전 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. <strong>새로운 도전💡</strong></h2>\n<p>2020년 12월 중순 <code class=\"language-text\">프론트 엔드</code> 개발자로 취업을 했다.\n모든 것이 낯설고, 두렵고, 조급했다.\n늦은 나이에 개발자로 커리어를 시작한다는 생각에 사로 잡혀있었다.\n다행히 회사에 좋은 사람들을 만나 좋은 경험을 할 수 있었다.</p>\n<br>\n<h2 id=\"2-실력을-쌓기-위해\" style=\"position:relative;\"><a href=\"#2-%EC%8B%A4%EB%A0%A5%EC%9D%84-%EC%8C%93%EA%B8%B0-%EC%9C%84%ED%95%B4\" aria-label=\"2 실력을 쌓기 위해 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. <strong>실력을 쌓기 위해👍</strong></h2>\n<p>그래도 더 성장하고, 나아지고 싶은 생각에 주말에도 회사에 나와 개인 공부를 하였다.\n특히 <code class=\"language-text\">정보처리 기사</code>를 취득하기 위해 많이 노력을 하였다. 왠지 이 자격증이 개발자로써 갖추어야 할 기본 소양을 증명하는 것으로 여겨\n이것 조차도 못 취득하면 나는 개발자로써 커리어를 쌓을 수 없을 것 같은 압박감이 있었다.(물론 개인적인 생각이다)\n감사하게 올 해 4회차 시험에서 턱걸이로 자격증을 취득하게 되었다.(진짜 2022년에 다시 공부할 생각이였는데 너무 감사하게 붙었다.)\n그리고 취업 준비를 하면서 공부한 HTML, CSS, JS, React 학습했지만 실무에서 턱없이 능력이 부족하다는 사실을 인지하게 되었다.\n그래서 업무에 필요한 능력을 쌓기위해 회사에 온라인 강의와 책을 요청하여 공부를 진행하였고(Angular, Ionic 프레임워크, 리팩토링 책)\n기본을 제대로 쌓기 위해 JS, TS관련 공부도 틈틈히 하며 1일 1커밋을 꾸준히 하였다. 마지막으로 개인 블로그를 만들어 학습한 내용과 독서한 책들에 대한 서평과 회고 글을 작성하는 공간도 만들었다.\n다시 한번 나의 실력을 쌓기위해 노력한 것들을 정리해본다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token number\">1.</span> 정보처리 기사 취득 <span class=\"token operator\">--</span><span class=\"token operator\">></span> 개발을 하면서 단순히 코드만 작성하는 것이 아닌 개발 업무의 배경지식이 생김\n<span class=\"token number\">2.</span> Ionic <span class=\"token operator\">+</span> Angular 강의 <span class=\"token function\">학습</span><span class=\"token punctuation\">(</span>by Udemy<span class=\"token punctuation\">)</span> <span class=\"token operator\">--</span><span class=\"token operator\">></span> 현재 진행하고 있는 프로젝트를 최적화 하는 방법 학습하여 적용 중\n<span class=\"token number\">3.</span> <span class=\"token constant\">HTTP</span> 강의 학습\n    <span class=\"token operator\">-</span> 모든 개발자를 위한 <span class=\"token constant\">HTTP</span> 웹 지식 <span class=\"token function\">기본</span><span class=\"token punctuation\">(</span>by 김영한님<span class=\"token punctuation\">)</span>  <span class=\"token operator\">--</span><span class=\"token operator\">></span> <span class=\"token constant\">API</span>에 사용된 Header 의미와 더 나아가 클라이언트와 서버간의 상호작용을 알게 됨 그리고 <span class=\"token constant\">API</span> 설계에 관심이 생김\n<span class=\"token number\">4.</span> 알고리즘 강의 학습\n    <span class=\"token operator\">-</span> <span class=\"token constant\">JS</span> 알고리즘 문제 <span class=\"token function\">풀이</span><span class=\"token punctuation\">(</span>by 김태원님<span class=\"token punctuation\">)</span> <span class=\"token operator\">--</span><span class=\"token operator\">></span> 문제를 해결하기 위한 사고하는 연습을 하게 됨 더 나아가 현업에서 특정 문제에 직면했을 때<span class=\"token punctuation\">,</span> 알고리즘 문제 푸는 것처럼 문제를 작게 정의해 해결하는 연습이 많이 도움이 되었음\n<span class=\"token number\">5.</span> JavaScript 강의 학습\n    <span class=\"token operator\">-</span> <span class=\"token constant\">JS</span> 근본 핵심 <span class=\"token function\">이해</span><span class=\"token punctuation\">(</span>by 김영보님<span class=\"token punctuation\">)</span> <span class=\"token operator\">--</span><span class=\"token operator\">></span> <span class=\"token constant\">JS</span>의 언어 근본에 대해 알게 되었으며 <span class=\"token constant\">JS</span>의 특징을 파악해 현업에 개발을 진행할 수 있었음\n    <span class=\"token operator\">-</span> <span class=\"token constant\">JS</span> <span class=\"token constant\">ES6</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>by 김영보님<span class=\"token punctuation\">)</span>  <span class=\"token operator\">--</span><span class=\"token operator\">></span> 현업에서 자주 사용하는 문법들에 대해 자세히 알게 되었음\n    <span class=\"token operator\">-</span> <span class=\"token constant\">JS</span> <span class=\"token constant\">ES6</span><span class=\"token operator\">+</span><span class=\"token function\">심화</span><span class=\"token punctuation\">(</span>by 김영보님<span class=\"token punctuation\">)</span> <span class=\"token operator\">--</span><span class=\"token operator\">></span> <span class=\"token constant\">JS</span>의 문법을 깊게 다루어보는 좋은 경험이였음<span class=\"token punctuation\">,</span> 이 학습을 통해 실무에서 코드를 작성할 때 <span class=\"token constant\">JS</span>의 원리를 한 번 더 생각하며 <span class=\"token string\">'이 코드가 정말 최적화 된 코드인가?'</span>라는 질문을 스스로 하는 습관을 얻음\n<span class=\"token number\">6.</span> TypeScripte 강의 학습\n    <span class=\"token operator\">-</span> 타입스크립트 입문 <span class=\"token operator\">-</span> 기초부터 <span class=\"token function\">실전까지</span><span class=\"token punctuation\">(</span>by 캡틴판교님<span class=\"token punctuation\">)</span> <span class=\"token operator\">--</span><span class=\"token operator\">></span> <span class=\"token constant\">TS</span>의 기본 문법을 제대로 학습하는 시간을 갖으며 진행하는 프로젝트에 <span class=\"token constant\">TS</span>를 적용하였음\n    <span class=\"token operator\">-</span> 타입스크립트 <span class=\"token operator\">+</span> 객체지향 프로그래밍 <span class=\"token function\">마스터</span><span class=\"token punctuation\">(</span>by 드림코딩<span class=\"token punctuation\">)</span> <span class=\"token operator\">--</span><span class=\"token operator\">></span> <span class=\"token constant\">TS</span>의 기본 문법과 <span class=\"token constant\">OOP</span>에 대한 학습을 통해 실무 프로젝트에 <span class=\"token constant\">OOP</span>와 <span class=\"token constant\">TS</span>를 정교하게 적용하는 연습을 함<span class=\"token punctuation\">,</span> 또한 Ionic <span class=\"token operator\">+</span> Angular <span class=\"token constant\">OOP</span> 기본 구조를 이해하며 코드를 리팩토링함\n    <span class=\"token operator\">-</span> <span class=\"token constant\">JS</span> <span class=\"token operator\">&amp;</span> <span class=\"token constant\">TS</span> <span class=\"token function\">Essential</span><span class=\"token punctuation\">(</span>by 김민태님<span class=\"token punctuation\">)</span> <span class=\"token operator\">--</span><span class=\"token operator\">></span> <span class=\"token constant\">JS</span>와 <span class=\"token constant\">TS</span>를 비교하며 장단점을 알게 되었음<span class=\"token punctuation\">,</span> 또한 실무에 필요한 사고에 대해 학습하게 됨\n<span class=\"token number\">7.</span> 테스트 코드 학습\n    <span class=\"token operator\">-</span> 유닛 테스트와 <span class=\"token constant\">TDD</span><span class=\"token punctuation\">(</span>by 드림코딩<span class=\"token punctuation\">)</span> <span class=\"token operator\">--</span><span class=\"token operator\">></span> 유닛 테스트와 <span class=\"token constant\">TDD</span>에 대해 학습하게 되었으며 실무에 적용 중</code></pre></div>\n<br>\n<h2 id=\"3-나의-작업을-돌아보며🧑\" style=\"position:relative;\"><a href=\"#3-%EB%82%98%EC%9D%98-%EC%9E%91%EC%97%85%EC%9D%84-%EB%8F%8C%EC%95%84%EB%B3%B4%EB%A9%B0%F0%9F%A7%91\" aria-label=\"3 나의 작업을 돌아보며🧑 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. <strong>나의 작업을 돌아보며🧑‍💻</strong></h2>\n<p>2020년 12월 중순 부터 ~ 2021년 12월 까지 자사 서비스에 다양한 기능 추가와 UI/UX 업데이트 작업을 담당해왔다.\n이때까지 작업을 대략적으로 나열해보면 다음과 같다.</p>\n<ul>\n<li>검색 기능 및 페이지 개발(Elastic Search 적용)</li>\n<li>쇼핑 페이지 개발</li>\n<li>Lazy Image 로딩 영역 개발(앱 모든 페이지)</li>\n<li>앱 최적화 작업(빌드 용량 줄이기) : 빌드 시 불필요한 작업 정리</li>\n<li>UI관련 HTML &#x26; CSS 코드 리팩토링(유지 보수 및 확장을 위해)</li>\n<li>사용자 클릭 Log 셋팅(Firebase)</li>\n<li>정부 지원금 검색 기능 개발</li>\n<li>지자체, 정부 지원금 검색 결과 페이지 개발</li>\n<li>지역 게시판 결과 페이지 개발</li>\n<li>카카오 우편 검색 API, GPS API 사용하여 사용자 위치 정보 자동 셋팅 기능 개발</li>\n<li>가족 정보 입력 페이지 개발</li>\n<li>가족 정보와 사용자 정보에 따라 지자체, 정부기업, 게시판 결과 페이지 한 꺼번에 보여질 수 있도록 페이지 개발</li>\n</ul>\n<p>위 작업을 하면서 신입임에도 불구하고, 여러 이슈를 주도적으로 이끌어 가는 경험을 하게 되었다.\n디자인팀과 데이터 팀, 백엔드 팀과 많은 회의와 협업을 통해 기존의 앱을 조금 더 개선해 나아가는 경험이 나에게 있어서 새롭고 너무나 흥미로웠다.\n물론 크고 작은 문제에 직면할 때면, 굉장히 초조해지고 어찌할 줄 몰라 답답해 한 적이 너무나 많았지만, 이것 또한 서비스를 개발하면서 값진 경험이였다.</p>\n<br>\n<h2 id=\"4-독서-목표-회고\" style=\"position:relative;\"><a href=\"#4-%EB%8F%85%EC%84%9C-%EB%AA%A9%ED%91%9C-%ED%9A%8C%EA%B3%A0\" aria-label=\"4 독서 목표 회고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. <strong>독서 목표 회고📕</strong></h2>\n<p>2021년 매 달 비개발 1권, 개바 관련 1권을 읽고 서평을 블로그에 작성하기로 다짐을 했지만, 독서만 하고 서평을 제대로 하지 못했다.\n이 점을 많이 반성한다. 그래서 올 해는 반드시 책을 읽으면 짧으더라도 무조건 블로그에 글로 작성할 생각이다. 요즘 특히 아무 생각없이 행동하는 것이 얼마나 무서운 것인지 다시 한번 생각해 보았다.\n이렇게 아무 생각없이 스스로 ‘나는 잘하고 있다’라고 착각 속에 빠져 나이만 들면 이건 눈 감고 지옥으로 들어가는 것과 머가 다른가…\n그러니 정신 똑바로 차리고 의식적으로, 주도적으로 행동하는 습관을 만들고 행해야 겠다.\n특히 기록하고, 반성하는 습관을 체화해서 원하는 목표에 도달 할 수 있도록 해야 겠다.\n밑에는 내가 2021년에 읽은 책들이다.</p>\n<ol>\n<li>\n<p>개발 관련</p>\n<ul>\n<li>실용주의 프로그래머</li>\n<li>프로그래머의 길, 멘토에게 묻다</li>\n<li>코딩진로</li>\n<li>프로그래머로 사는 법</li>\n<li>소프트웨어 장인</li>\n<li>JS 핵심가이드</li>\n<li>읽기 좋은 JS 코딩 기법</li>\n<li>함께 자라기, 애자일로 가는 길</li>\n</ul>\n</li>\n<li>\n<p>비 개발 관련</p>\n<ul>\n<li>생각하는 늑대 타스케</li>\n<li>말의 품격(2번 읽음)</li>\n<li>100세 철학자의 사랑 이야기</li>\n<li>있는 그대로 살아도 괜찮아</li>\n<li>마음 챙김</li>\n<li>인생의 마지막 순간에서</li>\n<li>러브팩츄얼리</li>\n<li>결혼학개론</li>\n<li>일취월장</li>\n<li>혼돈의 시대, 리더의 탄생</li>\n<li>초 생산성</li>\n<li>성장을 꿈꾸는 너에게</li>\n<li>인생은 실전이다</li>\n<li>디자인의 디자인</li>\n<li>자존감 수업</li>\n</ul>\n</li>\n</ol>\n<p>개발 관련 총 <code class=\"language-text\">8</code>권, 비 개발 관련 총 <code class=\"language-text\">15</code>권 그래서 2021년 총 읽은 책 <code class=\"language-text\">23</code>권이다.\n개발자로써 개발 관련 책이 어려운건 알지만, 어려워도 꾸준히 제대로 읽는 연습을 2022년에 해야 겠다.</p>\n<br>\n<h2 id=\"5-운동-회고\" style=\"position:relative;\"><a href=\"#5-%EC%9A%B4%EB%8F%99-%ED%9A%8C%EA%B3%A0\" aria-label=\"5 운동 회고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. <strong>운동 회고🏃</strong></h2>\n<p>2021년 3월 부터 헬스장을 다니기 시작했고 조금 더 제대로 운동을 하고 싶어서 난생 처음 P.T를 수업을 받게 되었다.\n물론 그 전에도 꾸준히 스스로 운동을 하였지만 P.T 수업을 통해 정확한 자세와 P.T 선생님의 피드백이 얼마나 중요한지 다시 알게 되었으며\n운동 뿐만아니라, 일을 할 때에도 좋은 피드백과 방법이 빠르게 성장할 수 있음을 다시 한번 깨닫게 되었다.\n운동을 하면서 잡생각도 사라지고 눈 앞에 내가 원하는 몸을 가지신 형님(나보다 몸이 좋으면 다 형님들이다)들이 많아 좋은 자극도 되어서 운동을 더 열심히 하게 된다.\n그러나 요즘 날씨가 추워져서 그런가 몸에 힘도 없고 내가 제대로 하고 있는지 의심하는 시간들이 많아 졌다.\n그래서 유튜브 영상도 보면서 다시 한번 동기부여도 받고 운동할 때 많이 하는 것보다 제대로 할려고 노력을 하고 있다.\n내년에도 꾸준히 운동을 해 원하는 몸을 갖을 것이다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1-%EC%83%88%EB%A1%9C%EC%9A%B4-%EB%8F%84%EC%A0%84\">1. <strong>새로운 도전💡</strong></a></li>\n<li><a href=\"#2-%EC%8B%A4%EB%A0%A5%EC%9D%84-%EC%8C%93%EA%B8%B0-%EC%9C%84%ED%95%B4\">2. <strong>실력을 쌓기 위해👍</strong></a></li>\n<li><a href=\"#3-%EB%82%98%EC%9D%98-%EC%9E%91%EC%97%85%EC%9D%84-%EB%8F%8C%EC%95%84%EB%B3%B4%EB%A9%B0%F0%9F%A7%91\">3. <strong>나의 작업을 돌아보며🧑‍💻</strong></a></li>\n<li><a href=\"#4-%EB%8F%85%EC%84%9C-%EB%AA%A9%ED%91%9C-%ED%9A%8C%EA%B3%A0\">4. <strong>독서 목표 회고📕</strong></a></li>\n<li><a href=\"#5-%EC%9A%B4%EB%8F%99-%ED%9A%8C%EA%B3%A0\">5. <strong>운동 회고🏃</strong></a></li>\n<li><a href=\"#6-2022%EB%85%84-%EB%AA%A9%ED%91%9C\">6. <strong>2022년 목표🌈</strong></a></li>\n</ul>\n</div>\n<br>\n<h2 id=\"6-2022년-목표\" style=\"position:relative;\"><a href=\"#6-2022%EB%85%84-%EB%AA%A9%ED%91%9C\" aria-label=\"6 2022년 목표 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. <strong>2022년 목표🌈</strong></h2>\n<ol>\n<li>\n<p>업무</p>\n<ul>\n<li>TDD 적용</li>\n<li>프로젝트 리팩토링 : 디렉토리 구조, MVVM, MVC 등 패턴 적용, 타입 명시하여 모든 페이지에 적용</li>\n<li>지금까지 개발 한 기능을 통해 얼마나 앱에 영향을 주었는지 파악</li>\n<li>Anuglr, Ionic 학습 하여 프로젝트에 최적화하여 적용하기</li>\n</ul>\n</li>\n<li>\n<p>학습</p>\n<ul>\n<li>TIL 1일 1커밋</li>\n<li>TDD 학습하여 실무에 적용</li>\n<li>JS, TS 학습하여 실무에 적용</li>\n<li>React 개인프로젝트 진행(Store에 배포)</li>\n<li>백엔드 개발 경험</li>\n<li>FE 면접 관련 내용 학습 후 블로그에 정리</li>\n<li>JS 알고리즘 학습 후 기업 코딩 테스트 도전</li>\n</ul>\n</li>\n<li>\n<p>운동</p>\n<ul>\n<li>오전, 저녁 운동 타임 늘리기</li>\n</ul>\n</li>\n<li>\n<p>독서</p>\n<ul>\n<li>개발, 비 개발 한달에 1권씩 읽고 블로그에 서평 작성</li>\n</ul>\n</li>\n</ol>","frontmatter":{"date":"December 19, 2021","title":"2021년을 되돌아보며","categories":"Log","author":"우기","emoji":"🔥"},"fields":{"slug":"/reflect-2021/"}},"prev":{"id":"7199c4e1-f5e7-51b2-8a14-9fc1db5cc9ab","html":"<br>\n<h1 align=\"center\">\n  👋  Promise -  all(), race()\n</h1>\n<br>\n<h2 id=\"1-all\" style=\"position:relative;\"><a href=\"#1-all\" aria-label=\"1 all permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. all()</h2>\n<ul>\n<li>\n<p>파라미터의 모든 <code class=\"language-text\">Promise</code> 처리를 완료했을 때</p>\n<ul>\n<li><code class=\"language-text\">then()</code> 의 핸들러 함수를 실행함</li>\n<li><code class=\"language-text\">Promise.all()</code> 형태로 작성</li>\n</ul>\n</li>\n<li>\n<p>파라미터를 이터러블로 작성함</p>\n<ul>\n<li>작성한 순서로 <code class=\"language-text\">Promise</code> 인스턴스 생성</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">order</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">delay</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'실행자:'</span><span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token function\">order</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">order</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">order</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">param</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'then:'</span> <span class=\"token operator\">+</span> param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1. Promise.all([order(500), order(300), order(100)]) all() 파라미터를 이터러블로 작성했음, 파라미터에 작성한 순서로 order() 함수를 호출하며 Promise 인스턴스를 생성하여 반환함</span>\n<span class=\"token comment\">// 2. setTimeout(() => {...}, delay) setTimeout()의 두 번째 파라미터 delay는 지연 시간으로 값의 단위는 밀리초임</span>\n<span class=\"token comment\">// 3. 따라서, setTimeout()의 지연 시간이 짧은 순서인 100, 300, 500 순서로 resolve(dealy)를 실행하지만 실행할 때마다 아래의 then()을 호출하지 않고 3개를 모두 실행한 후에 then()을 한번만 호출함</span>\n<span class=\"token comment\">// 4. 이것이 all() 함수의 특징임</span>\n<span class=\"token comment\">// 5. then((param) => consoel.log(\"then:\" + param)); 'then'처럼 resolve(dealy)의 파라미터 값을 배열로 만들어 param 파라미터에 설정함</span>\n<span class=\"token comment\">// 6. 이때, resolve(delay)가 실행된 순서가 아니라 all()의 파라미터에 작성한 순서로 값을 설정함</span>\n<span class=\"token comment\">// 7. resolve() 실행 순서는 100, 300 500이지만 결과는 500, 300, 100이 출력됨</span>\n\n<span class=\"token comment\">// [실행결과]</span>\n<span class=\"token comment\">// 실행자: 100</span>\n<span class=\"token comment\">// 실행자: 300</span>\n<span class=\"token comment\">// 실행자: 500</span>\n<span class=\"token comment\">// then: 500, 300, 100실행자에서 실패가 발생했을 때</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">reject()</code> 가 발생한 시점에 <code class=\"language-text\">then()</code>을 실행</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">order</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">delay</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    dealy <span class=\"token operator\">===</span> <span class=\"token number\">300</span> <span class=\"token operator\">?</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>dealy<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token function\">order</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">order</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">order</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n<span class=\"token punctuation\">(</span><span class=\"token parameter\">param</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'성공:'</span> <span class=\"token operator\">+</span> param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token parameter\">param</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'실패:'</span> <span class=\"token operator\">+</span> param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1. reject()가 있으며 reject()가 발생하면 처리가 앞 코드와 다름</span>\n<span class=\"token comment\">// 2. delay === 300 ? reject(delay) : resolve(delay); 설명을 위해 order(300)일 때 reject(delay)가 실행되도록 했음</span>\n<span class=\"token comment\">// 3. 처음 resolve(100)이 실행되며 100이 출력됨</span>\n<span class=\"token comment\">// 4. 이어서 reject(300)이 실행되며 300이 출력됨</span>\n<span class=\"token comment\">// 5. 또한 then()의 두 번째 파라미터 함수가 호출되어 \"실패:300\"이 출력됨 reject()가 발생했을 때 전체가 끝나지 않음</span>\n<span class=\"token comment\">// 6. resolve(500)이 실행되며 500이 출력됨</span>\n<span class=\"token comment\">// 7. 앞 코드에서는 3개 모두가 끝나면 all() 파라미터에 작성한 순서로 값을 출력했는데 여기서는 출력하지 않음</span>\n<span class=\"token comment\">// 8. all()은 이렇게 하나라도 reject()가 발생하면 then()의 첫 번째 파라미터 함수를 실행하지 않음</span>\n<span class=\"token comment\">// 9. 이것이 all()의 또 하나의 특징</span>\n\n<span class=\"token comment\">// [실행결과]</span>\n<span class=\"token comment\">// 100</span>\n<span class=\"token comment\">// 300</span>\n<span class=\"token comment\">// 실패: 300</span>\n<span class=\"token comment\">// 500</span></code></pre></div>\n</li>\n</ul>\n<br>\n<h2 id=\"2-race\" style=\"position:relative;\"><a href=\"#2-race\" aria-label=\"2 race permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. race()</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">resolve(), reject()</code> 에 관계없이 처음 한 번만 <code class=\"language-text\">then()</code> 을 실행하고 더 이상 실행하지 않음</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">order</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">delay</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">race</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token function\">order</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">order</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">order</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">param</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'then:'</span> <span class=\"token operator\">+</span> param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1. Promise.race([order(500), order(100), order(300)]) race()의 파라미터 순서로 order()를 호출함</span>\n<span class=\"token comment\">// 2. 그러면 결과는 100,300,500 순서로 resolve(delay)가 실행됨</span>\n<span class=\"token comment\">// 3. 그런데 order(100)일 때, 처음 한 번만 then()의 핸들러 함수를 실행하고 다음은 실행하지 않음 그래서 \"then:100\"만 출력됨</span>\n<span class=\"token comment\">// 4. 이것이 race()의 특징</span>\n\n<span class=\"token comment\">// 실행결과</span>\n<span class=\"token comment\">// 100</span>\n<span class=\"token comment\">// then: 100</span>\n<span class=\"token comment\">// 300</span>\n<span class=\"token comment\">// 500</span></code></pre></div>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1-all\">1. all()</a></li>\n<li><a href=\"#2-race\">2. race()</a></li>\n</ul>\n</div>","frontmatter":{"date":"December 20, 2021","title":"Promise - all(), race()","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-promise-5/"}},"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":"zoomkoding/zoomkoding-gatsby-blog"}}}}},"pageContext":{"slug":"/study-cs-HTTP-9/","nextSlug":"/reflect-2021/","prevSlug":"/study-js-es6-promise-5/"}},"staticQueryHashes":["1073350324","2938748437"]}