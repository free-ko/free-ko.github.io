{"componentChunkName":"component---src-templates-blog-template-js","path":"/study-js-functionalProgramming-8/","result":{"data":{"cur":{"id":"a85a2519-fa47-5de3-a6e6-2c0cb9f7f33c","html":"<h1 id=\"-배운-내용\" style=\"position:relative;\"><a href=\"#-%EB%B0%B0%EC%9A%B4-%EB%82%B4%EC%9A%A9\" aria-label=\" 배운 내용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💪 배운 내용</h1>\n<h3 id=\"함수형-관점에서-시간비동기-바라보기\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98%ED%98%95-%EA%B4%80%EC%A0%90%EC%97%90%EC%84%9C-%EC%8B%9C%EA%B0%84%EB%B9%84%EB%8F%99%EA%B8%B0-%EB%B0%94%EB%9D%BC%EB%B3%B4%EA%B8%B0\" aria-label=\"함수형 관점에서 시간비동기 바라보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수형 관점에서 시간(비동기) 바라보기</h3>\n<p>시간(액션) → 데이터로 생각해보기 → 중간에 분기 역할을 하는 것이 존재 하고 이러한 것을 모나드라고 한다. Promise의 구현된 코드를 파악해보자</p>\n<ol>\n<li>\n<p><code class=\"language-text\">callback</code></p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>\n<p>함수형 관점에서 callback의 문제점은?</p>\n<ul>\n<li>위의 코드는 명시적 출력이 없기 때문에 액션임</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">promise</code>로 만들게 되면 명시적 출력을 통해 값을 만들 수 있음</p>\n<ul>\n<li>액션(동작)을 값(데이터)로 만들 수 있음</li>\n<li>즉, 액션을 계산으로 그리고 계산으로 생각하는 것이 모나드 개념</li>\n</ul>\n</li>\n<li><strong>액션 → 계산 → 액션 → 계산 → 액션 → 데이터</strong>와 같은 과정에성 중간에 시간과 같은 액션이 들어올 때 처리 하는 방법 중 하나가 <code class=\"language-text\">Promise</code>이다.(<code class=\"language-text\">try - catch</code>)</li>\n</ol>\n<br/>\n<h1 id=\"️-실습\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%EC%8B%A4%EC%8A%B5\" aria-label=\"️ 실습 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>⭐️ 실습</h1>\n<ol>\n<li>\n<p><code class=\"language-text\">Promise</code> 구현하기</p>\n<ul>\n<li>성공 Case와 실패 Case를 구분</li>\n</ul>\n</li>\n</ol>\n <br/>\n<h1 id=\"-정리\" style=\"position:relative;\"><a href=\"#-%EC%A0%95%EB%A6%AC\" aria-label=\" 정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌈 정리</h1>\n<ol>\n<li>우리는 액션을 계산으로 분리시키는 작업을 진행</li>\n<li>계산을 명시적 입력과 출력으로 바꾸는 리팩토링 과정을 진행</li>\n<li>계산들을 모아서 하나의 계산으로 만들고 나중에 인자를 넣는 Pipe 함수를 실습함</li>\n<li>제너레이터를 만들어서 순차적인 계산 함수를 실행하는 것이 아니라, 병렬적으로 계산 함수들을 실행시켜 실행 속도를 급격히 증가시키는 실습을 함</li>\n<li>\n<p>계산들 안에서 시간(Promise)의 개념이 존재하는 Obserable(Array, Iterator, Promise)를 통해 3번의 Click 이벤트를 실행할 수 있음\n—> <code class=\"language-text\">Obserable</code>를 통해 실무에 적용할 수 있도록 하는 것이 우리의 목표</p>\n<ul>\n<li>ex) 백엔드로 부터 8초 이내의 데이터를 가져오지 못할 경우 retry를 3회 하고 데이터가 진짜 안오면 특정 데이터를 셋팅한다</li>\n<li>ex) React Query - retry</li>\n</ul>\n</li>\n<li>백엔드는 하나의 인풋이 존재하지만, 프론트 엔드 유저의 행동에 따라 다양한 인풋이 존재 하게 된다. 그러면 시간의 개념이 들어가게되면 이 때, <code class=\"language-text\">Obserable</code> 를 통해 처리 가능</li>\n</ol>\n<br/>\n<h1 id=\"-태오의-정리\" style=\"position:relative;\"><a href=\"#-%ED%83%9C%EC%98%A4%EC%9D%98-%EC%A0%95%EB%A6%AC\" aria-label=\" 태오의 정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a># 🚩태오의 정리</h1>\n<ul>\n<li>2부에 들어서는 1급함수에서 <code class=\"language-text\">콜백</code>에서 <code class=\"language-text\">제네레이터</code>와 <code class=\"language-text\">이터레이션</code> 그리고 <code class=\"language-text\">Promise</code>에 이어 <code class=\"language-text\">Observable</code>를 학습</li>\n<li>\n<p>JS에서 <code class=\"language-text\">시간</code>을 다루는 법에 대해서 학습</p>\n<ul>\n<li>JS서는 즉시 값을 반환하지 못하고 일정 시간이 필요한 기능 ex) 파일 읽기나, 서버 요청 응답</li>\n<li>\n<p><code class=\"language-text\">callback</code>을 통해서 다음과 같이 일을 처리 그러나 <code class=\"language-text\">액션 - 계산 - 데이터</code>의 관점에서 보면 위 함수는 <code class=\"language-text\">\"액션\"</code>이기에 좋은 함수가 아님</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">asyncFn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">doAction</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>차선으로 생각해볼 수 있는 것은 <code class=\"language-text\">callback을 함수의 인자</code>로 넣고, 외부에서 관리를 할 수 있도록 만듬</li>\n<li>\n<p>이러한 방식을 통해 조금 더 나은 형태의 함수를 작성할 수 있음 그러나 이와 같은 방식도 <strong>반환값이 없고 시간을 컨트롤 할 수 없기 때문</strong>에 여전히 좋지 않은 함수</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">asyncFn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">asyncFn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> <span class=\"token function\">doAction</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>순차적으로 시간을 관리하려면 아래처럼 복잡한 코드가 만들어짐</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token function\">asyncFn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token function\">asyncFn</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> <span class=\"token parameter\">res2</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n       <span class=\"token function\">asyncFn</span><span class=\"token punctuation\">(</span>res2<span class=\"token punctuation\">,</span> <span class=\"token parameter\">res3</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n           <span class=\"token function\">doAction</span><span class=\"token punctuation\">(</span>res3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>결국 작업은 따로 실행하고, 순서대로 작성하려면? 콜백을 어떻게 코드를 작성해야하는지를 고민해야 함</li>\n</ul>\n</li>\n<li>액션보다 계산을, 계산 보다는 데이터를 활용하는 것이 좋은 방식이라고 배움</li>\n<li>callback방식을 통해 계산을 밖으로 빼내었지만, 여전히 callback과 시간은 액션이기에 액션 범벅으로는 좋은 코드를 만들 수 없음 결국 이러한 액션을 데이터로 만드는 방법을 고안함 이러한 패턴을 모나드 패턴이라고 함(Promise나, 액션을 객체로 감싸서 데이터로 다루려고 하는 방법)</li>\n<li>우리는 <code class=\"language-text\">액션을 어떻게 감싸서 데이터로 만들 수 있는지</code>, <code class=\"language-text\">시간을 어떻게 다룰 수 있는지</code> , <code class=\"language-text\">이러한 작업들이 얼마나 코드를 더 낫게 만들어 주는지</code> 를 고민해야 함.</li>\n<li>\n<p>그래서 <code class=\"language-text\">Promise</code>를 직접 구현하는 시간을 갖음</p>\n<ul>\n<li><code class=\"language-text\">async - await</code>과 <code class=\"language-text\">Promise</code>가 함수형 프로그래밍 관점에서는 이게 어떤 의미를 가지는지 이해해보는 시간을 갖음</li>\n<li>즉,<strong>액션을 감싸서 데이터로 관리하여 파이프라인 체인으로 연결하는 관점</strong>이 얼마나 프로그램 작성을 더 좋게 만들어주는지 이해해봄(callback보다는 <code class=\"language-text\">then</code> 체인이 왜 더 나은 방식인지 이해하는 하는 시간을 갖음)</li>\n<li>추가로 Array의 method 체인이 얼마나 좋은 방법인지만 알아도 좋음</li>\n</ul>\n</li>\n<li>\n<p>Promise과 Iterator의 개념을 모두 결합한 <code class=\"language-text\">Observable</code>이라는 것을 알아봄</p>\n<ul>\n<li>여러개의 데<strong>이터를 동기/비동기 관계없이 전파하면서 계산을 통해 원하는 결과를 만들어 내고 최소한의 액션을 결합</strong>하는 함수형 프로그래밍의 궁극적 지향점</li>\n<li>실제로 현업에서는 Observable이나 Rx가 활용되는 빈도는 매우 낮음</li>\n<li>우리는 함수형 프로그래밍을 배우는 것이지 해당 라이브러리를 배우는 것이 아닌 만큼 라이브러리의 이해보다는 어떤한 관점에서 이러한 라이브러리가 만들어졌는지 어떠한 관점으로 프로그래밍을 하면 좋은지 아키텍쳐적인 관점에 더 맞춰서 학습 방향을 정함</li>\n<li><code class=\"language-text\">FLUX</code>와 같은 현대의 프론트엔드 상태관리 개념이 왜 함수형 프로그래밍 개념과 가까우며 현실에서 Rx가 아니라, 함수형 프로그래밍 감각으로 코딩을 잘 하기 위해서 어떻게 하면 좋을지에 대해서 논의함</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h3 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h3>\n<ul>\n<li><a href=\"https://github.com/FECrash/FunctionalProgramming\">함수형 프로그래밍 스터디</a></li>\n<li><a href=\"https://teamdable.github.io/techblog/Moand-and-Functional-Architecture\">모나드와 함수형 아키텍처</a></li>\n<li><a href=\"https://medium.com/@linlinghao/async-code-from-vanilla-javascript-to-promises-to-async-await-fc440d9818dd\">JS에서 Promise 관련 자료</a></li>\n<li><a href=\"https://p-iknow.netlify.app/js/custom-promise\">Custom Promise 구현으로 프로미스 파혜치기</a></li>\n<li><a href=\"https://blog.hyunmin.dev/14\">자바스크립트의 Promise 직접 구현하기</a></li>\n<li><a href=\"https://velog.io/@turtle601/JS-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-Promise-%EA%B0%9D%EC%B2%B4-%EC%A7%81%EC%A0%91-%EA%B5%AC%ED%98%84%ED%95%B4%EB%B3%B4%EA%B8%B0\">[JS] 자바스크립트 Promise 객체 직접 구현해보기</a></li>\n<li><a href=\"https://github.com/tc39/proposal-observable/blob/master/src/Observable.js\">Oberable</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%ED%95%A8%EC%88%98%ED%98%95-%EA%B4%80%EC%A0%90%EC%97%90%EC%84%9C-%EC%8B%9C%EA%B0%84%EB%B9%84%EB%8F%99%EA%B8%B0-%EB%B0%94%EB%9D%BC%EB%B3%B4%EA%B8%B0\">함수형 관점에서 시간(비동기) 바라보기</a></li>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>\n</div>","excerpt":"💪 배운 내용 함수형 관점에서 시간(비동기) 바라보기 시간(액션) → 데이터로 생각해보기 → 중간에 분기 역할을 하는 것이 존재 하고 이러한 것을 모나드라고 한다. Promise의 구현된 코드를 파악해보자  함수형 관점에서 callback의 문제점은? 위의 코드는 명시적 출력이 없기 때문에 액션임 로 만들게 되면 명시적 출력을 통해 값을 만들 수 있음 액션(동작)을 값(데이터)로 만들 수 있음 즉, 액션을 계산으로 그리고 계산으로 생각하는 것이 모나드 개념 액션 → 계산 → 액션 → 계산 → 액션 → 데이터와 같은 과정에성 중간에 시간과 같은 액션이 들어올 때 처리 하는 방법 중 하나가 이다.() ⭐️ 실습  구현하기 성공 Case와 실패 Case를 구분 🌈 정리 우리는 액션을 계산으로 분리시키는 작업을 진행 계산을 명시적 입력과 출력으로 바꾸는 리팩토링 과정을 진행 계산들을 모아서 하나의 계산으로 만들고 나중에 인자를 넣는 Pipe 함수를 실습함 제너레이터를 만들어서 순차적인 계산…","frontmatter":{"date":"February 02, 2023","title":"함수형 프로그래밍 - 스터디 8주차","categories":"Study","author":"Kay","emoji":"👨‍💻"},"fields":{"slug":"/study-js-functionalProgramming-8/"}},"next":{"id":"f93fe709-ac41-50f1-9524-01d1d8d1be24","html":"<h1 id=\"-복습\" style=\"position:relative;\"><a href=\"#-%EB%B3%B5%EC%8A%B5\" aria-label=\" 복습 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✅ 복습</h1>\n<h3 id=\"1부\" style=\"position:relative;\"><a href=\"#1%EB%B6%80\" aria-label=\"1부 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1부</h3>\n<ol>\n<li><b>액션, 계산, 데이터</b>로 나누는 것이 중요</li>\n<li>함수형 프로그래밍의 기본은 데이터를 변하는 것과 변하지 않는 것을 나뉘어서 구분하는 것</li>\n<li>명시적 입력과 출력을 만들자(불변성) Ex) <code class=\"language-text\">const</code> 를 통해서, 카피온라이트를 사용할 수 있다.</li>\n<li>계층적 구조 : 계산(스키마, 비즈니스로직, 유틸)</li>\n<li>\n<p><code class=\"language-text\">PipeLine</code>의 개념을 이해하는 것이 중요</p>\n<ul>\n<li><code class=\"language-text\">Data → Action → Action → Data -> ...</code> 의 구조를 아는 것이 중요</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"2부\" style=\"position:relative;\"><a href=\"#2%EB%B6%80\" aria-label=\"2부 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2부</h3>\n<ol>\n<li>\n<p>함수형 기법</p>\n<ul>\n<li>1급 함수 : 함수로 인자를 받고 반환하는 것</li>\n</ul>\n</li>\n<li>계산을 다시 비지니스 로직과 유틸로 구분하는 법을 배우면서 동시에 “함수형 언어가 가지고 있는 1급이라는 개념과 함수형 유틸성” 을 이해하기 위한 “기초”를 배우는 것</li>\n<li>\n<p>Iterator와 Generator는 실무 자바스크립트에서는 잘 쓰이지 않음</p>\n<ul>\n<li><code class=\"language-text\">액션 / 계산 / 데이터</code> 와 <code class=\"language-text\">파이프라인 아키텍쳐</code> 는 함수형 프로그래밍에서 중요</li>\n</ul>\n</li>\n<li>함수형 프로그래밍은 “유틸리티 함수들의 모음집” 같은 것이 아님</li>\n<li><strong>“함수형 프로그래밍이란 단방향 데이터 처리의 파이프라인”</strong> 이라는 감각이 이해가 된다면, Array의 map, filter, reduce를 그저 유틸리티 함수가 아니라, 함수형 프로그래밍의 관점에서 전혀 다른 시각으로 위 method들을 바라 볼 수 있음</li>\n</ol>\n<br/>\n<h1 id=\"️-배운-내용\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%EB%B0%B0%EC%9A%B4-%EB%82%B4%EC%9A%A9\" aria-label=\"️ 배운 내용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️ 배운 내용</h1>\n<ul>\n<li>\n<p>제너레이터를 통해 파이프라인 개념을 확장하는 유틸 개발</p>\n<ul>\n<li>불필요한 동작 없애기</li>\n</ul>\n</li>\n<li>지연평가와 파이프 라인 함수 만들기</li>\n<li>Util 함수들을 <code class=\"language-text\">Symbol.iterator</code>를 사용해서 <code class=\"language-text\">for - of</code>문 적용(map, filter, reduce)</li>\n<li>function의 최상위 타입은(Function → Object) Object가 최상위 타입이기 때문에, Arrow 함수에서 제너레이터를 사용할 수 없음</li>\n<li>\n<p>만약에 <code class=\"language-text\">forEach</code> Arr에 <strong>객체</strong>가 들어간다면??(이것을 고민하는 것이 성장을 합니다.)</p>\n<ul>\n<li>\n<p>함수 확장을 어떻게 할까? → 결국 지연평가인 iterable한것을 만든다.</p>\n<ul>\n<li>\n<p>조건문 처리(분기 처리) : array, obj</p>\n<ul>\n<li><code class=\"language-text\">if(Array instaneof obj)</code> 분기 처리 → <code class=\"language-text\">Iterable</code>로 만들기</li>\n</ul>\n</li>\n<li>조건문 축약 &#x26; 변수 합치기</li>\n<li>전역변수 반환</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h1 id=\"️-질문--대답\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%EC%A7%88%EB%AC%B8--%EB%8C%80%EB%8B%B5\" aria-label=\"️ 질문  대답 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>⭐️ 질문 &#x26; 대답</h1>\n<ul>\n<li>에로우 함수 특징 : this가 undfeind이여서 사용 하지 않음, arg 없음</li>\n<li>\n<p>지연 평가를 사용하는 이유</p>\n<ul>\n<li>ES6, 이터레이터가 V8엔진에서 최적화 작업을 해 놓았기 때문에 일반 map 보다 거의 30배 가량 빠름</li>\n</ul>\n</li>\n<li><code class=\"language-text\">맞는가?</code> 가를 고민하기 보다는 <code class=\"language-text\">최선인가?</code> 라는 질문이 더 좋다. ex) lodash가 그만큼 고민을 해서 만들어졌기 때문에 우리가 따라가면서 ‘왜’이렇게 작성했는지 고민해보자.</li>\n</ul>\n<br/>\n<h3 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h3>\n<ul>\n<li><a href=\"https://github.com/FECrash/FunctionalProgramming\">함수형 프로그래밍 스터디</a></li>\n<li><a href=\"https://armadillo-dev.github.io/javascript/whit-is-lazy-evaluation/\">지연평가를 통한 성능 개선</a></li>\n<li>\n<p>유인동님 강의</p>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=Y8d5P9M51xs\">https://www.youtube.com/watch?v=Y8d5P9M51xs</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=4sO0aWTd3yc\">https://www.youtube.com/watch?v=4sO0aWTd3yc</a></li>\n</ul>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1%EB%B6%80\">1부</a></li>\n<li><a href=\"#2%EB%B6%80\">2부</a></li>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>\n</div>","frontmatter":{"date":"February 01, 2023","title":"함수형 프로그래밍 - 스터디 7주차","categories":"Study","author":"Kay","emoji":"👨‍💻"},"fields":{"slug":"/study-js-functionalProgramming-7/"}},"prev":{"id":"fede8439-77d2-5557-86d4-4825b6feada0","html":"<h1 id=\"팀-리더-리뷰\" style=\"position:relative;\"><a href=\"#%ED%8C%80-%EB%A6%AC%EB%8D%94-%EB%A6%AC%EB%B7%B0\" aria-label=\"팀 리더 리뷰 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>팀 리더 리뷰</h1>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">정리 능력이 탁월하며 이를 논리 정연하게 글로 풀어낼 수 있음<span class=\"token punctuation\">.</span>\n\n배움을 포기하지 않고 끊임없이 정진하며 제품에서 이를 적용하려고 노력함\n\n천성적으로 성격이 좋아 사람들이 스스럼없이 다가오게 <span class=\"token function\">함</span> <span class=\"token punctuation\">(</span>팀 리더 분께서 해주신 리뷰<span class=\"token punctuation\">)</span></code></pre></div>\n<br/>\n<p>누군가가 나의 강점을 이야기해줄 때, 나는 사실 속으로 <code class=\"language-text\">아닐 거야, 내가 그럴 리 없어</code>라는 생각을 했다.\n최근에 팀 리더 분께서 위와 같이 나의 장점을 이야기해 주셨을 때 기분은 좋았지만, 한편으로 스스로 의심을 했다.\n그런데 문득 내가 나의 강점을 모르는 상황에서 남들이 이야기해주는 것이 정말 내가 가지고 있는 강점이 아닐까라는 생각을 하게 되었다.\n그래서 일단 받아들이고 다시 한번 나의 강점을 이야기해 주신 문장을 곱씹어 보았다.</p>\n<br/>\n<h1 id=\"정리-능력이-탁월하며\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC-%EB%8A%A5%EB%A0%A5%EC%9D%B4-%ED%83%81%EC%9B%94%ED%95%98%EB%A9%B0\" aria-label=\"정리 능력이 탁월하며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>‘정리 능력이 탁월하며’</h1>\n<p>나는 정리 정돈을 좋아한다. 무언가를 가지런히 놓는 것을 좋아하며, 평소에 집에서나 일을 할 때에 가지런히 무언가를 정리 정돈을 하면서 일을 시작하고 마무리한다.\n그리고 컴퓨터에 폴더를 정리하는 것도 좋아한다. 또한 매일매일 하루 템플릿을 만들어 그날 어떤 업무를 했고, 질문을 통해 무엇을 배웠는지 적기도 하고 마지막으로 그날 회고를 작성한다.\n곰곰이 생각해 보니 나의 강점으로 만들 수 있다고 생각하고 누구보다 정리 정돈의 능력을 키우고 싶은 욕심도 생긴다.(물론 지치고 힘들 때면 최소한의 정리만 해 놓고 싶다.)\n그러면 지금부터라도 조금씩 정리 능력을 키우는 연습을 의식적으로 찾아야겠다.</p>\n<br/>\n<h1 id=\"배움을-포기하지-않고\" style=\"position:relative;\"><a href=\"#%EB%B0%B0%EC%9B%80%EC%9D%84-%ED%8F%AC%EA%B8%B0%ED%95%98%EC%A7%80-%EC%95%8A%EA%B3%A0\" aria-label=\"배움을 포기하지 않고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>‘배움’을 포기하지 않고</h1>\n<p>사실 배움을 하는 이유는 무언가를 처음부터 차분히 정리를 해서 내 것으로 만드는 작업이 내가 오늘 열심히 산 행동 중 명확하게 시각적으로 보이는 행동이기 때문에 배움을 계속하는 것 같다. 그리고 지극히 주관적으로 배움을 죽을 때까지 하는 것이 멋있는 것 같다. 그래서 배움이라는 한계를 긋지 말고 내가 배우고 싶은 게 있다면 아주 작게라고 도전하는 경험을 해봐야겠다.</p>\n<br/>\n<h1 id=\"사람들이-스스럼없이-다가오게-함\" style=\"position:relative;\"><a href=\"#%EC%82%AC%EB%9E%8C%EB%93%A4%EC%9D%B4-%EC%8A%A4%EC%8A%A4%EB%9F%BC%EC%97%86%EC%9D%B4-%EB%8B%A4%EA%B0%80%EC%98%A4%EA%B2%8C-%ED%95%A8\" aria-label=\"사람들이 스스럼없이 다가오게 함 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>‘사람들이 스스럼없이 다가오게 함’</h1>\n<p>사실 처음 입사했을 때, 내 자리로 많은 팀원분들이 와서 명함을 주면서 밝게 이야기해 주셔서 너무 감사했다.\n나 또한 낯선 사람에게 다가서는 것을 그렇게 어렵게 생각하지 않아 먼저 다가가 인사하다 보니 자연스럽게 다른 팀원분들이 스스럼없이 다가오는 게 아닌가 싶다. 지금 생각해 보면 낯선 사람에게 다가갈 때 어려움 없는 부분도 나의 강점이 될 수 있다는 생각이 든다.</p>\n<br/>\n<p>하루 24시간 중에 가장 많은 시간을 함께 보내는 동료로부터 강점을 듣고, 이제서야 나의 강점이 무엇인지 알게 되어 기분이 좋다. 이제부터라도 나의 강점을 잘 갈고닦아서 나의 삶을 잘 만들어 가야겠다.</p>\n<br/>","frontmatter":{"date":"February 02, 2023","title":"나의 강점은 무엇일까?","categories":"Log","author":"Kay","emoji":"👋"},"fields":{"slug":"/write-log-230202/"}},"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":"zoomkoding/zoomkoding-gatsby-blog"}}}}},"pageContext":{"slug":"/study-js-functionalProgramming-8/","nextSlug":"/study-js-functionalProgramming-7/","prevSlug":"/write-log-230202/"}},"staticQueryHashes":["1073350324","2938748437"]}