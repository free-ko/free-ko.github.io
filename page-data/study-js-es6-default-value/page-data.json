{"componentChunkName":"component---src-templates-blog-template-js","path":"/study-js-es6-default-value/","result":{"data":{"cur":{"id":"9ded2c69-1cdb-5980-8887-26f15144405d","html":"<br>\n<h1 align=\"center\">\n  👋 Default Value\n</h1>\n<br>\n<h2 id=\"default-value\" style=\"position:relative;\"><a href=\"#default-value\" aria-label=\"default value permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Default Value</h2>\n<ul>\n<li>\n<p>값을 할당하지 않으면 사전에 정의된 값을 할당</p>\n<ul>\n<li>default value : 사전에 정의된 값</li>\n</ul>\n</li>\n<li>\n<p>할당할 값이 없으면 디폴트 값을 할당</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const [one, two, fiv = 50] = [10, 20];\n\nconsole.log(five); // 50</code>\n        </deckgo-highlight-code>\n<ol>\n<li><code class=\"language-text\">one</code>에 10을, <code class=\"language-text\">two</code>에 20을 분할 할당 함</li>\n<li><code class=\"language-text\">five</code>에 할당할 값이 없으며, 이 때 <code class=\"language-text\">five = 50</code>에서 <code class=\"language-text\">50</code>을 <code class=\"language-text\">five</code>에 할당함</li>\n<li>이것을 <code class=\"language-text\">default value</code>라고 함</li>\n<li><code class=\"language-text\">=</code>의 왼쪽에 이름을 작성하고 오른쪽에 값을 작성</li>\n</ol>\n</li>\n</ul>\n<br>\n<ul>\n<li>\n<p>할당할 값이 있으면 디폴트 값을 무시</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const [one, two, five = 50] = [10, 20, 70];\n\nconsole.log(five); // 70</code>\n        </deckgo-highlight-code>\n<ol>\n<li>왼쪽과 오른쪽 모두 값이 3개 임</li>\n<li>값(70)이 있으므로 <code class=\"language-text\">five</code>에 <code class=\"language-text\">70</code>을 할당함 <code class=\"language-text\">five = 50</code>에서 <code class=\"language-text\">50</code>을 할당하지 않음</li>\n</ol>\n</li>\n</ul>\n<br>\n<ul>\n<li>\n<p>Object는 프로퍼티 이름으로 체크</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const { one, two = 20 } = { one: 10 };\n\nconsole.log(two); // 20</code>\n        </deckgo-highlight-code>\n<ol>\n<li>오른쪽에 <code class=\"language-text\">one</code>의 값인 <code class=\"language-text\">10</code>을 왼쪽의 <code class=\"language-text\">one</code> 프로퍼티 값으로 분할 할당함</li>\n<li><code class=\"language-text\">two</code>에 할당할 값이 없으며 <code class=\"language-text\">two = 20</code>에서 <code class=\"language-text\">20</code>을 <code class=\"language-text\">two</code>에 할당 함</li>\n</ol>\n</li>\n</ul>\n<br>\n<ul>\n<li>\n<p>디폴트 값 적용 순서</p>\n<ul>\n<li>왼쪽에서 오른쪽으로 적용</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const [one, two = one + 20, five = two + 50] = [10];\n\nconsole.log(two); // 30\nconsole.log(five); // 80</code>\n        </deckgo-highlight-code>\n<ol>\n<li>오른쪽 one의 값인 10을 왼쪽의 one 프로퍼티 값으로 분할 할당함</li>\n<li>오른쪽에 값이 없으므로 디폴트 값을 할당, 왼쪽에서 오른쪽으로 할당</li>\n<li><code class=\"language-text\">two = one + 20</code>, one의 값이 10이므로 30이 two에 설정됨</li>\n<li><code class=\"language-text\">five = two + 50</code>, two의 값이 30이므로 80이 five에 설정됨</li>\n</ol>\n</li>\n</ul>\n<br>\n<ul>\n<li>\n<p>함수의 파라미터에 디폴트 값 적용</p>\n<ul>\n<li>넘겨 받은 파라미터 값이 없으면 디폴트 값을 할당</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const add = (ten, two = 20) =&gt; ten + two;\nconst result = add(10);\n\nconsole.log(result); // 30</code>\n        </deckgo-highlight-code>\n<ul>\n<li>넘겨받은 파라미터 값이 있으면 디폴트 값을 무시</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const add = (ten, two = 20) =&gt; ten + two;\nconst result = add(10, 50);\n\nconsole.log(result); // 60</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<ul>\n<li>\n<p>호출한 함수의 파라미터 값이 <code class=\"language-text\">undefined</code>일 때</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const point = () =&gt; 20;\nconst add = (one, two = point()) =&gt; one + two;\nconst result = add(10, undefined);\n\nconsole.log(result); // 30</code>\n        </deckgo-highlight-code>\n<ul>\n<li>파라미터를 넘겨주지 않았기 때문에 디폴트 값 실행</li>\n</ul>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","excerpt":"Default Value 값을 할당하지 않으면 사전에 정의된 값을 할당 default value : 사전에 정의된 값 할당할 값이 없으면 디폴트 값을 할당 에 10을, 에 20을 분할 할당 함 에 할당할 값이 없으며, 이 때 에서 을 에 할당함 이것을 라고 함 의 왼쪽에 이름을 작성하고 오른쪽에 값을 작성 할당할 값이 있으면 디폴트 값을 무시 왼쪽과 오른쪽 모두 값이 3개 임 값(70)이 있으므로 에 을 할당함 에서 을 할당하지 않음 Object는 프로퍼티 이름으로 체크 오른쪽에 의 값인 을 왼쪽의  프로퍼티 값으로 분할 할당함 에 할당할 값이 없으며 에서 을 에 할당 함 디폴트 값 적용 순서 왼쪽에서 오른쪽으로 적용 오른쪽 one의 값인 10을 왼쪽의 one 프로퍼티 값으로 분할 할당함 오른쪽에 값이 없으므로 디폴트 값을 할당, 왼쪽에서 오른쪽으로 할당 , one의 값이 10이므로 30이 two에 설정됨 , two의 값이 30이므로 80이 five에 설정됨 함수의 파라미터에 디폴…","frontmatter":{"date":"September 11, 2021","title":"Default Value","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-default-value/"}},"next":{"id":"fad1e791-efc3-5be8-915b-c114b47739c6","html":"<br>\n<h1 align=\"center\">\n  👋 Object 오퍼레이션, 프로퍼티 이름 조합\n</h1>\n<br>\n<h2 id=\"1-object-오퍼레이션\" style=\"position:relative;\"><a href=\"#1-object-%EC%98%A4%ED%8D%BC%EB%A0%88%EC%9D%B4%EC%85%98\" aria-label=\"1 object 오퍼레이션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Object 오퍼레이션</h2>\n<ul>\n<li>\n<p>같은 프로퍼티 이름 사용</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const value = { book: 10, book: 20 };\n\nconsole.log(value); // {book: 20}</code>\n        </deckgo-highlight-code>\n<ol>\n<li><code class=\"language-text\">{book: 10, book: 20}</code>에서 프로퍼티 이름인 <code class=\"language-text\">book</code>이 같음</li>\n<li><code class=\"language-text\">ES5 Strict</code> 모드에서 프로퍼티 이름이 같으면 에러 뜸</li>\n<li><code class=\"language-text\">ES6</code>에서는 <code class=\"language-text\">Stirct</code> 모드에 관계없이 에러가 발생하지 않음, 뒤에 작성한 프로퍼티 값으로 대체됨</li>\n</ol>\n</li>\n<li>\n<p>Shorhand property names</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const one = 10,\ntwo = 20;\nconst value = { one, two };\n\nconsole.log(values); // {one: 10, two: 20}</code>\n        </deckgo-highlight-code>\n<ol>\n<li><code class=\"language-text\">one</code>과 <code class=\"language-text\">two</code> 변수에 값을 작성하였으며</li>\n<li><code class=\"language-text\">{one, two}</code> 형태로 <code class=\"language-text\">values</code>에 할당함</li>\n<li><code class=\"language-text\">one</code>이 프로퍼티 이름이 되고 <code class=\"language-text\">10</code>이 프로퍼티 값으로 할당됨</li>\n<li><code class=\"language-text\">\"Shorhand property names\"</code>은 MDN에 작성된 것으로 스펙에 정의된 것은 아님</li>\n</ol>\n</li>\n</ul>\n<br>\n<h2 id=\"2-프로퍼티-이름-조합\" style=\"position:relative;\"><a href=\"#2-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-%EC%9D%B4%EB%A6%84-%EC%A1%B0%ED%95%A9\" aria-label=\"2 프로퍼티 이름 조합 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 프로퍼티 이름 조합</h2>\n<ul>\n<li>\n<p>문자열을 프로퍼티 이름으로 사용</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const value = {\n[&#39;one&#39; + &#39;two&#39;]: 12,\n};\n\nconsole.log(value.onetwo); // 12</code>\n        </deckgo-highlight-code>\n<ol>\n<li><code class=\"language-text\">\"one\"</code>과 <code class=\"language-text\">\"two\"</code>를 연결하여 <code class=\"language-text\">onetwo</code>를 프로퍼티 이름으로 사용 함</li>\n</ol>\n</li>\n<li>\n<p>변숫값을 프로퍼티 이름으로 사용</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const item = &#39;world&#39;;\nconst sports = {\n[item]: 100,\n[item + &#39;Cup&#39;]: &#39;월드컵&#39;,\n[item + &#39;Sports&#39;]: function () {\n  return &#39;스포츠&#39;;\n},\n};\n\nconsole.log(sports[item]); // 100\nconsole.log(sports[item + &#39;Cup&#39;]); // 월드컵\nconsole.log(sports[item + &#39;Sports&#39;]()); // 스포츠</code>\n        </deckgo-highlight-code>\n<ol>\n<li>변숫값을 프로퍼티 이름으로 사용 함</li>\n<li>변숫값과 문자열을 연결할 수 있음</li>\n<li>프로퍼티 이름에 공백이 있는 것이 어색하지만 공백을 넣을 수 있음</li>\n<li>함수로 호출 할 수 있음, 변숫값에 따라 함수 이름을 정의 할 수 있음</li>\n</ol>\n</li>\n<li>\n<p>분할 할당을 조합한 형태</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const item = &#39;book&#39;;\nconst result = ({ [item]: title } = { book: &#39;책&#39; }); // item을 가변적으로 사용 하는에 유용\n\nconsole.log(result); // {book: 책}</code>\n        </deckgo-highlight-code>\n<ol>\n<li>변숫값을 프로퍼티 이름으로 사용하고 분할 할당한 형태</li>\n<li><code class=\"language-text\">{[item]: title}</code>이 <code class=\"language-text\">{book: title}</code> 형태가 됨</li>\n<li><code class=\"language-text\">{book: \"책\"}</code>이 <code class=\"language-text\">{book: title}</code>에 “책”이 할당됨</li>\n</ol>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","frontmatter":{"date":"September 10, 2021","title":"Object 오퍼레이션, 프로퍼티 이름 조합","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-destructuring-3/"}},"prev":{"id":"94db4223-afa1-5805-8eb0-09ae8e13c3fc","html":"<br>\n<h1 align=\"center\">\n  👋 for-of, for-in for-of 차이, for-of Object\n</h1>\n<br>\n<h2 id=\"1-for-of\" style=\"position:relative;\"><a href=\"#1-for-of\" aria-label=\"1 for of permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. For-Of</h2>\n<ul>\n<li><code class=\"language-text\">Syntax: for (variable of iterable) { }</code></li>\n<li>\n<p>이터러블 오브젝트를 반복</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const list = [1, 2, 3];\n\nfor (let k = 0; k &lt; list.length; k++) {\nconsole.log(list[k]);\n}\n\nfor (let value of list) {\nconsole.log(value);\n}</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>Iterable</p>\n<ul>\n<li>이터러블 오브젝트를 작성</li>\n<li>표현식을 작성하면 평가 결과를 사용</li>\n</ul>\n</li>\n<li>\n<p>Variable</p>\n<ul>\n<li>변수 이름 작성</li>\n<li>이터러블 오브젝트를 반복할 때마다 Variable에 값이 할당됨</li>\n</ul>\n</li>\n<li>\n<p>배열</p>\n<ul>\n<li>배열을 반복하면서 엘리먼트를 하나씩 전개</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">for (let value of [1, 2, 3]) {\nconsole.log(value);\n}</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>String</p>\n<ul>\n<li>문자열을 반복하면서 문자를 하나씩 전개</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">for (let value of &#39;ABC&#39;) {\nconsole.log(value);\n}\n\n// A\n// B\n// C</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>NodeList</p>\n<ul>\n<li>NodeList를 반복하면서 엘리먼트를 하나씩 전개</li>\n</ul>\n<deckgo-highlight-code language=\"html\"  >\n          <code slot=\"code\">&lt;ul&gt;\n&lt;li class=&quot;show&quot;&gt;첫 번째&lt;/li&gt;\n&lt;li class=&quot;show&quot;&gt;두 번째&lt;/li&gt;\n&lt;li class=&quot;show&quot;&gt;세 번째&lt;/li&gt;\n&lt;/ul&gt;</code>\n        </deckgo-highlight-code>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const nodes = document.querySelectorAll(&#39;.show&#39;);\n\nfor (let node of nodes) {\nconsole.log(node.textContent);\n}\n\n// 첫 번째\n// 두 번째\n// 세 번째</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<h2 id=\"2-for-in-for-of의-차이\" style=\"position:relative;\"><a href=\"#2-for-in-for-of%EC%9D%98-%EC%B0%A8%EC%9D%B4\" aria-label=\"2 for in for of의 차이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. For-in, For-of의 차이</h2>\n<ul>\n<li>\n<p>for-in</p>\n<ul>\n<li>열거 가능한 프로퍼티가 대상</li>\n<li><code class=\"language-text\">{key: value}</code> 형태는 디폴트가 <code class=\"language-text\">enumerable: true</code></li>\n<li><code class=\"language-text\">Object.defineProperty()</code>는 디폴트가 <code class=\"language-text\">enumerable: false</code></li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const obj = {};\n\nObject.definedProperties(obj, {\nsports: {\n  enumerable: false,\n  value: &#39;스포츠&#39;,\n},\n\nbook: {\n  enumerable: true,\n  value: &#39;책&#39;,\n},\n});\n\nfor (let item in obj) {\nconsole.log(item + &#39;: &#39; + obj[item]);\n}\n\n// book: 책</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>for-of</p>\n<ul>\n<li>이터러블 오브젝트가 대상</li>\n<li>Object는 전개되지 않음</li>\n<li>Property의 프로퍼티도 전개되지 않음</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"3-for-of-object\" style=\"position:relative;\"><a href=\"#3-for-of-object\" aria-label=\"3 for of object permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. for-of, Object</h2>\n<ul>\n<li>Object는 이터러블 오브젝트가 아니므로 for-of 사용 불가</li>\n<li>\n<p>Object를 <code class=\"language-text\">for-of</code>로 전개할 수 있는 방법</p>\n<ul>\n<li><code class=\"language-text\">Object.keys()</code>로 프로퍼티 이름을 배열로 만들고</li>\n<li>만든 배열을 <code class=\"language-text\">for-of</code>로 전개</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const sports = {\nsoccer: &#39;축구&#39;,\nbaseball: &#39;야구&#39;,\n};\n\nconst keyList = Object.keys(sports);\n\nfor (let key of keyList) {\nconsole.log(key + &#39;: &#39; + sports[key]);\n}\n\n// soccer: 축구\n// baseball: 야구</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","frontmatter":{"date":"September 12, 2021","title":"for-of, for-in for-of 차이, for-of Object","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-for-in/"}},"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":"zoomkoding/zoomkoding-gatsby-blog"}}}}},"pageContext":{"slug":"/study-js-es6-default-value/","nextSlug":"/study-js-es6-destructuring-3/","prevSlug":"/study-js-es6-for-in/"}},"staticQueryHashes":["1073350324","2938748437"]}