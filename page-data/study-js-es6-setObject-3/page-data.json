{"componentChunkName":"component---src-templates-blog-template-js","path":"/study-js-es6-setObject-3/","result":{"data":{"cur":{"id":"f8e63d7e-cefa-5edd-96f0-4ad181d87cdc","html":"<br>\n<h1 align=\"center\">\n  👋  Set과 이터레이터 오브젝트 - entries(), keys(), values(), Symbol.iterator()\n</h1>\n<br>\n<h2 id=\"1-entries\" style=\"position:relative;\"><a href=\"#1-entries\" aria-label=\"1 entries permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. entries()</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">Set</code> 인스턴스로 이터레이터 오브젝트 생성, 반환</p>\n<ul>\n<li><code class=\"language-text\">Set</code> 인스턴스에 설정된 순서로 반환</li>\n<li><code class=\"language-text\">next()</code>로 <code class=\"language-text\">[value, value]</code> 반환</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const obj = new Set([&#39;one&#39;, () =&gt; {}]);\n\nconst iterObj = obj.entries();\n\nconsole.log(iterObj.next()); // {value: [one, one], done: false}\nconsole.log(iterObj.next()); // {value: [() =&gt; {}, () =&gt; {}], done: false}\nconsole.log(iterObj.next()); // {value: undefined, done: true}</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<h2 id=\"2-keys\" style=\"position:relative;\"><a href=\"#2-keys\" aria-label=\"2 keys permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. keys()</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">value</code> 가 <code class=\"language-text\">key</code> 가 되므로 <code class=\"language-text\">keys()</code> 는 의미가 없음</p>\n<ul>\n<li><code class=\"language-text\">Map</code> 오브젝트와 맞추기 위한 것</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">Set</code> 인스턴스의 <code class=\"language-text\">value</code> 를 key로 사용하여 이터레이터 오브젝트 생성, 반환</p>\n<ul>\n<li><code class=\"language-text\">Set</code> 인스턴스에 설정된 순서로 반환</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">next()</code> 로 <code class=\"language-text\">value(key)</code> 반환</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const obj = new Set([&#39;one&#39;, () =&gt; {}]);\n\nconst iterObj = obj.keys();\n\nconsole.log(iterObj.next()); // {value: one, done: false}\nconsole.log(iterObj.next()); // {value: () =&gt; {}, done: false}\nconsole.log(iterObj.next()); // {value: undefined, done: true}</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<h2 id=\"3values\" style=\"position:relative;\"><a href=\"#3values\" aria-label=\"3values permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.values()</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">Set</code> 인스턴스의 <code class=\"language-text\">value</code> 로 이터레이터 오브젝트 생성, 반환</p>\n<ul>\n<li><code class=\"language-text\">Set</code> 인스턴스에 설정된 순서로 반환</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">next()</code> 로 <code class=\"language-text\">value</code> 반환</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const obj = new Set([&#39;one&#39;, () =&gt; {}]);\n\nconst iterObj = obj.values();\n\nconsole.log(iterObj.next()); // {value: one, done: false}\nconsole.log(iterObj.next()); // {value: () =&gt; {}, done: false}\nconsole.log(iterObj.next()); // {value: undefined, done: true}</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<h2 id=\"4-symboliterator\" style=\"position:relative;\"><a href=\"#4-symboliterator\" aria-label=\"4 symboliterator permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. Symbol.iterator()</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">Set</code> 인스턴스로 이터레이터 오브제트 생성, 반환</p>\n<ul>\n<li><code class=\"language-text\">Set.prototype.values()</code> 와 같음</li>\n<li><code class=\"language-text\">next()</code> 로 <code class=\"language-text\">value</code> 반환</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const obj = new Set([&#39;one&#39;, () =&gt; {}]);\n\nconst iterObj = obj[Symbol.iterator]();\n\nconsole.log(iterObj.next()); // {value: one, done: false}\nconsole.log(iterObj.next()); // {value: () =&gt; {}, done: false}\nconsole.log(iterObj.next()); // {value: undefined, done: true}</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","excerpt":"1. entries()  인스턴스로 이터레이터 오브젝트 생성, 반환  인스턴스에 설정된 순서로 반환 로  반환 2. keys()  가  가 되므로  는 의미가 없음  오브젝트와 맞추기 위한 것  인스턴스의  를 key로 사용하여 이터레이터 오브젝트 생성, 반환  인스턴스에 설정된 순서로 반환  로  반환 3.values()  인스턴스의  로 이터레이터 오브젝트 생성, 반환  인스턴스에 설정된 순서로 반환  로  반환 4. Symbol.iterator()  인스턴스로 이터레이터 오브제트 생성, 반환  와 같음  로  반환","frontmatter":{"date":"November 12, 2021","title":"Set과 이터레이터 오브젝트 - entries(), keys(), values(), Symbol.iterator()","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-setObject-3/"}},"next":{"id":"398a14f0-2701-551c-922a-62ada5c71dcb","html":"<br>\n<h1 align=\"center\">\n  👋  값  설정, 추출 메소드 - add(), has()\n</h1>\n<br>\n<h2 id=\"1-add\" style=\"position:relative;\"><a href=\"#1-add\" aria-label=\"1 add permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. add()</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">Set</code> 인스턴스 끝에 <code class=\"language-text\">value</code> 추가</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">let obj = new Set();\nobj.add(&#39;축구&#39;).add(&#39;농구&#39;);\nobj.add(&#39;축구&#39;);\n\nfor (let value of obj) {\nconsole.log(value);\n}\n\n// add()를 실행한 후 인스턴스를 반환하므로 method chain 형태로 add()를 작성할 수 있음\n// add()에서 &quot;축구&quot;가 있으므로 첨부되지 않음\n\n// 실행 결과\n// 축구\n// 농구</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>사용 형태</p>\n<ul>\n<li>함수를 생성하여 <code class=\"language-text\">value</code>로 사용</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">let obj = new Set();\nobj.add(function sports() {\n  return 100;\n});\nobj.add(function sports() {\n  return 200;\n});\n\nfor (let value of obj) {\n  console.log(value);\n}\n\n// 1. 같은 이름의 function을 작성한 형태\n// 2. Function 오브젝트의 메모리 주소가 다르므로 이름이 같더라도 설정됨\n// 3. for-of로 전개된 value에 함수가 설정되므로 호출할 수 있음, 출력된 값은 함수에서 return 값임\n\n// 실행결과\n// 100\n// 200</code>\n        </deckgo-highlight-code>\n<ul>\n<li><code class=\"language-text\">value</code>에 생성한 함수 이름 작성</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const sports = () =&gt; {\n  return 100;\n};\nlet obj = new Set();\n\nobj.add(sports);\nobj.add(sports);\n\nfor (let value of obj) {\n  console.log(value());\n}\n\n// 1. Function 오브젝트를 새엇ㅇ한 후 함수 이름으로 등록하면 하나만 설정 됨\n// 2. 이것은 함수 이름으로 참조하는 Function 오브젝트의 메ㅐ모리 주소가 같이 때문\n\n// 실행 결과\n// 100</code>\n        </deckgo-highlight-code>\n<ul>\n<li><code class=\"language-text\">Object</code>를 <code class=\"language-text\">value</code>로 사용</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const sports = {\n  축구: 11,\n  야구: 9,\n};\n\nlet obj = new Set();\nobj.add(sports);\n\nfor (let value of obj) {\n  console.log(value);\n}\n\n// 실행결과\n// { 축구 : 11, 야구 : 9 }</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<h2 id=\"2-has\" style=\"position:relative;\"><a href=\"#2-has\" aria-label=\"2 has permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. has()</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">Set</code> 인스턴스에서 값의 존재 여부를 반환</p>\n<ul>\n<li>존재하면 <code class=\"language-text\">true</code>, 아니면 <code class=\"language-text\">false</code> 반환</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const sports = () =&gt; {};\nconst obj = new Set([sports]);\n\nconsole.log(obj.has(sports)); // true\nconsole.log(obj.has(&#39;book&#39;)); // false</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p><code class=\"language-text\">get()</code> 메소드가 없으므로</p>\n<ul>\n<li><code class=\"language-text\">has()</code> 로 값의 존재 여부를 체크 한 후 존재하면 체크한 값을 값으로 사용</li>\n</ul>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","frontmatter":{"date":"November 11, 2021","title":"값  설정, 추출 메소드 - add(), has()","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-setObject-2/"}},"prev":{"id":"dd85fcb0-073b-5dad-9f98-4cc3f192e161","html":"<br>\n<h1 align=\"center\">\n  👋  콜백 함수, 삭제, 지우기 - forEach(), delete(), clear()\n</h1>\n<br>\n<h2 id=\"1-foreach\" style=\"position:relative;\"><a href=\"#1-foreach\" aria-label=\"1 foreach permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. forEach()</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">Set</code> 인스턴스를 반복하면서 <code class=\"language-text\">callBack</code> 함수 호출</p>\n<ul>\n<li><code class=\"language-text\">map()</code>, <code class=\"language-text\">filter()</code> 등의 <code class=\"language-text\">callback</code> 함수가 동반되는 메소드 사용 불가</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">callbak</code> 함수에 넘겨주는 파라미터</p>\n<ul>\n<li><code class=\"language-text\">value</code>, <code class=\"language-text\">key(value)</code>, <code class=\"language-text\">Set</code> 인스턴스</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const obj = new Set([&#39;one&#39;, () =&gt; {}]);\n\nfunction callback(value, key, set) {\n  console.log(value);\n}\n\nobj.forEach(callback);\n\n// 실행결과\n// one\n// () =&gt; {}</code>\n        </deckgo-highlight-code>\n<ul>\n<li>콜백 함수에서 <code class=\"language-text\">this</code> 사용</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const obj = new Set([&#39;one&#39;, &#39;two&#39;]);\n\nfunction callback(value, key, set) {\n  console.log(`${value}, ${this.check}`);\n}\n\nobj.forEach(callback, { check: &#39;ABC&#39; });\n// 콜백 함수에서 this가 forEach()의 두 번째 파라미터에 작성한 오브젝트를 참조하게 하려면\n// 일반 함수로 작성해야 함\n\n// 실행결과\n// one, ABC\n// two, ABC</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<h2 id=\"2-delete\" style=\"position:relative;\"><a href=\"#2-delete\" aria-label=\"2 delete permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. delete()</h2>\n<ul>\n<li><code class=\"language-text\">Set</code> 인스턴스에서 파라미터 갑솨 같은 엘리먼트 삭제</li>\n<li>\n<p>같은 <code class=\"language-text\">value</code> 가 있어 삭제에 성공하면 <code class=\"language-text\">true</code> 반환</p>\n<ul>\n<li>삭제에 실패하면 <code class=\"language-text\">false</code> 반환</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const obj = new Set([&#39;one&#39;, &#39;two&#39;]);\n\nconsole.log(obj.delete(&#39;one&#39;)); // true\nconsole.log(obj.delete(&#39;one&#39;)); // false</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<h2 id=\"3-clear\" style=\"position:relative;\"><a href=\"#3-clear\" aria-label=\"3 clear permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. clear()</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">Set</code> 인스턴스의 모든 엘리먼트를 지움</p>\n<ul>\n<li><code class=\"language-text\">Set</code> 인스턴스를 삭제하는 것은 아님, 따라서 <code class=\"language-text\">value</code>를 추가할 수 있음</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const obj = new Set([&#39;one&#39;, &#39;two&#39;]);\n\nconsole.log(obj.size); // 2\n\nobj.clear();\nconsole.log(obj.size); // 0\n\nobj.add(&#39;one&#39;);\nconsole.log(obj.size); // 1</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","frontmatter":{"date":"November 13, 2021","title":"콜백 함수, 삭제, 지우기 - forEach(), delete(), clear()","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-setObject-4/"}},"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":"zoomkoding/zoomkoding-gatsby-blog"}}}}},"pageContext":{"slug":"/study-js-es6-setObject-3/","nextSlug":"/study-js-es6-setObject-2/","prevSlug":"/study-js-es6-setObject-4/"}},"staticQueryHashes":["1073350324","2938748437"]}