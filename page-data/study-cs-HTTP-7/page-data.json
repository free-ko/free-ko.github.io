{"componentChunkName":"component---src-templates-blog-template-js","path":"/study-cs-HTTP-7/","result":{"data":{"cur":{"id":"b74af11a-6030-5dfe-9d8d-ace29c32393e","html":"<br>\n<h1 align=\"center\">\n  👋  HTTP 메서드 - GET, POST\n</h1>\n<br>\n<h2 id=\"1http-메서드-종류--주요-메서드\" style=\"position:relative;\"><a href=\"#1http-%EB%A9%94%EC%84%9C%EB%93%9C-%EC%A2%85%EB%A5%98--%EC%A3%BC%EC%9A%94-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-label=\"1http 메서드 종류  주요 메서드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.HTTP 메서드 종류 : 주요 메서드</h2>\n<ol>\n<li><code class=\"language-text\">GET</code>: 리소스 조회</li>\n<li><code class=\"language-text\">POST</code>: 요청 데이터 처리, 주로 등록에 사용</li>\n<li><code class=\"language-text\">PUT</code>: 리소스를 대체, 해당 리소스가 없으면 생성</li>\n<li><code class=\"language-text\">PATCH</code>: 리소스 부분 변경</li>\n<li><code class=\"language-text\">DELETE</code>: 리소스 삭제</li>\n</ol>\n<br>\n<h2 id=\"2http-메서드-종류--기타-메서드\" style=\"position:relative;\"><a href=\"#2http-%EB%A9%94%EC%84%9C%EB%93%9C-%EC%A2%85%EB%A5%98--%EA%B8%B0%ED%83%80-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-label=\"2http 메서드 종류  기타 메서드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.HTTP 메서드 종류 : 기타 메서드</h2>\n<ol>\n<li><code class=\"language-text\">HEAD</code>: GET과 동일하지만 메시지 부분을 제외하고, 상태 줄과 헤더만 반환</li>\n<li><code class=\"language-text\">OPTIONS</code>: 대상 리소스에 대한 통신 가능 옵션(메서드)를 설명(주로 <code class=\"language-text\">CORS</code> 에서 사용)</li>\n<li><code class=\"language-text\">CONNECT</code>: 대상 자원으로 식별되는 서버에 대한 터널을 설정 —> 거의 사용 X</li>\n<li><code class=\"language-text\">TRACE</code>: 대상 리소스에 대한 경로를 따라 메시지 루프백 테스트를 수행 —> 거의 사용 X</li>\n</ol>\n<br>\n<h2 id=\"3get\" style=\"position:relative;\"><a href=\"#3get\" aria-label=\"3get permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.GET</h2>\n<ol>\n<li>리소스 조회</li>\n<li>서버에 전달하고 싶은 데이터는 Query(쿼리 파라미터, 쿼리 스트링)를 통해서 전달</li>\n<li>메시지 바디를 사용해서 데이터를 전달할 수 있지만, 지원하지 않는 곳이 많아서 권장하지 않음</li>\n</ol>\n<br>\n<h2 id=\"4post\" style=\"position:relative;\"><a href=\"#4post\" aria-label=\"4post permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.POST</h2>\n<ol>\n<li>요청 데이터 처리</li>\n<li>메시지 바디를 통해 서버로 요청 데이터 전달</li>\n<li>\n<p>서버는 요청 데이터를 처리</p>\n<ul>\n<li>메시지 바디를 통해 들어온 데이터를 처리하는 모든 기능을 수행한다.</li>\n</ul>\n</li>\n<li>주로 전달된 데이터로 신규 리소스 등록, 프로세스 처리에 사용</li>\n</ol>\n<br>\n<h2 id=\"5post--요청-데이터를-어떻게-처리한다는-뜻일까\" style=\"position:relative;\"><a href=\"#5post--%EC%9A%94%EC%B2%AD-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%B2%98%EB%A6%AC%ED%95%9C%EB%8B%A4%EB%8A%94-%EB%9C%BB%EC%9D%BC%EA%B9%8C\" aria-label=\"5post  요청 데이터를 어떻게 처리한다는 뜻일까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.POST : 요청 데이터를 어떻게 처리한다는 뜻일까?</h2>\n<ol>\n<li>\n<p>스펙 : POST 메서드는 대상 리소그가 리소스의 고유한 의미 체계에 따라 요청에 포함된 표현을 처리하도록 요청함</p>\n<p>ex) POST는 다음과 같은 기능에 사용됨</p>\n<ul>\n<li>HTML 양식에 입력된 필드와 같은 데이터 블록을 데이터 처리 프로세스에 제공\n—> HTML FORM에 입력한 정보로 회원가입, 주문 등에 사용</li>\n<li>게시판, 뉴스 그룹, 메일링 리스트, 블로그 또는 유사한 기사 그룹에 메시지 게시\n—> 게시판 글쓰기, 댓글 달기</li>\n<li>서버가 아직 식별하지 않은 새 리소스 생성\n—> 신규 주문 생성</li>\n<li>기존 자원에 데이터 추가\n—> 한 문서 끝에 내용 추가하기</li>\n</ul>\n</li>\n<li>정리 : 이 리소스 URI에 POST 요청이 오면 요청 데이터를 어떻게 처리할지 리소스마다 따로 정해야 함 —> 정해진 것이 없음</li>\n</ol>\n<br>\n<h2 id=\"6post-정리\" style=\"position:relative;\"><a href=\"#6post-%EC%A0%95%EB%A6%AC\" aria-label=\"6post 정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6.POST 정리</h2>\n<ol>\n<li>\n<p>새 리소스 생성(등록)</p>\n<ul>\n<li>서버가 아직 식별하지 않은 새 리소스 생성</li>\n</ul>\n</li>\n<li>\n<p>요청 데이터 처리</p>\n<ul>\n<li>단순히 데이터를 생성하거나, 변경하는 것을 넘어서 프로세스를 처리해야 하는 경우</li>\n<li>ex) 주문에서 결제 완료 —> 배달 시작 —> 배달완료 처럼 단순히 값 변경을 넘어 프로세스의 상태가 변경되는 경우</li>\n<li>POST의 결과로 새로운 리소스가 생성되지 않을 수도 있음</li>\n<li>ex) POST <code class=\"language-text\">/orders/{orderId}/start-delivery(컨트롤 URI)</code></li>\n</ul>\n</li>\n<li>\n<p>다른 메서드로 처리하기 애매한 경우</p>\n<p>ex) JSON으로 조회 데이터를 넘겨야 하는데, GET 메서드를 사용하기 어려운 경우, 애매하면 POST</p>\n</li>\n</ol>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","excerpt":"1.HTTP 메서드 종류 : 주요 메서드 : 리소스 조회 : 요청 데이터 처리, 주로 등록에 사용 : 리소스를 대체, 해당 리소스가 없으면 생성 : 리소스 부분 변경 : 리소스 삭제 2.HTTP 메서드 종류 : 기타 메서드 : GET과 동일하지만 메시지 부분을 제외하고, 상태 줄과 헤더만 반환 : 대상 리소스에 대한 통신 가능 옵션(메서드)를 설명(주로  에서 사용) : 대상 자원으로 식별되는 서버에 대한 터널을 설정 —> 거의 사용 X : 대상 리소스에 대한 경로를 따라 메시지 루프백 테스트를 수행 —> 거의 사용 X 3.GET 리소스 조회 서버에 전달하고 싶은 데이터는 Query(쿼리 파라미터, 쿼리 스트링)를 통해서 전달 메시지 바디를 사용해서 데이터를 전달할 수 있지만, 지원하지 않는 곳이 많아서 권장하지 않음 4.POST 요청 데이터 처리 메시지 바디를 통해 서버로 요청 데이터 전달 서버는 요청 데이터를 처리 메시지 바디를 통해 들어온 데이터를 처리하는 모든 기능을 수행한…","frontmatter":{"date":"December 17, 2021","title":"HTTP - 4.HTTP 메서드(2)","categories":"CS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-cs-HTTP-7/"}},"next":{"id":"76ca7d65-d6cc-5912-b2dc-8c8f02719519","html":"<br>\n<h1 align=\"center\">\n  👋  Promise 인스턴스 생성\n</h1>\n<br>\n<h2 id=\"1-new-promise\" style=\"position:relative;\"><a href=\"#1-new-promise\" aria-label=\"1 new promise permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. new Promise()</h2>\n<ul>\n<li><code class=\"language-text\">Promise</code> 인스턴스를 생성하여 반환함</li>\n<li>\n<p>파라미터 실행자<code class=\"language-text\">(excuter)</code> 함수를 작성함</p>\n<ul>\n<li>성공, 실패 처리 함수 이름</li>\n<li>실행자 코드</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const obj = new Promise((resolve, reject) =&gt; {\n  resolve(&#39;성공&#39;);\n  reject(&#39;실팽&#39;);\n});\n\nobj.then(\n  (value) =&gt; {\n    console.log(value);\n  },\n  (reason) =&gt; {\n    console.log(reason);\n  },\n);\n\nconsole.log(&#39;끝&#39;);\n\n// 1. const obj = new Promise((resolve, reject) =&gt; {...} Promise 인스턴스를 생성하여 obj에 할당함\n// 2. resolve와 reject 이름의 Function 오브젝트를 생성하여 인스턴스에 설정함\n// 3. resolve(&quot;성공&quot;); reject(&quot;실팽&quot;); 실행자 처리를 성공하면 resolve()가 호출되고 실패하면 reject()가 호출됨\n// 4. 지금 호출하지 않고 코드 끝까지 실행한 후 호출함\n// 5. 이것이 Promise의 비동기 처리(실행) 임\n// 6. obj.then((value) =&gt; {.1.}, (reason) =&gt; {.2.}): then()을 실행하지 않음 아래로 내려 감\n// 7. console.log(&quot;끝&quot;)을 실행함 여기서 전체 흐름이 끝나지만 실행자의 resolve()와 reject() 실행이 남았음\n// 8. 실행자에서 resolve(&quot;성공&quot;) 또는 reject(&quot;실패&quot;)를 호출함 상태가 하나만 발생하므로 상태에 해당하는 함수만 호출함 여기서는 resolve(&quot;성공&quot;)을 호출함\n// 9. then()을 호출함 then() 단위로 파라미터의 함수를 실행하게 됨\n// 10. then((value) =&gt; {console.log(value)}, 실행자에서 resolve(&quot;성공&quot;)에서 &quot;성공&quot;이 value에 설정됨\n// 11. 엔진에서는 상태(fulfilled, rejected)에 따라 파라미터의 핸들러 함수를 실행함\n// 12. then((reason) =&gt; { console.log(reason)}; 실행자에서 reject(&quot;실패&quot;)를 호출하면 then()의 두 번째 파라미터 함수가 실행되며 reject(&quot;실패&quot;)에서 &quot;실패&quot;가 reason에 설정됨\n\n// [ 실행결과 ]\n// 끝\n// 성공</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>스펙 : <code class=\"language-text\">deferred action</code></p>\n<ul>\n<li>MDN: Promise chain</li>\n<li><code class=\"language-text\">obj.then((value) ⇒ {console.log(value)}, (reson) ⇒ {console.log(reson)};</code></li>\n</ul>\n</li>\n<li>\n<p>Promise 오브젝트 형태</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const promise = Promise;\n/*\n\t1. Promise 오브젝트 형태를 살펴봄\n\n\t2. promise를 펼치면 프로퍼티와 함수가 있음\n\n\t3. prototype에 constructor가 있으며 메소드가 있음\n\t\t- JS의 일반적인 형태\n*/\n\ncosnt ojb = new Promise((resolve, reject)) =&gt; {\n\tresolve([1,2,3]);\n\treject(&quot;실패&quot;);\n\tconsole.log(&quot;실행자&quot;);\n});\n\n/*\n\t1. resolve와 reject 이름의 Function 오브젝트를 생성함\n\t\t- Function 오브젝트이므로 호출할 수 있음\n\n\t*** 코드가 끝까지 처리한 후 실행함 ***\n\tresolve([1,2,3])을 호출하며 then()이 호출됨\n\t\t- [[PromiseStatus]]: &quot;resolved&quot; 이므로 then()의 첫 번째 파라미터 함수르 실행하게 됨\n*/\n\n/*\n\t2. obj.__proto__를 펼치면 Promise.prototype에 연결된 메소드가 표시됨\n\n\t3. [[PromiseStatus]]: &quot;resolved&quot; Promise 상태를 나타내며 &quot;fulfilled&quot; 상태를 뜻함\n\n\t4. [[PromiseValue]]: Array(3) resolve([1,2,3])의 파라미터에 작성한 값\n*/\n\nobj.then((value) =&gt; {\n\tconsole.log(value);  // resolve([1,2,3])의 [1,2,3]이 value에 설정됨\n}),\n(reason) =&gt; {\n\tconsole.log(reason);\n});\n// then()의 파라미터에 성공, 실패 핸들러 함수를 작성함\n\nconsole.log(&quot;끝&quot;);</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","frontmatter":{"date":"December 16, 2021","title":"Promise - 인스턴스 생성","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-promise-2/"}},"prev":{"id":"b4e36f46-21a3-59d6-9c9d-271640664d10","html":"<br>\n<h1 align=\"center\">\n  👋  Promise -  then(), then()의 return, catch(), finally()\n</h1>\n<br>\n<h2 id=\"1-then\" style=\"position:relative;\"><a href=\"#1-then\" aria-label=\"1 then permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. then()</h2>\n<ul>\n<li>\n<p>성공과 실패 핸들러 함수를 작성함</p>\n<ul>\n<li><code class=\"language-text\">Promise</code> 인스턴스를 반환함</li>\n</ul>\n</li>\n<li>\n<p>파라미터</p>\n<ul>\n<li>첫 번째: 성공일 때 실행될 핸들러 함수</li>\n<li>두 번째: 실패일 때 실행될 핸들러 함수</li>\n</ul>\n</li>\n<li>\n<p>실행자의 <code class=\"language-text\">resolve(), reject()</code> 에 파라미터 값을 다수 작성하더라도 핸들러 함수는 처음 하나만 사용 함</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const obj = new Promise((resolve, reject) =&gt; {\nresolve(1, 2, 3);\n});\n\nobj.then(\n(value) =&gt; {\n  conosle.log(value);\n},\n(reason) =&gt; {\n  console.log(reason);\n},\n);\n\n// 1. resolve(1,2,3); 파라미터에 값을 3개 작성했음\n// 2. 실패(reject)가 발생하지 않으면 reject()를 작성하지 않아도 됨\n// 3. obj.then((value) =&gt; {.1.}, (reason) =&gt; {.2.}); 사실 실행자에 resolve()만 있으므로 첫 번째 함수만 작성해도 됨\n// 4. 실행자에서 resolve()가 실행되면 then()의 첫 번째 파라미터 함수가 실행됨, 이 때 resolve(1,2,3)에서 1,2,3을 넘겨 주지만\n// 5. then((value) =&gt; {console.log(value)}의 value에 첫 번째 값인 1만 설정됨\n// 6. 다수의 파라미터 값을 넘겨주려면 배열, Object 등을 사용해야 함\n\n// [실행결과]\n// 1</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<h2 id=\"2-then의-return\" style=\"position:relative;\"><a href=\"#2-then%EC%9D%98-return\" aria-label=\"2 then의 return permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. then()의 return</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">then()</code> 에서 <code class=\"language-text\">Promise</code> 인스턴스를 반환함</p>\n<ul>\n<li><code class=\"language-text\">return</code> 값을 반환하지 않음</li>\n<li><code class=\"language-text\">method chain</code>에서 <code class=\"language-text\">this</code>를 <code class=\"language-text\">return</code> 하는 것과 같은 개념임</li>\n<li>따라서 <code class=\"language-text\">then().then()</code> 형태 처럼 <code class=\"language-text\">then()</code>을 연속해서 호출 할 수 있음</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">return</code> 값을 <code class=\"language-text\">[[PromiseValue]]</code>에 설정하고 <code class=\"language-text\">[[PromiseValue]]</code> 값을 다음 <code class=\"language-text\">then()</code> 의 파라미터 값으로 넘겨 줌</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const obj = new Promise((resolve, reject) =&gt; {\nresolve(100);\n});\n\nobj\n.then((value) =&gt; {\n  return value + 50;\n})\n.then((param) =&gt; {\n  console.log(param);\n});\n\n// 1. obj.then((value) =&gt; {...} value 파라미터에 100이 설정됨\n// 2. return value + 50; 150을 반환하지 않고 인스턴스를 반환함, 150은 [[PromiseValue]]에 설정함\n// 3. return을 작성하지 않으면 undefined를 [[PromiseValue]]에 설정함\n// 4. then((param) =&gt; {console.log(param}); param에 [[PromiseValue]] 값이 150이 설정됨\n\n// [실행결과]\n// 150</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<h2 id=\"3-catch\" style=\"position:relative;\"><a href=\"#3-catch\" aria-label=\"3 catch permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. catch()</h2>\n<ul>\n<li>\n<p>실패(reject)의 핸들러 함수를 작성함</p>\n<ul>\n<li><code class=\"language-text\">then()</code>의 두 번째 파라미터를 작성하지 않고</li>\n<li>대신에 <code class=\"language-text\">catch(param)</code>를 작성함</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const check = false;\nconst obj = new Promise((resolve, reject) =&gt; {\n  check ? resolve(check) : reject(1, 2, 3);\n});\n\nobj\n  .then((value) =&gt; {\n    console.log(value);\n  })\n  .catch((value) =&gt; {\n    console.log(value);\n  });\n\n// 1. check ? resolve(check) : reject(1,2,3); check 값이 false이므로 reject()를 호출하게 되며 파라미터 값으로 1,2,3을 넘겨 줌\n// 2. catch((value) =&gt; {console.log(value)}); then()의 두 번째 파라미터에 함수를 작성하지 않고 별도로 catch()를 작성했음\n// 3. reject()가 호출되면 catch(value)가 실행됨 1,2,3을 파라미터 값으로 넘겨주지만 value에 첫 번째 값인 1만 설정됨\n\n// [실행결과]\n// 1</code>\n        </deckgo-highlight-code>\n<ul>\n<li><code class=\"language-text\">return</code> 문의 표현식 평가 결과를 <code class=\"language-text\">[[PromiseValue]]</code>에 설정함</li>\n</ul>\n</li>\n<li><code class=\"language-text\">Promise</code> 인스턴스를 반환하므로 <code class=\"language-text\">catch().then()</code> 처럼 이어서 <code class=\"language-text\">then()</code> 을 호출할 수 있음</li>\n<li>\n<p><code class=\"language-text\">[[PromiseValue]]</code> 값을 <code class=\"language-text\">then()</code> 의 파라미터 값으로 넘겨줌</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const obj = new Promise((resolve, reject) =&gt; {\nresolve(100);\n});\n\nobj\n.then((value) =&gt; {\n  throw &#39;에러&#39;;\n})\n.catch((catch1) =&gt; {\n  console.log(&#39;catch1:&#39; + catch1);\n  return &#39;정상&#39;;\n})\n.then((param) =&gt; {\n  console.log(&#39;then:&#39; + param);\n})\n.catch((catch2) =&gt; {\n  console.log(&#39;catch2:&#39; + catch2);\n});\n\n// 1. obj.then((value) =&gt; {...} 실행자에서 resolve(100)이 실행되므로 then()의 첫 번째 파라미터 함수가 호출됨\n// 2. throw &quot;에러&quot; throw문으로 에러를 발생시킴. 바로 아래의 catch((catch1) = {})에서 받음, 이때, &quot;에러&quot;를 [[PromiseValue]]에 설정함\n// 3. catch((catch1) =&gt; {...}); [PromiseValue]]의 &quot;에러&quot;가 catch1에 설정됨\n// 4. return &quot;정상&quot;; 에러가 발생하여 catch()를 실행했지만 catch()에서 에러가 발생하지 않으면 바로 아래의 then()을 실행함 &quot;정상&quot;을 [[PromiseValue]]에 설정함\n// 5. then((param) =&gt; {...}); 여기서 에러가 발생하지 않으므로 아래의 catch()를 호출하지 않음 Promise 처리가 끝남\n// 6. catch((catch2) =&gt; {...}); 실행하지 않는 것을 설명하기 위해 작성했음\n\n// [실행결과]\n// catch1: 에러\n// then: 정상</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<h2 id=\"4-finally\" style=\"position:relative;\"><a href=\"#4-finally\" aria-label=\"4 finally permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. finally()</h2>\n<ul>\n<li>\n<p>성공, 실패에 관계 없이 파라미터의 핸들러 함수가 실행됨</p>\n<ul>\n<li>핸들러 함수에 파라미터가 없음</li>\n<li>ES2018부터 지원함</li>\n</ul>\n</li>\n<li>\n<p>활용 측면이지만 <code class=\"language-text\">then(), catch()</code>의 같은 코드를 <code class=\"language-text\">finally()</code>에 작성하면 코드 중복을 필할 수 있음</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const obj = new Promise((resovle, reject) =&gt; {\nresolve(100);\n});\n\nobj\n.then((value) =&gt; {\n  console.log(value);\n  return 200;\n})\n.catch((reason) =&gt; {\n  console.log(reason);\n})\n.finally((param) =&gt; {\n  console.log(&#39;finally:&#39; + param);\n});\n\n// 1. resolve(100); then()의 핸들러 함수가 호출됨\n// 2. obj.then((value) =&gt; {return 200;}) 200을 [[PromiseValue]]에 설정함 catch()를 실행하지 않고 finally()를 실행함\n// 3. finally((param) =&gt; {...} 문법적으로 param 파라미터를 사용하지 않음 then()에서 200을 return 하지만 [[PromiseValue]] 값이 param에 설정되지 않음\n// 4. 파라미터를 작성하더라도 에러가 나지 않지만 undefined가 설정되므로 의미가 없음\n\n// [실행결과]\n// 100\n// finally: undefined</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","frontmatter":{"date":"December 17, 2021","title":"Promise - then(), then()의 return, catch(), finally()","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-promise-3/"}},"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":"zoomkoding/zoomkoding-gatsby-blog"}}}}},"pageContext":{"slug":"/study-cs-HTTP-7/","nextSlug":"/study-js-es6-promise-2/","prevSlug":"/study-js-es6-promise-3/"}},"staticQueryHashes":["1073350324","2938748437"]}