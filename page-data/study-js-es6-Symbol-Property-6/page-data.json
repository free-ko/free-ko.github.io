{"componentChunkName":"component---src-templates-blog-template-js","path":"/study-js-es6-Symbol-Property-6/","result":{"data":{"cur":{"id":"faba1cc2-1210-5f7f-885c-fd2fbe3881cf","html":"<br>\n<h1 align=\"center\">\n  👋  Symbol.toPrimitive\n</h1>\n<br>\n<h2 id=\"toprimitive\" style=\"position:relative;\"><a href=\"#toprimitive\" aria-label=\"toprimitive permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>toPrimitive</h2>\n<ul>\n<li>오브젝트를 대응하는 <code class=\"language-text\">Primitive</code> 값으로 변환</li>\n<li>\n<p>대응, 기대하는 타입</p>\n<ul>\n<li>number, string, default</li>\n<li>ToPrimitive 스펙</li>\n</ul>\n</li>\n<li>\n<p>오브젝트를 문자열에 대응</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const point = { bonus: 100 };\nconsole.log(point.toString()); // [object Object]\n\nconst book = {\ntoString() {\n  return &#39;책&#39;;\n},\n};\n\nconsole.log(`${book}`); // 책\n\n// 1. 문자열 대응은 toString()을 사용함\n// 2. point.toString() Object.prototype.toString()가 호출 됨\n// 3. `${book}` book 오브젝트의 toString()이 호출 됨</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>오브젝트를 숫자에 대응</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const point = {bonus: 100};\nconsole.log(point.valueOf());  // {bonus: 100}\n\nconst book = {\n\ttoString() { return 70 }\n\tvalueOf() { return 30 }\n};\n\nconsole.log(book * 20);   // 600\n\n// 1. 숫자 대응은 valueOf()를 사용함\n// 2. point.valueOf() Object.prototype.valueOf()가 호출 됨\n// 3. book * 20 book 오브젝트의 valueOf()가 호출되며 toString()이 호출되지 않음\n// 4. valueOf()를 작성하지 않으면 toString()이 호출됨</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p><code class=\"language-text\">Symbol.toPrimitive()</code> 사용</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const obj = {\n[Symbol.toPrimitive](hint) {\n  return hint === &#39;number&#39; ? 30 : hint === &#39;string&#39; ? &#39;책&#39; : &#39;default&#39;;\n},\n};\n\nconsole.log(20 * obj); // 600\nconsole.log(`${obj}` + 100); // 책100\nconsole.log(obj + 50); // default50\nconsole.log(&#39;default&#39; === obj); // true;</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","excerpt":"toPrimitive 오브젝트를 대응하는  값으로 변환 대응, 기대하는 타입 number, string, default ToPrimitive 스펙 오브젝트를 문자열에 대응 오브젝트를 숫자에 대응  사용","frontmatter":{"date":"October 26, 2021","title":"Symbol.toPrimitive","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-Symbol-Property-6/"}},"next":{"id":"5071182f-14de-504f-af6f-4c56d52ac02f","html":"<br>\n<h1 align=\"center\">\n  👋  Symbol.species 오버라이드\n</h1>\n<br>\n<h2 id=\"species-오버라이드\" style=\"position:relative;\"><a href=\"#species-%EC%98%A4%EB%B2%84%EB%9D%BC%EC%9D%B4%EB%93%9C\" aria-label=\"species 오버라이드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Species 오버라이드</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">Symbol.species</code> 는 <code class=\"language-text\">static</code> 약세서 프로퍼티 이며 <code class=\"language-text\">getter</code> 만 있고 <code class=\"language-text\">setter</code> 는 없음</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">class Sports extends Array {\n\tstatice get [Symbol.species](){\n\t\treturn Array;\n\t}\n};\n\nconst obj = new Sports(10, 20)</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p><code class=\"language-text\">Symbol.species</code> 를 사용할 수 있는 빌트인 오브젝트</p>\n<ul>\n<li>Array, Map, Set, RegExp</li>\n<li>Promise, ArrayBuffer, TypedArray</li>\n</ul>\n</li>\n<li>빌트인 오브젝트를 상속받은 <code class=\"language-text\">class</code>에 <code class=\"language-text\">Symbol.species</code> 를 작성하면 빌트인 오브젝트의 <code class=\"language-text\">@@species</code>가 오라이드 됨</li>\n<li>\n<p>인스턴스 바꾸기</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">class Sports extends Array {\n\tstatice get [Symbol.species](){\n\t\treturn Array;\n\t}\n};\n\nconst one = new Sports(10, 20, 30);\nconsole.log(one instanceof Sports);  // true\n\nconst two = one.slice(1, 2);\nconsole.log(two instanceof Array);   // true\nconsole.log(two instanceof Sports);  // false</code>\n        </deckgo-highlight-code>\n<ul>\n<li><code class=\"language-text\">class Sports extends Array{}</code></li>\n<li>빌트인 <code class=\"language-text\">Array</code> 오브젝트를 상속 받음</li>\n<li><code class=\"language-text\">statice get [Symbol.species](){ return Array; }</code></li>\n<li>빌트인<code class=\"language-text\">Array</code> 오브젝트의 <code class=\"language-text\">@@species</code>를 오버라이드 함</li>\n<li><code class=\"language-text\">const one = new Sports(10, 20, 30);</code></li>\n<li>인스턴스를 생성함</li>\n<li>파라미터 값이 인스턴스에 설정 됨</li>\n<li><code class=\"language-text\">one instanceof Sports</code></li>\n<li><code class=\"language-text\">Sports</code> 로 <code class=\"language-text\">one</code> 을 만들었으므로 <code class=\"language-text\">true</code> 출력</li>\n<li><code class=\"language-text\">const two = one.slice(1,2);</code></li>\n<li><code class=\"language-text\">Array</code> 오브젝트를 상속 받았으므로 <code class=\"language-text\">one</code> 인스턴스로 <code class=\"language-text\">slice()</code>를 호출 할 수 있음</li>\n<li><code class=\"language-text\">slice()</code> 대상은 인스턴스에 설정된 [10, 20, 30]</li>\n<li>인스턴스를 반환하며 반환되는 인스턴스에 <code class=\"language-text\">slice()</code> 결과를 설정함</li>\n<li><code class=\"language-text\">Symbol.species()</code> 로 오버라이드 했으므로</li>\n<li><code class=\"language-text\">static get [Symbol.species](){}</code> 가 호출 됨</li>\n<li>호출에 사용한 <code class=\"language-text\">one</code> 인스턴스 형태를 반환하지 않고 <code class=\"language-text\">Array</code> 인스턴스를 반환함</li>\n<li>이처럼 <code class=\"language-text\">Symbol.species()</code>로 반환할 인스턴스를 변경할 수 있음</li>\n<li><code class=\"language-text\">two instanceof Array</code></li>\n<li><code class=\"language-text\">two</code> 인스턴스에는 <code class=\"language-text\">Array</code> 인스턴스가 할당되어 있으며</li>\n<li><code class=\"language-text\">Array</code> 오브젝트로 만들었으므로 <code class=\"language-text\">true</code> 출력</li>\n<li><code class=\"language-text\">two instacne of Sports</code></li>\n<li><code class=\"language-text\">Sports</code> 가 아니라 <code class=\"language-text\">Array</code> 오브젝트로 <code class=\"language-text\">two</code> 인스턴스를 만들었으므로 <code class=\"language-text\">false</code> 출력</li>\n</ul>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","frontmatter":{"date":"October 25, 2021","title":"Symbol.species 오버라이드","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-Symbol-Property-5/"}},"prev":{"id":"45431a23-8d32-57af-b657-0c411f5de57c","html":"<br>\n<h1 align=\"center\">\n  👋  Symbol.iterator, Array.prototype[@@iterator], Object 이터레이션\n</h1>\n<br>\n<h2 id=\"1-iterator\" style=\"position:relative;\"><a href=\"#1-iterator\" aria-label=\"1 iterator permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. iterator</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">@@iterator</code>가 있는 빌트인 오브젝트</p>\n<ul>\n<li>String, Array, Map, Set, TypedArray</li>\n</ul>\n</li>\n<li>빌트인 Object에는 <code class=\"language-text\">@@iterator</code>가 없지만 개발자 코드로 작성할 수 있음</li>\n</ul>\n<br>\n<h2 id=\"2-arrayprototypeiterator\" style=\"position:relative;\"><a href=\"#2-arrayprototypeiterator\" aria-label=\"2 arrayprototypeiterator permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Array.prototype[@@iterator]</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">Array</code> 오브젝트의 <code class=\"language-text\">[Symbol.iterator]()</code>를 호출하면</p>\n<ul>\n<li>이터레이터 오브젝트 반환</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const list = [10, 20];\nconst obj = list[Symbol.iterator]();\n\nconsole.log(obj.next()); // {value: 10, done: false}\nconsole.log(obj.next()); // {value: 20, done: false}\nconsole.log(obj.next()); // {value: undefined, done: true}</code>\n        </deckgo-highlight-code>\n<ul>\n<li><code class=\"language-text\">next()</code> 로 배열 엘리먼트 값을 하나씩 구할 수 있음</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"3-stringprototypeiterator\" style=\"position:relative;\"><a href=\"#3-stringprototypeiterator\" aria-label=\"3 stringprototypeiterator permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. String.prototype[@@iterator]</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">String</code> 오브젝트의 <code class=\"language-text\">[Symbol.iterator]()</code>를 호출하면</p>\n<ul>\n<li>이터레이터 오브젝트 반환</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const list = &#39;1A&#39;;\nconst obj = list[Symbol.iterator]();\n\nconsole.log(obj.next()); // {value: 1, done: false}\nconsole.log(obj.next()); // {value: A, done: false}\nconsole.log(obj.next()); // {value: undefined, done: true}</code>\n        </deckgo-highlight-code>\n<ul>\n<li><code class=\"language-text\">next()</code> 로 문자열에서 문자를 하나씩 구할 수 있음</li>\n</ul>\n</li>\n</ul>\n <br>\n<h2 id=\"4-object-이터레이션\" style=\"position:relative;\"><a href=\"#4-object-%EC%9D%B4%ED%84%B0%EB%A0%88%EC%9D%B4%EC%85%98\" aria-label=\"4 object 이터레이션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. Object 이터레이션</h2>\n<ul>\n<li>\n<p>빌트인 <code class=\"language-text\">Object</code> 에는 <code class=\"language-text\">Symbol.iterator</code> 가 없음</p>\n<ul>\n<li><code class=\"language-text\">Symbol.iterator</code> 가 반복을 처리하므로</li>\n<li><code class=\"language-text\">Object에 Symbol.iterator</code> 를 작성하면 반복할 수 있음</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const obj = {\n  [Symbol.iterator]() {\n    return {\n      count: 0,\n      maxCount: this.maxCount,\n      next() {\n        if (this.count &lt; this.maxCount) {\n          return { value: this.count++, done: false };\n        }\n        return { value: undefined, done: true };\n      },\n    };\n  },\n};\n\nobj.maxCount = 2;\nfor (const value of obj) {\n  console.log(value);\n}\n\n// 실행결과\n// 0\n// 1</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>엔진이 <code class=\"language-text\">for-of</code> 문을 시작하면</p>\n<ul>\n<li>먼저 <code class=\"language-text\">obj</code>에서 <code class=\"language-text\">[Symbol.iterator]</code> 검색, 이를 위해 obj에 <code class=\"language-text\">[Symbol.iterator]</code> 작성</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">for(const result of obj)</code> 를 처음 실행할 때</p>\n<ul>\n<li><code class=\"language-text\">obj</code> 의 <code class=\"language-text\">[Symbol.iterator]()</code> 가 호출되면 <code class=\"language-text\">return{}</code> 문을 수행</li>\n<li><code class=\"language-text\">obj.maxCount = 2;</code> 로 반복 횟수 정의</li>\n</ul>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","frontmatter":{"date":"October 27, 2021","title":"Symbol.iterator, Array.prototype[@@iterator], Object 이터레이션","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-Symbol-Property-7/"}},"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":"zoomkoding/zoomkoding-gatsby-blog"}}}}},"pageContext":{"slug":"/study-js-es6-Symbol-Property-6/","nextSlug":"/study-js-es6-Symbol-Property-5/","prevSlug":"/study-js-es6-Symbol-Property-7/"}},"staticQueryHashes":["1073350324","2938748437"]}