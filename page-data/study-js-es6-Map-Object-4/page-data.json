{"componentChunkName":"component---src-templates-blog-template-js","path":"/study-js-es6-Map-Object-4/","result":{"data":{"cur":{"id":"ba1f99f8-391d-5a16-b039-f96dbc8afef8","html":"<br>\n<h1 align=\"center\">\n  👋  Map과 이터레이터 오브젝트 - entries(), keys(), values(), Symbol.iterator()\n</h1>\n<br>\n<h2 id=\"1-entries\" style=\"position:relative;\"><a href=\"#1-entries\" aria-label=\"1 entries permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. entries()</h2>\n<ul>\n<li>\n<p>Map 인스턴스로 이터레이터 오브젝트 생성, 반환</p>\n<ul>\n<li>Map 인스턴스에 설정된 순서로 반환</li>\n<li><code class=\"language-text\">next()</code> 로 <code class=\"language-text\">[key, value]</code> 반환</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const obj = new Map([\n  [&#39;one&#39;, 100],\n  [&#39;two&#39;, 200],\n]);\n\nconst iter = obj.entries();\n\nconsole.log(iter.next()); // {value: [one, 100], done: false}\nconsole.log(iter.next()); // {value: [one, 200], done: false}\nconsole.log(iter.next()); // {value: undefined, done: true}</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<h2 id=\"2-keys\" style=\"position:relative;\"><a href=\"#2-keys\" aria-label=\"2 keys permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. keys()</h2>\n<ul>\n<li>\n<p>Map 인스턴스의 key로 이터레이터 오브젝트 생성, 반환</p>\n<ul>\n<li>value는 포함하지 않음</li>\n<li>Map 인스턴스에 설정된 순서로 반환</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">next()</code> 로 key 반환</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const obj = new Map([\n[&#39;one&#39;, 100],\n[&#39;two&#39;, 200],\n]);\n\nconst iter = obj.keys();\n\nconsole.log(iter.next()); // {value: one, done: false}\nconsole.log(iter.next()); // {value: two, done: false}\nconsole.log(iter.next()); // {value: undefined, done: true}</code>\n        </deckgo-highlight-code>\n<br>\n</li>\n</ul>\n<h2 id=\"3-values\" style=\"position:relative;\"><a href=\"#3-values\" aria-label=\"3 values permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. values()</h2>\n<ul>\n<li>\n<p>Map 인스턴스의 value로 이터레이터 오브젝트 생성, 반환</p>\n<ul>\n<li>key는 포함하지 않음</li>\n<li>Map 인스턴스에 설정된 순서로 반환</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">next()</code> 로 value 반환</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const obj = new Map([\n[&#39;one&#39;, 100],\n[&#39;two&#39;, 200],\n]);\n\nconst iter = obj.values();\n\nconsole.log(iter.next()); // {value: 100, done: false}\nconsole.log(iter.next()); // {value: 200, done: false}\nconsole.log(iter.next()); // {value: undefined, done: true}</code>\n        </deckgo-highlight-code>\n<br>\n</li>\n</ul>\n<h2 id=\"4-symboliterator\" style=\"position:relative;\"><a href=\"#4-symboliterator\" aria-label=\"4 symboliterator permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. Symbol.iterator()</h2>\n<ul>\n<li>\n<p>Map 인스턴스로 이터레이터 오브젝트 생성, 반환</p>\n<ul>\n<li><code class=\"language-text\">Map.prototype.entries()</code> 와 같음</li>\n<li><code class=\"language-text\">next()</code> 로 <code class=\"language-text\">[key, value]</code> 반환</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const obj = new Map([\n  [&#39;one&#39;, 100],\n  [&#39;two&#39;, 200],\n]);\n\nconst iter = obj[Symbol.iterator]();\n\nconsole.log(iter.next()); // {value: [one, 100], done: false}\nconsole.log(iter.next()); // {value: [one, 200], done: false}\nconsole.log(iter.next()); // {value: undefined, done: true}</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","excerpt":"1. entries() Map 인스턴스로 이터레이터 오브젝트 생성, 반환 Map 인스턴스에 설정된 순서로 반환  로  반환 2. keys() Map 인스턴스의 key로 이터레이터 오브젝트 생성, 반환 value는 포함하지 않음 Map 인스턴스에 설정된 순서로 반환  로 key 반환 3. values() Map 인스턴스의 value로 이터레이터 오브젝트 생성, 반환 key는 포함하지 않음 Map 인스턴스에 설정된 순서로 반환  로 value 반환 4. Symbol.iterator() Map 인스턴스로 이터레이터 오브젝트 생성, 반환  와 같음  로  반환","frontmatter":{"date":"November 04, 2021","title":"Map과 이터레이터 오브젝트 - entries(), keys(), values(), Symbol.iterator()","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-Map-Object-4/"}},"next":{"id":"d42b9844-ca27-5172-be07-148b80137493","html":"<br>\n<h1 align=\"center\">\n  👋  값 설정, 추출 메소드 - set(), get(), has()\n</h1>\n<h2 id=\"1-set\" style=\"position:relative;\"><a href=\"#1-set\" aria-label=\"1 set permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. set()</h2>\n<ul>\n<li>\n<p>Map 인스턴스에 key, value 설정</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">let obj = new Map();\nobj.set(&quot;one&quot;, 100);\nobj.set({}, &quot;오브젝트&quot;);\nobj.set(function(){}, &quot;Function&quot;);\nobj.set(new Number{&quot;100&quot;), &quot;인스턴스&quot;);\nobj.set(NaN, &quot;Not a Number&quot;);\n\nfor (let [key, value] of obj) {\n\tconsole.log(`${key} : ${value}`);\n};\n\n// [실행 결과]\n// one : 100\n// [ovbject Object] : 오브젝트\n// function(){} : Function\n// 100 : 인스턴스\n// NaN : Not a Number</code>\n        </deckgo-highlight-code>\n<ul>\n<li>key, value 순서로 파라미터 작성</li>\n<li>key, value를 설정한 인스턴스 반환</li>\n</ul>\n</li>\n<li>\n<p>key 값이 같으면 value가 바뀜</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">let obj = new Map();\nconst book = {};\nobj.set(book, &#39;첫 번째&#39;);\nobj.set(book, &#39;두 번째&#39;);\n\nfor (let [key, value] of obj) {\nconsole.log(`${key} : ${value}`);\n}\n\n// 1. obj.set(book, &quot;첫 번째&quot;); 외부에 작성한 book 오브젝트의 메모리 주소를 key 값으로 사용함\n// 2. obj.set(book, &quot;두 번째&quot;); book 오브젝트의 메모리 주소와 같은 key 값이 있으므로 값이 대체 됨\n\n// 실행 결과\n// [object Object] : 두 번째</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<h2 id=\"2-get\" style=\"position:relative;\"><a href=\"#2-get\" aria-label=\"2 get permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. get()</h2>\n<ul>\n<li>\n<p>Map에서 Key값이 같은 <code class=\"language-text\">Value</code> 반환</p>\n<ul>\n<li>key 값이 같지 않거나 타입이 다른 <code class=\"language-text\">undefined</code> 반환</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">let obj = new Map([\n  [&#39;one&#39;, 100],\n  [&#39;200&#39;, &#39;String 타입&#39;],\n]);\n\nconsole.log(obj.get(&#39;one&#39;)); // 100\nconsole.log(obj.get(&#39;two&#39;)); // undefined\nconsole.log(obj.get(200)); // undefined\n\n// 1. tow가 key에 없으므로 undefined을 반환\n// 2. 200이 있지만 타입이 다르므로 undefined를 반환</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>오브젝트 설정과 추출</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">let obj = new Map();\nconst like = { sports: &#39;스포츠&#39; };\nobj.set(like, { value: &#39;농구&#39; });\n\nconsole.log(obj.get(like)); // {value: 농구}\n\n// 1. 같은 메모리 주소를 사용 함</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<h2 id=\"3-has\" style=\"position:relative;\"><a href=\"#3-has\" aria-label=\"3 has permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. has()</h2>\n<ul>\n<li>\n<p>Map 인스턴스에서 key의 존재 여부를 반환</p>\n<ul>\n<li>key가 있으면 <code class=\"language-text\">true</code>, 아니면 <code class=\"language-text\">false</code></li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const obj = new Map([[&#39;one&#39;, 100]]);\n\nconsole.log(obj.has(&#39;one&#39;)); // true\nconsole.log(obj.has(&#39;two&#39;)); // false</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","frontmatter":{"date":"November 03, 2021","title":"값 설정, 추출 메소드 - set(), get(), has()","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-Map-Object-3/"}},"prev":{"id":"573f6298-d270-5aba-8f4e-a68d5d909850","html":"<br>\n<h1 align=\"center\">\n  👋  콜백 함수, 삭제, 지우기: forEach(), delete(), clear()\n</h1>\n<br>\n<h2 id=\"1-foreach\" style=\"position:relative;\"><a href=\"#1-foreach\" aria-label=\"1 foreach permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. forEach()</h2>\n<ul>\n<li>\n<p>Map 인스턴스를 반복하면서 <code class=\"language-text\">callback</code> 함수 호출</p>\n<ul>\n<li><code class=\"language-text\">map()</code>, <code class=\"language-text\">filter()</code> 등의 <code class=\"language-text\">callback</code> 함수가 동반되는 메소드 사용 불가</li>\n</ul>\n</li>\n<li>\n<p>callback 함수에서 넘겨주는 파라미터</p>\n<ul>\n<li>value, key, Map 인스턴스 key, value 순서가 아님</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const obj = new Map([\n  [&#39;one&#39;, 100],\n  [&#39;two&#39;, 200],\n]);\n\nconst callback = (value, key, map) =&gt; {\n  console.log(`${key}, ${value}`);\n};\n\nobj.forEach(callback);\n\n// 실행결과\n// one, 100\n// two, 200</code>\n        </deckgo-highlight-code>\n<ul>\n<li>콜백 함수에서 <code class=\"language-text\">this</code> 사용</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const obj = new Map([\n\t[&quot;one&quot;, 100],\n\t[&quot;two&quot;, 200]\n]);\n\nfunction callback = (value, key, map) =&gt; {\n\tconsole.log(`${key}, ${value}, ${this.check}`);\n};\n\nobj.forEach(callback, {check: 50});\n\n// 1. 콜백 함수를 일반 함수로 작성했음\n// 2. 콜백 함수를 화살표 함수로 작성하면 this가 window 오브젝트를 참조함\n// 3. 콜백 함수에서 this가 forEach()의 두 번째 파라미터에 작성한 오브젝틀 참조 함\n\n// 실행결과\n// one, 100, 50\n// two, 200, 50</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<h2 id=\"2-delete\" style=\"position:relative;\"><a href=\"#2-delete\" aria-label=\"2 delete permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. delete()</h2>\n<ul>\n<li>\n<p>Map 인스턴스에 파라미터 값과 같은 entry 삭제</p>\n<ul>\n<li>같은 key가 있으면 <code class=\"language-text\">true</code> 반환 없으면 <code class=\"language-text\">false</code> 반환</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const obj = new Map([\n\t[&quot;one&quot;, 100],\n\t[{}, &quot;오브젝트&quot;]\n]};\n\nconsole.log(obj.delete(&quot;one&quot;));   // true\nconsole.log(obj.delete({}));      // false\n\nconst sports = {};\nobj.set(sports, &quot;스포츠&quot;);\n\nconsole.log(obj.delte(sports));   // true</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<h2 id=\"3-clear\" style=\"position:relative;\"><a href=\"#3-clear\" aria-label=\"3 clear permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. clear()</h2>\n<ul>\n<li>\n<p>Map 인스턴스의 모든 entry를 지움</p>\n<ul>\n<li>Map 인스턴스를 삭제하는 것은 아님</li>\n<li>따라서 <code class=\"language-text\">[key, value]</code>를 추가할 수 있음</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const obj = new Map([\n  [&#39;one&#39;, 100],\n  [&#39;two&#39;, 200],\n]);\n\nconsole.log(obj.size); // 2\n\nobj.clear();\nconsole.log(obj.size); // 0\n\nobj.set(&#39;add&#39;, &#39;추가&#39;);\nconsole.log(obj.size); // 1</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>Size 프로퍼티</p>\n<ul>\n<li>Map 인스턴스의 entry 수를 반환</li>\n<li>개발자 코드로 수정 할 수 없음</li>\n</ul>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","frontmatter":{"date":"November 05, 2021","title":"콜백 함수, 삭제, 지우기 - forEach(), delete(), clear()","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-Map-Object-5/"}},"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":"zoomkoding/zoomkoding-gatsby-blog"}}}}},"pageContext":{"slug":"/study-js-es6-Map-Object-4/","nextSlug":"/study-js-es6-Map-Object-3/","prevSlug":"/study-js-es6-Map-Object-5/"}},"staticQueryHashes":["1073350324","2938748437"]}