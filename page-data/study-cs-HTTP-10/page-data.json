{"componentChunkName":"component---src-templates-blog-template-js","path":"/study-cs-HTTP-10/","result":{"data":{"cur":{"id":"77dad058-fe29-5f2f-a111-d727a43cba34","html":"<br>\n<h1 align=\"center\">\n  👋  클라이언트에서 서버로 데이터 전송\n</h1>\n<br>\n<h2 id=\"1-데이터-전달-방식은-크게-2가지\" style=\"position:relative;\"><a href=\"#1-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%8B%AC-%EB%B0%A9%EC%8B%9D%EC%9D%80-%ED%81%AC%EA%B2%8C-2%EA%B0%80%EC%A7%80\" aria-label=\"1 데이터 전달 방식은 크게 2가지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 데이터 전달 방식은 크게 2가지</h2>\n<ol>\n<li>\n<p>쿼리 파라미터를 통한 데이터 전송</p>\n<ul>\n<li>GET</li>\n<li>ex) 주로 정렬 필터(검색어)</li>\n</ul>\n</li>\n<li>\n<p>메시지 바디를 통한 데이터 전송</p>\n<ul>\n<li>POST, PUT, PATCH</li>\n<li>ex) 회원가입, 상품주문, 리소스 등록, 리소스 변경</li>\n</ul>\n</li>\n</ol>\n<br>\n<h2 id=\"2-4가지-상황\" style=\"position:relative;\"><a href=\"#2-4%EA%B0%80%EC%A7%80-%EC%83%81%ED%99%A9\" aria-label=\"2 4가지 상황 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 4가지 상황</h2>\n<ol>\n<li>\n<p>정적 데이터 조회</p>\n<ul>\n<li>이미지, 정적 테스트 문서</li>\n<li>쿼리 파라미터 미사용(리소스 경로로 단순하게 조회 가능)</li>\n<li>조회는 GET 사용</li>\n</ul>\n</li>\n<li>\n<p>동적 데이터 조회</p>\n<ul>\n<li>주로 검색, 게시판 목록에서 정렬 필터(검색어)</li>\n<li>조회는 GET 사용</li>\n<li>GET은 쿼리 파라미터 사용해서 데이터를 전달</li>\n</ul>\n</li>\n<li>\n<p>HTML Form을 통한 데이터 전송</p>\n<ul>\n<li>HTML Form Submit시 POST 전송 ex) 회원 가입, 상품 주문, 데이터 변경</li>\n<li>Content-Type : application/x-www.form-urlencode 사용</li>\n<li>form의 내용을 메시지 바디를 통해서 전송(key-value, 쿼리 파라미터 형식)</li>\n<li>전송 데이터를 Url encoding 처리 ex) abc김 —> abc%EA%B9%80</li>\n<li>HTML Form은 GET 전송도 가능</li>\n<li>Content-Type: multipart/form-data</li>\n<li>파일 업로드 같은 바이너리 데이터 전송시 사용</li>\n<li>다른 종류의 여러 파일과 폼의 내용 함께 전송 가능(그래서 이름이 multipart)</li>\n<li>참고 : HTML Form 전송은 GET, POST만 지원</li>\n</ul>\n</li>\n<li>\n<p>HTTP API를 통한 데이터 전송</p>\n<ul>\n<li>회원 가입, 상품 주문, 데이터 변경</li>\n<li>서버 to 서버, 앱 클라이언트, 웹 클라이언트(Ajax) : 백엔드 시스템 통신</li>\n<li>앱 클라이언트 : 아이폰, 안드로이드</li>\n<li>웹 클라이언트</li>\n<li>HTML에서 Form 전송 대신 JS를 통한 통신에 사용(AJAX) ex) React, VueJS 같은 웹 클라이언트와 API 통신</li>\n<li>POST, PUT, PATCH : 메시지 바디를 통해 데이터 전송</li>\n<li>GET : 조회, 쿼리 파라미터로 데이터 전달</li>\n<li>Content-Type: application/json을 주로 사용(사실상 표준) ex) TEXT, XML, JSON 등</li>\n</ul>\n</li>\n</ol>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%8B%AC-%EB%B0%A9%EC%8B%9D%EC%9D%80-%ED%81%AC%EA%B2%8C-2%EA%B0%80%EC%A7%80\">1. 데이터 전달 방식은 크게 2가지</a></li>\n<li><a href=\"#2-4%EA%B0%80%EC%A7%80-%EC%83%81%ED%99%A9\">2. 4가지 상황</a></li>\n</ul>\n</div>","excerpt":"1. 데이터 전달 방식은 크게 2가지 쿼리 파라미터를 통한 데이터 전송 GET ex) 주로 정렬 필터(검색어) 메시지 바디를 통한 데이터 전송 POST, PUT, PATCH ex) 회원가입, 상품주문, 리소스 등록, 리소스 변경 2. 4가지 상황 정적 데이터 조회 이미지, 정적 테스트 문서 쿼리 파라미터 미사용(리소스 경로로 단순하게 조회 가능) 조회는 GET 사용 동적 데이터 조회 주로 검색, 게시판 목록에서 정렬 필터(검색어) 조회는 GET 사용 GET은 쿼리 파라미터 사용해서 데이터를 전달 HTML Form을 통한 데이터 전송 HTML Form Submit시 POST 전송 ex) 회원 가입, 상품 주문, 데이터 변경 Content-Type : application/x-www.form-urlencode 사용 form의 내용을 메시지 바디를 통해서 전송(key-value, 쿼리 파라미터 형식) 전송 데이터를 Url encoding 처리 ex) abc김 —> abc%EA%B9%80…","frontmatter":{"date":"December 21, 2021","title":"HTTP - 5.메서드 활용(1)","categories":"CS","author":"Kay","emoji":"👨‍💻"},"fields":{"slug":"/study-cs-HTTP-10/"}},"next":{"id":"f81ca26f-008d-52e3-874c-57b178a05b79","html":"<br>\n<h1 align=\"center\">\n  👋  Promise -  all(), race()\n</h1>\n<br>\n<h2 id=\"1-all\" style=\"position:relative;\"><a href=\"#1-all\" aria-label=\"1 all permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. all()</h2>\n<ul>\n<li>\n<p>파라미터의 모든 <code class=\"language-text\">Promise</code> 처리를 완료했을 때</p>\n<ul>\n<li><code class=\"language-text\">then()</code> 의 핸들러 함수를 실행함</li>\n<li><code class=\"language-text\">Promise.all()</code> 형태로 작성</li>\n</ul>\n</li>\n<li>\n<p>파라미터를 이터러블로 작성함</p>\n<ul>\n<li>작성한 순서로 <code class=\"language-text\">Promise</code> 인스턴스 생성</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">order</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">delay</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'실행자:'</span><span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token function\">order</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">order</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">order</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">param</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'then:'</span> <span class=\"token operator\">+</span> param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1. Promise.all([order(500), order(300), order(100)]) all() 파라미터를 이터러블로 작성했음, 파라미터에 작성한 순서로 order() 함수를 호출하며 Promise 인스턴스를 생성하여 반환함</span>\n<span class=\"token comment\">// 2. setTimeout(() => {...}, delay) setTimeout()의 두 번째 파라미터 delay는 지연 시간으로 값의 단위는 밀리초임</span>\n<span class=\"token comment\">// 3. 따라서, setTimeout()의 지연 시간이 짧은 순서인 100, 300, 500 순서로 resolve(dealy)를 실행하지만 실행할 때마다 아래의 then()을 호출하지 않고 3개를 모두 실행한 후에 then()을 한번만 호출함</span>\n<span class=\"token comment\">// 4. 이것이 all() 함수의 특징임</span>\n<span class=\"token comment\">// 5. then((param) => consoel.log(\"then:\" + param)); 'then'처럼 resolve(dealy)의 파라미터 값을 배열로 만들어 param 파라미터에 설정함</span>\n<span class=\"token comment\">// 6. 이때, resolve(delay)가 실행된 순서가 아니라 all()의 파라미터에 작성한 순서로 값을 설정함</span>\n<span class=\"token comment\">// 7. resolve() 실행 순서는 100, 300 500이지만 결과는 500, 300, 100이 출력됨</span>\n\n<span class=\"token comment\">// [실행결과]</span>\n<span class=\"token comment\">// 실행자: 100</span>\n<span class=\"token comment\">// 실행자: 300</span>\n<span class=\"token comment\">// 실행자: 500</span>\n<span class=\"token comment\">// then: 500, 300, 100실행자에서 실패가 발생했을 때</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">reject()</code> 가 발생한 시점에 <code class=\"language-text\">then()</code>을 실행</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">order</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">delay</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    dealy <span class=\"token operator\">===</span> <span class=\"token number\">300</span> <span class=\"token operator\">?</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>dealy<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token function\">order</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">order</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">order</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n<span class=\"token punctuation\">(</span><span class=\"token parameter\">param</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'성공:'</span> <span class=\"token operator\">+</span> param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token parameter\">param</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'실패:'</span> <span class=\"token operator\">+</span> param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1. reject()가 있으며 reject()가 발생하면 처리가 앞 코드와 다름</span>\n<span class=\"token comment\">// 2. delay === 300 ? reject(delay) : resolve(delay); 설명을 위해 order(300)일 때 reject(delay)가 실행되도록 했음</span>\n<span class=\"token comment\">// 3. 처음 resolve(100)이 실행되며 100이 출력됨</span>\n<span class=\"token comment\">// 4. 이어서 reject(300)이 실행되며 300이 출력됨</span>\n<span class=\"token comment\">// 5. 또한 then()의 두 번째 파라미터 함수가 호출되어 \"실패:300\"이 출력됨 reject()가 발생했을 때 전체가 끝나지 않음</span>\n<span class=\"token comment\">// 6. resolve(500)이 실행되며 500이 출력됨</span>\n<span class=\"token comment\">// 7. 앞 코드에서는 3개 모두가 끝나면 all() 파라미터에 작성한 순서로 값을 출력했는데 여기서는 출력하지 않음</span>\n<span class=\"token comment\">// 8. all()은 이렇게 하나라도 reject()가 발생하면 then()의 첫 번째 파라미터 함수를 실행하지 않음</span>\n<span class=\"token comment\">// 9. 이것이 all()의 또 하나의 특징</span>\n\n<span class=\"token comment\">// [실행결과]</span>\n<span class=\"token comment\">// 100</span>\n<span class=\"token comment\">// 300</span>\n<span class=\"token comment\">// 실패: 300</span>\n<span class=\"token comment\">// 500</span></code></pre></div>\n</li>\n</ul>\n<br>\n<h2 id=\"2-race\" style=\"position:relative;\"><a href=\"#2-race\" aria-label=\"2 race permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. race()</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">resolve(), reject()</code> 에 관계없이 처음 한 번만 <code class=\"language-text\">then()</code> 을 실행하고 더 이상 실행하지 않음</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">order</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">delay</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">race</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token function\">order</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">order</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">order</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">param</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'then:'</span> <span class=\"token operator\">+</span> param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1. Promise.race([order(500), order(100), order(300)]) race()의 파라미터 순서로 order()를 호출함</span>\n<span class=\"token comment\">// 2. 그러면 결과는 100,300,500 순서로 resolve(delay)가 실행됨</span>\n<span class=\"token comment\">// 3. 그런데 order(100)일 때, 처음 한 번만 then()의 핸들러 함수를 실행하고 다음은 실행하지 않음 그래서 \"then:100\"만 출력됨</span>\n<span class=\"token comment\">// 4. 이것이 race()의 특징</span>\n\n<span class=\"token comment\">// 실행결과</span>\n<span class=\"token comment\">// 100</span>\n<span class=\"token comment\">// then: 100</span>\n<span class=\"token comment\">// 300</span>\n<span class=\"token comment\">// 500</span></code></pre></div>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1-all\">1. all()</a></li>\n<li><a href=\"#2-race\">2. race()</a></li>\n</ul>\n</div>","frontmatter":{"date":"December 20, 2021","title":"Promise - all(), race()","categories":"JS","author":"Kay","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-promise-5/"}},"prev":{"id":"98c785d2-27c8-5897-ab40-79474e0a4038","html":"<br>\n<h1 align=\"center\">\n  👋  Promise -  메커니즘 분석\n</h1>\n<br>\n<h2 id=\"1-code-classlanguage-textnew-promisefunctioncode-형태\" style=\"position:relative;\"><a href=\"#1-code-classlanguage-textnew-promisefunctioncode-%ED%98%95%ED%83%9C\" aria-label=\"1 code classlanguage textnew promisefunctioncode 형태 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. <code class=\"language-text\">new Promise(function(){})</code> 형태</h2>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'성공'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1. new Promise(function(resolve, reject) {...}) new 연산자로 Promise를 호출하면 prototype.constructor를 호출하며 인스턴스를 만듬</span>\n<span class=\"token comment\">// 2. 일반적으로 new Point(one, two)처럼 인스턴스의 초깃값을 파라미터에 작성하지만</span>\n<span class=\"token comment\">// 3. 비동기 처리를 위한 환경을 만들기 위해 파라미터에 함수를 사용함, 코드의 확장성을 고려한 접근임</span>\n<span class=\"token comment\">// 4. 실행자 함수는 constructor의 확장이며 constructor에서 연속해서 실행 함</span></code></pre></div>\n<br>\n<h2 id=\"2실행자의-파라미터에-함수-이름-작성\" style=\"position:relative;\"><a href=\"#2%EC%8B%A4%ED%96%89%EC%9E%90%EC%9D%98-%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0%EC%97%90-%ED%95%A8%EC%88%98-%EC%9D%B4%EB%A6%84-%EC%9E%91%EC%84%B1\" aria-label=\"2실행자의 파라미터에 함수 이름 작성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.실행자의 파라미터에 함수 이름 작성</h2>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">reoslve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'성공'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'실패'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">reason</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reason<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1. resolve, reject는 함수 이름이며 엔진이 이름의 Function 오브젝트를 생성함</span>\n<span class=\"token comment\">// 2. resolve(\"성공\"); 실행자의 파라미터가 Function 오브젝트이므로 resolve() 함수를 호출할 수 있음</span>\n<span class=\"token comment\">// 3. 함수 호출은 단지 파라미터 값인 \"성공\"을 설정하는 것 외에도 부가적인 처리를 한다는 의도가 포함되어 있음</span>\n<span class=\"token comment\">// 4. abc()처럼 실행자의 파라미터에 함수 이름이 없는 함수를 호출하면 에러가 발생하지만 then()의 핸들러 함수가 실행되지 않음</span>\n<span class=\"token comment\">// 5. resolve(\"성공\")이 호출되면 실행자 파라미터의 reoslve가 호출되며 파라미터의 resolve 함수는 엔진에서 만든 것이므로 엔진 내부 처리를 할 수 있음</span>\n\n<span class=\"token comment\">// [실행결과]</span>\n<span class=\"token comment\">// 성공</span></code></pre></div>\n<br>\n<h2 id=\"3파라미터-위치로-성공실패-처리\" style=\"position:relative;\"><a href=\"#3%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0-%EC%9C%84%EC%B9%98%EB%A1%9C-%EC%84%B1%EA%B3%B5%EC%8B%A4%ED%8C%A8-%EC%B2%98%EB%A6%AC\" aria-label=\"3파라미터 위치로 성공실패 처리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.파라미터 위치로 성공/실패 처리</h2>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">one<span class=\"token punctuation\">,</span> two</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">two</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'성공'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">reason</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'실패'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1. two()를 호출하면 then()의 두 번째 파라미터 함수가 호출됨</span>\n<span class=\"token comment\">// 2. 두 번째 파라미터는 실패를 나타내는 함수 임 즉, 엔진은 호출된 파라미터 위치의 함수로 성공/실패를 처리한다는 뜻</span>\n<span class=\"token comment\">// 3. 임의의 함수 이름을 사용할 수 있음 resolve()와 reject()를 사용한 것은 일반적인 시맨틱이기 때문</span>\n<span class=\"token comment\">// 4. 호출된 파라미터의 함수에 따라 비동기 처리를 위한 즉, then()에서 사용하기 위한 fulfilled 또는 rejected를 Promise 인스턴스의 [[PromiseStatus]]에 설정 함</span>\n\n<span class=\"token comment\">// [실행결과]</span>\n<span class=\"token comment\">// 실패</span></code></pre></div>\n<br>\n<h2 id=\"4실행자에-code-classlanguage-textresolvecode-code-classlanguage-textrejectcode-순서로-작성\" style=\"position:relative;\"><a href=\"#4%EC%8B%A4%ED%96%89%EC%9E%90%EC%97%90-code-classlanguage-textresolvecode-code-classlanguage-textrejectcode-%EC%88%9C%EC%84%9C%EB%A1%9C-%EC%9E%91%EC%84%B1\" aria-label=\"4실행자에 code classlanguage textresolvecode code classlanguage textrejectcode 순서로 작성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.실행자에 <code class=\"language-text\">resolve()</code>, <code class=\"language-text\">reject()</code> 순서로 작성</h2>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promoise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">reoslve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'실패'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'성공'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">reason</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reason<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'성공'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'실패'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">reason</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reason<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1. 성공과 실패가 모두 발생한다는 것은 논리에 맞지 않음 따라서 성공/실패 중에서 하나만 발생함</span>\n<span class=\"token comment\">// 2. reject() 함수, resolve() 함수 순서로 작성하면 [[PromiseStatus]]가 rejected가 됨</span>\n<span class=\"token comment\">// 3. resolve() 함수, reject() 함수 순서로 작성하면 [[PromiseStatus]]가 fulfilled가 됨</span>\n<span class=\"token comment\">// 4. 먼저 호출한 함수의 상태를 설정함</span>\n\n<span class=\"token comment\">// [실행결과]</span>\n<span class=\"token comment\">// 실패</span>\n<span class=\"token comment\">// 성공</span></code></pre></div>\n<br>\n<h2 id=\"5-code-classlanguage-textthencode-의-핸들러-함수에서-사용할-값을-인스턴스에-저장\" style=\"position:relative;\"><a href=\"#5-code-classlanguage-textthencode-%EC%9D%98-%ED%95%B8%EB%93%A4%EB%9F%AC-%ED%95%A8%EC%88%98%EC%97%90%EC%84%9C-%EC%82%AC%EC%9A%A9%ED%95%A0-%EA%B0%92%EC%9D%84-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4%EC%97%90-%EC%A0%80%EC%9E%A5\" aria-label=\"5 code classlanguage textthencode 의 핸들러 함수에서 사용할 값을 인스턴스에 저장 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. <code class=\"language-text\">then()</code> 의 핸들러 함수에서 사용할 값을 인스턴스에 저장</h2>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'성공'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'끝'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1. resolve(\"성공\"); 파라미터 값 \"성공\"을 Promise 인스턴스의 [[PromiseValue]]에 저장함</span>\n<span class=\"token comment\">// 2. then()이 비동기로 처리되므로 then()에서 값을 사용하기 위한 것</span>\n<span class=\"token comment\">// 3. [[PromiseStatue]]에 값을 설정하는 것도 같은 접근 임</span>\n\n<span class=\"token comment\">// [실행결과]</span>\n<span class=\"token comment\">// 끝</span>\n<span class=\"token comment\">// 성공</span></code></pre></div>\n<br>\n<h2 id=\"6code-classlanguage-textpromisecode-인스턴스-반환\" style=\"position:relative;\"><a href=\"#6code-classlanguage-textpromisecode-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EB%B0%98%ED%99%98\" aria-label=\"6code classlanguage textpromisecode 인스턴스 반환 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6.<code class=\"language-text\">Promise</code> 인스턴스 반환</h2>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1. then(), catch()에서 Promise 인스턴스를 생성하여 반환함</span>\n<span class=\"token comment\">// 2. 처음의 then()은 비동기로 실행되지만 이어지는 처리는 동기/비동기로 실행할 수 있음</span>\n<span class=\"token comment\">// 3. 실행 중인 then()에서 비동기 처리를 하지 않으면 이어지는 then()/catch()는 동기 형태로 처리 하게 됨</span>\n<span class=\"token comment\">// 4. 실행 중인 then()에서 다시 비동기로 처리하면 이어지는 then()/cathc()는 비동기로 처리하게 됨</span>\n<span class=\"token comment\">// 5. Promise 인스턴스를 생성하여 반환하므로 이어지는 처리를 동기/비동기로 처리할 수 있음</span>\n\n<span class=\"token comment\">// 실행결과</span>\n<span class=\"token comment\">// 100</span>\n<span class=\"token comment\">// 200</span></code></pre></div>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1-new-promisefunction-%ED%98%95%ED%83%9C\">1. <code class=\"language-text\">new Promise(function(){})</code> 형태</a></li>\n<li><a href=\"#2%EC%8B%A4%ED%96%89%EC%9E%90%EC%9D%98-%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0%EC%97%90-%ED%95%A8%EC%88%98-%EC%9D%B4%EB%A6%84-%EC%9E%91%EC%84%B1\">2.실행자의 파라미터에 함수 이름 작성</a></li>\n<li><a href=\"#3%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0-%EC%9C%84%EC%B9%98%EB%A1%9C-%EC%84%B1%EA%B3%B5%EC%8B%A4%ED%8C%A8-%EC%B2%98%EB%A6%AC\">3.파라미터 위치로 성공/실패 처리</a></li>\n<li><a href=\"#4%EC%8B%A4%ED%96%89%EC%9E%90%EC%97%90-resolve-reject-%EC%88%9C%EC%84%9C%EB%A1%9C-%EC%9E%91%EC%84%B1\">4.실행자에 <code class=\"language-text\">resolve()</code>, <code class=\"language-text\">reject()</code> 순서로 작성</a></li>\n<li><a href=\"#5-then-%EC%9D%98-%ED%95%B8%EB%93%A4%EB%9F%AC-%ED%95%A8%EC%88%98%EC%97%90%EC%84%9C-%EC%82%AC%EC%9A%A9%ED%95%A0-%EA%B0%92%EC%9D%84-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4%EC%97%90-%EC%A0%80%EC%9E%A5\">5. <code class=\"language-text\">then()</code> 의 핸들러 함수에서 사용할 값을 인스턴스에 저장</a></li>\n<li><a href=\"#6promise-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EB%B0%98%ED%99%98\">6.<code class=\"language-text\">Promise</code> 인스턴스 반환</a></li>\n</ul>\n</div>","frontmatter":{"date":"December 21, 2021","title":"Promise - 메커니즘 분석","categories":"JS","author":"Kay","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-promise-6/"}},"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/study-cs-HTTP-10/","nextSlug":"/study-js-es6-promise-5/","prevSlug":"/study-js-es6-promise-6/"}},"staticQueryHashes":["1073350324","2938748437"]}