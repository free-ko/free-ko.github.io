{"componentChunkName":"component---src-templates-blog-template-js","path":"/study-js-es6-class-9/","result":{"data":{"cur":{"id":"14a0932f-8d36-5976-aa07-340699e859a6","html":"<br>\n<h1 align=\"center\">\n  👋  this 참조, Generator\n</h1>\n<br>\n<h2 id=\"1-this-참조\" style=\"position:relative;\"><a href=\"#1-this-%EC%B0%B8%EC%A1%B0\" aria-label=\"1 this 참조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. this 참조</h2>\n<ul>\n<li><code class=\"language-text\">인스턴스.메소드()</code> 형태로 호출하면 메소드에서 <code class=\"language-text\">this</code>가 인스턴스를 참조 함</li>\n<li>\n<p><code class=\"language-text\">static</code> 메소드에서 <code class=\"language-text\">this</code> 는 메소드가 속한 클래스를 참조함</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">class Point {\nstatic setPoint(point) {\n  this.value = vapoint;\n}\n}\n\nPoint.setPoint(100);\n\nconsole.log(Point.value); // 100\nconsole.log(new Point().value); // undefined\n\n// 1. class Point 엔진이 class 키워드를 만나면 클래스 오브젝트를 만듬\n// 2. this.value = point; this가 메소드를 호출한 오브젝트를 참조함, 즉 this가 Point 클래스를 참조하므로 Point 클래스에 {valeu: 100} 형태로 설정됨\n// 3. Point.value Point 클래스에서 value 값을 구하게 되며 100이 반환됨\n// 4. new Point().value Point 인스턴스를 생성하고 value 값을 구하면 undefined 반환됨\n// 5. Point 클래스에 설정된 value 프로퍼티는 생성한 인스턴스에 포함되지 않음</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p><code class=\"language-text\">static property</code></p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">class Point {\nstatic value = 100;\n}\n\nconsole.log(Point.value); // 100\n\nPoint.bonnus = 300;\n\nconsole.log(Point.bonnus); // 300\nconsole.log(new Point().value); // undefined\n\n// 1. static value = 100; 값을 static property에 설정함\n// 2. ES2020 기준으로 스펙 제안 단계임 하지만 대부분의 브라우저에서 지원 함\n// 3. Point.value Point 클래스와 static 프로퍼티로 값을 구함\n// 4. Point.bonnus = 300; Point 클래스에 static 프로퍼티로 설정되며 {bonnus: 300} 형태임\n// 5. Point.bonnus Point 클래스와 static 프로퍼티로 값을 구함\n// 6. new Point().value Point 인스턴스를 생성하고 value 값을 구하면 undefined가 반환됨\n// 7. Point 클래스의 static 프로퍼티는 생성한 인스턴스에 포함되지 않음</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p><code class=\"language-text\">constructor</code>에서 <code class=\"language-text\">this.construcotr</code> 는 생성하는 인스턴스가 아니라 클래스 오브젝트를 참조 함</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">class Point {\nconstructor() {\n  console.log(this.constructor.get());\n}\nstatic get() {\n  return 100;\n}\n}\n\nnew Point(); // 100\n\n// this.constructor.get() thisconstructor가 Point 클래스를 참조하므로 static 메소드를 호출할 수 있음</code>\n        </deckgo-highlight-code>\n<br>\n</li>\n</ul>\n<h2 id=\"2-generator\" style=\"position:relative;\"><a href=\"#2-generator\" aria-label=\"2 generator permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Generator</h2>\n<ul>\n<li>\n<p>클래스의 제너레이터 함수는 <code class=\"language-text\">prototype</code>에 연결됨, 인스턴스로 호출해야 함</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">class Point {\ngetPoint() {\n  yield 10;\n  yield 20;\n}\n}\n\nconst gen = new Point();\nconst obj = gen.getPoint();\n\nconsole.log(obj.next());\nconsole.log(obj.next());\nconsole.log(obj.next());\n\n// 1. const obj = gen.getPoint(); 인스턴스의 제너레이터 함수를 호출하면 이터레이터 오브젝트를 생성하여 반환\n// 2. obj.next()를 실행할 때마다 yield에서 실행결과 처럼 반환함\n\n// 실행결과\n// {value: 10, done: false}\n// {value: 20, done: false}\n// {value: undefined, done: true}</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","excerpt":"1. this 참조  형태로 호출하면 메소드에서 가 인스턴스를 참조 함  메소드에서  는 메소드가 속한 클래스를 참조함  에서  는 생성하는 인스턴스가 아니라 클래스 오브젝트를 참조 함 2. Generator 클래스의 제너레이터 함수는 에 연결됨, 인스턴스로 호출해야 함","frontmatter":{"date":"November 23, 2021","title":"this 참조, Generator","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-class-9/"}},"next":{"id":"5488c2ca-800b-5720-946e-a3c673a09035","html":"<br>\n<h1 align=\"center\">\n  👋  Built-in 오브젝트 상속, Object 상속, Image 오브젝트 상속, Audio 오브젝트 상속\n</h1>\n<br>\n<h2 id=\"1-built-in-오브젝트-상속\" style=\"position:relative;\"><a href=\"#1-built-in-%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8-%EC%83%81%EC%86%8D\" aria-label=\"1 built in 오브젝트 상속 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Built-in 오브젝트 상속</h2>\n<ul>\n<li>\n<p>빌트인 오브젝트를 상속받을 수 있음</p>\n<ul>\n<li>인스턴스가 빌트인 오브젝트의 특징을 갖게 되며 <code class=\"language-text\">this</code> 로 빌트인 오브젝트에 접근할 수 있음</li>\n<li><code class=\"language-text\">extends</code> 키워드로 구현함</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">class Point extends Array {\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\tgetTotal() {\n\t\tlet total = 0;\n\t\tfor (const value of this) {\n\t\t\ttotal += value;\n\t\t};\n\t\tretru total;\n\t}\n}\n\nconst obj = new Point();\nobj.push(10,20,30);\n\nconsole.log(obj.getTotal());   // 60\n\n// 1. 빌트인 Array 오브젝트를 상속받음\n// 2. 빌트인 오브젝트의 constructor를 호출 함, 생성하는 인스턴스의 __proto__.__proto__에 Array.prototype의 메소드가 설정됨\n// 3. obj가 Point 인스턴스이지만 Array 오브젝트를 상속 받았으므로 push() 메모스를 호출 할 수 있음\n// 4. 인스턴스 프로퍼티로 {0: 10, 1: 20, 2: 30, length:3}이 설정됨\n// 5. obj에 [10, 20, 30]이 있으며 obj.__proto__에 getTotal()이 있고 obj.__proto__.__proto__에 Array 오브젝트의 메소드가 있으므로 값과 메소드를 모두 사용할 수 있음\n// 6. this가 obj 인스턴스를 참조하여 Array [10, 20, 30]은 이터러블 오브젝트이므로 for-of로 반복 할 수 있음</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>코드 프로세스</p>\n<ul>\n<li><code class=\"language-text\">class Point extends Array {...}</code></li>\n<li><code class=\"language-text\">const obj = new Point()</code></li>\n<li><code class=\"language-text\">constructor() { super() }</code></li>\n<li><code class=\"language-text\">obj.push(10, 20, 30)</code></li>\n<li><code class=\"language-text\">obj.getTotal()</code></li>\n<li><code class=\"language-text\">for (const value of this) {...}</code></li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"2-object-상속\" style=\"position:relative;\"><a href=\"#2-object-%EC%83%81%EC%86%8D\" aria-label=\"2 object 상속 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Object 상속</h2>\n<ul>\n<li><code class=\"language-text\">Object</code>는 클래스가 아니므로 다른 <code class=\"language-text\">Object</code>를 상속 받을 수 없지만 상속 받으면 <code class=\"language-text\">__proto__</code> 구조가 되는 것을 활용하여 상속을 구현 할 수 있음</li>\n<li>\n<p><code class=\"language-text\">Object</code> 상속</p>\n<ul>\n<li><code class=\"language-text\">Object.setPrototypeOf()</code>로 <code class=\"language-text\">__proto__</code> 구조를 만듬</li>\n</ul>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const Book = {\ngetTitle() {\n  console.log(&#39;Book&#39;);\n},\n};\n\nconst Point = {\ngetTitle() {\n  super.getTitle();\n},\n};\n\nObject.setPrototypeOf(Point, Book);\n\nPoint.getTitle(); // Book\n\n// 1. Book과 Point는 Object임, getTitle()은 함수이며 각 Object에 있음\n// 2. Object.setPrototypeOf(Point, Book); Point에 getTitle()이 있고 Point.__proto__에 Book의 getTitle()이 있는 구조가 됨\n// 3. Point.getTitle(); Point 오브젝트의 getTitle()이 호출 됨\n// 4. super.getTitle(); super()가 아니라 super임\n// 5. super는 한 단계 아래의 __proto__를 참조함, 아래는 __proto__에 연결되어 있다는 뜻 Book 오브젝트의 getTitle()을 호출 함</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<br>\n<h2 id=\"3-image-오브젝트-상속\" style=\"position:relative;\"><a href=\"#3-image-%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8-%EC%83%81%EC%86%8D\" aria-label=\"3 image 오브젝트 상속 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Image 오브젝트 상속</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">Image</code> 오브젝트 상속 코드</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">class Home extends Image {\nconstructor() {\n  super();\n}\n\nsetAttr() {\n  this.src = &#39;../../image/rainbow.png&#39;;\n  this.alt = &#39;집과 나무가 있고&#39; + &#39;무지개가 있는 모습&#39;;\n  this.title = &#39;무지개&#39;;\n}\n}\n\nconst obj = new Home();\nobj.setAttr();\n\ndocumnet.querySelector(&#39;#show&#39;).appendChild(obj);</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p><code class=\"language-text\">super();</code></p>\n<ul>\n<li><code class=\"language-text\">Image</code> 오브젝트의 <code class=\"language-text\">constructor</code>를 호출</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">this.src</code>, <code class=\"language-text\">this.alt</code>, <code class=\"language-text\">this.title</code></p>\n<ul>\n<li><code class=\"language-text\">Image</code> 오브젝트를 <code class=\"language-text\">this</code>로 참조</li>\n<li><code class=\"language-text\">Image</code> 속성에 값을 할당 함</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"4-audio-오브젝트-상속\" style=\"position:relative;\"><a href=\"#4-audio-%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8-%EC%83%81%EC%86%8D\" aria-label=\"4 audio 오브젝트 상속 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. Audio 오브젝트 상속</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">Audio</code> 오브젝트 상속</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">class Music extends Audio {\nconstructor() {\n  super();\n}\n\nsetAttr(src, controls, muted, loop) {\n  this.src = src;\n  this.controls = controls;\n  this.muted = muted;\n  this.loop = loop;\n}\n}\n\nconst obj = new Music();\nconst src = &#39;../../image/Beet5.png&#39;;\nobj.setAttr(src, true, true, true);\n\ndoccument.querySelector(&#39;#show&#39;).appendChild(obj);</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p><code class=\"language-text\">super()</code></p>\n<ul>\n<li><code class=\"language-text\">Audio</code> 오브젝트의 <code class=\"language-text\">constructor</code>를 호출</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">this.src</code>, <code class=\"language-text\">this.controls</code></p>\n<ul>\n<li><code class=\"language-text\">Audio</code> 오브젝트를 <code class=\"language-text\">this</code>로 참조</li>\n<li><code class=\"language-text\">Audio</code> 속성에 값을 할당함</li>\n<li>파라미터 값을 받아 속성값을 설정하면 범용 클래스로 사용할 수 있음</li>\n</ul>\n</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","frontmatter":{"date":"November 22, 2021","title":"Built-in 오브젝트 상속, Object 상속, Image 오브젝트 상속, Audio 오브젝트 상속","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-class-8/"}},"prev":{"id":"762b1300-a605-5c1f-85ad-302ed36a9f06","html":"<br>\n<h1 align=\"center\">\n  👋  Proxy, 기본 오퍼레이션 논리\n</h1>\n<br>\n<h2 id=\"1proxy\" style=\"position:relative;\"><a href=\"#1proxy\" aria-label=\"1proxy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.Proxy</h2>\n<ul>\n<li><code class=\"language-text\">Proxy</code>의 사전적 의미 : 대리, 대신</li>\n<li><code class=\"language-text\">Proxy</code> : 기본 오퍼레이션을 중간에 가로채어 오퍼레이션을 대리, 대신하여 실행함</li>\n<li>가로 채어 실행하더라도 전체 괘도를 벗어날 수 없으므로 오퍼레이션을 완전하게 바꿀 수는 없음</li>\n<li>그럼 무엇을 대리하고 대신 할까?</li>\n</ul>\n<br>\n<h2 id=\"2-기본-오퍼레이션\" style=\"position:relative;\"><a href=\"#2-%EA%B8%B0%EB%B3%B8-%EC%98%A4%ED%8D%BC%EB%A0%88%EC%9D%B4%EC%85%98\" aria-label=\"2 기본 오퍼레이션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 기본 오퍼레이션</h2>\n<ul>\n<li>커피를 주문하는 기본 오퍼레이션은 주문을 받는 카운터로 가서 커피를 주문함, 카운터가 커피를 내려 줌</li>\n<li>\n<p>이 모습을 <code class=\"language-text\">JS</code> 코드로 표현하면</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const counter = {order: &quot;커피};\nconst 주문자 = counter.order;\n\nconsole.log(주문자);   // 커피\n\n// 1. order는 커피를 주문하는 것으로 프로퍼티 key에 해당함\n// 2. counter는 주물을 받는 카운터리며 {order: &quot;커피&quot;}를 갖고 있음, 즉 주문을 받을 수 있으며 커피를 갖고 있음\n// 3. 카운터에게 커피를 주문하면 주문자에게 &quot;커피&quot;를 내주게 됨\n// 4. JS로 counter.order를 실행하면 &quot;커피&quot;가 반환됨\n// 5. 함수를 호출하지 않고 프로퍼티로 값을 구했으며 이것은 getter임\n// 6. 즉, getter를 실행하면 값이 반환됨, 이것이 기본 오퍼레이션</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>여기서 중요한 것은</p>\n<ul>\n<li><code class=\"language-text\">counter.order</code> 가 <code class=\"language-text\">getter</code> 가 되는 논리 임</li>\n<li><code class=\"language-text\">getter</code>를 호출하면 <code class=\"language-text\">value</code> 가 반환되는 근거는 무엇이냐는 것임</li>\n</ul>\n</li>\n</ul>\n<br>\n<h2 id=\"3-기본-오퍼레이션-논리\" style=\"position:relative;\"><a href=\"#3-%EA%B8%B0%EB%B3%B8-%EC%98%A4%ED%8D%BC%EB%A0%88%EC%9D%B4%EC%85%98-%EB%85%BC%EB%A6%AC\" aria-label=\"3 기본 오퍼레이션 논리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 기본 오퍼레이션 논리</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">const counter = {order: \"커피\"}</code></p>\n<ul>\n<li><code class=\"language-text\">counter.order</code> 를 실행하면 “커피”를 구하는 행위를 해야 함</li>\n<li>즉, 값을 구하는 메소드가 필요함</li>\n</ul>\n</li>\n<li>\n<p>이때, 엔진은 <code class=\"language-text\">getter</code> 기능을 가진 내부 메소드 <code class=\"language-text\">[[Get]]</code> 을 호출함</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">const target = { order: &#39;커피&#39; };\nconst value = target.order;\n\nconsole.log(value); // 커피\n\n// 1. getter를 스펙에서 [[Get]]으로 표기 함\n// 2. target.order를 실행하면 target 오브젝트의 __proto__에 있는 [[Get]]을 호출 함\n// 3. [[Get]]을 호출하면서 파라미터 값으로 &quot;order&quot;를 넘겨 줌\n// 4. [[Get]] 메소드가 order를 프로퍼티 키로 하여 프로퍼티 값을 구해 반환 함\n// 5. 이것이 기본 오퍼레이션 임</code>\n        </deckgo-highlight-code>\n</li>\n<li>ES6에 <code class=\"language-text\">[[Get]]</code> 처럼 기본 오퍼레이션을 제공하는 13개의 내부 메소드가 있음</li>\n<li><code class=\"language-text\">ECMAScript</code> 스펙의 기본 오퍼레이션</li>\n</ul>\n<deckgo-highlight-code language=\"toc\"  >\n          <code slot=\"code\"></code>\n        </deckgo-highlight-code>","frontmatter":{"date":"November 24, 2021","title":"Proxy, 기본 오퍼레이션 논리","categories":"JS","author":"우기","emoji":"👨‍💻"},"fields":{"slug":"/study-js-es6-proxy-1/"}},"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":"zoomkoding/zoomkoding-gatsby-blog"}}}}},"pageContext":{"slug":"/study-js-es6-class-9/","nextSlug":"/study-js-es6-class-8/","prevSlug":"/study-js-es6-proxy-1/"}},"staticQueryHashes":["1073350324","2938748437"]}