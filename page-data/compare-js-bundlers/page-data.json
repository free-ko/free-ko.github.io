{"componentChunkName":"component---src-templates-blog-template-js","path":"/compare-js-bundlers/","result":{"data":{"cur":{"id":"a3c1dc5b-2caa-55a1-91b3-5c86c561d073","html":"<h2 id=\"-webpack\" style=\"position:relative;\"><a href=\"#-webpack\" aria-label=\" webpack permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✅ Webpack</h2>\n<ul>\n<li>여러 개의 entry point로 의존성 그래프를 빌드하여, 각 모듈을 하나 이상의 모듈로 합침.</li>\n<li>JS 이외 파일(CSS, 애셋 파일 등) 처리 시 loader 필요</li>\n<li>parcel, rollup보다 code splitting 안전성 높음</li>\n<li>webpack-dev-server 지원 (live-reload 지원)</li>\n<li>가장 역사가 깊으며, 레퍼런스가 많고 안정적이다</li>\n<li>\n<p>tree-shaking을 ES6 모듈에서만 지원하기 때문에 SideEffects 항목 별도 기재 필요</p>\n<ul>\n<li>{ sideEffects: false } 를 표시하여 사용하지 않는 export는 제거해도 괜찮음을 webpack에게 알려줌</li>\n<li>즉 side effect가 발생해도, 해당 구문을 사용하지 않는다면 제거함</li>\n</ul>\n</li>\n<li>많은 서드파티를 필요로 하는 복잡한 애플리케이션 임</li>\n</ul>\n<br>\n<h2 id=\"-parcel\" style=\"position:relative;\"><a href=\"#-parcel\" aria-label=\" parcel permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✅ Parcel</h2>\n<ul>\n<li>zero-configuration</li>\n<li>\n<p>빠른 빌드 속도</p>\n<ul>\n<li>parcel의 JS 컴파일러, CSS transformer, sourcemap은 성능을 위해 Rust로 작성되었으ㅁ</li>\n<li>parcel의 JS 컴파일러는 SWC를 기반으로 트리셰이킹, 핫-리로딩 등을 지원</li>\n<li>SWC는 Rust 기반</li>\n<li>ES6 및 CommonJS 모듈 모두에 대해 tree-shaking을 지원</li>\n<li>워커 쓰레드를 사용한 병렬 빌드</li>\n<li>캐싱을 사용한 빠른 빌드 속도</li>\n<li>모든 것은 캐시됨(transformation, dependency resolution, bundling, optimizing 등)</li>\n<li>코드가 바뀌면 부분적으로 캐시를 무효화. → webpack보다 최대 20배 빠름 (캐시 사용 시)</li>\n</ul>\n</li>\n<li>\n<p>플러그인 없이 JS, CSS, HTML, 파일 애셋, 그 외 많은 것들에 대한 지원을 기본으로 제공</p>\n<ul>\n<li>JS 이외 파일 처리 시에도 별도의 loader 불필요</li>\n<li>앱 진입을 위한 HTML을 직접 읽을 수 있음\n-0 JS 엔트리포인트를 지정할 필요가 없음</li>\n</ul>\n</li>\n<li>\n<p>필요하다면 Babel, PostCSS, PostHTML같은 트랜스파일러들을 기본으로 지원</p>\n<ul>\n<li>.babelrc, .postcssrc 등의 파일을 발견하면 자동으로 변환(node_modules까지도)</li>\n</ul>\n</li>\n<li>\n<p>동적 import 문을 사용해서 output 번들을 분할 할 수 있음</p>\n<ul>\n<li>이를 통해 초기 로드시 필요한 것들만 로드할 수 있음</li>\n<li>dev에서는, 브라우저에서 요청이 있을 때까지 번들링을 지연할 수 있음</li>\n<li>실제 필요한 페이지만 로드하며, 적절하게 code split 시 dev server 실행 시간을 줄여줌</li>\n</ul>\n</li>\n<li>\n<p>HMR 기본 지원</p>\n<ul>\n<li>React, Vue 사용 시에도 fast refresh 가능</li>\n</ul>\n</li>\n<li>dev server 기본 제공</li>\n<li>\n<p>프로덕션 자동 최적화</p>\n<ul>\n<li>tree shaking: 동적 모듈 import, 공용 모듈, CSS 모듈에 대해서도 적용됨</li>\n<li>최소화 및 난독화: JS, CSS, HTML, SVG minifier를 제공</li>\n<li>이미지 최적화 지원</li>\n</ul>\n</li>\n<li>\n<p>코드 스플리팅</p>\n<ul>\n<li>앱의 여러 파트에서 동일한 모듈에 의존하고 있다면, 해당 모듈을 자동으로 별도의 번들로 분리해줌</li>\n<li>CSS도 마찬가지로 지원</li>\n</ul>\n</li>\n<li>모든 output 파일에 대해 content hash를 제공함</li>\n<li>브라우저 캐시에 유리</li>\n</ul>\n<br>\n<h2 id=\"-rollup\" style=\"position:relative;\"><a href=\"#-rollup\" aria-label=\" rollup permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✅ Rollup</h2>\n<ul>\n<li>ES6 모듈(ESM) 형식으로 빌드 결과물을 생성함. (webpack은 only CommonJS 형태만 가능)</li>\n<li>\n<p>여러 개의 모듈을 하나의 단일 모듈로 합쳐서 코드를 최적화함</p>\n<ul>\n<li>진입점을 다르게 설정하여 번들링 가능</li>\n<li>코드들을 동일한 수준으로 호이스팅 한 후 한 번에 번들링을 진행</li>\n<li>code splitting에 강점 (중복 제거에 특화)이 있음</li>\n<li>cf) webpack의 ModuleConcatenationPlugin이 비슷한 역할</li>\n</ul>\n</li>\n<li>\n<p>트리셰이킹 기본 지원</p>\n<ul>\n<li>JS 이외 파일 처리 시 플러그인 사용코드를 정적으로 분석하여 미사용 코드는 제외함</li>\n</ul>\n</li>\n<li>데브서버 지원, 하지만 live-reload를 위해서는 추가 플러그인 설치가 필요함</li>\n<li>HMR: 플러그인으로 지원</li>\n<li>파일의 해시 캐스캐이딩(hash cascading; 하나의 파일의 해시가 바뀌면 그것을 참조한 파일의 해시도 알아서 바뀜) 이 약함</li>\n<li>CommonJS 종속성이 많음</li>\n<li>서드파티 라이브러리 통합이 어려움</li>\n</ul>\n<br>\n<h2 id=\"-esbuild\" style=\"position:relative;\"><a href=\"#-esbuild\" aria-label=\" esbuild permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✅ Esbuild</h2>\n<ul>\n<li>Go로 작성되어 있어 빠른 번들링 속도</li>\n<li>코드 파싱, 출력과 소스맵 생성을 모두 병렬로 처리함</li>\n<li>\n<p>CommonJS, ES6, JSX, Typescript, Tree shaking을 지원함</p>\n<ul>\n<li>ES5 이하의 문법을 아직 100% 지원하지 않기 때문에, IE 대응이 어려움</li>\n</ul>\n</li>\n<li>빌드 도구이지 통합 툴이 아니라서, 기존의 툴(webpack, parcel, rollup 등)을 사용해야 함 → snowpack 또는 vite와 결합하여 사용함</li>\n<li>버전 1.0도 안됨</li>\n<li>대규모 프로덕션 사이트에는 사용 지양</li>\n<li>live/hot reload(HMR) 지원하지 않음</li>\n<li>PostCSS와 기타 전처리기 자동 변환 X</li>\n<li>AST 변환 작업을 지원하지 않음 (플러그인 필요)</li>\n</ul>\n<br>\n<h2 id=\"-vite\" style=\"position:relative;\"><a href=\"#-vite\" aria-label=\" vite permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✅ Vite</h2>\n<ul>\n<li>react, vue, preact를 지원(CRA, vue-cli의 대체재)</li>\n<li>\n<p>사전 번들링(Pre-bundling)</p>\n<ul>\n<li>esbuild를 사용하여 기존 번들링 대비 10-100배 빠른 속도</li>\n</ul>\n</li>\n<li>\n<p>Native ESM 제공 (dev)</p>\n<ul>\n<li>번들링 없이 온디맨드(on-demand)로 파일을 제공할 수 있음</li>\n<li>JSX, CSS 또는 Vue/Svelte 컴포넌트와 같이 컴파일링이 필요하고, 수정이 잦은 Non-plian JS 소스코드 → Native ESM을 이용해 소스코드를 제공하여, 브라우저를 번들러처럼 사용함</li>\n</ul>\n</li>\n<li>\n<p>production에서는 rollup을 사용</p>\n<ul>\n<li>production에서는 esbuild가 아닌 번들링 방식을 사용하는 이유는 프로덕션에서 번들 되지 않은 ESM을 가져오는 것은 중첩된 import로 인한 추가 네트워크 통신으로 인해 여전히 비효율적임</li>\n<li>프로덕션 환경에서 최적의 로딩 성능을 얻으려면 트리 셰이킹, 지연 로딩 및 청크 파일 분할(더 나은 캐싱을 위해)을 이용하여 번들링 하는 것이 더 좋음</li>\n<li>Esbuild는 번들링에 필수적으로 요구되는 기능인 코드 분할(Code-splitting) 및 CSS와 관련된 처리가 아직 미비함</li>\n</ul>\n</li>\n<li>esbuild(dev)와 rollup(prod)으로 구성되어 있음</li>\n<li>\n<p>dependencies(패키지)와 소스코드를 분리하여 빌드함</p>\n<ul>\n<li>패키지: 설치 후에 내용이 바뀌지 않음</li>\n<li>소스코드: 빈번하게 바뀜</li>\n</ul>\n</li>\n<li>\n<p>빠른 HMR 지원</p>\n<ul>\n<li>번들러가 아닌 native ESM을 사용하기 때문(브라우저가 곧 번들러)</li>\n<li>모듈 수정 시 해당 부분만 교체하고, 브라우저에서 해당 모듈을 요청할 때까진 사용되지 않음</li>\n</ul>\n</li>\n<li>\n<p>기본적으로 TypeScript, JSX, CSS 등을 지원</p>\n<ul>\n<li>내부적으로 esbuild를 사용</li>\n</ul>\n</li>\n<li>\n<p>빌드 최적화</p>\n<ul>\n<li>CSS를 자동으로 추출해 파일로 분리</li>\n<li>빌드 시 Direct import 구문에 대해 <code class=\"language-text\">&lt;link ref=\"modulepreload\"></code> 디렉티브를 이용해 미리 모듈을 캐싱하도록 자동으로 변환</li>\n<li>모든 Direct import 구문을 preload하여 불필요한 네트워크 요청을 줄임</li>\n</ul>\n</li>\n<li>tree-shaking, 코드 스플리팅을 지원하지 않음</li>\n<li>rollup 번들러를 사용한 pre-configured 빌드 환경에서 rollup config를 뜯어내기가 아주 어려움</li>\n</ul>\n<br>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<ul>\n<li><a href=\"https://webpack.js.org/concepts/\">참고1</a></li>\n<li><a href=\"https://webpack.js.org/concepts/why-webpack/\">참고2</a></li>\n<li><a href=\"https://parceljs.org/\">참고3</a></li>\n<li><a href=\"https://heropy.blog/2018/01/20/parcel-1-start/\">참고4</a></li>\n<li><a href=\"https://rollupjs.org/guide/en/\">참고5</a></li>\n<li><a href=\"https://dantechblog.gatsbyjs.io/posts/rollup/\">참고6</a></li>\n<li><a href=\"https://vitejs-kr.github.io/guide/why.html\">참고7</a></li>\n<li><a href=\"https://vitejs-kr.github.io/guide/features.html#build-optimizations\">참고8</a></li>\n<li><a href=\"https://engineering.ab180.co/stories/webpack-to-vite\">참고9</a></li>\n<li><a href=\"https://ui.toast.com/posts/ko_20220127\">참고10</a></li>\n<li><a href=\"https://velog.io/@subin1224/Parcel-vs-Rollup-vs-Webpack-%EB%B9%84%EA%B5%90\">참고11</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#-webpack\">✅ Webpack</a></li>\n<li><a href=\"#-parcel\">✅ Parcel</a></li>\n<li><a href=\"#-rollup\">✅ Rollup</a></li>\n<li><a href=\"#-esbuild\">✅ Esbuild</a></li>\n<li><a href=\"#-vite\">✅ Vite</a></li>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>\n</div>","excerpt":"✅ Webpack 여러 개의 entry point로 의존성 그래프를 빌드하여, 각 모듈을 하나 이상의 모듈로 합침. JS 이외 파일(CSS, 애셋 파일 등) 처리 시 loader 필요 parcel, rollup보다 code splitting 안전성 높음 webpack-dev-server 지원 (live-reload 지원) 가장 역사가 깊으며, 레퍼런스가 많고 안정적이다 tree-shaking을 ES6 모듈에서만 지원하기 때문에 SideEffects 항목 별도 기재 필요 { sideEffects: false } 를 표시하여 사용하지 않는 export는 제거해도 괜찮음을 webpack에게 알려줌 즉 side effect가 발생해도, 해당 구문을 사용하지 않는다면 제거함 많은 서드파티를 필요로 하는 복잡한 애플리케이션 임 ✅ Parcel zero-configuration 빠른 빌드 속도 parcel의 JS 컴파일러, CSS transformer, sourcemap은 성능을 위해 Rust…","frontmatter":{"date":"January 18, 2024","title":"JS 번들러 비교","categories":"Study","author":"Kay","emoji":"👋"},"fields":{"slug":"/compare-js-bundlers/"}},"next":{"id":"4a9b0e1a-39d5-584b-b9c0-3e06e0a83d19","html":"<h2 id=\"-static-pages-vs-dynamic-pages\" style=\"position:relative;\"><a href=\"#-static-pages-vs-dynamic-pages\" aria-label=\" static pages vs dynamic pages permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✅ Static Pages vs Dynamic Pages</h2>\n<ol>\n<li>\n<p>Static Pages</p>\n<ul>\n<li>Web Server는 파일 경로 이름을 받아 경로와 일치하는 파일 컨텐츠를 반환함.</li>\n<li>이때 항상 동일한 페이지를 반환하게 됨. ex) image, html, css, javascript 파일과 같이 컴퓨터에 저장되어 있는 파일들</li>\n</ul>\n</li>\n<li>\n<p>Dynamic Pages</p>\n<ul>\n<li>Web Server에 의해서 실행되는 프로그램을 통해서 만들어진 결과물로, 인자의 내용에 맞게 동적인 컨텐츠를 반환함</li>\n</ul>\n</li>\n</ol>\n<br>\n<h2 id=\"-web-server-vs-was\" style=\"position:relative;\"><a href=\"#-web-server-vs-was\" aria-label=\" web server vs was permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✅ Web Server vs WAS</h2>\n<ul>\n<li>웹 서버는 소프트웨어와 하드웨어로 구분됨</li>\n<li>\n<p>웹 서버는 HTTP 프로토콜을 기반으로 클라이언트(웹 브라우저 또는 웹 크롤러)의 요청을 서비스하는 기능을 담당함. 요청에 따라 아래의 두 가지 기능 중 적절하게 선택하여 수행함</p>\n<ul>\n<li>정적인 컨텐츠 제공: WAS를 거치지 않고 바로 자원을 제공함</li>\n<li>동적인 컨텐츠 제공을 위한 요청 전달: 클라이언트의 요청(Request)을 WAS에 보내고, WAS가 처리한 결과를 클라이언트에게 전달(응답, Response)한다. 이때 클라이언트는 일반적으로 웹 브라우저를 의미함.</li>\n</ul>\n</li>\n<li>\n<p>Web Server</p>\n<ul>\n<li>하드웨어: Web 서버가 설치되어 있는 컴퓨터</li>\n<li>소프트웨어: 웹 브라우저 클라이언트로부터 HTTP 요청을 받아 정적인 컨텐츠(.html .jpeg .css 등)를 제공하는 컴퓨터 프로그램</li>\n</ul>\n</li>\n<li>\n<p>WAS(Web Server + Web Container)</p>\n<ul>\n<li>WAS는 DB 조회나 다양한 로직 처리를 요구하는 동적인 컨텐츠를 제공하기 위해 만들어진 애플리케이션 서버로, HTTP를 통해 컴퓨터나 장치에 애플리케이션을 수행해주는 미들웨어(소프트웨어 엔진)임.</li>\n<li>WAS는 “웹 컨테이너(Web Container)” 혹은 “서블릿 컨테이너(Servlet Container)”라고도 불리는데, 여기서 Container란 JSP, Servlet을 실행시킬 수 있는 소프트웨어를 말함. 즉, WAS는 JSP, Servlet 구동 환경을 제공함</li>\n<li>WAS는 주로 DB 서버와 같이 수행되며, 클라이언트로부터 웹 서버가 요청을 받으면 애플리케이션에 대한 로직을 실행하여 웹 서버로 다시 반환해줌. (현재는 WAS가 가지고 있는 Web Server도 정적인 컨텐츠를 처리하는 데 있어서 성능상 큰 차이는 없음)</li>\n<li>WAS의 주요 기능: 프로그램 실행 환경과 DB 접속 기능 제공, 여러 개의 트랜잭션(논리적인 작업 단위) 관리 기능, 업무를 처리하는 비즈니스 로직 수행</li>\n<li>WAS의 예 ex) Tomcat, JBoss, Jeus, Web Sphere 등</li>\n</ul>\n</li>\n</ul>\n<p>| (Java) Servlet: 자바를 사용하여 웹페이지를 동적으로 생성하는 서버측 프로그램 혹은 그 사양을 말하며, 흔히 “서블릿”이라 불림. 자바 서블릿은 웹 서버의 성능을 향상하기 위해 사용되는 자바 클래스의 일종임</p>\n<br>\n<h2 id=\"-web-server와-was를-분리하는-이유\" style=\"position:relative;\"><a href=\"#-web-server%EC%99%80-was%EB%A5%BC-%EB%B6%84%EB%A6%AC%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0\" aria-label=\" web server와 was를 분리하는 이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✅ Web Server와 WAS를 분리하는 이유</h2>\n<ul>\n<li>Web Server에서는 정적 컨텐츠만 처리하도록 기능을 분배하여 서버의 부담을 줄일 수 있음.</li>\n<li>WAS를 통해 요청에 맞는 데이터를 DB에서 가져와서 비즈니스 로직에 맞게 그때 그때 결과를 만들어서 제공함으로써 자원을 효율적으로 사용할 수 있음.</li>\n<li>WAS는 Web Server 기능들을 구조적으로 분리하여 처리하고자하는 목적으로 제시되었으며, 분산 트랜잭션/ 보안/ 메시징/ 쓰레드 처리 등의 기능을 처리하는 분산 환경에서 사용됨</li>\n</ul>\n<h3 id=\"web-server와-was를-분리하여-얻을-수-있는-구체적인-이점들\" style=\"position:relative;\"><a href=\"#web-server%EC%99%80-was%EB%A5%BC-%EB%B6%84%EB%A6%AC%ED%95%98%EC%97%AC-%EC%96%BB%EC%9D%84-%EC%88%98-%EC%9E%88%EB%8A%94-%EA%B5%AC%EC%B2%B4%EC%A0%81%EC%9D%B8-%EC%9D%B4%EC%A0%90%EB%93%A4\" aria-label=\"web server와 was를 분리하여 얻을 수 있는 구체적인 이점들 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Web Server와 WAS를 분리하여 얻을 수 있는 구체적인 이점들</h3>\n<ol>\n<li>\n<p>기능을 분리하여 서버 부하 방지</p>\n<ul>\n<li>WAS는 DB 조회나 다양한 로직을 처리하느라 바쁘기 때문에 단순한 정적 컨텐츠는 Web Server에서 빠르게 클라이언트에 제공하는 것이 좋음.</li>\n<li>WAS는 기본적으로 동적 컨텐츠를 제공하기 위해 존재하는 서버. 만약 정적 컨텐츠 요청까지 WAS가 처리한다면 정적 데이터 처리로 인해 부하가 커지게 되고, 동적 컨텐츠의 처리가 지연됨에 따라 수행 속도가 느려짐. 즉, 이로 인해 페이지 노출 시간이 늘어나게 될 것</li>\n</ul>\n</li>\n<li>\n<p>물리적으로 분리하여 보안 강화</p>\n<ul>\n<li>SSL에 대한 암복호화 처리에 Web Server를 사용함</li>\n<li>사용자들에게 WAS는 공개될 필요가 없으며, DB 서버를 관리하는 WAS의 경우 외부에 노출되어서는 안 됨</li>\n</ul>\n</li>\n<li>\n<p>여러 대의 WAS를 연결 가능</p>\n<ul>\n<li>Load Balancing을 위해서 Web Server를 사용함</li>\n<li>fail over(장애 극복), fail back 처리에 유리함</li>\n<li>특히 대용량 웹 어플리케이션의 경우(여러 개의 서버 사용) Web Server와 WAS를 분리하여 무중단 운영을 위한 장애 극복에 쉽게 대응할 수 있음.</li>\n<li>예를 들어, 앞 단의 Web Server에서 오류가 발생한 WAS를 이용하지 못하도록 한 후 WAS를 재시작함으로써 사용자는 오류를 느끼지 못하고 이용할 수 있음.</li>\n</ul>\n</li>\n<li>\n<p>여러 웹 어플리케이션 서비스 가능</p>\n<ul>\n<li>예를 들어, 하나의 서버에서 PHP Application과 Java Application을 함께 사용하는 경우</li>\n</ul>\n</li>\n<li>\n<p>기타</p>\n<ul>\n<li>접근 허용 IP 관리, 2대 이상의 서버에서의 세션 관리 등도 Web Server에서 처리하면 효율적</li>\n</ul>\n</li>\n</ol>\n<p>→ 자원 이용의 효율성 및 장애를 극복하고, 배포 및 유지보수의 편의성을 극대화시킴</p>\n<br>\n<h2 id=\"-web-service-architecture\" style=\"position:relative;\"><a href=\"#-web-service-architecture\" aria-label=\" web service architecture permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✅ Web Service Architecture</h2>\n<ul>\n<li><code class=\"language-text\">Client → Web Server → WAS → DB</code> 구조로 데이터를 주고 받음</li>\n</ul>\n<br>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<ul>\n<li><a href=\"https://gmlwjd9405.github.io/2018/10/27/webserver-vs-was.html\">참고1</a></li>\n<li><a href=\"https://goldsony.tistory.com/37\">참고2</a></li>\n<li><a href=\"https://ko.wikipedia.org/wiki/%EC%9E%90%EB%B0%94_%EC%84%9C%EB%B8%94%EB%A6%BF\">참고3</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#-static-pages-vs-dynamic-pages\">✅ Static Pages vs Dynamic Pages</a></li>\n<li><a href=\"#-web-server-vs-was\">✅ Web Server vs WAS</a></li>\n<li>\n<p><a href=\"#-web-server%EC%99%80-was%EB%A5%BC-%EB%B6%84%EB%A6%AC%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0\">✅ Web Server와 WAS를 분리하는 이유</a></p>\n<ul>\n<li><a href=\"#web-server%EC%99%80-was%EB%A5%BC-%EB%B6%84%EB%A6%AC%ED%95%98%EC%97%AC-%EC%96%BB%EC%9D%84-%EC%88%98-%EC%9E%88%EB%8A%94-%EA%B5%AC%EC%B2%B4%EC%A0%81%EC%9D%B8-%EC%9D%B4%EC%A0%90%EB%93%A4\">Web Server와 WAS를 분리하여 얻을 수 있는 구체적인 이점들</a></li>\n</ul>\n</li>\n<li><a href=\"#-web-service-architecture\">✅ Web Service Architecture</a></li>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>\n</div>","frontmatter":{"date":"January 14, 2024","title":"Web Server와 WAS 정리","categories":"Study","author":"Kay","emoji":"👋"},"fields":{"slug":"/web-server-and-was/"}},"prev":{"id":"eec4a994-ae90-500f-8518-8ca07e5e9e2d","html":"<h2 id=\"회고\" style=\"position:relative;\"><a href=\"#%ED%9A%8C%EA%B3%A0\" aria-label=\"회고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>회고</h2>\n<h3 id=\"1-업무-회고\" style=\"position:relative;\"><a href=\"#1-%EC%97%85%EB%AC%B4-%ED%9A%8C%EA%B3%A0\" aria-label=\"1 업무 회고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 업무 회고</h3>\n<ul>\n<li>new FileReader를 통해서 업로드한 이미지를 Preview로 사용자에게 보여줄 수 있음.</li>\n<li>의사소통을 잘 하기 위해서는 현 상황에 대해 정확하게 이해를 바탕으로 의사소통을 해야 한다. 그래야 다른 팀원분들에게 혼란을 주지 않을 수 있다. 또한 빠르게 일을 마무리할려고 이해가 되지 않는데, 무조건적으로 책임을 짓는 행위도 조심해야 한다.</li>\n<li>\n<p>네트워크 SSH, HTTP, HTTPS 정리</p>\n<ul>\n<li>\n<p>SSH (Secure Shell)</p>\n<ul>\n<li>목적: 원격으로 서버나 다른 컴퓨터에 안전하게 접속하고, 명령을 실행하기 위한 프로토콜</li>\n<li>특징: 암호화를 사용하여 네트워크 상의 데이터를 보호. 이를 통해 사용자 인증 정보 및 전송되는 데이터가 안전하게 유지됨</li>\n<li>사용 예: 서버 관리, 파일 전송, 네트워크 서비스 등에 사용</li>\n</ul>\n</li>\n<li>\n<p>HTTP (Hypertext Transfer Protocol)</p>\n<ul>\n<li>목적: 웹 서버와 클라이언트 간에 문서를 교환하기 위한 프로토콜</li>\n<li>특징: 텍스트, 이미지, 비디오 등 다양한 형태의 데이터를 전송할 수 있으며, 주로 웹 페이지의 내용을 브라우저로 전송하는 데 사용.</li>\n<li>주의점: 암호화되지 않아 데이터가 노출될 위험 존재</li>\n</ul>\n</li>\n<li>\n<p>HTTPS (HTTP Secure)</p>\n<ul>\n<li>목적: HTTP의 보안 버전으로, 웹 서버와 클라이언트 간의 안전한 통신을 보장하기 위한 프로토콜</li>\n<li>특징: SSL/TLS 암호화를 통해 데이터를 보호. 이로 인해 개인 정보, 금융 정보 등 중요한 데이터가 안전하게 전송됨</li>\n<li>사용 예: 온라인 쇼핑, 인터넷 뱅킹, 개인 정보를 다루는 웹 사이트 등에서 주로 사용됨</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>media-query와 userAgent의 사용 목적 차이(PC일 때 무조건 Dialog를 띄우는 로직을 media-query로 작성하고 있어, 다른 방법을 모색하는 중에 userAgnet를 발견)</p>\n<ul>\n<li>media-query: 디스플레이어 환경에 초점을 맞춘 스타일링에 사용됨</li>\n<li>userAgent: 사용자의 브라우저나 운영체제 등의 환경에 따른 기능적인 대응을 위해 사용됨</li>\n</ul>\n</li>\n<li>\n<p>Content-Type의 종류</p>\n<ul>\n<li>\n<p>application/x-www-form-urlencoded</p>\n<ul>\n<li>이 콘텐츠 유형은 HTML 폼이 서버로 데이터를 전송할 때 주로 사용.</li>\n<li>데이터는 key=value 쌍으로 인코딩되며, 여러 쌍은 <code class=\"language-text\">&amp;</code> 문자로 구분됨 ex) name=John&#x26;age=30</li>\n<li>이 인코딩 방식은 URL에 쿼리 문자열을 넣는 방식과 유사</li>\n<li>간단한 평문 데이터를 전송할 때 주로 사용되지만, JSON처럼 복잡한 데이터 구조를 표현하는 데는 제한적</li>\n</ul>\n</li>\n<li>\n<p>application/json</p>\n<ul>\n<li>이 콘텐츠 유형은 데이터를 JSON 형식으로 전송할 때 사용됨</li>\n<li>JSON 형식은 자바스크립트 객체를 표현하는 표준 텍스트 포맷으로, { “key”: “value” }와 같이 표현됨</li>\n<li>JSON은 중첩된 객체와 배열을 포함할 수 있어, 복잡한 데이터 구조를 효율적으로 표현하고 전송할 수 있음</li>\n<li>웹 API와의 통신에서 많이 사용되며, 현대 웹 개발에서 표준적인 데이터 교환 형식으로 널리 채택되고 있음</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Grant-Type(OAuth 2.0 인증 프로세스에서 사용되는 개념으로, 어떤 방식으로 토큰을 발급받을지를 정의합)의 종류</p>\n<ul>\n<li>\n<p>Authorization Code (인가 코드)</p>\n<ul>\n<li>주로 서버 측 애플리케이션에서 사용됨</li>\n<li>사용자가 먼저 서비스 제공자에게 접근 권한을 부여하고, 이후에 이 권한을 증명하는 인가 코드를 받음. 이 코드를 사용해 애플리케이션이 액세스 토큰을 요청함</li>\n<li>보안성이 높은 방식. 사용자의 인증 정보는 클라이언트와 서비스 제공자 간에만 공유되며, 인가 코드 자체는 사용 후 무효화됨</li>\n</ul>\n</li>\n<li>\n<p>Refresh Token (갱신 토큰)</p>\n<ul>\n<li>이미 인증을 받아 액세스 토큰을 발급받은 상태에서 추가적인 인증 없이 토큰을 갱신할 때 사용됨</li>\n<li>초기 인증 시 발급된 액세스 토큰의 유효 시간이 만료되었을 때, 이 갱신 토큰을 사용해 새로운 액세스 토큰을 요청함</li>\n<li>사용자가 자주 로그인하는 번거로움 없이, 서비스에 지속적으로 접근할 수 있게 해줌</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<br>\n<h3 id=\"2-일상-회고\" style=\"position:relative;\"><a href=\"#2-%EC%9D%BC%EC%83%81-%ED%9A%8C%EA%B3%A0\" aria-label=\"2 일상 회고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 일상 회고</h3>\n<p>일을하면서 나도모르게 마음이 급해져서 스스로 이슈에 대해 정확하게 이해하지 않고 넘어갈려고 말이 먼저 나올 때가 자주있었다. 그런데 이 부분은 나뿐만아니라, 동료분들과 의사소통을 할 때 매우 안 좋은 영향을 끼친다는 사실을 다시 한 번 깨닫게 되었다. 어쩌면 일 뿐만이 아니라 내 삶을 돌아보았을 때, 정확하게 이해 하고 행동하지 않아서 일을 하면서 나온게 아닐까 되돌아 보게 되었다. 이해를 바탕으로 먼저는 내 삶을 바라보고 그 다음 누군가과 협력을 할 때, 정확학 의사소통을 위해서 이해를 바탕으로 하는 연습과 의식적으로 인지하면서 행동해야 겠다.</p>\n<p>그리고 실수를 할 때, 스스로 회고하는 태도는 좋지만 나도 모르게 스스로 자괴감에 빠져 멘탈이 나가는 경우가 종종 있는 것 같다. 그럴 때마다 글로써 상황과 해결방안을 정리해보고 이것도 안되면 가벼운 산책을 하거나 정말로 힘들면 친한 주변 사람이나 동료분들에게 객관적인 피드백을 통해 나아졌던 것 같다.</p>\n<p>최근 동료로 부터 받은 피드백 중 스스로 일을 못한다고 생각이 들 때면 1년, 3년 뒤에 그 때가서 다시 생각하고 지금은 배우는 과정이니깐 당연한 것이라고 말씀해주셨다. 마지막으로 나와 타인을 비교하지 말고 스스로 자신만의 길을 한 걸음씩 가는 것에 집중하라 피드백을 주셨다.</p>\n<p>위와 같은 피드백을 듣고 곱씹을 때마다 어려우면서도 쉬운 것 같다는 생각을 한다.</p>\n<p>마지막으로 하루 중에 가장 많은 시간을 투자하는 ‘일’을 내 삶과 연결 짓고 어떻게 하면 내 삶에 조금이나마 도움을 줄 수 있는 시간으로 바꿀 수 있는 지 고민을 해보고 있다. 이것도 쉽지 않은 것 같다. 막상 이런 생각을 할 때마다 ‘내가 정말 원하는게 무엇일까?‘라는 질문에 대답도 못해서 고민의 해결에 도달하지 않고 뫼비우스띠 처럼 계속 제 자리에 멈춰 고민만 하는 것 같다. 그래도 안하는 것 보다는 하는게 낫다는 생각을 해서 여전히 지금도 주어진 하루를 어떻게 하면 내 삶에 가치있는 시간으로 바꿀 수 있는지를 계속 고민을 하는 것 같다.</p>\n<p>갈 길은 멀지만 그래도 길을 걷고 있는 사실에 감사함을 느낀다.</p>\n<p>이번 한 주도 고생했다.</p>\n<br>\n<h3 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h3>\n<ul>\n<li><a href=\"https://developer.mozilla.org/ko/docs/Web/API/FileReader\">File Reader</a></li>\n<li><a href=\"https://mantine.dev/hooks/use-os/\">Mantine이 제공하는 OS를 판별하는 Hooks</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%ED%9A%8C%EA%B3%A0\">회고</a></p>\n<ul>\n<li><a href=\"#1-%EC%97%85%EB%AC%B4-%ED%9A%8C%EA%B3%A0\">1. 업무 회고</a></li>\n<li><a href=\"#2-%EC%9D%BC%EC%83%81-%ED%9A%8C%EA%B3%A0\">2. 일상 회고</a></li>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"January 20, 2024","title":"2024년 1월 3주차 회고","categories":"Log","author":"Kay","emoji":"👋"},"fields":{"slug":"/write-log-240120/"}},"site":{"siteMetadata":{"siteUrl":"https://free-ko.github.io","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/compare-js-bundlers/","nextSlug":"/web-server-and-was/","prevSlug":"/write-log-240120/"}},"staticQueryHashes":["1073350324","2938748437"]}